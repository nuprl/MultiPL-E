language: swift
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let sortedArr = arr.sorted()\n    let reversedArr = reverseArray(sortedArr)\n\
    \    let resultArr = reversedArr.map { $0.description.localizedStandardForm()\
    \ }\n    return resultArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_apaiysi.swift:21:23: error: cannot find 'reverseArray' in scope\n\
    \    let reversedArr = reverseArray(sortedArr)\n                      ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014171
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = arr[0]\n    let max = arr[0]\n\
    \    for i in arr {\n        if i < min {\n            min = i\n        } else\
    \ if i > max {\n            max = i\n        }\n    }\n    if min == max {\n \
    \       return result\n    }\n    let minStr = String(min)\n    let maxStr = String(max)\n\
    \    for i in arr {\n        if i < min {\n            result.append(minStr)\n\
    \        } else if i > max {\n            result.append(maxStr)\n        } else\
    \ {\n            result.append(String(i - min))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_y1pt0gr.swift:27:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = i\n            ^~~\n/tmp/tmp_y1pt0gr.swift:23:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmp_y1pt0gr.swift:29:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = i\n            ^~~\n/tmp/tmp_y1pt0gr.swift:24:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660014171
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var len\
    \ = arr.count\n    if len == 0 {\n        return result\n    }\n    if len ==\
    \ 1 {\n        if arr[0] == 1 {\n            return [\"One\"]\n        }\n   \
    \     return arr\n    }\n    var min = 1\n    var max = 9\n    var min_index =\
    \ 0\n    var max_index = 0\n    for index in 0..<len {\n        if arr[index]\
    \ < min {\n            min = arr[index]\n            min_index = index\n     \
    \   }\n        if arr[index] > max {\n            max = arr[index]\n         \
    \   max_index = index\n        }\n    }\n    if max == min {\n        return arr\n\
    \    }\n    var min_ind = min_index\n    var max_ind = max_index\n    for index\
    \ in min_index..<max_index {\n        let digit = arr[index]\n        let name\
    \ = String(digit)\n        if digit == 1 {\n            result.append(name)\n\
    \        } else {\n            result.append(name.reversed())\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkkqb43tj.swift:28:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmpkkqb43tj.swift:28:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n\
    /tmp/tmpkkqb43tj.swift:45:16: error: cannot convert return expression of type\
    \ '[Int]' to return type '[String]'\n        return arr\n               ^\n/tmp/tmpkkqb43tj.swift:45:16:\
    \ note: arguments to generic parameter 'Element' ('Int' and 'String') are expected\
    \ to be equal\n        return arr\n               ^\n/tmp/tmpkkqb43tj.swift:55:20:\
    \ error: no exact matches in call to instance method 'append'\n            result.append(name.reversed())\n\
    \                   ^\nSwift.Array:6:37: note: candidate expects value of type\
    \ 'String' for parameter #1 (got '[String.Element]' (aka 'Array<Character>'))\n\
    \    @inlinable public mutating func append(_ newElement: __owned Element)\n \
    \                                   ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got '[String.Element]'\
    \ (aka 'Array<Character>'))\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Self.Element)\n                                    ^\n/tmp/tmpkkqb43tj.swift:55:20:\
    \ note: found candidate with type '(__owned [String.Element]) -> ()' (aka '(__owned\
    \ Array<Character>) -> ()')\n            result.append(name.reversed())\n    \
    \               ^\n"
  stdout: ''
  timestamp: 1660014171
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let minLength = min(arr.count, 9)\n   \
    \ for i in minLength...9 {\n        let index = arr.index(of: i)\n        let\
    \ value = arr[index]\n        if value < 1 {\n            continue\n        }\n\
    \        let name = String(value)\n        result.append(name)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9_paozxr.swift:25:25: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = arr.index(of: i)\n               \
    \         ^\n/tmp/tmp9_paozxr.swift:25:25: note: use 'firstIndex(of:)' instead\n\
    \        let index = arr.index(of: i)\n                        ^~~~~\n       \
    \                 firstIndex\n/tmp/tmp9_paozxr.swift:26:25: error: value of optional\
    \ type 'Array<Int>.Index?' (aka 'Optional<Int>') must be unwrapped to a value\
    \ of type 'Array<Int>.Index' (aka 'Int')\n        let value = arr[index]\n   \
    \                     ^\n/tmp/tmp9_paozxr.swift:25:13: note: short-circuit using\
    \ 'guard' to exit this function early if the optional value contains 'nil'\n \
    \       let index = arr.index(of: i)\n            ^\n        guard           \
    \             else { return <#default value#> }\n/tmp/tmp9_paozxr.swift:25:25:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let index = arr.index(of: i)\n                        ^\n   \
    \                                  ?? <#default value#>\n/tmp/tmp9_paozxr.swift:25:25:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        let index = arr.index(of: i)\n                        ^\n   \
    \                                 !\n/tmp/tmp9_paozxr.swift:26:25: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     let value = arr[index]\n                        ^\n                    \
    \          ?? <#default value#>\n/tmp/tmp9_paozxr.swift:26:25: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        let\
    \ value = arr[index]\n                        ^\n                            \
    \ !\n"
  stdout: ''
  timestamp: 1660014171
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty else { return []\
    \ }\n    var result = [String]()\n    var index = 0\n    var last = 0\n    var\
    \ current = 0\n    while index < arr.count {\n        current = arr[index]\n \
    \       if current > last {\n            result.append(String(arr[last]))\n  \
    \          last = current\n        } else {\n            result.append(String(current))\n\
    \        }\n        index += 1\n    }\n    result.append(String(arr[last]))\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ad4ef2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ad4be9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8ad4be9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8ad4be913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8ad4be8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8ad49e8e83 <unavailable> + 188035

    6    tmpez9x28ip                        0x000055aecc62b0da <unavailable> + 8410

    7    tmpez9x28ip                        0x000055aecc62a6c0 <unavailable> + 5824

    8    libc.so.6                          0x00002b8ad50de460 __libc_start_main +
    245

    9    tmpez9x28ip                        0x000055aecc62a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = arr[0]\n    let max = arr[0]\n\
    \    for i in arr {\n        if i < min {\n            min = i\n        }\n  \
    \      if i > max {\n            max = i\n        }\n    }\n    let range = (max\
    \ - min) + 1\n    for i in arr {\n        let index = i - min\n        if index\
    \ < range {\n            result.append(String(index))\n        } else {\n    \
    \        let index = range - index - 1\n            result.append(String(index))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2e8ufbng.swift:27:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = i\n            ^~~\n/tmp/tmp2e8ufbng.swift:23:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmp2e8ufbng.swift:30:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = i\n            ^~~\n/tmp/tmp2e8ufbng.swift:24:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660014171
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    var result = [String]()\n    var i = 0\n    var j = 0\n    var k =\
    \ arr.count\n    while i < k {\n        if arr[i] < 1 || arr[i] > 9 {\n      \
    \      i += 1\n            continue\n        }\n        j = i\n        while j\
    \ < k {\n            if arr[j] < 1 || arr[j] > 9 {\n                j += 1\n \
    \               continue\n            }\n            if arr[j] == arr[i] {\n \
    \               i += 1\n                j += 1\n                continue\n   \
    \         }\n            if arr[j] > arr[i] {\n                result.insert(String(arr[i]),\
    \ at: j)\n                i += 1\n                j += 1\n                continue\n\
    \            }\n            if arr[j] < arr[i] {\n                result.insert(String(arr[j]),\
    \ at: i)\n                j += 1\n                i += 1\n                continue\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpq7_5o_wa/tmpq7_5o_wa.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb699b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb696a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb696a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb696a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7_5o_wa                        0x00005650bfe1a8d1 <unavailable> + 6353

    5    libc.so.6                          0x00002afb69b9c460 __libc_start_main +
    245

    6    tmpq7_5o_wa                        0x00005650bfe1a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = arr[0]\n    let max = arr[0]\n\
    \    for i in arr {\n        if i < min {\n            min = i\n        } else\
    \ if i > max {\n            max = i\n        }\n    }\n    let minLen = min.distance(to:\
    \ max)\n    for i in arr {\n        let len = i.distance(to: max)\n        if\
    \ len < minLen {\n            minLen = len\n        }\n    }\n    for i in arr\
    \ {\n        let len = i.distance(to: max)\n        if len == minLen {\n     \
    \       result.append(String(format: \"%@\", i))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp929pjeea.swift:27:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = i\n            ^~~\n/tmp/tmp929pjeea.swift:23:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmp929pjeea.swift:29:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = i\n            ^~~\n/tmp/tmp929pjeea.swift:24:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmp929pjeea.swift:36:13: error: cannot assign to value: 'minLen'\
    \ is a 'let' constant\n            minLen = len\n            ^~~~~~\n/tmp/tmp929pjeea.swift:32:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let minLen = min.distance(to:\
    \ max)\n    ^~~\n    var\n/tmp/tmp929pjeea.swift:42:33: error: incorrect argument\
    \ labels in call (have 'format:_:', expected 'repeating:count:')\n           \
    \ result.append(String(format: \"%@\", i))\n                                ^~~~~~~\n\
    \                                 repeating     count: \n"
  stdout: ''
  timestamp: 1660014171
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var i\
    \ = 0\n    for n in arr {\n        if n < 10 {\n            result.append(String(format:\
    \ \"%d\\\"\", n))\n        } else {\n            result.append(String(format:\
    \ \"%d\\\"\", n - 10))\n        }\n    }\n    \n    for n in arr {\n        if\
    \ n < 10 {\n            result.append(String(format: \"%d\\\"\", n))\n       \
    \ } else {\n            result.append(String(format: \"%d\\\"\", n - 10))\n  \
    \      }\n    }\n    \n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmphl99x1_f.swift:23:33: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"%d\\\"\", n))\n                                ^~~~~~~\n                 \
    \                repeating       count: \n/tmp/tmphl99x1_f.swift:25:33: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"%d\\\"\", n - 10))\n             \
    \                   ^~~~~~~\n                                 repeating      \
    \ count: \n/tmp/tmphl99x1_f.swift:31:33: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"%d\\\"\", n))\n                                ^~~~~~~\n                 \
    \                repeating       count: \n/tmp/tmphl99x1_f.swift:33:33: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"%d\\\"\", n - 10))\n             \
    \                   ^~~~~~~\n                                 repeating      \
    \ count: \n/tmp/tmphl99x1_f.swift:37:19: error: cannot convert return expression\
    \ of type '()' to return type '[String]'\n    return result.reverse()\n      \
    \     ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    let sorted = arr.sorted()\n    let reversed = sorted.reversed()\n\
    \    var result = [String]()\n    for i in 0..<reversed.count {\n        let index\
    \ = reversed[i]\n        if index >= 1 && index <= 9 {\n            result.append(String(index))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0krox8be.swift:26:29: error: no exact matches in call to subscript\
    \ \n        let index = reversed[i]\n                            ^\nSwift.ReversedCollection:9:23:\
    \ note: candidate expects value of type 'ReversedCollection<[Int]>.Index' for\
    \ parameter #1 (got 'Int')\n    @inlinable public subscript(position: ReversedCollection<Base>.Index)\
    \ -> ReversedCollection<Base>.Element { get }\n                      ^\nSwift.Collection:2:23:\
    \ note: candidate expects value of type 'Range<ReversedCollection<[Int]>.Index>'\
    \ for parameter #1 (got 'Int')\n    @inlinable public subscript(bounds: Range<Self.Index>)\
    \ -> Slice<Self> { get }\n                      ^\nSwift.Collection:3:23: note:\
    \ candidate expects value of type '(UnboundedRange_) -> ()' for parameter #1 (got\
    \ 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence\
    \ { get }\n                      ^\n"
  stdout: ''
  timestamp: 1660014171
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let min = min(arr)\n    let max = max(arr)\n    var result = [String]()\n\
    \    for n in arr {\n        if n < min || n > max {\n            continue\n \
    \       }\n        let index = n - min\n        result.append(names[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpunq627qp.swift:20:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpunq627qp.swift:21:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpunq627qp.swift:28:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014171
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let one = arr[0]\n    let two = arr[1]\n    let three = arr[2]\n    let\
    \ four = arr[3]\n    let five = arr[4]\n    let six = arr[5]\n    let seven =\
    \ arr[6]\n    let eight = arr[7]\n    let nine = arr[8]\n    let ten = arr[9]\n\
    \    let eleven = arr[10]\n    let twelve = arr[11]\n    let thirteen = arr[12]\n\
    \    let fourteen = arr[13]\n    let fifteen = arr[14]\n    let sixteen = arr[15]\n\
    \    let seventeen = arr[16]\n    let eighteen = arr[17]\n    let nineteen = arr[18]\n\
    \    let twenty = arr[19]\n    let thirty = arr[20]\n    let fourty = arr[21]\n\
    \    let fifty = arr[22]\n    let sixty = arr[23]\n    let seventy = arr[24]\n\
    \    let eighty = arr[25]\n    let ninety = arr[26]\n    let hundred = arr[27]\n\
    \    let thousand = arr[28]\n    let million = arr[29]\n    let billion = arr[30]\n\
    \    let trillion = arr[31]\n    let quadrillion = arr[32]\n    let quintillion\
    \ = arr[33]\n    let sextillion = arr[34]\n    let septillion = arr[35]\n    let\
    \ octillion = arr[36]\n    let nonillion = arr[37]\n    let decillion = arr[38]\n\
    \    let undecillion = arr[39]\n    let duodecillion = arr[40]\n    let tredecillion\
    \ = arr[41]\n    let quattuordecillion = arr[42]\n    let quindecillion = arr[43]\n\
    \    let sexdecillion = arr[44]\n    let septendecillion = arr[45]\n    let octodecillion\
    \ = arr[46]\n    let novemdecillion = arr[47]\n    let vigintillion = arr[48]\n\
    \    let unvigintillion = arr[49]\n    let duovigintillion = arr[50]\n    let\
    \ trevigintillion = arr[51]\n    let quattuorvigintillion = arr[52]\n    let quinvigintillion\
    \ = arr[53]\n    let sexvigintillion = arr[54]\n    let septenvigintillion = arr[55]\n\
    \    let octovigintillion = arr[56]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpd4aoybw_.swift:20:9: warning: initialization of immutable value\
    \ 'one' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let one = arr[0]\n    ~~~~^~~\n    _\n/tmp/tmpd4aoybw_.swift:21:9: warning:\
    \ initialization of immutable value 'two' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    let two = arr[1]\n    ~~~~^~~\n    _\n\
    /tmp/tmpd4aoybw_.swift:22:9: warning: initialization of immutable value 'three'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   let three = arr[2]\n    ~~~~^~~~~\n    _\n/tmp/tmpd4aoybw_.swift:23:9: warning:\
    \ initialization of immutable value 'four' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let four = arr[3]\n    ~~~~^~~~\n\
    \    _\n/tmp/tmpd4aoybw_.swift:24:9: warning: initialization of immutable value\
    \ 'five' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let five = arr[4]\n    ~~~~^~~~\n    _\n/tmp/tmpd4aoybw_.swift:25:9:\
    \ warning: initialization of immutable value 'six' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let six = arr[5]\n    ~~~~^~~\n \
    \   _\n/tmp/tmpd4aoybw_.swift:26:9: warning: initialization of immutable value\
    \ 'seven' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let seven = arr[6]\n    ~~~~^~~~~\n    _\n/tmp/tmpd4aoybw_.swift:27:9:\
    \ warning: initialization of immutable value 'eight' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    let eight = arr[7]\n  \
    \  ~~~~^~~~~\n    _\n/tmp/tmpd4aoybw_.swift:28:9: warning: initialization of immutable\
    \ value 'nine' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let nine = arr[8]\n    ~~~~^~~~\n    _\n/tmp/tmpd4aoybw_.swift:29:9:\
    \ warning: initialization of immutable value 'ten' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let ten = arr[9]\n    ~~~~^~~\n \
    \   _\n/tmp/tmpd4aoybw_.swift:30:9: warning: initialization of immutable value\
    \ 'eleven' was never used; consider replacing with "
  stdout: ''
  timestamp: 1660014171
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    let sorted = arr.sorted()\n    let reversed = sorted.reversed()\n\
    \    let reversedString = reversed.map { String($0) }\n    let ones = reversedString.filter{\
    \ $0 == \"1\" }\n    let twos = reversedString.filter{ $0 == \"2\" }\n    let\
    \ threes = reversedString.filter{ $0 == \"3\" }\n    let fours = reversedString.filter{\
    \ $0 == \"4\" }\n    let fives = reversedString.filter{ $0 == \"5\" }\n    let\
    \ sixes = reversedString.filter{ $0 == \"6\" }\n    let sevens = reversedString.filter{\
    \ $0 == \"7\" }\n    let eights = reversedString.filter{ $0 == \"8\" }\n    let\
    \ nines = reversedString.filter{ $0 == \"9\" }\n    return ones.map { \"One\"\
    \ }\n    + twos.map { \"Two\" }\n    + threes.map { \"Three\" }\n    + fours.map\
    \ { \"Four\" }\n    + fives.map { \"Five\" }\n    + sixes.map { \"Six\" }\n  \
    \  + sevens.map { \"Seven\" }\n    + eights.map { \"Eight\" }\n    + nines.map\
    \ { \"Nine\" }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpr90b874p.swift:34:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return ones.map { \"One\" }\n           ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014221
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    let sortedArr = arr.sorted()\n    let reverseArr = sortedArr.reversed()\n\
    \    let oneToNine = reverseArr.map { String($0) }\n    let oneToNineReversed\
    \ = oneToNine.reversed()\n    let oneToNineReversedString = oneToNineReversed.map\
    \ { String($0) }\n    let oneToNineReversedStringArray = oneToNineReversedString.map\
    \ { Int($0) }\n    let oneToNineReversedStringArraySorted = oneToNineReversedStringArray.sorted()\n\
    \    let oneToNineReversedStringArraySortedString = oneToNineReversedStringArraySorted.map\
    \ { String($0) }\n    return oneToNineReversedStringArraySortedString\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpp08igkr3.swift:28:46: error: referencing instance method 'sorted()'\
    \ on 'Sequence' requires that 'Int?' conform to 'Comparable'\n    let oneToNineReversedStringArraySorted\
    \ = oneToNineReversedStringArray.sorted()\n                                  \
    \           ^\n/tmp/tmpp08igkr3.swift:28:46: note: wrapped type 'Int' satisfies\
    \ this requirement; did you mean to unwrap?\n    let oneToNineReversedStringArraySorted\
    \ = oneToNineReversedStringArray.sorted()\n                                  \
    \           ^\nSwift.Sequence:1:11: note: where 'Self.Element' = 'Int?'\nextension\
    \ Sequence where Self.Element : Comparable {\n          ^\n"
  stdout: ''
  timestamp: 1660014171
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    \n   \
    \ if arr.isEmpty {\n        return result\n    }\n    \n    let min = min(arr)\n\
    \    let max = max(arr)\n    \n    for i in arr {\n        if i >= min && i <=\
    \ max {\n            result.append(names[i])\n        }\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbhopr04n.swift:25:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpbhopr04n.swift:26:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpbhopr04n.swift:30:27: error: cannot find 'names' in scope\n   \
    \         result.append(names[i])\n                          ^~~~~\n"
  stdout: ''
  timestamp: 1660014171
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let len = arr.count\n    var result = [String]()\n    var index = 0\n\
    \    while index < len {\n        let value = arr[index]\n        let index =\
    \ index + 1\n        if value < 1 || value > 9 {\n            continue\n     \
    \   }\n        let index = index - 1\n        let value = value - 10\n       \
    \ let index = index - 1\n        let value = value - 1\n        let index = index\
    \ - 1\n        let value = value - 1\n        let index = index - 1\n        let\
    \ value = value - 1\n        let index = index - 1\n        let value = value\
    \ - 1\n        let index = index - 1\n        let value = value - 1\n        let\
    \ index = index - 1\n        let value = value - 1\n        let index = index\
    \ - 1\n        let value = value - 1\n        let index = index - 1\n        let\
    \ value = value - 1\n        let index = index - 1\n        let value = value\
    \ - 1\n        let index = index - 1\n        let value = value - 1\n        let\
    \ index = index - 1\n        let value = value - 1\n        let index = index\
    \ - 1\n        let value = value - 1\n        let index = index - 1\n        let\
    \ value = value - 1\n        let index = index - 1\n        let value = value\
    \ - 1\n        let index = index - 1\n        let value = value - 1\n        let\
    \ index = index - 1\n        let value = value - 1\n        let index = index\
    \ - 1\n        let value = value - 1\n        let index = index - 1\n        let\
    \ value = value - 1\n        let index = index - 1\n        let value = value\
    \ - 1\n        let index = index - 1\n        let value = value - 1\n        let\
    \ index = index - 1\n        let value = value - 1\n        let index = index\
    \ - 1\n        let value = value - 1\n        let index = index - 1\n        let\
    \ value = value - 1\n        let index = index - 1\n        let value = value\
    \ - 1\n        let index = index - 1\n        let value = value - 1\n        let\
    \ index = index - 1\n        let value = value - 1\n        let index = index\
    \ - 1\n        let value = value - 1\n        let index = index - 1\n        let\
    \ value = value - 1\n        let index = index - 1\n        let value = value\
    \ - 1\n        let index = index - 1\n        let value = value - 1\n        let\
    \ index = index - 1\n        let value = value - 1\n        let index = index\
    \ - 1\n        let value = value - 1\n        let index = index - 1\n        let\
    \ value = value - 1\n        let index = index - 1\n        let value = value\
    \ - 1\n        let index = index - 1\n        let value = value - 1\n        let\
    \ index = index - 1\n        let value = value - 1\n        let index = index\
    \ - 1\n        let value = value - 1\n        let index = index - 1\n        let\
    \ value = value - 1\n        let index = index - 1\n        let value = value\
    \ - 1\n        let index = index - 1\n        let value = value - 1\n        let\
    \ index = index - 1\n        let value = value - 1\n        let index = index\
    \ - 1\n        let value = value - 1\n        let index = index - 1\n        let\
    \ value = value - 1\n        let index = index - 1\n        let value = value\
    \ - 1\n        let index = index - 1\n        let value = value - 1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1p16_u4x.swift:140:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmp1p16_u4x.swift:18:40:\
    \ note: to match this opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n\
    \                                       ^\n/tmp/tmp1p16_u4x.swift:29:13: error:\
    \ invalid redeclaration of 'index'\n        let index = index - 1\n          \
    \  ^\n/tmp/tmp1p16_u4x.swift:25:13: note: 'index' previously declared here\n \
    \       let index = index + 1\n            ^\n/tmp/tmp1p16_u4x.swift:30:13: error:\
    \ invalid redeclaration of 'value'\n        let value = value - 10\n         \
    \   ^\n/tmp/tmp1p16_u4x.swift:24:13: note: 'value' previously declared here\n\
    \        let value = arr[index]\n            ^\n/tmp/tmp1p16_u4x.swift:124:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014171
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let min = arr.min()!\n    let max = arr.max()!\n    var result = [String]()\n\
    \    for n in arr {\n        if n > min && n < max {\n            result.append(name(n))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmphstzayjy.swift:25:27: error: cannot find 'name' in scope\n    \
    \        result.append(name(n))\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014171
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let sortedArr = arr.sorted(by: { $0 < $1 })\n    let reverseArr = sortedArr.reversed()\n\
    \    var result = [String]()\n    for n in reverseArr {\n        let index = sortedArr.index(of:\
    \ n)\n        result.append(String(sortedArr.prefix(index)))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbp3q4qdb.swift:24:31: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = sortedArr.index(of: n)\n         \
    \                     ^\n/tmp/tmpbp3q4qdb.swift:24:31: note: use 'firstIndex(of:)'\
    \ instead\n        let index = sortedArr.index(of: n)\n                      \
    \        ^~~~~\n                              firstIndex\n/tmp/tmpbp3q4qdb.swift:25:23:\
    \ error: no exact matches in call to initializer \n        result.append(String(sortedArr.prefix(index)))\n\
    \                      ^\n/tmp/tmpbp3q4qdb.swift:25:23: note: found candidate\
    \ with type '(PrefixSequence<[Int]>) -> String'\n        result.append(String(sortedArr.prefix(index)))\n\
    \                      ^\n/tmp/tmpbp3q4qdb.swift:25:23: note: candidate expects\
    \ value of type 'PrefixSequence<[Int]>' for parameter #1 (got 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>'))\n        result.append(String(sortedArr.prefix(index)))\n\
    \                      ^\n/tmp/tmpbp3q4qdb.swift:25:23: note: candidate expects\
    \ value of type 'PrefixSequence<[Int]>' for parameter #1 (got 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>'))\n        result.append(String(sortedArr.prefix(index)))\n\
    \                      ^\n/tmp/tmpbp3q4qdb.swift:25:23: note: candidate expects\
    \ value of type 'ArraySlice<Int>' for parameter #1 (got 'Array<Int>.Index?' (aka\
    \ 'Optional<Int>'))\n        result.append(String(sortedArr.prefix(index)))\n\
    \                      ^\n/tmp/tmpbp3q4qdb.swift:25:47: error: value of optional\
    \ type 'Array<Int>.Index?' (aka 'Optional<Int>') must be unwrapped to a value\
    \ of type 'Array<Int>.Index' (aka 'Int')\n        result.append(String(sortedArr.prefix(index)))\n\
    \                                              ^\n/tmp/tmpbp3q4qdb.swift:24:13:\
    \ note: short-circuit using 'guard' to exit this function early if the optional\
    \ value contains 'nil'\n        let index = sortedArr.index(of: n)\n         \
    \   ^\n        guard                              else { return <#default value#>\
    \ }\n/tmp/tmpbp3q4qdb.swift:24:31: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n   "
  stdout: ''
  timestamp: 1660014171
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = 1\n    let max = 9\n    var min_index\
    \ = 0\n    var max_index = 0\n    var min_value = arr[min_index]\n    var max_value\
    \ = arr[max_index]\n    for index in 0..<arr.count {\n        if arr[index] <\
    \ min_value {\n            min_value = arr[index]\n            min_index = index\n\
    \        }\n        if arr[index] > max_value {\n            max_value = arr[index]\n\
    \            max_index = index\n        }\n    }\n    if min_value == max_value\
    \ {\n        result.append(\"One\")\n    } else {\n        var temp = min_value\n\
    \        var temp_min = min_value\n        var temp_max = max_value\n        while\
    \ temp_min <= temp_max {\n            if temp_min < temp_max {\n             \
    \   let index = temp_min + (temp_max - temp_min)\n                result.append(names[index])\n\
    \                temp_min = temp_min + 1\n                temp_max = temp_max\
    \ - 1\n            }\n            temp = temp + 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc0mn_e84.swift:48:31: error: cannot find 'names' in scope\n   \
    \             result.append(names[index])\n                              ^~~~~\n"
  stdout: ''
  timestamp: 1660014171
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    \n   \
    \ if arr.isEmpty {\n        return result\n    }\n    \n    let min = min(arr)\n\
    \    let max = max(arr)\n    \n    if min == max {\n        return [\"One\"]\n\
    \    }\n    \n    let ones = arr.filter{ $0 == 1 }\n    let tens = arr.filter{\
    \ $0 == 10 }\n    let hundreds = arr.filter{ $0 == 100 }\n    \n    if ones.isEmpty\
    \ {\n        return [\"One\"]\n    }\n    \n    if tens.isEmpty {\n        return\
    \ [\"Ten\"]\n    }\n    \n    if hundreds.isEmpty {\n        return [\"Hundred\"\
    ]\n    }\n    \n    let tensCount = tens.count\n    let hundredsCount = hundreds.count\n\
    \    \n    if tensCount > 1 {\n        result.append(\"Ten\")\n    }\n    \n \
    \   if hundredsCount > 1 {\n        result.append(\"Hundred\")\n    }\n    \n\
    \    if tensCount > 1 {\n        result.append(\"One\")\n    }\n    \n    if tensCount\
    \ > 1 {\n        result.append(\"Ten\")\n    }\n    \n    if hundredsCount > 1\
    \ {\n        result.append(\"Hundred\")\n    }\n    \n    if tensCount > 1 {\n\
    \        result.append(\"One\")\n    }\n    \n    if tensCount > 1 {\n       \
    \ result.append(\"Ten\")\n    }\n    \n    if hundredsCount > 1 {\n        result.append(\"\
    Hundred\")\n    }\n    \n    if tensCount > 1 {\n        result.append(\"One\"\
    )\n    }\n    \n    if tensCount > 1 {\n        result.append(\"Ten\")\n    }\n\
    \    \n    if hundredsCount > 1 {\n        result.append(\"Hundred\")\n    }\n\
    \    \n    if tensCount > 1 {\n        result.append(\"One\")\n    }\n    \n \
    \   if tensCount > 1 {\n        result.append(\"Ten\")\n    }\n    \n    if hundredsCount\
    \ > 1 {\n        result.append(\"Hundred\")\n    }\n    \n    if tensCount > 1\
    \ {\n        result.append(\"One\")\n    }\n    \n    if tensCount > 1 {\n   \
    \     result.append(\"Ten\")\n    }\n    \n    if hundredsCount > 1 {\n      \
    \  result.append(\"Hundred\")\n    }\n    \n    if tensCount > 1 {\n        result.append(\"\
    One\")\n    }\n    \n    if tensCount > 1 {\n        result.append(\"Ten\")\n\
    \    }\n    \n    if hundredsCount > 1 {\n        result.append(\"Hundred\")\n\
    \    }\n    \n    if tensCount > 1 {\n        result.append(\"One\")\n    }\n\
    \    \n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq9nedqqm.swift:25:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpq9nedqqm.swift:26:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n"
  stdout: ''
  timestamp: 1660014171
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var tmp\
    \ = [Int]()\n    var tmp2 = [Int]()\n    var tmp3 = [Int]()\n    var tmp4 = [Int]()\n\
    \    var tmp5 = [Int]()\n    var tmp6 = [Int]()\n    var tmp7 = [Int]()\n    var\
    \ tmp8 = [Int]()\n    var tmp9 = [Int]()\n    var tmp10 = [Int]()\n    var tmp11\
    \ = [Int]()\n    var tmp12 = [Int]()\n    var tmp13 = [Int]()\n    var tmp14 =\
    \ [Int]()\n    var tmp15 = [Int]()\n    var tmp16 = [Int]()\n    var tmp17 = [Int]()\n\
    \    var tmp18 = [Int]()\n    var tmp19 = [Int]()\n    var tmp20 = [Int]()\n \
    \   var tmp21 = [Int]()\n    var tmp22 = [Int]()\n    var tmp23 = [Int]()\n  \
    \  var tmp24 = [Int]()\n    var tmp25 = [Int]()\n    var tmp26 = [Int]()\n   \
    \ var tmp27 = [Int]()\n    var tmp28 = [Int]()\n    var tmp29 = [Int]()\n    var\
    \ tmp30 = [Int]()\n    var tmp31 = [Int]()\n    var tmp32 = [Int]()\n    var tmp33\
    \ = [Int]()\n    var tmp34 = [Int]()\n    var tmp35 = [Int]()\n    var tmp36 =\
    \ [Int]()\n    var tmp37 = [Int]()\n    var tmp38 = [Int]()\n    var tmp39 = [Int]()\n\
    \    var tmp40 = [Int]()\n    var tmp41 = [Int]()\n    var tmp42 = [Int]()\n \
    \   var tmp43 = [Int]()\n    var tmp44 = [Int]()\n    var tmp45 = [Int]()\n  \
    \  var tmp46 = [Int]()\n    var tmp47 = [Int]()\n    var tmp48 = [Int]()\n   \
    \ var tmp49 = [Int]()\n    var tmp50 = [Int]()\n    var tmp51 = [Int]()\n    var\
    \ tmp52 = [Int]()\n    var tmp53 = [Int]()\n    var tmp54 = [Int]()\n    var tmp55\
    \ = [Int]()\n    var tmp56 = [Int]()\n    var tmp57 = [Int]()\n    var tmp58 =\
    \ [Int]()\n    var tmp59 = [Int]()\n    var tmp60 = [Int]()\n    var tmp61 = [Int]()\n\
    \    var tmp62 = [Int]()\n    var tmp63 = [Int]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1s8xz93b.swift:82:17: error: expected member name or constructor\
    \ call after type name\n    var tmp63 = [Int]\n                ^\n/tmp/tmp1s8xz93b.swift:82:21:\
    \ note: add arguments after the type to construct a value of the type\n    var\
    \ tmp63 = [Int]\n                    ^\n                     ()\n/tmp/tmp1s8xz93b.swift:82:21:\
    \ note: use '.self' to reference the type object\n    var tmp63 = [Int]\n    \
    \                ^\n                     .self\n/tmp/tmp1s8xz93b.swift:19:9: warning:\
    \ initialization of variable 'result' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var result = [String]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmp1s8xz93b.swift:20:9: warning: initialization of variable 'tmp'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var tmp = [Int]()\n    ~~~~^~~\n    _\n/tmp/tmp1s8xz93b.swift:21:9: warning:\
    \ initialization of variable 'tmp2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var tmp2 = [Int]()\n    ~~~~^~~~\n    _\n/tmp/tmp1s8xz93b.swift:22:9:\
    \ warning: initialization of variable 'tmp3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var tmp3 = [Int]()\n    ~~~~^~~~\n\
    \    _\n/tmp/tmp1s8xz93b.swift:23:9: warning: initialization of variable 'tmp4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var tmp4 = [Int]()\n    ~~~~^~~~\n    _\n/tmp/tmp1s8xz93b.swift:24:9: warning:\
    \ initialization of variable 'tmp5' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var tmp5 = [Int]()\n    ~~~~^~~~\n    _\n/tmp/tmp1s8xz93b.swift:25:9:\
    \ warning: initialization of variable 'tmp6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var tmp6 = [Int]()\n    ~~~~^~~~\n\
    \    _\n/tmp/tmp1s8xz93b.swift:26:9: warning: initialization of variable 'tmp7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var tmp7 = [Int]()\n    ~~~~^~~~\n    _\n/tmp/tmp1s8xz93b.swift:27:9: warning:\
    \ initialization of variable 'tmp8' was never used; consider r"
  stdout: ''
  timestamp: 1660014171
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let min = 1\n    let max = 9\n    var result = [String]()\n    for n\
    \ in arr {\n        let index = min + n - 1\n        result.append(names[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9b9912uf.swift:25:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014171
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    \n    var result: [String] = []\n    \n    for n in arr {\n        switch\
    \ n {\n        case 1:\n            result.append(contentsOf: [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"])\n \
    \       case 2:\n            result.append(contentsOf: [\"Two\", \"One\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"])\n        case\
    \ 3:\n            result.append(contentsOf: [\"Three\", \"Two\", \"One\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"])\n        case 4:\n     \
    \       result.append(contentsOf: [\"Four\", \"Three\", \"Two\", \"One\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"])\n        case 5:\n            result.append(contentsOf:\
    \ [\"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"])\n        case 6:\n            result.append(contentsOf: [\"Six\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Seven\", \"Eight\", \"Nine\"\
    ])\n        case 7:\n            result.append(contentsOf: [\"Seven\", \"Six\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Eight\", \"Nine\"])\n   \
    \     case 8:\n            result.append(contentsOf: [\"Eight\", \"Seven\", \"\
    Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Nine\"])\n        case\
    \ 9:\n            result.append(contentsOf: [\"Nine\", \"Eight\", \"Seven\", \"\
    Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"])\n        default:\n \
    \           break\n        }\n    }\n    \n    return result.reversed()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpa70offvj/tmpa70offvj.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ab5fafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ab5ca6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ab5ca6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ab5ca57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa70offvj                        0x000056387005c8c1 <unavailable> + 6337

    5    libc.so.6                          0x00002b4ab619b460 __libc_start_main +
    245

    6    tmpa70offvj                        0x000056387005c369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = min(arr)\n    let max = max(arr)\n\
    \    var i = 0\n    while i < arr.count {\n        if arr[i] == min {\n      \
    \      result.append(One)\n            i += 1\n        } else if arr[i] == max\
    \ {\n            result.append(Nine)\n            i += 1\n        } else {\n \
    \           result.append(String(arr[i]))\n            i += 1\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp35hfut9x.swift:23:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp35hfut9x.swift:24:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp35hfut9x.swift:28:27: error: cannot find 'One' in scope\n     \
    \       result.append(One)\n                          ^~~\n/tmp/tmp35hfut9x.swift:31:27:\
    \ error: cannot find 'Nine' in scope\n            result.append(Nine)\n      \
    \                    ^~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    \n    let arr = arr.sorted()\n    \n    var result = [String]()\n   \
    \ \n    for n in arr {\n        let digit = n % 10\n        let name = String(digit)\n\
    \        result.append(name)\n    }\n    \n    return result.reversed()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmp38gazs7e/tmp38gazs7e.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ea41edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ea3ee4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ea3ee4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ea3ee37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38gazs7e                        0x000055f46cf68af1 <unavailable> + 6897

    5    libc.so.6                          0x00002b3ea43d9460 __libc_start_main +
    245

    6    tmp38gazs7e                        0x000055f46cf68599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = 1\n    let max = 9\n    let len\
    \ = arr.count\n    for i in 0..<len {\n        let digit = arr[i]\n        if\
    \ digit < min || digit > max {\n            continue\n        }\n        let index\
    \ = digit - min\n        result.append(names[index])\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpeseqt1jv.swift:32:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let min = arr.min()!\n    let max = arr.max()!\n    var result = [String]()\n\
    \    for i in arr {\n        let index = i - min\n        if index < 0 {\n   \
    \         index = index * -1\n        }\n        let index = String(index)\n \
    \       if index.isEmpty {\n            continue\n        }\n        result.append(index)\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg9wetjt_.swift:26:13: error: cannot assign to value: 'index' is\
    \ a 'let' constant\n            index = index * -1\n            ^~~~~\n/tmp/tmpg9wetjt_.swift:24:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let index = i - min\n\
    \        ^~~\n        var\n/tmp/tmpg9wetjt_.swift:28:13: error: invalid redeclaration\
    \ of 'index'\n        let index = String(index)\n            ^\n/tmp/tmpg9wetjt_.swift:24:13:\
    \ note: 'index' previously declared here\n        let index = i - min\n      \
    \      ^\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty else { return []\
    \ }\n    \n    let sortedArr = arr.sorted()\n    let reversedArr = sortedArr.reversed()\n\
    \    let reversedStrings = reversedArr.map { String($0) }\n    let oneToNine =\
    \ reversedStrings.map { String($0) }\n    let oneToNineReversed = oneToNine.reversed()\n\
    \    let oneToNineReversedStrings = oneToNineReversed.map { String($0) }\n   \
    \ \n    return oneToNineReversedStrings\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpv15y11th/tmpv15y11th.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67d99bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67d96b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67d96b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67d96b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv15y11th                        0x000056519670cb21 <unavailable> + 6945

    5    libc.so.6                          0x00002b67d9ba6460 __libc_start_main +
    245

    6    tmpv15y11th                        0x000056519670c5c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    \n   \
    \ if arr.isEmpty {\n        return result\n    }\n    \n    let minValue = min(arr)\n\
    \    let maxValue = max(arr)\n    \n    if minValue > maxValue {\n        return\
    \ result\n    }\n    \n    let minDigit = minValue % 10\n    let maxDigit = maxValue\
    \ % 10\n    \n    if minDigit > maxDigit {\n        return result\n    }\n   \
    \ \n    let minDigitName = oneDigitNames[minDigit]\n    let maxDigitName = oneDigitNames[maxDigit]\n\
    \    \n    for i in 0..<arr.count {\n        let digit = arr[i]\n        \n  \
    \      if digit < minDigit {\n            continue\n        }\n        \n    \
    \    if digit > maxDigit {\n            break\n        }\n        \n        let\
    \ digitName = oneDigitNames[digit]\n        \n        if digitName == minDigitName\
    \ {\n            continue\n        }\n        \n        if digitName == maxDigitName\
    \ {\n            break\n        }\n        \n        result.append(digitName)\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2yldfglw.swift:25:27: error: missing argument for parameter #2\
    \ in call\n    let minValue = min(arr)\n                          ^\n        \
    \                  , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable\
    \ public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n             \
    \          ^\n/tmp/tmp2yldfglw.swift:26:27: error: missing argument for parameter\
    \ #2 in call\n    let maxValue = max(arr)\n                          ^\n     \
    \                     , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n\
    @inlinable public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n    \
    \                   ^\n/tmp/tmp2yldfglw.swift:39:24: error: cannot find 'oneDigitNames'\
    \ in scope\n    let minDigitName = oneDigitNames[minDigit]\n                 \
    \      ^~~~~~~~~~~~~\n/tmp/tmp2yldfglw.swift:40:24: error: cannot find 'oneDigitNames'\
    \ in scope\n    let maxDigitName = oneDigitNames[maxDigit]\n                 \
    \      ^~~~~~~~~~~~~\n/tmp/tmp2yldfglw.swift:53:25: error: cannot find 'oneDigitNames'\
    \ in scope\n        let digitName = oneDigitNames[digit]\n                   \
    \     ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    \n    let minLength = min(arr.count, 10)\n\
    \    let maxLength = max(arr.count, 10)\n    \n    for i in minLength...maxLength\
    \ {\n        let index = arr.index(of: i)\n        if index != nil {\n       \
    \     let value = arr[index!]\n            let name = getName(value)\n       \
    \     result.append(name)\n        }\n    }\n    \n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpptqcwboq.swift:28:25: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = arr.index(of: i)\n               \
    \         ^\n/tmp/tmpptqcwboq.swift:28:25: note: use 'firstIndex(of:)' instead\n\
    \        let index = arr.index(of: i)\n                        ^~~~~\n       \
    \                 firstIndex\n/tmp/tmpptqcwboq.swift:31:24: error: cannot find\
    \ 'getName' in scope\n            let name = getName(value)\n                \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let sorted = arr.sorted()\n    let reversed = sorted.reversed()\n   \
    \ var result = [String]()\n    var index = 0\n    while index < sorted.count {\n\
    \        let digit = sorted[index]\n        if digit == 1 {\n            result.append(contentsOf:\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"])\n        } else if digit == 2 {\n            result.append(contentsOf:\
    \ [\"Two\", \"One\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"])\n        } else if digit == 3 {\n            result.append(contentsOf:\
    \ [\"Three\", \"Two\", \"One\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"])\n        } else if digit == 4 {\n            result.append(contentsOf:\
    \ [\"Four\", \"Three\", \"Two\", \"One\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"])\n        } else if digit == 5 {\n            result.append(contentsOf:\
    \ [\"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"])\n        } else if digit == 6 {\n            result.append(contentsOf:\
    \ [\"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Seven\", \"Eight\"\
    , \"Nine\"])\n        } else if digit == 7 {\n            result.append(contentsOf:\
    \ [\"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Eight\"\
    , \"Nine\"])\n        } else if digit == 8 {\n            result.append(contentsOf:\
    \ [\"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"\
    , \"Nine\"])\n        } else if digit == 9 {\n            result.append(contentsOf:\
    \ [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"One\"])\n        } else {\n            result.append(contentsOf: [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"])\n        }\n        index += 1\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpw5tf7m28/tmpw5tf7m28.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f41405c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f410fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f410fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f410fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5tf7m28                        0x000055d25a46d8c1 <unavailable> + 6337

    5    libc.so.6                          0x00002b1f415f1460 __libc_start_main +
    245

    6    tmpw5tf7m28                        0x000055d25a46d369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = min(arr)\n    let max = max(arr)\n\
    \    var reversed = arr.reverse()\n    for i in reversed.indices {\n        if\
    \ min <= reversed[i] && reversed[i] <= max {\n            result.append(name[reversed[i]])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpudhbi9_z.swift:23:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpudhbi9_z.swift:24:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpudhbi9_z.swift:25:24: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n    var reversed = arr.reverse()\n       \
    \            ~~~ ^\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = arr[0]\n    let max = arr[0]\n\
    \    for num in arr {\n        if num < min {\n            min = num\n       \
    \ } else if num > max {\n            max = num\n        }\n    }\n    var reversed\
    \ = [Int]()\n    for num in arr {\n        reversed.append(num - min)\n    }\n\
    \    reversed.reverse()\n    for num in reversed {\n        let index = reversed.index(of:\
    \ num)\n        result.append(names[index])\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_m8jyh25.swift:27:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = num\n            ^~~\n/tmp/tmp_m8jyh25.swift:23:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmp_m8jyh25.swift:29:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = num\n            ^~~\n/tmp/tmp_m8jyh25.swift:24:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmp_m8jyh25.swift:38:30: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = reversed.index(of: num)\n        \
    \                     ^\n/tmp/tmp_m8jyh25.swift:38:30: note: use 'firstIndex(of:)'\
    \ instead\n        let index = reversed.index(of: num)\n                     \
    \        ^~~~~\n                             firstIndex\n/tmp/tmp_m8jyh25.swift:39:23:\
    \ error: cannot find 'names' in scope\n        result.append(names[index])\n \
    \                     ^~~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    \n    var result = [String]()\n    \n    var start = 0\n    var end =\
    \ arr.count - 1\n    \n    while start < end {\n        let mid = start + (end\
    \ - start) / 2\n        \n        if arr[mid] < 1 {\n            start = mid +\
    \ 1\n        } else if arr[mid] > 9 {\n            end = mid - 1\n        } else\
    \ {\n            result.append(names[arr[mid]])\n            start = mid + 1\n\
    \            end = mid - 1\n        }\n    }\n    \n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmppeayhg_9.swift:34:27: error: cannot find 'names' in scope\n   \
    \         result.append(names[arr[mid]])\n                          ^~~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let sortedArr = arr.sorted()\n    let reverseArr = sortedArr.reversed()\n\
    \    var result = [String]()\n    for i in reverseArr {\n        let index = sortedArr.index(of:\
    \ i)!\n        result.append(numbers[index])\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpa7c3skjz.swift:24:31: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = sortedArr.index(of: i)!\n        \
    \                      ^\n/tmp/tmpa7c3skjz.swift:24:31: note: use 'firstIndex(of:)'\
    \ instead\n        let index = sortedArr.index(of: i)!\n                     \
    \         ^~~~~\n                              firstIndex\n/tmp/tmpa7c3skjz.swift:25:23:\
    \ error: cannot find 'numbers' in scope\n        result.append(numbers[index])\n\
    \                      ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    var result = [String]()\n    var index = 0\n    var length = 0\n \
    \   var max = 0\n    var min = 0\n    for number in arr {\n        if number >\
    \ max {\n            max = number\n        }\n        if number < min {\n    \
    \        min = number\n        }\n        length += 1\n    }\n    for number in\
    \ arr {\n        if number == max {\n            result.append(String(number))\n\
    \        }\n        if number == min {\n            result.append(String(number))\n\
    \        }\n        if number == length {\n            result.append(String(number))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpcbmvl5ej/tmpcbmvl5ej.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ebc5d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ebc2d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ebc2d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ebc2cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcbmvl5ej                        0x000056067e4bf951 <unavailable> + 6481

    5    libc.so.6                          0x00002b4ebc7c5460 __libc_start_main +
    245

    6    tmpcbmvl5ej                        0x000056067e4bf3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014172
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    \n   \
    \ if arr.isEmpty {\n        return result\n    }\n    \n    let minLength = min(arr.count,\
    \ 9)\n    \n    for i in minLength..<arr.count {\n        let digit = arr[i]\n\
    \        \n        if digit < 1 || digit > 9 {\n            continue\n       \
    \ }\n        \n        let index = digit - 10\n        \n        if index >= 0\
    \ && index < result.count {\n            result[index] = result[index].uppercased()\n\
    \        } else {\n            result.append(String(digit))\n        }\n    }\n\
    \    \n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmppyrr15qe/tmppyrr15qe.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2286b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2283acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2283ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2283ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppyrr15qe                        0x0000559ab6a43ca1 <unavailable> + 7329

    5    libc.so.6                          0x00002ab2288a1460 __libc_start_main +
    245

    6    tmppyrr15qe                        0x0000559ab6a43749 <unavailable> + 5961

    '
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    var result = [String]()\n    var len = arr.count\n    var min = arr[0]\n\
    \    var max = arr[0]\n    for i in arr {\n        if i < min {\n            min\
    \ = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n\
    \    var minLen = min.count\n    var maxLen = max.count\n    var minIndex = min.index\n\
    \    var maxIndex = max.index\n    var minLenIndex = minLen.index\n    var maxLenIndex\
    \ = maxLen.index\n    var minVal = min.characters\n    var maxVal = max.characters\n\
    \    var minValIndex = minVal.index\n    var maxValIndex = maxVal.index\n    var\
    \ minValLen = minVal.count\n    var maxValLen = maxVal.count\n    var minValIndex\
    \ = minVal.index\n    var maxValIndex = maxVal.index\n    var minValLenIndex =\
    \ minValLen.index\n    var maxValLenIndex = maxValLen.index\n    var minValIndex\
    \ = minVal.index\n    var maxValIndex = maxVal.index\n    var minValLenIndex =\
    \ minValLen.index\n    var maxValLenIndex = maxValLen.index\n    var minValIndex\
    \ = minVal.index\n    var maxValIndex = maxVal.index\n    var minValLenIndex =\
    \ minValLen.index\n    var maxValLenIndex = maxValLen.index\n    var minValIndex\
    \ = minVal.index\n    var maxValIndex = maxVal.index\n    var minValLenIndex =\
    \ minValLen.index\n    var maxValLenIndex = maxValLen.index\n    var minValIndex\
    \ = minVal.index\n    var maxValIndex = maxVal.index\n    var minValLenIndex =\
    \ minValLen.index\n    var maxValLenIndex = maxValLen.index\n    var minValIndex\
    \ = minVal.index\n    var maxValIndex = maxVal.index\n    var minValLenIndex =\
    \ minValLen.index\n    var maxValLenIndex = maxValLen.index\n    var minValIndex\
    \ = minVal.index\n    var maxValIndex = maxVal.index\n    var minValLenIndex =\
    \ minValLen.index\n    var maxValLenIndex = maxValLen.index\n    var minValIndex\
    \ = minVal.index\n    var maxValIndex = maxVal.index\n    var minValLenIndex =\
    \ minValLen.index\n    var maxValLenIndex = maxValLen.index\n    var minValIndex\
    \ = minVal.index\n    var maxValIndex = maxVal.index\n    var minValLenIndex =\
    \ minValLen.index\n    var maxValLen\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdy6j5v1j.swift:34:22: error: value of type 'Int' has no member\
    \ 'count'\n    var minLen = min.count\n                 ~~~ ^~~~~\n/tmp/tmpdy6j5v1j.swift:35:22:\
    \ error: value of type 'Int' has no member 'count'\n    var maxLen = max.count\n\
    \                 ~~~ ^~~~~\n/tmp/tmpdy6j5v1j.swift:36:24: error: value of type\
    \ 'Int' has no member 'index'\n    var minIndex = min.index\n                \
    \   ~~~ ^~~~~\n/tmp/tmpdy6j5v1j.swift:37:24: error: value of type 'Int' has no\
    \ member 'index'\n    var maxIndex = max.index\n                   ~~~ ^~~~~\n\
    /tmp/tmpdy6j5v1j.swift:40:22: error: value of type 'Int' has no member 'characters'\n\
    \    var minVal = min.characters\n                 ~~~ ^~~~~~~~~~\n/tmp/tmpdy6j5v1j.swift:41:22:\
    \ error: value of type 'Int' has no member 'characters'\n    var maxVal = max.characters\n\
    \                 ~~~ ^~~~~~~~~~\n/tmp/tmpdy6j5v1j.swift:81:9: error: type annotation\
    \ missing in pattern\n    var maxValLen\n        ^\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    \n   \
    \ if arr.isEmpty {\n        return result\n    }\n    \n    let minLength = min(arr.count,\
    \ 9)\n    \n    for i in minLength..<arr.count {\n        let digit = arr[i]\n\
    \        \n        if digit < 1 || digit > 9 {\n            continue\n       \
    \ }\n        \n        let index = digit - 1 + minLength\n        \n        if\
    \ index >= result.count {\n            result.append(String(digit))\n        }\
    \ else {\n            result[index] = String(digit)\n        }\n    }\n    \n\
    \    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpawu7rz32/tmpawu7rz32.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aecb46ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecb43d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aecb43d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aecb43d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpawu7rz32                        0x0000555599ff3c01 <unavailable> + 7169

    5    libc.so.6                          0x00002aecb48c9460 __libc_start_main +
    245

    6    tmpawu7rz32                        0x0000555599ff36a9 <unavailable> + 5801

    '
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let min = 1\n    let max = 9\n    var result = [String]()\n    for n\
    \ in arr {\n        let index = min + n - 1\n        result.append(names[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9b9912uf.swift:25:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014171
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = 1\n    let max = 9\n    var min_index\
    \ = 0\n    var max_index = arr.count\n    while min_index < max_index {\n    \
    \    let mid = min + ((max - min) / 2)\n        if arr[mid] < min {\n        \
    \    min = mid + 1\n            min_index = mid\n        } else if arr[mid] >\
    \ max {\n            max = mid - 1\n            max_index = mid\n        } else\
    \ {\n            result.append(arr[mid])\n            min = mid + 1\n        \
    \    min_index = mid\n        }\n    }\n    if min_index == max_index {\n    \
    \    result.append(arr[min_index])\n    }\n    return result.reversed()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0hgpjyqk.swift:30:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = mid + 1\n            ^~~\n/tmp/tmp0hgpjyqk.swift:23:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = 1\n    ^~~\n \
    \   var\n/tmp/tmp0hgpjyqk.swift:33:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = mid - 1\n            ^~~\n/tmp/tmp0hgpjyqk.swift:24:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = 9\n    ^~~\n \
    \   var\n/tmp/tmp0hgpjyqk.swift:36:30: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String'\n            result.append(arr[mid])\n  \
    \                           ^\n/tmp/tmp0hgpjyqk.swift:37:13: error: cannot assign\
    \ to value: 'min' is a 'let' constant\n            min = mid + 1\n           \
    \ ^~~\n/tmp/tmp0hgpjyqk.swift:23:5: note: change 'let' to 'var' to make it mutable\n\
    \    let min = 1\n    ^~~\n    var\n/tmp/tmp0hgpjyqk.swift:42:26: error: cannot\
    \ convert value of type 'Int' to expected argument type 'String'\n        result.append(arr[min_index])\n\
    \                         ^\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = min(arr)\n    let max = max(arr)\n\
    \    var reversed = reverseArray(arr)\n    var i = 0\n    while i < reversed.count\
    \ {\n        let value = reversed[i]\n        if value < min || value > max {\n\
    \            i += 1\n            continue\n        }\n        result.append(nameOf(value))\n\
    \        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpb_jk5bwu.swift:23:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpb_jk5bwu.swift:24:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpb_jk5bwu.swift:25:20: error: cannot find 'reverseArray' in scope\n\
    \    var reversed = reverseArray(arr)\n                   ^~~~~~~~~~~~\n/tmp/tmpb_jk5bwu.swift:33:23:\
    \ error: cannot find 'nameOf' in scope\n        result.append(nameOf(value))\n\
    \                      ^~~~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    var\
    \ temp: Int = 0\n    var last: Int = 0\n    var lastName: String = \"\"\n    var\
    \ lastLength: Int = 0\n    for num in arr {\n        if num > 9 {\n          \
    \  last = num\n            lastName = \"Nine\"\n            lastLength = 9\n \
    \       } else {\n            last = num\n            lastName = String(num)\n\
    \            lastLength = Int(String(num).count)\n        }\n        if temp <\
    \ last {\n            result.append(lastName)\n            temp += 1\n       \
    \ } else {\n            result.append(lastName)\n            temp += 1\n     \
    \       result.append(lastName)\n            temp += 1\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp89w969ps/tmp89w969ps.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba005fc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba005cb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba005cb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba005cb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp89w969ps                        0x000055af1aec1a31 <unavailable> + 6705

    5    libc.so.6                          0x00002ba0061ae460 __libc_start_main +
    245

    6    tmp89w969ps                        0x000055af1aec14d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty else { return []\
    \ }\n    var result = [String]()\n    var index = 0\n    var last = 0\n    while\
    \ index < arr.count {\n        let current = arr[index]\n        if current >\
    \ last {\n            result.append(arr[last])\n            result.append(String(current\
    \ - last))\n            last = current\n        }\n        index += 1\n    }\n\
    \    result.append(arr[last])\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9chl03nu.swift:26:30: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String'\n            result.append(arr[last])\n \
    \                            ^\n/tmp/tmp9chl03nu.swift:32:22: error: cannot convert\
    \ value of type 'Int' to expected argument type 'String'\n    result.append(arr[last])\n\
    \                     ^\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = 1\n    let max = 9\n    let minIndex\
    \ = arr.index(of: min)\n    let maxIndex = arr.index(of: max)\n    if minIndex\
    \ == nil || maxIndex == nil {\n        return result\n    }\n    let minValue\
    \ = arr[minIndex!]\n    let maxValue = arr[maxIndex!]\n    let minLength = (maxValue\
    \ - minValue) + 1\n    for index in 0..<minLength {\n        let value = minValue\
    \ + index\n        let name = getName(from: value)\n        result.append(name)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpad80xkj1.swift:25:24: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n    let minIndex = arr.index(of: min)\n              \
    \         ^\n/tmp/tmpad80xkj1.swift:25:24: note: use 'firstIndex(of:)' instead\n\
    \    let minIndex = arr.index(of: min)\n                       ^~~~~\n       \
    \                firstIndex\n/tmp/tmpad80xkj1.swift:26:24: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n    let maxIndex = arr.index(of:\
    \ max)\n                       ^\n/tmp/tmpad80xkj1.swift:26:24: note: use 'firstIndex(of:)'\
    \ instead\n    let maxIndex = arr.index(of: max)\n                       ^~~~~\n\
    \                       firstIndex\n/tmp/tmpad80xkj1.swift:35:20: error: cannot\
    \ find 'getName' in scope\n        let name = getName(from: value)\n         \
    \          ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    var\
    \ index = 0\n    while index < arr.count {\n        let value = arr[index]\n \
    \       if value < 1 || value > 9 {\n            index += 1\n            continue\n\
    \        }\n        let digit = value - 1 // 0 -> 9, 1 -> 10, 2 -> 11, 3 -> 12,\
    \ 4 -> 13, 5 -> 14, 6 -> 15, 7 -> 16, 8 -> 17, 9 -> 18\n        let name = digitToName(digit)\n\
    \        result.append(name)\n        index += 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmplwmcnceo.swift:28:20: error: cannot find 'digitToName' in scope\n\
    \        let name = digitToName(digit)\n                   ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    let sortedArr = arr.sorted()\n    let reverseArr = sortedArr.reversed()\n\
    \    let ones = reverseArr.filter{$0 % 10 == 1}\n    let tens = reverseArr.filter{$0\
    \ % 10 == 0}\n    let tensReversed = tens.reversed()\n    let onesReversed = ones.reversed()\n\
    \    let onesReversedString = onesReversed.map { onesReversed[$0] }\n    let tensReversedString\
    \ = tensReversed.map { tensReversed[$0] }\n    let onesReversedStringString =\
    \ onesReversedString.map { String($0) }\n    let tensReversedStringString = tensReversedString.map\
    \ { String($0) }\n    return onesReversedStringString + tensReversedStringString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7l2z2i6q.swift:28:61: error: no exact matches in call to subscript\
    \ \n    let onesReversedString = onesReversed.map { onesReversed[$0] }\n     \
    \                                                       ^\nSwift.ReversedCollection:9:23:\
    \ note: candidate expects value of type 'ReversedCollection<[ReversedCollection<[Int]>.Element]>.Index'\
    \ (aka 'ReversedCollection<Array<Int>>.Index') for parameter #1 (got 'ReversedCollection<[ReversedCollection<[Int]>.Element]>.Element'\
    \ (aka 'Int'))\n    @inlinable public subscript(position: ReversedCollection<Base>.Index)\
    \ -> ReversedCollection<Base>.Element { get }\n                      ^\nSwift.Collection:2:23:\
    \ note: candidate expects value of type 'Range<ReversedCollection<[ReversedCollection<[Int]>.Element]>.Index>'\
    \ (aka 'Range<ReversedCollection<Array<Int>>.Index>') for parameter #1 (got 'ReversedCollection<[ReversedCollection<[Int]>.Element]>.Element'\
    \ (aka 'Int'))\n    @inlinable public subscript(bounds: Range<Self.Index>) ->\
    \ Slice<Self> { get }\n                      ^\nSwift.Collection:3:23: note: candidate\
    \ expects value of type '(UnboundedRange_) -> ()' for parameter #1 (got 'ReversedCollection<[ReversedCollection<[Int]>.Element]>.Element'\
    \ (aka 'Int'))\n    @inlinable public subscript(x: (UnboundedRange_) -> ()) ->\
    \ Self.SubSequence { get }\n                      ^\n/tmp/tmp7l2z2i6q.swift:29:61:\
    \ error: no exact matches in call to subscript \n    let tensReversedString =\
    \ tensReversed.map { tensReversed[$0] }\n                                    \
    \                        ^\nSwift.ReversedCollection:9:23: note: candidate expects\
    \ value of type 'ReversedCollection<[ReversedCollection<[Int]>.Element]>.Index'\
    \ (aka 'ReversedCollection<Array<Int>>.Index') for parameter #1 (got 'ReversedCollection<[ReversedCollection<[Int]>.Element]>.Element'\
    \ (aka 'Int'))\n    @inlinable public subscript(position: ReversedCollection<Base>.Index)\
    \ -> ReversedCollection<Base>.Element { get }\n                      ^\nSwift.Collection:2:23:\
    \ note: candidate expects value of type 'Range<ReversedCollection<[ReversedCollectio"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let sortedArr = arr.sorted()\n    let reverseArr = sortedArr.reversed()\n\
    \    var result = [String]()\n    for i in reverseArr {\n        let index = sortedArr.index(of:\
    \ i)\n        result.append(numbers[index])\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4ea422hn.swift:24:31: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = sortedArr.index(of: i)\n         \
    \                     ^\n/tmp/tmp4ea422hn.swift:24:31: note: use 'firstIndex(of:)'\
    \ instead\n        let index = sortedArr.index(of: i)\n                      \
    \        ^~~~~\n                              firstIndex\n/tmp/tmp4ea422hn.swift:25:23:\
    \ error: cannot find 'numbers' in scope\n        result.append(numbers[index])\n\
    \                      ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    let arr = arr.sorted()\n    let reversed = arr.reversed()\n    var\
    \ result = [String]()\n    for number in arr {\n        let index = reversed.index(of:\
    \ number)\n        if index != nil {\n            result.append(reversed[index!])\n\
    \        } else {\n            result.append(String(number))\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp02r1xedb.swift:26:30: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = reversed.index(of: number)\n     \
    \                        ^\n/tmp/tmp02r1xedb.swift:26:30: note: use 'firstIndex(of:)'\
    \ instead\n        let index = reversed.index(of: number)\n                  \
    \           ^~~~~\n                             firstIndex\n/tmp/tmp02r1xedb.swift:28:35:\
    \ error: cannot convert value of type 'Int' to expected argument type 'String'\n\
    \            result.append(reversed[index!])\n                               \
    \   ^\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    \n    let sortedArr = arr.sorted()\n    let reversedArr = sortedArr.reversed()\n\
    \    \n    var result = [String]()\n    \n    for index in 0..<reversedArr.count\
    \ {\n        let digit = reversedArr[index]\n        let name = digitToName(digit)\n\
    \        result.append(name)\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfat7e9q0.swift:29:32: error: no exact matches in call to subscript\
    \ \n        let digit = reversedArr[index]\n                               ^\n\
    Swift.ReversedCollection:9:23: note: candidate expects value of type 'ReversedCollection<[Int]>.Index'\
    \ for parameter #1 (got 'Int')\n    @inlinable public subscript(position: ReversedCollection<Base>.Index)\
    \ -> ReversedCollection<Base>.Element { get }\n                      ^\nSwift.Collection:2:23:\
    \ note: candidate expects value of type 'Range<ReversedCollection<[Int]>.Index>'\
    \ for parameter #1 (got 'Int')\n    @inlinable public subscript(bounds: Range<Self.Index>)\
    \ -> Slice<Self> { get }\n                      ^\nSwift.Collection:3:23: note:\
    \ candidate expects value of type '(UnboundedRange_) -> ()' for parameter #1 (got\
    \ 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence\
    \ { get }\n                      ^\n/tmp/tmpfat7e9q0.swift:30:20: error: cannot\
    \ find 'digitToName' in scope\n        let name = digitToName(digit)\n       \
    \            ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    var result: [String] = []\n    var index = 0\n    var max = 0\n    for\
    \ element in arr {\n        if element > max {\n            max = element\n  \
    \      }\n    }\n    for element in arr {\n        if element == max {\n     \
    \       result.append(String(element))\n        } else {\n            result.append(String(element)\
    \ + String(max - element))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpgxhgdnrm/tmpgxhgdnrm.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2000cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1ffdc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1ffdc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1ffdc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxhgdnrm                        0x0000556cf05c0951 <unavailable> + 6481

    5    libc.so.6                          0x00002af2002b9460 __libc_start_main +
    245

    6    tmpgxhgdnrm                        0x0000556cf05c03f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let sortedArr = arr.sorted()\n    let reverseArr = sortedArr.reversed()\n\
    \    var result = [String]()\n    for i in reverseArr {\n        let index = sortedArr.index(of:\
    \ i)\n        result.append(String(sortedArr[index]))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpayamu_v6.swift:24:31: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = sortedArr.index(of: i)\n         \
    \                     ^\n/tmp/tmpayamu_v6.swift:24:31: note: use 'firstIndex(of:)'\
    \ instead\n        let index = sortedArr.index(of: i)\n                      \
    \        ^~~~~\n                              firstIndex\n/tmp/tmpayamu_v6.swift:25:40:\
    \ error: value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<Int>.Index' (aka 'Int')\n        result.append(String(sortedArr[index]))\n\
    \                                       ^\n/tmp/tmpayamu_v6.swift:24:13: note:\
    \ short-circuit using 'guard' to exit this function early if the optional value\
    \ contains 'nil'\n        let index = sortedArr.index(of: i)\n            ^\n\
    \        guard                              else { return <#default value#> }\n\
    /tmp/tmpayamu_v6.swift:24:31: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n        let index = sortedArr.index(of: i)\n\
    \                              ^\n                                           ??\
    \ <#default value#>\n/tmp/tmpayamu_v6.swift:24:31: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n        let index =\
    \ sortedArr.index(of: i)\n                              ^\n                  \
    \                        !\n/tmp/tmpayamu_v6.swift:25:40: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n        result.append(String(sortedArr[index]))\n\
    \                                       ^\n                                  \
    \           ?? <#default value#>\n/tmp/tmpayamu_v6.swift:25:40: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        result.append(String(sortedArr[index]))\n\
    \                                       ^\n                                  \
    \          !\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    var result: [String] = []\n    var min: Int = Int.max\n    var max:\
    \ Int = Int.min\n    for value in arr {\n        if value < min {\n          \
    \  min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in arr {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in arr {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in arr {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in arr {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in arr {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in arr {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in arr {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in arr {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in arr {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in arr {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in arr {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in arr {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in arr {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in arr {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in arr {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in arr {\n        if value < min {\n        \
    \    min = value\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpb85g1kr9.swift:176:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmpb85g1kr9.swift:153:22:\
    \ note: to match this opening '{'\n    for value in arr {\n                  \
    \   ^\n/tmp/tmpb85g1kr9.swift:176:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmpb85g1kr9.swift:18:40:\
    \ note: to match this opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n\
    \                                       ^\n/tmp/tmpb85g1kr9.swift:160:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpb85g1kr9.swift:22:9:\
    \ warning: variable 'result' was never used; consider replacing with '_' or removing\
    \ it\n    var result: [String] = []\n        ^~~~~~\n        _\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let sortedArr = arr.sorted()\n    let reverseArr = sortedArr.reversed()\n\
    \    var result = [String]()\n    for i in reverseArr {\n        let index = sortedArr.index(of:\
    \ i)!\n        result.append(names[index])\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmptv6_xvh2.swift:24:31: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = sortedArr.index(of: i)!\n        \
    \                      ^\n/tmp/tmptv6_xvh2.swift:24:31: note: use 'firstIndex(of:)'\
    \ instead\n        let index = sortedArr.index(of: i)!\n                     \
    \         ^~~~~\n                              firstIndex\n/tmp/tmptv6_xvh2.swift:25:23:\
    \ error: cannot find 'names' in scope\n        result.append(names[index])\n \
    \                     ^~~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let min = min(arr)\n    let max = max(arr)\n    var arr2 = arr.sorted()\n\
    \    arr2.reverse()\n    var result = [String]()\n    for i in arr2 {\n      \
    \  let index = min + Int(i) - 1\n        result.append(names[index])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkh7e4jes.swift:20:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpkh7e4jes.swift:21:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpkh7e4jes.swift:27:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let sortedArr = arr.sorted()\n    let reversedArr = sortedArr.reversed()\n\
    \    var result = [String]()\n    for i in reversedArr {\n        let index =\
    \ sortedArr.index(of: i)\n        result.append(String(sortedArr[index]))\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgkwqn10q.swift:24:31: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = sortedArr.index(of: i)\n         \
    \                     ^\n/tmp/tmpgkwqn10q.swift:24:31: note: use 'firstIndex(of:)'\
    \ instead\n        let index = sortedArr.index(of: i)\n                      \
    \        ^~~~~\n                              firstIndex\n/tmp/tmpgkwqn10q.swift:25:40:\
    \ error: value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<Int>.Index' (aka 'Int')\n        result.append(String(sortedArr[index]))\n\
    \                                       ^\n/tmp/tmpgkwqn10q.swift:24:13: note:\
    \ short-circuit using 'guard' to exit this function early if the optional value\
    \ contains 'nil'\n        let index = sortedArr.index(of: i)\n            ^\n\
    \        guard                              else { return <#default value#> }\n\
    /tmp/tmpgkwqn10q.swift:24:31: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n        let index = sortedArr.index(of: i)\n\
    \                              ^\n                                           ??\
    \ <#default value#>\n/tmp/tmpgkwqn10q.swift:24:31: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n        let index =\
    \ sortedArr.index(of: i)\n                              ^\n                  \
    \                        !\n/tmp/tmpgkwqn10q.swift:25:40: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n        result.append(String(sortedArr[index]))\n\
    \                                       ^\n                                  \
    \           ?? <#default value#>\n/tmp/tmpgkwqn10q.swift:25:40: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        result.append(String(sortedArr[index]))\n\
    \                                       ^\n                                  \
    \          !\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = min(arr)\n    let max = max(arr)\n\
    \    let arr2 = arr.filter{$0 >= min && $0 <= max}\n    arr2.reverse()\n    for\
    \ i in arr2 {\n        let index = arr2.index(of: i)\n        result.append(names[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4ysbl4gw.swift:23:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp4ysbl4gw.swift:24:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    let sortedArr = arr.sorted()\n    let reverseArr = sortedArr.reversed()\n\
    \    var result = [String]()\n    for i in reverseArr {\n        let index = sortedArr.index(of:\
    \ i)!\n        result.append(names[index])\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3wwes808.swift:26:31: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = sortedArr.index(of: i)!\n        \
    \                      ^\n/tmp/tmp3wwes808.swift:26:31: note: use 'firstIndex(of:)'\
    \ instead\n        let index = sortedArr.index(of: i)!\n                     \
    \         ^~~~~\n                              firstIndex\n/tmp/tmp3wwes808.swift:27:23:\
    \ error: cannot find 'names' in scope\n        result.append(names[index])\n \
    \                     ^~~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    var result = [String]()\n    var index = 0\n    while index < arr.count\
    \ {\n        let value = arr[index]\n        if value < 1 || value > 9 {\n   \
    \         index += 1\n            continue\n        }\n        let index = index\
    \ / 10\n        let digit = index % 10\n        let name = ones[digit]\n     \
    \   result.append(name)\n        index += 1\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcf2d5r37.swift:30:20: error: cannot find 'ones' in scope\n    \
    \    let name = ones[digit]\n                   ^~~~\n/tmp/tmpcf2d5r37.swift:32:15:\
    \ error: left side of mutating operator isn't mutable: 'index' is a 'let' constant\n\
    \        index += 1\n        ~~~~~ ^\n/tmp/tmpcf2d5r37.swift:28:9: note: change\
    \ 'let' to 'var' to make it mutable\n        let index = index / 10\n        ^~~\n\
    \        var\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    \n    var result: [String] = []\n    var resultReverse: [Int] = []\n\
    \    \n    for i in arr {\n        if i <= 9 {\n            result.append(String(format:\
    \ \"%d\\\"\", i))\n        } else {\n            resultReverse.append(i)\n   \
    \     }\n    }\n    \n    result.reverse()\n    \n    for i in resultReverse {\n\
    \        let index = result.index(of: String(format: \"%d\\\"\", i))\n       \
    \ result[index] = result[index].capitalized\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp32709gm1.swift:26:33: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"%d\\\"\", i))\n                                ^~~~~~~\n                 \
    \                repeating       count: \n/tmp/tmp32709gm1.swift:35:44: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \        let index = result.index(of: String(format: \"%d\\\"\", i))\n       \
    \                                    ^~~~~~~\n                               \
    \             repeating       count: \n/tmp/tmp32709gm1.swift:36:39: error: reference\
    \ to member 'capitalized' cannot be resolved without a contextual type\n     \
    \   result[index] = result[index].capitalized\n                              \
    \        ^\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    var min = 1\n    var max = 9\n    var min_index\
    \ = 0\n    var max_index = 0\n    var min_value = arr[min_index]\n    var max_value\
    \ = arr[max_index]\n    for index in 0..<arr.count {\n        let value = arr[index]\n\
    \        if value < min_value {\n            min_value = value\n            min_index\
    \ = index\n        }\n        if value > max_value {\n            max_value =\
    \ value\n            max_index = index\n        }\n    }\n    if min_value ==\
    \ max_value {\n        result.append(\"One\")\n    } else {\n        result.append(\"\
    One\")\n        result.append(\"Two\")\n        result.append(\"Three\")\n   \
    \     result.append(\"Four\")\n        result.append(\"Five\")\n        result.append(\"\
    Six\")\n        result.append(\"Seven\")\n        result.append(\"Eight\")\n \
    \       result.append(\"Nine\")\n        result.append(\"Ten\")\n        result.append(\"\
    Eleven\")\n        result.append(\"Twelve\")\n        result.append(\"Thirteen\"\
    )\n        result.append(\"Fourteen\")\n        result.append(\"Fifteen\")\n \
    \       result.append(\"Sixteen\")\n        result.append(\"Seventeen\")\n   \
    \     result.append(\"Eighteen\")\n        result.append(\"Nineteen\")\n     \
    \   result.append(\"Twenty\")\n        result.append(\"Twenty-one\")\n       \
    \ result.append(\"Twenty-two\")\n        result.append(\"Twenty-three\")\n   \
    \     result.append(\"Twenty-four\")\n        result.append(\"Twenty-five\")\n\
    \        result.append(\"Twenty-six\")\n        result.append(\"Twenty-seven\"\
    )\n        result.append(\"Twenty-eight\")\n        result.append(\"Twenty-nine\"\
    )\n        result.append(\"Thirty\")\n        result.append(\"Thirty-one\")\n\
    \        result.append(\"Thirty-two\")\n        result.append(\"Thirty-three\"\
    )\n        result.append(\"Thirty-four\")\n        result.append(\"Thirty-five\"\
    )\n        result.append(\"Thirty-six\")\n        result.append(\"Thirty-seven\"\
    )\n        result.append(\"Thirty-eight\")\n        result.append(\"Thirty-nine\"\
    )\n        result.append(\"Fourty\")\n        result.append(\"Fourty-one\")\n\
    \        result.append(\"Fourty-two\")\n        result.append(\"Fourty-three\"\
    )\n        result.append(\"Fourty-four\")\n        result.append(\"Fourty-five\"\
    )\n        result.append(\"Fourty-six\")\n        result.append(\"Fourty-seven\"\
    )\n        result.append(\"Fourty-eight\")\n        result.append(\"Fourty-nine\"\
    )\n        result.append(\"Fifty\")\n        result.append(\"Fifty-one\")\n  \
    \      result.append(\"Fifty-two\")\n        result.append(\"Fifty-three\")\n\
    \        result.append(\"Fifty-four\")\n        result.append(\"F\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpx870p9qr.swift:97:23: error: unterminated string literal\n    \
    \    result.append(\"F\n                      ^\n/tmp/tmpx870p9qr.swift:117:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmpx870p9qr.swift:18:40: note: to match this\
    \ opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n                    \
    \                   ^\n/tmp/tmpx870p9qr.swift:97:23: error: missing argument for\
    \ parameter #1 in call\n        result.append(\"F\n                      ^\n \
    \                     <#String#>\nSwift.Array:6:37: note: 'append' declared here\n\
    \    @inlinable public mutating func append(_ newElement: __owned Element)\n \
    \                                   ^\n/tmp/tmpx870p9qr.swift:101:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = 1\n    let max = 9\n    var index\
    \ = 0\n    while index < arr.count {\n        let value = arr[index]\n       \
    \ if value < min || value > max {\n            index += 1\n            continue\n\
    \        }\n        let digit = value - min\n        let index = index / 10\n\
    \        let digitStr = String(digit)\n        let digitName = digitStr.characters.reversed().map\
    \ { name[Int($0)] }\n        result.append(digitName.joined())\n        index\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzmco8dpy.swift:35:62: error: cannot find 'name' in scope\n    \
    \    let digitName = digitStr.characters.reversed().map { name[Int($0)] }\n  \
    \                                                           ^~~~\n/tmp/tmpzmco8dpy.swift:37:15:\
    \ error: left side of mutating operator isn't mutable: 'index' is a 'let' constant\n\
    \        index += 1\n        ~~~~~ ^\n/tmp/tmpzmco8dpy.swift:33:9: note: change\
    \ 'let' to 'var' to make it mutable\n        let index = index / 10\n        ^~~\n\
    \        var\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    var result = [String]()\n    var len = arr.count\n    var min = arr.minElement()\n\
    \    var max = arr.maxElement()\n    var one = String(Int(min))\n    var two =\
    \ String(Int(max))\n    var one_index = arr.index(min)\n    var two_index = arr.index(max)\n\
    \    var one_len = one.count\n    var two_len = two.count\n    var one_start =\
    \ one_index - one_len\n    var two_start = two_index - two_len\n    var one_end\
    \ = one_index + one_len\n    var two_end = two_index + two_len\n    var one_str\
    \ = String(arr[one_start:one_end])\n    var two_str = String(arr[two_start:two_end])\n\
    \    var one_int = Int(one_str)\n    var two_int = Int(two_str)\n    if one_int\
    \ == 9 {\n        one_str = String(Int(min))\n        one_int = Int(one_str)\n\
    \    }\n    if two_int == 9 {\n        two_str = String(Int(max))\n        two_int\
    \ = Int(two_str)\n    }\n    if one_int == 9 {\n        one_str = String(Int(min))\n\
    \        one_int = Int(one_str)\n    }\n    if two_int == 9 {\n        two_str\
    \ = String(Int(max))\n        two_int = Int(two_str)\n    }\n    if one_int ==\
    \ 9 {\n        one_str = String(Int(min))\n        one_int = Int(one_str)\n  \
    \  }\n    if two_int == 9 {\n        two_str = String(Int(max))\n        two_int\
    \ = Int(two_str)\n    }\n    if one_int == 9 {\n        one_str = String(Int(min))\n\
    \        one_int = Int(one_str)\n    }\n    if two_int == 9 {\n        two_str\
    \ = String(Int(max))\n        two_int = Int(two_str)\n    }\n    if one_int ==\
    \ 9 {\n        one_str = String(Int(min))\n        one_int = Int(one_str)\n  \
    \  }\n    if two_int == 9 {\n        two_str = String(Int(max))\n        two_int\
    \ = Int(two_str)\n    }\n    if one_int == 9 {\n        one_str = String(Int(min))\n\
    \        one_int = Int(one_str)\n    }\n    if two_int == 9 {\n        two_str\
    \ = String(Int(max))\n        two_int = Int(two_str)\n    }\n    if one_int ==\
    \ 9 {\n        one_str = String(Int(min))\n        one_int = Int(one_str)\n  \
    \  }\n    if two_int == 9 {\n        two_str = String(Int(max))\n        two_int\
    \ = Int(two_str)\n    }\n    if one_int == 9 {\n        one_str = String(Int(min))\n\
    \        one_int = Int(one_str)\n    }\n    if \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3wa_xnef.swift:100:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n/tmp/tmp3wa_xnef.swift:24:19: error: value\
    \ of type '[Int]' has no member 'minElement'\n    var min = arr.minElement()\n\
    \              ~~~ ^~~~~~~~~~\n/tmp/tmp3wa_xnef.swift:25:19: error: value of type\
    \ '[Int]' has no member 'maxElement'\n    var max = arr.maxElement()\n       \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmp3wa_xnef.swift:28:25: error: no exact matches\
    \ in call to instance method 'index'\n    var one_index = arr.index(min)\n   \
    \                     ^\n/tmp/tmp3wa_xnef.swift:28:25: note: found candidate with\
    \ type '(Int) -> Int'\n    var one_index = arr.index(min)\n                  \
    \      ^\n/tmp/tmp3wa_xnef.swift:28:25: note: found candidate with type '(Int)\
    \ -> Int'\n    var one_index = arr.index(min)\n                        ^\n/tmp/tmp3wa_xnef.swift:28:25:\
    \ note: found candidate with type '(Int) -> Array<Int>.Index?' (aka '(Int) ->\
    \ Optional<Int>')\n    var one_index = arr.index(min)\n                      \
    \  ^\n/tmp/tmp3wa_xnef.swift:29:25: error: no exact matches in call to instance\
    \ method 'index'\n    var two_index = arr.index(max)\n                       \
    \ ^\n/tmp/tmp3wa_xnef.swift:29:25: note: found candidate with type '(Int) -> Int'\n\
    \    var two_index = arr.index(max)\n                        ^\n/tmp/tmp3wa_xnef.swift:29:25:\
    \ note: found candidate with type '(Int) -> Int'\n    var two_index = arr.index(max)\n\
    \                        ^\n/tmp/tmp3wa_xnef.swift:29:25: note: found candidate\
    \ with type '(Int) -> Array<Int>.Index?' (aka '(Int) -> Optional<Int>')\n    var\
    \ two_index = arr.index(max)\n                        ^\n/tmp/tmp3wa_xnef.swift:36:29:\
    \ error: extraneous argument label 'one_start:' in subscript\n    var one_str\
    \ = String(arr[one_start:one_end])\n                            ^~~~~~~~~~~\n\
    \                             \n/tmp/tmp3wa_xnef.swift:37:29: error: extraneous\
    \ argument label 'two_start:' in subscript\n    var two_str = String(arr[two_start:two_end])\n\
    \                            ^~~~~~~~~~~\n                             \n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = arr[0]\n    let max = arr[0]\n\
    \    for number in arr {\n        if number > max {\n            max = number\n\
    \        }\n        if number < min {\n            min = number\n        }\n \
    \   }\n    var reversedArray = [Int]()\n    for i in 0..<arr.count {\n       \
    \ reversedArray.append(arr[i])\n    }\n    reversedArray.reverse()\n    for i\
    \ in 0..<reversedArray.count {\n        let index = reversedArray[i]\n       \
    \ let digit = String(index)\n        if digit == \"0\" {\n            digit =\
    \ \"One\"\n        } else if digit == \"1\" {\n            digit = \"Two\"\n \
    \       } else if digit == \"2\" {\n            digit = \"Three\"\n        } else\
    \ if digit == \"3\" {\n            digit = \"Four\"\n        } else if digit ==\
    \ \"4\" {\n            digit = \"Five\"\n        } else if digit == \"5\" {\n\
    \            digit = \"Six\"\n        } else if digit == \"6\" {\n           \
    \ digit = \"Seven\"\n        } else if digit == \"7\" {\n            digit = \"\
    Eight\"\n        } else if digit == \"8\" {\n            digit = \"Nine\"\n  \
    \      }\n        result.append(digit)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwh9fnq5r.swift:27:13: error: cannot assign to value: 'max' is a\
    \ 'let' constant\n            max = number\n            ^~~\n/tmp/tmpwh9fnq5r.swift:24:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpwh9fnq5r.swift:30:13: error: cannot assign to value: 'min' is\
    \ a 'let' constant\n            min = number\n            ^~~\n/tmp/tmpwh9fnq5r.swift:23:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpwh9fnq5r.swift:42:13: error: cannot assign to value: 'digit'\
    \ is a 'let' constant\n            digit = \"One\"\n            ^~~~~\n/tmp/tmpwh9fnq5r.swift:40:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let digit = String(index)\n\
    \        ^~~\n        var\n/tmp/tmpwh9fnq5r.swift:44:13: error: cannot assign\
    \ to value: 'digit' is a 'let' constant\n            digit = \"Two\"\n       \
    \     ^~~~~\n/tmp/tmpwh9fnq5r.swift:40:9: note: change 'let' to 'var' to make\
    \ it mutable\n        let digit = String(index)\n        ^~~\n        var\n/tmp/tmpwh9fnq5r.swift:46:13:\
    \ error: cannot assign to value: 'digit' is a 'let' constant\n            digit\
    \ = \"Three\"\n            ^~~~~\n/tmp/tmpwh9fnq5r.swift:40:9: note: change 'let'\
    \ to 'var' to make it mutable\n        let digit = String(index)\n        ^~~\n\
    \        var\n/tmp/tmpwh9fnq5r.swift:48:13: error: cannot assign to value: 'digit'\
    \ is a 'let' constant\n            digit = \"Four\"\n            ^~~~~\n/tmp/tmpwh9fnq5r.swift:40:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let digit = String(index)\n\
    \        ^~~\n        var\n/tmp/tmpwh9fnq5r.swift:50:13: error: cannot assign\
    \ to value: 'digit' is a 'let' constant\n            digit = \"Five\"\n      \
    \      ^~~~~\n/tmp/tmpwh9fnq5r.swift:40:9: note: change 'let' to 'var' to make\
    \ it mutable\n        let digit = String(index)\n        ^~~\n        var\n/tmp/tmpwh9fnq5r.swift:52:13:\
    \ error: cannot assign to value: 'digit' is a 'let' constant\n            digit\
    \ = \"Six\"\n            ^~~~~\n/tmp/tmpwh9fnq5r.swift:40:9: note: change 'let'\
    \ to 'var' to make it mutable\n        let digit "
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = min(arr)\n    let max = max(arr)\n\
    \    var i = 0\n    while i < arr.count {\n        if arr[i] < min {\n       \
    \     i += 1\n            continue\n        }\n        if arr[i] > max {\n   \
    \         i += 1\n            continue\n        }\n        result.append(name[arr[i]\
    \ - 1])\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3v51bacq.swift:23:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp3v51bacq.swift:24:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp3v51bacq.swift:35:23: error: cannot find 'name' in scope\n    \
    \    result.append(name[arr[i] - 1])\n                      ^~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    \n    let min = 1\n    let max = 9\n  \
    \  \n    let sortedArr = arr.sorted()\n    let reversedArr = sortedArr.reversed()\n\
    \    \n    for i in 0..<reversedArr.count {\n        let digit = reversedArr[i]\n\
    \        let index = min + digit - min\n        result.append(digitNames[index])\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmps8r2k7pz.swift:31:32: error: no exact matches in call to subscript\
    \ \n        let digit = reversedArr[i]\n                               ^\nSwift.ReversedCollection:9:23:\
    \ note: candidate expects value of type 'ReversedCollection<[Int]>.Index' for\
    \ parameter #1 (got 'Int')\n    @inlinable public subscript(position: ReversedCollection<Base>.Index)\
    \ -> ReversedCollection<Base>.Element { get }\n                      ^\nSwift.Collection:2:23:\
    \ note: candidate expects value of type 'Range<ReversedCollection<[Int]>.Index>'\
    \ for parameter #1 (got 'Int')\n    @inlinable public subscript(bounds: Range<Self.Index>)\
    \ -> Slice<Self> { get }\n                      ^\nSwift.Collection:3:23: note:\
    \ candidate expects value of type '(UnboundedRange_) -> ()' for parameter #1 (got\
    \ 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence\
    \ { get }\n                      ^\n/tmp/tmps8r2k7pz.swift:33:23: error: cannot\
    \ find 'digitNames' in scope\n        result.append(digitNames[index])\n     \
    \                 ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let len = arr.count\n    var result = [String]()\n    var i = 0\n   \
    \ while i < len {\n        let j = len - 1\n        while j > i {\n          \
    \  if arr[i] > arr[j] {\n                let temp = arr[i]\n                arr[i]\
    \ = arr[j]\n                arr[j] = temp\n            }\n            j -= 1\n\
    \        }\n        i += 1\n    }\n    for index in 0..<arr.count {\n        let\
    \ num = arr[index]\n        let name = ones[Int(num)]\n        result.append(name)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4a4ycfxz.swift:28:20: error: cannot assign through subscript: 'arr'\
    \ is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n\
    /tmp/tmp4a4ycfxz.swift:29:20: error: cannot assign through subscript: 'arr' is\
    \ a 'let' constant\n                arr[j] = temp\n                ~~~^\n/tmp/tmp4a4ycfxz.swift:31:15:\
    \ error: left side of mutating operator isn't mutable: 'j' is a 'let' constant\n\
    \            j -= 1\n            ~ ^\n/tmp/tmp4a4ycfxz.swift:24:9: note: change\
    \ 'let' to 'var' to make it mutable\n        let j = len - 1\n        ^~~\n  \
    \      var\n/tmp/tmp4a4ycfxz.swift:37:20: error: cannot find 'ones' in scope\n\
    \        let name = ones[Int(num)]\n                   ^~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let min = 1\n    let max = 9\n    var result = [String]()\n    for n\
    \ in arr {\n        if min <= n && n <= max {\n            result.append(name(n))\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpl2_6vocm.swift:25:27: error: cannot find 'name' in scope\n    \
    \        result.append(name(n))\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let sortedArr = arr.sorted()\n    let reverseArr = sortedArr.reversed()\n\
    \    var result = [String]()\n    for element in reverseArr {\n        let index\
    \ = element.description.characters.firstIndex(of: \"0\")\n        if index !=\
    \ nil {\n            result.append(element.description[index!])\n        } else\
    \ {\n            result.append(element.description)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyn8ldbpk.swift:24:41: error: 'characters' is unavailable: Please\
    \ use String directly\n        let index = element.description.characters.firstIndex(of:\
    \ \"0\")\n                                        ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpyn8ldbpk.swift:26:46: error: subscript\
    \ 'subscript(_:)' requires that 'String.Index' conform to 'RangeExpression'\n\
    \            result.append(element.description[index!])\n                    \
    \                         ^\nSwift.String:5:12: note: where 'R' = 'String.Index'\n\
    \    public subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound\
    \ == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    let sorted = arr.sorted()\n    let reversed = sorted.reversed()\n\
    \    var result = [String]()\n    for i in 0..<reversed.count {\n        let digit\
    \ = reversed[i]\n        if digit < 10 {\n            result.append(String(digit))\n\
    \        } else {\n            let index = digit - 10\n            result.append(by_digit(sorted[index]))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp05h61011.swift:26:29: error: no exact matches in call to subscript\
    \ \n        let digit = reversed[i]\n                            ^\nSwift.ReversedCollection:9:23:\
    \ note: candidate expects value of type 'ReversedCollection<[Int]>.Index' for\
    \ parameter #1 (got 'Int')\n    @inlinable public subscript(position: ReversedCollection<Base>.Index)\
    \ -> ReversedCollection<Base>.Element { get }\n                      ^\nSwift.Collection:2:23:\
    \ note: candidate expects value of type 'Range<ReversedCollection<[Int]>.Index>'\
    \ for parameter #1 (got 'Int')\n    @inlinable public subscript(bounds: Range<Self.Index>)\
    \ -> Slice<Self> { get }\n                      ^\nSwift.Collection:3:23: note:\
    \ candidate expects value of type '(UnboundedRange_) -> ()' for parameter #1 (got\
    \ 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence\
    \ { get }\n                      ^\n/tmp/tmp05h61011.swift:31:27: error: cannot\
    \ find 'by_digit' in scope\n            result.append(by_digit(sorted[index]))\n\
    \                          ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let min = arr.min()!\n    let max = arr.max()!\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= min && i <= max {\n            result.append(String(format:\
    \ \"%@\", i))\n        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp40vyj2ou.swift:25:33: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"%@\", i))\n                                ^~~~~~~\n                     \
    \            repeating     count: \n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    var\
    \ lengths: [Int] = []\n    for number in arr {\n        if number < 1 || number\
    \ > 9 {\n            continue\n        }\n        lengths.append(number)\n   \
    \ }\n    lengths.sort()\n    for number in lengths {\n        let index = lengths.index(of:\
    \ number)\n        result.append(String(describing: One[index]))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqpi95q95.swift:29:29: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = lengths.index(of: number)\n      \
    \                      ^\n/tmp/tmpqpi95q95.swift:29:29: note: use 'firstIndex(of:)'\
    \ instead\n        let index = lengths.index(of: number)\n                   \
    \         ^~~~~\n                            firstIndex\n/tmp/tmpqpi95q95.swift:30:42:\
    \ error: cannot find 'One' in scope\n        result.append(String(describing:\
    \ One[index]))\n                                         ^~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = min(arr)\n    let max = max(arr)\n\
    \    var i = 0\n    while i < arr.count {\n        if arr[i] >= min && arr[i]\
    \ <= max {\n            result.append(name[arr[i] - min])\n        }\n       \
    \ i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp70mc2a3m.swift:23:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp70mc2a3m.swift:24:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp70mc2a3m.swift:28:27: error: cannot find 'name' in scope\n    \
    \        result.append(name[arr[i] - min])\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let min = min(arr)\n    let max = max(arr)\n    var result = [String]()\n\
    \    for n in arr {\n        if min <= n && n <= max {\n            result.append(String(format:\
    \ \"%@\", n))\n        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmplbizax28.swift:20:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmplbizax28.swift:21:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmplbizax28.swift:25:33: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"%@\", n))\n                                ^~~~~~~\n                     \
    \            repeating     count: \n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    var result = [String]()\n    var i = 0\n    while i < arr.count {\n \
    \       let value = arr[i]\n        if value < 1 || value > 9 {\n            i\
    \ += 1\n            continue\n        }\n        let index = value - 1 + 10\n\
    \        result.append(names[index])\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3ogdkmpx.swift:29:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    \n    let min = min(arr)\n    let max =\
    \ max(arr)\n    \n    let arr1 = arr.filter{$0 >= min && $0 <= max}\n    let arr2\
    \ = arr1.reverse()\n    \n    for i in arr2 {\n        let index = arr1.index(of:\
    \ i)\n        let name = one[index] ?? \"One\"\n        result.append(name)\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5t1p96aj.swift:24:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp5t1p96aj.swift:25:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp5t1p96aj.swift:32:20: error: cannot find 'one' in scope\n     \
    \   let name = one[index] ?? \"One\"\n                   ^~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let ones = arr.filter{$0 >= 1}\n    let\
    \ tens = arr.filter{$0 >= 10}\n    let hundreds = arr.filter{$0 >= 100}\n    let\
    \ thousands = arr.filter{$0 >= 1000}\n    let millions = arr.filter{$0 >= 1000000}\n\
    \    let billions = arr.filter{$0 >= 1000000000}\n    let trillions = arr.filter{$0\
    \ >= 1000000000000}\n    let quadrillions = arr.filter{$0 >= 1000000000000000}\n\
    \    let quintillions = arr.filter{$0 >= 1000000000000000000}\n    let thousandsTens\
    \ = arr.filter{$0 >= 1000 && $0 < 1000*1000}\n    let thousandsHundreds = arr.filter{$0\
    \ >= 1000 && $0 < 1000*1000*1000}\n    let thousandsThousands = arr.filter{$0\
    \ >= 1000 && $0 < 1000*1000*1000*1000}\n    let millionsBillions = arr.filter{$0\
    \ >= 1000000 && $0 < 1000000*1000000}\n    let millionsTrillions = arr.filter{$0\
    \ >= 1000000 && $0 < 1000000*1000000*1000000}\n    let millionsQuadrillions =\
    \ arr.filter{$0 >= 1000000 && $0 < 1000000*1000000*1000000*1000000}\n    let millionsQuintillions\
    \ = arr.filter{$0 >= 1000000 && $0 < 1000000*1000000*1000000*1000000*1000000}\n\
    \    let millionsThousandsBillions = arr.filter{$0 >= 1000000 && $0 < 1000000*1000000*1000000*1000000*1000000*1000000}\n\
    \    let millionsThousandsTrillions = arr.filter{$0 >= 1000000 && $0 < 1000000*1000000*1000000*1000000*1000000*1000000}\n\
    \    let millionsThousandsQuadrillions = arr.filter{$0 >= 1000000 && $0 < 1000000*1000000*1000000*1000000*1000000*1000000*1000000}\n\
    \    let millionsThousandsQuintillions = arr.filter{$0 >= 1000000 && $0 < 1000000*1000000*1000000*1000000*1000000*1000000*1000000*1000000}\n\
    \    let millionsThousandsHundreds = arr.filter{$0 >= 1000000 && $0 < 1000000*1000000*1000000*1000000*1000000*1000000*1000000*1000000*1000000}\n\
    \    let millionsThousandsTens = arr.filter{$0 >= 1000000 && $0 < \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg23ie01t.swift:45:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpg23ie01t.swift:64:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmpg23ie01t.swift:18:40:\
    \ note: to match this opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n\
    \                                       ^\n/tmp/tmpg23ie01t.swift:48:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let len = arr.count\n    var result = [String]()\n    for i in 0..<len\
    \ {\n        let value = arr[i]\n        if value < 1 || value > 9 {\n       \
    \     continue\n        }\n        let index = value - 10\n        result.append(names[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvqea5f2e.swift:28:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    var result = [String]()\n    var index = 0\n    while index < arr.count\
    \ {\n        let value = arr[index]\n        if value < 1 || value > 9 {\n   \
    \         index += 1\n            continue\n        }\n        let index = arr.index(of:\
    \ value)\n        if index == nil {\n            index += 1\n            continue\n\
    \        }\n        let start = index! - 1\n        let end = index! + 1\n   \
    \     let reversed = arr[start..<end].reversed()\n        let reversedString =\
    \ reversed.map { $0.description }\n        result = result.appendContentsOf(reversedString)\n\
    \        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfrdw4oka.swift:28:25: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = arr.index(of: value)\n           \
    \             ^\n/tmp/tmpfrdw4oka.swift:28:25: note: use 'firstIndex(of:)' instead\n\
    \        let index = arr.index(of: value)\n                        ^~~~~\n   \
    \                     firstIndex\n/tmp/tmpfrdw4oka.swift:30:13: error: cannot\
    \ convert value of type 'Array<Int>.Index?' (aka 'Optional<Int>') to expected\
    \ argument type 'Int'\n            index += 1\n            ^\n               \
    \  !\n/tmp/tmpfrdw4oka.swift:37:25: error: value of type '[String]' has no member\
    \ 'appendContentsOf'\n        result = result.appendContentsOf(reversedString)\n\
    \                 ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpfrdw4oka.swift:38:9: error:\
    \ cannot convert value of type 'Array<Int>.Index?' (aka 'Optional<Int>') to expected\
    \ argument type 'Int'\n        index += 1\n        ^\n             !\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let min = arr.min()!\n    let max = arr.max()!\n    var result = [String]()\n\
    \    for number in arr {\n        let index = number - min\n        result.append(String(index))\n\
    \    }\n    result.reverse()\n    for number in result {\n        if number ==\
    \ \"0\" {\n            result.remove(at: result.index(of: number))\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcdpyvfck.swift:30:38: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n            result.remove(at: result.index(of: number))\n     \
    \                                ^\n/tmp/tmpcdpyvfck.swift:30:38: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         result.remove(at: result.index(of: number))\n                      \
    \               ^\n                                                       ?? <#default\
    \ value#>\n/tmp/tmpcdpyvfck.swift:30:38: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n            result.remove(at:\
    \ result.index(of: number))\n                                     ^\n        \
    \                                              !\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    \n   \
    \ if arr.isEmpty {\n        return result\n    }\n    \n    let min = min(arr)\n\
    \    let max = max(arr)\n    \n    var index = 0\n    while index < arr.count\
    \ {\n        let value = arr[index]\n        \n        if value < min {\n    \
    \        index = index + 1\n            continue\n        }\n        \n      \
    \  if value > max {\n            index = index + 1\n            continue\n   \
    \     }\n        \n        let index = index + 1\n        \n        if index ==\
    \ arr.count {\n            break\n        }\n        \n        let value = arr[index]\n\
    \        \n        let name = valueToName(value)\n        \n        result.append(name)\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxq573pus.swift:25:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpxq573pus.swift:26:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpxq573pus.swift:48:13: error: invalid redeclaration of 'value'\n\
    \        let value = arr[index]\n            ^\n/tmp/tmpxq573pus.swift:30:13:\
    \ note: 'value' previously declared here\n        let value = arr[index]\n   \
    \         ^\n/tmp/tmpxq573pus.swift:50:20: error: cannot find 'valueToName' in\
    \ scope\n        let name = valueToName(value)\n                   ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    let sorted = arr.sorted()\n    let reversed = sorted.reversed()\n\
    \    let result: [String] = []\n    let one = \"One\"\n    let two = \"Two\"\n\
    \    let three = \"Three\"\n    let four = \"Four\"\n    let five = \"Five\"\n\
    \    let six = \"Six\"\n    let seven = \"Seven\"\n    let eight = \"Eight\"\n\
    \    let nine = \"Nine\"\n    for number in reversed {\n        switch number\
    \ {\n        case 1:\n            result.append(one)\n        case 2:\n      \
    \      result.append(two)\n        case 3:\n            result.append(three)\n\
    \        case 4:\n            result.append(four)\n        case 5:\n         \
    \   result.append(five)\n        case 6:\n            result.append(six)\n   \
    \     case 7:\n            result.append(seven)\n        case 8:\n           \
    \ result.append(eight)\n        case 9:\n            result.append(nine)\n   \
    \     default:\n            break\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpywzi5v8m.swift:37:20: error: cannot use mutating member on immutable\
    \ value: 'result' is a 'let' constant\n            result.append(one)\n      \
    \      ~~~~~~ ^\n/tmp/tmpywzi5v8m.swift:24:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let result: [String] = []\n    ^~~\n    var\n/tmp/tmpywzi5v8m.swift:39:20:\
    \ error: cannot use mutating member on immutable value: 'result' is a 'let' constant\n\
    \            result.append(two)\n            ~~~~~~ ^\n/tmp/tmpywzi5v8m.swift:24:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result: [String] = []\n\
    \    ^~~\n    var\n/tmp/tmpywzi5v8m.swift:41:20: error: cannot use mutating member\
    \ on immutable value: 'result' is a 'let' constant\n            result.append(three)\n\
    \            ~~~~~~ ^\n/tmp/tmpywzi5v8m.swift:24:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let result: [String] = []\n    ^~~\n    var\n/tmp/tmpywzi5v8m.swift:43:20:\
    \ error: cannot use mutating member on immutable value: 'result' is a 'let' constant\n\
    \            result.append(four)\n            ~~~~~~ ^\n/tmp/tmpywzi5v8m.swift:24:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result: [String] = []\n\
    \    ^~~\n    var\n/tmp/tmpywzi5v8m.swift:45:20: error: cannot use mutating member\
    \ on immutable value: 'result' is a 'let' constant\n            result.append(five)\n\
    \            ~~~~~~ ^\n/tmp/tmpywzi5v8m.swift:24:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let result: [String] = []\n    ^~~\n    var\n/tmp/tmpywzi5v8m.swift:47:20:\
    \ error: cannot use mutating member on immutable value: 'result' is a 'let' constant\n\
    \            result.append(six)\n            ~~~~~~ ^\n/tmp/tmpywzi5v8m.swift:24:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result: [String] = []\n\
    \    ^~~\n    var\n/tmp/tmpywzi5v8m.swift:49:20: error: cannot use mutating member\
    \ on immutable value: 'result' is a 'let' constant\n            result.append(seven)\n\
    \            ~~~~~~ ^\n/tmp/tmpywzi5v8m.swift:24:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let result: [String] = []\n    ^~~\n    var\n/tmp/tmpywzi5v8m.swift:51:20:\
    \ err"
  stdout: ''
  timestamp: 1660014172
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = 1\n    let max = 9\n    var i\
    \ = 0\n    while i < arr.count {\n        if arr[i] < min {\n            i +=\
    \ 1\n            continue\n        }\n        if arr[i] > max {\n            i\
    \ += 1\n            continue\n        }\n        let index = arr[i] - min\n  \
    \      if index == 0 {\n            result.append(String(index))\n        } else\
    \ {\n            result.append(String(index))\n            result.append(String(max\
    \ - index))\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmp_31yxzso/tmp_31yxzso.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31ce940c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31ce637b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31ce637988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31ce6367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_31yxzso                        0x000055d3fd41e8d1 <unavailable> + 6353

    5    libc.so.6                          0x00002b31ceb2c460 __libc_start_main +
    245

    6    tmp_31yxzso                        0x000055d3fd41e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    \n   \
    \ if arr.isEmpty {\n        return result\n    }\n    \n    let min = arr[0]\n\
    \    let max = arr[0]\n    \n    for n in arr {\n        if n > max {\n      \
    \      max = n\n        }\n        if n < min {\n            min = n\n       \
    \ }\n    }\n    \n    let range = (max - min) + 1\n    \n    let ones = Array(1...range).map\
    \ { String($0) }\n    let tens = Array(10...range).map { String($0) }\n    \n\
    \    let onesReverse = ones.reversed()\n    let tensReverse = tens.reversed()\n\
    \    \n    let onesReversed = onesReverse.map { Int($0) }\n    let tensReversed\
    \ = tensReverse.map { Int($0) }\n    \n    let onesReversedSorted = onesReversed.sorted()\n\
    \    let tensReversedSorted = tensReversed.sorted()\n    \n    let onesReversedSortedString\
    \ = onesReversedSorted.map { ones[$0] }\n    let tensReversedSortedString = tensReversedSorted.map\
    \ { tens[$0] }\n    \n    let onesReversedSortedStringString = onesReversedSortedString.map\
    \ { String($0) }\n    let tensReversedSortedStringString = tensReversedSortedString.map\
    \ { String($0) }\n    \n    let onesReversedSortedStringStringString = onesReversedSortedStringString.map\
    \ { ones[$0] }\n    let tensReversedSortedStringStringString = tensReversedSortedStringString.map\
    \ { tens[$0] }\n    \n    let onesReversedSortedStringStringStringString = onesReversedSortedStringStringStringString.map\
    \ { ones[$0] }\n    let tensReversedSortedStringStringStringString = tensReversedSortedStringStringStringString.map\
    \ { tens[$0] }\n    \n    let onesReversedSortedStringStringStringStringString\
    \ = onesReversedSortedStringStringStringStringString.map { ones[$0] }\n    let\
    \ tensReversedSortedStringStringStringStringString = tensReversedSortedStringStringStringStringStringString.map\
    \ { tens[$0] }\n    \n    let onesReversedSortedStringStringStringStringStringStringString\
    \ = onesReversedSortedStringStringStringStringStringStringStringString.map { ones[$0]\
    \ }\n    let tensReversedSortedStringStringStringStringStringStringString = tensReversedSortedStringStringStringStringStringStringStringString.map\
    \ { tens[$0] }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpled86fb1.swift:30:13: error: cannot assign to value: 'max' is a\
    \ 'let' constant\n            max = n\n            ^~~\n/tmp/tmpled86fb1.swift:26:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpled86fb1.swift:33:13: error: cannot assign to value: 'min' is\
    \ a 'let' constant\n            min = n\n            ^~~\n/tmp/tmpled86fb1.swift:25:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpled86fb1.swift:48:30: error: referencing instance method 'sorted()'\
    \ on 'Sequence' requires that 'Int?' conform to 'Comparable'\n    let onesReversedSorted\
    \ = onesReversed.sorted()\n                             ^\n/tmp/tmpled86fb1.swift:48:30:\
    \ note: wrapped type 'Int' satisfies this requirement; did you mean to unwrap?\n\
    \    let onesReversedSorted = onesReversed.sorted()\n                        \
    \     ^\nSwift.Sequence:1:11: note: where 'Self.Element' = 'Int?'\nextension Sequence\
    \ where Self.Element : Comparable {\n          ^\n/tmp/tmpled86fb1.swift:49:30:\
    \ error: referencing instance method 'sorted()' on 'Sequence' requires that 'Int?'\
    \ conform to 'Comparable'\n    let tensReversedSorted = tensReversed.sorted()\n\
    \                             ^\n/tmp/tmpled86fb1.swift:49:30: note: wrapped type\
    \ 'Int' satisfies this requirement; did you mean to unwrap?\n    let tensReversedSorted\
    \ = tensReversed.sorted()\n                             ^\nSwift.Sequence:1:11:\
    \ note: where 'Self.Element' = 'Int?'\nextension Sequence where Self.Element :\
    \ Comparable {\n          ^\n/tmp/tmpled86fb1.swift:60:54: error: use of local\
    \ variable 'onesReversedSortedStringStringStringString' before its declaration\n\
    \    let onesReversedSortedStringStringStringString = onesReversedSortedStringStringStringString.map\
    \ { ones[$0] }\n                                                     ^\n/tmp/tmpled86fb1.swift:60:9:\
    \ note: 'onesReversedSortedStringStringStringString' declared here\n    let onesReversedSortedStringStringStringString\
    \ = onesReversedSortedStringStringStringString.map { ones[$0] }\n        ^\n/tmp/tmp"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    \n    let min = 1\n    let max = 9\n  \
    \  \n    let minIndex = arr.index(of: min)\n    let maxIndex = arr.index(of: max)\n\
    \    \n    if minIndex == nil || maxIndex == nil {\n        return result\n  \
    \  }\n    \n    let minValue = arr[minIndex!]\n    let maxValue = arr[maxIndex!]\n\
    \    \n    if minValue > maxValue {\n        return result\n    }\n    \n    let\
    \ minString = \"One\"\n    let maxString = \"Nine\"\n    \n    let minIndex =\
    \ arr.index(of: minValue)\n    let maxIndex = arr.index(of: maxValue)\n    \n\
    \    if minIndex == nil || maxIndex == nil {\n        return result\n    }\n \
    \   \n    let minValue = arr[minIndex!]\n    let maxValue = arr[maxIndex!]\n \
    \   \n    if minValue > maxValue {\n        return result\n    }\n    \n    let\
    \ minString = \"One\"\n    let maxString = \"Nine\"\n    \n    let minIndex =\
    \ arr.index(of: minValue)\n    let maxIndex = arr.index(of: maxValue)\n    \n\
    \    if minIndex == nil || maxIndex == nil {\n        return result\n    }\n \
    \   \n    let minValue = arr[minIndex!]\n    let maxValue = arr[maxIndex!]\n \
    \   \n    if minValue > maxValue {\n        return result\n    }\n    \n    let\
    \ minString = \"One\"\n    let maxString = \"Nine\"\n    \n    let minIndex =\
    \ arr.index(of: minValue)\n    let maxIndex = arr.index(of: maxValue)\n    \n\
    \    if minIndex == nil || maxIndex == nil {\n        return result\n    }\n \
    \   \n    let minValue = arr[minIndex!]\n    let maxValue = arr[maxIndex!]\n \
    \   \n    if minValue > maxValue {\n        return result\n    }\n    \n    let\
    \ minString = \"One\"\n    let maxString = \"Nine\"\n    \n    let minIndex =\
    \ arr.index(of: minValue)\n    let maxIndex = arr.index(of: maxValue)\n    \n\
    \    if minIndex == nil || maxIndex == nil {\n        return result\n    }\n \
    \   \n    let minValue = arr[minIndex!]\n    let maxValue = arr[maxIndex!]\n \
    \   \n    if minValue > maxValue {\n        return result\n    }\n    \n    let\
    \ minString = \"One\"\n    let maxString = \"Nine\"\n    \n    let minIndex =\
    \ arr.index(of: minValue)\n    let maxIndex = arr.index(of: maxValue)\n    \n\
    \    if minIndex == nil || maxIndex == nil {\n        return result\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdnwrvb2u.swift:137:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmpdnwrvb2u.swift:18:40:\
    \ note: to match this opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n\
    \                                       ^\n/tmp/tmpdnwrvb2u.swift:27:24: warning:\
    \ 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n    let minIndex =\
    \ arr.index(of: min)\n                       ^\n/tmp/tmpdnwrvb2u.swift:27:24:\
    \ note: use 'firstIndex(of:)' instead\n    let minIndex = arr.index(of: min)\n\
    \                       ^~~~~\n                       firstIndex\n/tmp/tmpdnwrvb2u.swift:28:24:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n    let maxIndex\
    \ = arr.index(of: max)\n                       ^\n/tmp/tmpdnwrvb2u.swift:28:24:\
    \ note: use 'firstIndex(of:)' instead\n    let maxIndex = arr.index(of: max)\n\
    \                       ^~~~~\n                       firstIndex\n/tmp/tmpdnwrvb2u.swift:44:24:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n    let minIndex\
    \ = arr.index(of: minValue)\n                       ^\n/tmp/tmpdnwrvb2u.swift:44:24:\
    \ note: use 'firstIndex(of:)' instead\n    let minIndex = arr.index(of: minValue)\n\
    \                       ^~~~~\n                       firstIndex\n/tmp/tmpdnwrvb2u.swift:44:9:\
    \ error: invalid redeclaration of 'minIndex'\n    let minIndex = arr.index(of:\
    \ minValue)\n        ^\n/tmp/tmpdnwrvb2u.swift:27:9: note: 'minIndex' previously\
    \ declared here\n    let minIndex = arr.index(of: min)\n        ^\n/tmp/tmpdnwrvb2u.swift:45:24:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n    let maxIndex\
    \ = arr.index(of: maxValue)\n                       ^\n/tmp/tmpdnwrvb2u.swift:45:24:\
    \ note: use 'firstIndex(of:)' instead\n    let maxIndex = arr.index(of: maxValue)\n\
    \                       ^~~~~\n                       firstIndex\n/tmp/tmpdnwrvb2u.swift:45:9:\
    \ error: invalid redeclaration of 'maxIndex'\n    let maxIndex = arr.index(of:\
    \ maxValue)\n        ^\n/tmp/tm"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = min(arr)\n    let max = max(arr)\n\
    \    let len = max - min + 1\n    var i = 0\n    for n in arr {\n        if n\
    \ < min {\n            continue\n        }\n        if n > max {\n           \
    \ break\n        }\n        let index = len - i\n        result.append(String(format:\
    \ \"%@\", arr[index]))\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe8ly62yd.swift:23:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpe8ly62yd.swift:24:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpe8ly62yd.swift:25:25: error: binary operator '+' cannot be applied\
    \ to operands of type 'Duration' and 'Int'\n    let len = max - min + 1\n    \
    \          ~~~~~~~~~ ^ ~\n/tmp/tmpe8ly62yd.swift:25:25: note: overloads for '+'\
    \ exist with these partially matching parameter lists: (Duration, Duration), (Int,\
    \ Int)\n    let len = max - min + 1\n                        ^\n/tmp/tmpe8ly62yd.swift:35:29:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \        result.append(String(format: \"%@\", arr[index]))\n                 \
    \           ^~~~~~~\n                             repeating     count: \n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let maxLength = arr.maxElement()\n    let\
    \ minLength = arr.minElement()\n    let minLengthString = String(minLength)\n\
    \    let maxLengthString = String(maxLength)\n    let minLengthStringLength =\
    \ minLengthString.characters.count\n    let maxLengthStringLength = maxLengthString.characters.count\n\
    \    if minLengthStringLength > maxLengthStringLength {\n        return by_length(arr)\n\
    \    }\n    if minLengthStringLength < maxLengthStringLength {\n        let reversedArr\
    \ = reverseArray(arr)\n        let reversedArr = reversedArr.map { String($0)\
    \ }\n        let reversedArr = reversedArr.map { String($0) }\n        let reversedArr\
    \ = reversedArr.map { String($0) }\n        let reversedArr = reversedArr.map\
    \ { String($0) }\n        let reversedArr = reversedArr.map { String($0) }\n \
    \       let reversedArr = reversedArr.map { String($0) }\n        let reversedArr\
    \ = reversedArr.map { String($0) }\n        let reversedArr = reversedArr.map\
    \ { String($0) }\n        let reversedArr = reversedArr.map { String($0) }\n \
    \       let reversedArr = reversedArr.map { String($0) }\n        let reversedArr\
    \ = reversedArr.map { String($0) }\n        let reversedArr = reversedArr.map\
    \ { String($0) }\n        let reversedArr = reversedArr.map { String($0) }\n \
    \       let reversedArr = reversedArr.map { String($0) }\n        let reversedArr\
    \ = reversedArr.map { String($0) }\n        let reversedArr = reversedArr.map\
    \ { String($0) }\n        let reversedArr = reversedArr.map { String($0) }\n \
    \       let reversedArr = reversedArr.map { String($0) }\n        let reversedArr\
    \ = reversedArr.map { String($0) }\n        let reversedArr = reversedArr.map\
    \ { String($0) }\n        let reversedArr = reversedArr.map { String($0) }\n \
    \       let reversedArr = reversedArr.map { String($0) }\n        let reversedArr\
    \ = reversedArr.map { String($0) }\n        let reversedArr = reversedArr.map\
    \ { String($0) }\n        let reversedArr = reversedArr.map { String($0) }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbz48g255.swift:78:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmpbz48g255.swift:18:40:\
    \ note: to match this opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n\
    \                                       ^\n/tmp/tmpbz48g255.swift:23:25: error:\
    \ value of type '[Int]' has no member 'maxElement'\n    let maxLength = arr.maxElement()\n\
    \                    ~~~ ^~~~~~~~~~\n/tmp/tmpbz48g255.swift:24:25: error: value\
    \ of type '[Int]' has no member 'minElement'\n    let minLength = arr.minElement()\n\
    \                    ~~~ ^~~~~~~~~~\n/tmp/tmpbz48g255.swift:30:26: error: missing\
    \ argument label 'arr:' in call\n        return by_length(arr)\n             \
    \            ^\n                         arr: \n/tmp/tmpbz48g255.swift:33:27:\
    \ error: cannot find 'reverseArray' in scope\n        let reversedArr = reverseArray(arr)\n\
    \                          ^~~~~~~~~~~~\n/tmp/tmpbz48g255.swift:62:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var temp\
    \ = [Int]()\n    var i = 0\n    for num in arr {\n        if num > 9 {\n     \
    \       temp.append(num - 10)\n        } else {\n            temp.append(num)\n\
    \        }\n    }\n    temp.sort()\n    for num in temp {\n        result.append(names[num])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpew0xhdd5.swift:31:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[num])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: -1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = 1\n    let max = 9\n    var min_index\
    \ = 0\n    var max_index = arr.count - 1\n    while min_index <= max_index {\n\
    \        let mid = min_index + (max_index - min_index) / 2\n        let mid_index\
    \ = mid - 1\n        let mid_value = arr[mid_index]\n        if mid_value < min\
    \ {\n            min_index = mid_index + 1\n            continue\n        }\n\
    \        if mid_value > max {\n            max_index = mid_index - 1\n       \
    \     continue\n        }\n        let mid_string = String(mid_value)\n      \
    \  if mid_string == \"1\" {\n            result.append(String(min))\n        \
    \    min_index += 1\n            continue\n        }\n        if mid_string ==\
    \ \"9\" {\n            result.append(String(max))\n            max_index -= 1\n\
    \            continue\n        }\n        let mid_string_length = String(mid_value).count\n\
    \        if mid_string_length == 1 {\n            result.append(String(mid_value))\n\
    \            continue\n        }\n        if mid_string_length > 1 {\n       \
    \     result.append(String(mid_value))\n        }\n        min_index += 1\n  \
    \      max_index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014178
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let sortedArr = arr.sorted()\n    let reversedArr = sortedArr.reversed()\n\
    \    var result = [String]()\n    for i in reversedArr {\n        let index =\
    \ sortedArr.index(of: i)\n        let name = oneToNine[index]\n        result.append(name)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkyccdwbq.swift:24:31: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = sortedArr.index(of: i)\n         \
    \                     ^\n/tmp/tmpkyccdwbq.swift:24:31: note: use 'firstIndex(of:)'\
    \ instead\n        let index = sortedArr.index(of: i)\n                      \
    \        ^~~~~\n                              firstIndex\n/tmp/tmpkyccdwbq.swift:25:20:\
    \ error: cannot find 'oneToNine' in scope\n        let name = oneToNine[index]\n\
    \                   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let min = arr[0]\n    let max = arr[0]\n    for n in arr {\n        if\
    \ n > max {\n            max = n\n        } else if n < min {\n            min\
    \ = n\n        }\n    }\n    var result = [String]()\n    for n in arr {\n   \
    \     if n > max {\n            n = max\n        } else if n < min {\n       \
    \     n = min\n        }\n        result.append(String(format: \"%@\", n))\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp071qt6az.swift:24:13: error: cannot assign to value: 'max' is a\
    \ 'let' constant\n            max = n\n            ^~~\n/tmp/tmp071qt6az.swift:21:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmp071qt6az.swift:26:13: error: cannot assign to value: 'min' is\
    \ a 'let' constant\n            min = n\n            ^~~\n/tmp/tmp071qt6az.swift:20:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmp071qt6az.swift:32:13: error: cannot assign to value: 'n' is\
    \ a 'let' constant\n            n = max\n            ^\n/tmp/tmp071qt6az.swift:34:13:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n            n = min\n\
    \            ^\n/tmp/tmp071qt6az.swift:36:29: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n        result.append(String(format:\
    \ \"%@\", n))\n                            ^~~~~~~\n                         \
    \    repeating     count: \n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = 1\n    let max = 9\n    let minStr\
    \ = String(min)\n    let maxStr = String(max)\n    let minIndex = arr.index(of:\
    \ min)\n    let maxIndex = arr.index(of: max)\n    let minStr = String(minIndex)\n\
    \    let maxStr = String(maxIndex)\n    let minArr = arr[minIndex..<maxIndex]\n\
    \    let maxArr = arr[maxIndex..<minIndex]\n    let minStr = String(minArr)\n\
    \    let maxStr = String(maxArr)\n    let minArr = arr[minIndex..<maxIndex]\n\
    \    let maxArr = arr[maxIndex..<minIndex]\n    let minStr = String(minArr)\n\
    \    let maxStr = String(maxArr)\n    let minArr = arr[minIndex..<maxIndex]\n\
    \    let maxArr = arr[maxIndex..<minIndex]\n    let minStr = String(minArr)\n\
    \    let maxStr = String(maxArr)\n    let minArr = arr[minIndex..<maxIndex]\n\
    \    let maxArr = arr[maxIndex..<minIndex]\n    let minStr = String(minArr)\n\
    \    let maxStr = String(maxArr)\n    let minArr = arr[minIndex..<maxIndex]\n\
    \    let maxArr = arr[maxIndex..<minIndex]\n    let minStr = String(minArr)\n\
    \    let maxStr = String(maxArr)\n    let minArr = arr[minIndex..<maxIndex]\n\
    \    let maxArr = arr[maxIndex..<minIndex]\n    let minStr = String(minArr)\n\
    \    let maxStr = String(maxArr)\n    let minArr = arr[minIndex..<maxIndex]\n\
    \    let maxArr = arr[maxIndex..<minIndex]\n    let minStr = String(minArr)\n\
    \    let maxStr = String(maxArr)\n    let minArr = arr[minIndex..<maxIndex]\n\
    \    let maxArr = arr[maxIndex..<minIndex]\n    let minStr = String(minArr)\n\
    \    let maxStr = String(maxArr)\n    let minArr = arr[minIndex..<maxIndex]\n\
    \    let maxArr = arr[maxIndex..<minIndex]\n    let minStr = String(minArr)\n\
    \    let maxStr = String(maxArr)\n    let minArr = arr[minIndex..<maxIndex]\n\
    \    let maxArr = arr[maxIndex..<minIndex]\n    let minStr = String(minArr)\n\
    \    let maxStr = String(maxArr)\n    let minArr = arr[minIndex..<maxIndex]\n\
    \    let maxArr = arr[maxIndex..<minIndex]\n    let minStr = String(minArr)\n\
    \    let maxStr = String(maxArr)\n    let minAr\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqiv4s0h6.swift:27:24: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n    let minIndex = arr.index(of: min)\n              \
    \         ^\n/tmp/tmpqiv4s0h6.swift:27:24: note: use 'firstIndex(of:)' instead\n\
    \    let minIndex = arr.index(of: min)\n                       ^~~~~\n       \
    \                firstIndex\n/tmp/tmpqiv4s0h6.swift:28:24: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n    let maxIndex = arr.index(of:\
    \ max)\n                       ^\n/tmp/tmpqiv4s0h6.swift:28:24: note: use 'firstIndex(of:)'\
    \ instead\n    let maxIndex = arr.index(of: max)\n                       ^~~~~\n\
    \                       firstIndex\n/tmp/tmpqiv4s0h6.swift:29:18: error: no exact\
    \ matches in call to initializer \n    let minStr = String(minIndex)\n       \
    \          ^\nSwift.String:4:23: note: found candidate with type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>')\n    @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible\n\
    \                      ^\nSwift.String:2:12: note: found candidate with type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>')\n    public init<T>(_ value: T, radix: Int = 10, uppercase:\
    \ Bool = false) where T : BinaryInteger\n           ^\nSwift.String:2:12: note:\
    \ incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n \
    \   public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:6:12:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')\n\
    \    public init<Subject>(reflecting subject: Subject)\n           ^\n/tmp/tmpqiv4s0h6.swift:30:18:\
    \ error: no exact matches in call to initializer \n    let maxStr = String(maxIndex)\n\
    \                 ^\nSwift.String:4:23: note: found candidate with type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>')\n    @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible\n\
    \                      ^\nSwift.String:2:12: note: found candidate with type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>')\n    public init<T>(_ value: T, radix: Int = 10, uppercase:\
    \ Bool = false) where T : BinaryInteger\n           ^\nSwift.S"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = arr[0]\n    let max = arr[0]\n\
    \    for element in arr {\n        if element > max {\n            max = element\n\
    \        }\n        if element < min {\n            min = element\n        }\n\
    \    }\n    var reversed = [Int]()\n    for i in 0..<arr.count {\n        reversed.append(max\
    \ - arr[i])\n    }\n    for i in 0..<arr.count {\n        result.append(names[reversed[i]])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbai6tkbr.swift:27:13: error: cannot assign to value: 'max' is a\
    \ 'let' constant\n            max = element\n            ^~~\n/tmp/tmpbai6tkbr.swift:24:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpbai6tkbr.swift:30:13: error: cannot assign to value: 'min' is\
    \ a 'let' constant\n            min = element\n            ^~~\n/tmp/tmpbai6tkbr.swift:23:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpbai6tkbr.swift:38:23: error: cannot find 'names' in scope\n\
    \        result.append(names[reversed[i]])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    \n   \
    \ if arr.isEmpty {\n        return result\n    }\n    \n    let min = arr[0]\n\
    \    let max = arr[0]\n    \n    for number in arr {\n        if number > max\
    \ {\n            max = number\n        }\n        if number < min {\n        \
    \    min = number\n        }\n    }\n    \n    let range = (max - min) + 1\n \
    \   \n    for i in 0..<range.count {\n        let index = min + i\n        let\
    \ number = arr[index]\n        \n        let name = getName(number)\n        \n\
    \        result.append(name)\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp41xzun33.swift:30:13: error: cannot assign to value: 'max' is a\
    \ 'let' constant\n            max = number\n            ^~~\n/tmp/tmp41xzun33.swift:26:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmp41xzun33.swift:33:13: error: cannot assign to value: 'min' is\
    \ a 'let' constant\n            min = number\n            ^~~\n/tmp/tmp41xzun33.swift:25:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmp41xzun33.swift:39:24: error: value of type 'Int' has no member\
    \ 'count'\n    for i in 0..<range.count {\n                 ~~~~~ ^~~~~\n/tmp/tmp41xzun33.swift:43:20:\
    \ error: cannot find 'getName' in scope\n        let name = getName(number)\n\
    \                   ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var i\
    \ = 0\n    while i < arr.count {\n        if arr[i] >= 1 && arr[i] <= 9 {\n  \
    \          result.append(name[arr[i] - 1])\n            i += 1\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2rr2rptl.swift:23:27: error: cannot find 'name' in scope\n    \
    \        result.append(name[arr[i] - 1])\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    \n   \
    \ if arr.isEmpty {\n        return result\n    }\n    \n    let min = arr.min()!\n\
    \    let max = arr.max()!\n    \n    if min == max {\n        return [\"One\"\
    ]\n    }\n    \n    let length = max - min + 1\n    \n    if length < 10 {\n \
    \       let ones = Array(repeating: String(format: \"%0*d\", 0, length), count:\
    \ length)\n        return ones + arr\n    }\n    \n    let tens = Array(repeating:\
    \ String(format: \"%0*d\", 0, length), count: 10)\n    let tensReversed = tens.reversed()\n\
    \    \n    let ones = Array(repeating: String(format: \"%0*d\", 0, length), count:\
    \ length)\n    let onesReversed = ones.reversed()\n    \n    let twos = Array(repeating:\
    \ String(format: \"%0*d\", 0, length), count: length)\n    let twosReversed =\
    \ twos.reversed()\n    \n    let threes = Array(repeating: String(format: \"%0*d\"\
    , 0, length), count: length)\n    let threesReversed = threes.reversed()\n   \
    \ \n    let fours = Array(repeating: String(format: \"%0*d\", 0, length), count:\
    \ length)\n    let foursReversed = fours\n    \n    let fives = Array(repeating:\
    \ String(format: \"%0*d\", 0, length), count: length)\n    let fivesReversed =\
    \ fives.reversed()\n    \n    let sixes = Array(repeating: String(format: \"%0*d\"\
    , 0, length), count: length)\n    let sixesReversed = sixes.reversed()\n    \n\
    \    let sevens = Array(repeating: String(format: \"%0*d\", 0, length), count:\
    \ length)\n    let sevensReversed = sevens.reversed()\n    \n    let eights =\
    \ Array(repeating: String(format: \"%0*d\", 0, length), count: length)\n    let\
    \ eightsReversed = eights.reversed()\n    \n    let nines = Array(repeating: String(format:\
    \ \"%0*d\", 0, length), count: length)\n    let ninesReversed = nines.reversed()\n\
    \    \n    let tensReversedAndOnes = tensReversed + ones\n    let onesReversedAndTens\
    \ = onesReversed + tens\n    let twosReversedAndOnes = twosReversed + ones\n \
    \   let threesReversedAndOnes = threesReversed + ones\n    let foursReversedAndOnes\
    \ = foursReversed + ones\n    let fivesReversedAndOnes = fivesReversed + ones\n\
    \    let sixesReversedAndOnes = six\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpklo11fj8.swift:35:43: error: incorrect argument labels in call\
    \ (have 'format:_:_:', expected '_:radix:uppercase:')\n        let ones = Array(repeating:\
    \ String(format: \"%0*d\", 0, length), count: length)\n                      \
    \                    ^~~~~~~~~\n                                             \
    \              radix:  uppercase: \n/tmp/tmpklo11fj8.swift:36:21: error: binary\
    \ operator '+' cannot be applied to operands of type '[String]' and '[Int]'\n\
    \        return ones + arr\n               ~~~~ ^ ~~~\n/tmp/tmpklo11fj8.swift:39:39:\
    \ error: incorrect argument labels in call (have 'format:_:_:', expected '_:radix:uppercase:')\n\
    \    let tens = Array(repeating: String(format: \"%0*d\", 0, length), count: 10)\n\
    \                                      ^~~~~~~~~\n                           \
    \                            radix:  uppercase: \n/tmp/tmpklo11fj8.swift:39:59:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \ let tens = Array(repeating: String(format: \"%0*d\", 0, length), count: 10)\n\
    \                                                          ^\n               \
    \                                           (      != 0)\n/tmp/tmpklo11fj8.swift:39:33:\
    \ error: initializer 'init(_:radix:uppercase:)' requires that 'String' conform\
    \ to 'BinaryInteger'\n    let tens = Array(repeating: String(format: \"%0*d\"\
    , 0, length), count: 10)\n                                ^\nSwift.String:2:12:\
    \ note: where 'T' = 'String'\n    public init<T>(_ value: T, radix: Int = 10,\
    \ uppercase: Bool = false) where T : BinaryInteger\n           ^\n/tmp/tmpklo11fj8.swift:42:39:\
    \ error: incorrect argument labels in call (have 'format:_:_:', expected '_:radix:uppercase:')\n\
    \    let ones = Array(repeating: String(format: \"%0*d\", 0, length), count: length)\n\
    \                                      ^~~~~~~~~\n                           \
    \                            radix:  uppercase: \n/tmp/tmpklo11fj8.swift:45:39:\
    \ error: incorrect argument labels in call (have 'format:_:_:', expected '_:radix:uppercase:')\n\
    \    let twos = Array(repeating: String(format: \"%0*d\", 0, l"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    var min = arr[0]\n    var max = arr[0]\n\
    \    for value in arr {\n        if value < min {\n            min = value\n \
    \       } else if value > max {\n            max = value\n        }\n    }\n \
    \   if min == max {\n        return [\"One\"]\n    }\n    var reversed = reverseArray(arr)\n\
    \    var reversedStrings = reversed\n        .map { String($0) }\n        .map\
    \ { String($0) }\n        .map { String($0) }\n        .map { String($0) }\n \
    \       .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String(\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqzshnjpd.swift:91:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpqzshnjpd.swift:110:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmpqzshnjpd.swift:18:40:\
    \ note: to match this opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n\
    \                                       ^\n/tmp/tmpqzshnjpd.swift:35:20: error:\
    \ cannot find 'reverseArray' in scope\n    var reversed = reverseArray(arr)\n\
    \                   ^~~~~~~~~~~~\n/tmp/tmpqzshnjpd.swift:36:27: error: the compiler\
    \ is unable to type-check this expression in reasonable time; try breaking up\
    \ the expression into distinct sub-expressions\n    var reversedStrings = reversed\n\
    \                          ^~~~~~~~\n/tmp/tmpqzshnjpd.swift:94:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014239
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    let len = arr.count\n    let min = arr.min()!\n    let max = arr.max()!\n\
    \    let arr2 = arr.map { $0 < min ? $0 - min : $0 }\n    let arr3 = arr2.map\
    \ { $0 < max ? $0 - max : $0 }\n    let arr4 = arr3.map { $0 < 10 ? $0 : \"One\"\
    }\n    let arr5 = arr4.map { $0 < 10 ? $0 : \"Two\"}\n    let arr6 = arr5.map\
    \ { $0 < 10 ? $0 : \"Three\"}\n    let arr7 = arr6.map { $0 < 10 ? $0 : \"Four\"\
    }\n    let arr8 = arr7.map { $0 < 10 ? $0 : \"Five\"}\n    let arr9 = arr8.map\
    \ { $0 < 10 ? $0 : \"Six\"}\n    let arr10 = arr9.map { $0 < 10 ? $0 : \"Seven\"\
    }\n    let arr11 = arr10.map { $0 < 10 ? $0 : \"Eight\"}\n    let arr12 = arr11.map\
    \ { $0 < 10 ? $0 : \"Nine\"}\n    return arr12\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmptv3qfppu.swift:27:37: error: result values in '? :' expression\
    \ have mismatching types 'Int' and 'String'\n    let arr4 = arr3.map { $0 < 10\
    \ ? $0 : \"One\"}\n                                    ^~\n/tmp/tmptv3qfppu.swift:28:37:\
    \ error: result values in '? :' expression have mismatching types 'Int' and 'String'\n\
    \    let arr5 = arr4.map { $0 < 10 ? $0 : \"Two\"}\n                         \
    \           ^~\n/tmp/tmptv3qfppu.swift:29:37: error: result values in '? :' expression\
    \ have mismatching types 'Int' and 'String'\n    let arr6 = arr5.map { $0 < 10\
    \ ? $0 : \"Three\"}\n                                    ^~\n/tmp/tmptv3qfppu.swift:30:37:\
    \ error: result values in '? :' expression have mismatching types 'Int' and 'String'\n\
    \    let arr7 = arr6.map { $0 < 10 ? $0 : \"Four\"}\n                        \
    \            ^~\n/tmp/tmptv3qfppu.swift:31:37: error: result values in '? :' expression\
    \ have mismatching types 'Int' and 'String'\n    let arr8 = arr7.map { $0 < 10\
    \ ? $0 : \"Five\"}\n                                    ^~\n/tmp/tmptv3qfppu.swift:32:37:\
    \ error: result values in '? :' expression have mismatching types 'Int' and 'String'\n\
    \    let arr9 = arr8.map { $0 < 10 ? $0 : \"Six\"}\n                         \
    \           ^~\n/tmp/tmptv3qfppu.swift:33:38: error: result values in '? :' expression\
    \ have mismatching types 'Int' and 'String'\n    let arr10 = arr9.map { $0 < 10\
    \ ? $0 : \"Seven\"}\n                                     ^~\n/tmp/tmptv3qfppu.swift:34:39:\
    \ error: result values in '? :' expression have mismatching types 'Int' and 'String'\n\
    \    let arr11 = arr10.map { $0 < 10 ? $0 : \"Eight\"}\n                     \
    \                 ^~\n/tmp/tmptv3qfppu.swift:35:39: error: result values in '?\
    \ :' expression have mismatching types 'Int' and 'String'\n    let arr12 = arr11.map\
    \ { $0 < 10 ? $0 : \"Nine\"}\n                                      ^~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let sortedArr = arr.sorted()\n    let reverseArr = sortedArr.reversed()\n\
    \    var result = [String]()\n    for number in reverseArr {\n        switch number\
    \ {\n        case 1:\n            result.append(contentsOf: [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"])\n \
    \       case 2:\n            result.append(contentsOf: [\"Two\", \"One\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"])\n        case\
    \ 3:\n            result.append(contentsOf: [\"Three\", \"Two\", \"One\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"])\n        case 4:\n     \
    \       result.append(contentsOf: [\"Four\", \"Three\", \"Two\", \"One\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"])\n        case 5:\n            result.append(contentsOf:\
    \ [\"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"])\n        case 6:\n            result.append(contentsOf: [\"Six\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Seven\", \"Eight\", \"Nine\"\
    ])\n        case 7:\n            result.append(contentsOf: [\"Seven\", \"Six\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Eight\", \"Nine\"])\n   \
    \     case 8:\n            result.append(contentsOf: [\"Eight\", \"Seven\", \"\
    Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Nine\"])\n        case\
    \ 9:\n            result.append(contentsOf: [\"Nine\", \"Eight\", \"Seven\", \"\
    Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"])\n        default:\n \
    \           break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpeuse3cz1/tmpeuse3cz1.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf3db69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf3d860b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf3d860988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf3d85f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeuse3cz1                        0x00005598e845c9f1 <unavailable> + 6641

    5    libc.so.6                          0x00002abf3dd55460 __libc_start_main +
    245

    6    tmpeuse3cz1                        0x00005598e845c499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    \n    var result = [String]()\n    \n    let one = String(format: \"\
    One\")\n    let two = String(format: \"Two\")\n    let three = String(format:\
    \ \"Three\")\n    let four = String(format: \"Four\")\n    let five = String(format:\
    \ \"Five\")\n    let six = String(format: \"Six\")\n    let seven = String(format:\
    \ \"Seven\")\n    let eight = String(format: \"Eight\")\n    let nine = String(format:\
    \ \"Nine\")\n    \n    for i in arr {\n        switch i {\n        case 1:\n \
    \           result.append(one)\n        case 2:\n            result.append(two)\n\
    \        case 3:\n            result.append(three)\n        case 4:\n        \
    \    result.append(four)\n        case 5:\n            result.append(five)\n \
    \       case 6:\n            result.append(six)\n        case 7:\n           \
    \ result.append(seven)\n        case 8:\n            result.append(eight)\n  \
    \      case 9:\n            result.append(nine)\n        default:\n          \
    \  break\n        }\n    }\n    \n    return result.reversed()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpp4yazm_6.swift:23:15: error: no exact matches in call to initializer\
    \ \n    let one = String(format: \"One\")\n              ^\nSwift.String:4:23:\
    \ note: incorrect labels for candidate (have: '(format:)', expected: '(_:)')\n\
    \    @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible\n\
    \                      ^\nSwift.String:3:12: note: incorrect labels for candidate\
    \ (have: '(format:)', expected: '(_:)')\n    public init<S>(_ other: S) where\
    \ S : LosslessStringConvertible, S : Sequence, S.Element == Character\n      \
    \     ^\nSwift.String:4:12: note: incorrect labels for candidate (have: '(format:)',\
    \ expected: '(_:)')\n    public init<S>(_ characters: S) where S : Sequence, S.Element\
    \ == Character\n           ^\nSwift.RangeReplaceableCollection:3:23: note: incorrect\
    \ labels for candidate (have: '(format:)', expected: '(_:)')\n    @inlinable public\
    \ init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element\n     \
    \                 ^\n/tmp/tmpp4yazm_6.swift:24:15: error: no exact matches in\
    \ call to initializer \n    let two = String(format: \"Two\")\n              ^\n\
    Swift.String:4:23: note: incorrect labels for candidate (have: '(format:)', expected:\
    \ '(_:)')\n    @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible\n\
    \                      ^\nSwift.String:3:12: note: incorrect labels for candidate\
    \ (have: '(format:)', expected: '(_:)')\n    public init<S>(_ other: S) where\
    \ S : LosslessStringConvertible, S : Sequence, S.Element == Character\n      \
    \     ^\nSwift.String:4:12: note: incorrect labels for candidate (have: '(format:)',\
    \ expected: '(_:)')\n    public init<S>(_ characters: S) where S : Sequence, S.Element\
    \ == Character\n           ^\nSwift.RangeReplaceableCollection:3:23: note: incorrect\
    \ labels for candidate (have: '(format:)', expected: '(_:)')\n    @inlinable public\
    \ init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element\n     \
    \                 ^\n/tmp/tmpp4yazm_6.swift:25:17: error: no exact matches in\
    \ call to initializer \n    let three = String(format: \"Three\")\n          \
    \      ^\nSwift."
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = 1\n    let max = 9\n    var minIndex\
    \ = 0\n    var maxIndex = 0\n    var minValue = arr[minIndex]\n    var maxValue\
    \ = arr[maxIndex]\n    for index in 0..<arr.count {\n        let value = arr[index]\n\
    \        if value < minValue {\n            minIndex = index\n            minValue\
    \ = value\n        } else if value > maxValue {\n            maxIndex = index\n\
    \            maxValue = value\n        }\n    }\n    if maxIndex == 0 {\n    \
    \    return reverse(result) + [\"One\"]\n    }\n    if minIndex == 0 {\n     \
    \   return reverse(result) + [\"One\"]\n    }\n    if minIndex == maxIndex {\n\
    \        return reverse(result) + [\"One\"]\n    }\n    if maxIndex == minIndex\
    \ {\n        return reverse(result) + [\"One\"]\n    }\n    let minValue = arr[minIndex]\n\
    \    let maxValue = arr[maxIndex]\n    var minIndex = 0\n    var maxIndex = 0\n\
    \    for index in 0..<arr.count {\n        let value = arr[index]\n        if\
    \ value < minValue {\n            minIndex = index\n            minValue = value\n\
    \        } else if value > maxValue {\n            maxIndex = index\n        \
    \    maxValue = value\n        }\n    }\n    if maxIndex == 0 {\n        return\
    \ reverse(result) + [\"One\"]\n    }\n    if minIndex == 0 {\n        return reverse(result)\
    \ + [\"One\"]\n    }\n    if minIndex == maxIndex {\n        return reverse(result)\
    \ + [\"One\"]\n    }\n    if maxIndex == minIndex {\n        return reverse(result)\
    \ + [\"One\"]\n    }\n    let minValue = arr[minIndex]\n    let maxValue = arr[maxIndex]\n\
    \    var minIndex = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n\
    \        let value = arr[index]\n        if value < minValue {\n            minIndex\
    \ = index\n            minValue = value\n        } else if value > maxValue {\n\
    \            maxIndex = index\n            maxValue = value\n        }\n    }\n\
    \    if maxIndex == 0 {\n        return reverse(result) + [\"One\"]\n    }\n \
    \   if minIndex == 0 {\n        return reverse(result) + [\"One\"]\n    }\n  \
    \  if minIndex == maxIndex {\n        return reverse(result) + [\"One\"]\n   \
    \ }\n    if maxIndex == minIndex {\n        return reverse(result) + [\"One\"\
    ]\n    }\n    let minValue = arr[minIndex]\n    let maxValue = arr[maxIndex]\n\
    \    var minIndex = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n\
    \        let value = arr[index]\n        if value < minValue {\n            minIndex\
    \ = index\n            minValue = value\n        } else if value > maxValue {\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0snccxdt.swift:132:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmp0snccxdt.swift:107:32:\
    \ note: to match this opening '{'\n    for index in 0..<arr.count {\n        \
    \                       ^\n/tmp/tmp0snccxdt.swift:132:63: error: expected '}'\
    \ at end of brace statement\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"\
    Eight\", \"Four\"])\n                                                        \
    \      ^\n/tmp/tmp0snccxdt.swift:18:40: note: to match this opening '{'\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n                                      \
    \ ^\n/tmp/tmp0snccxdt.swift:40:16: error: cannot find 'reverse' in scope\n   \
    \     return reverse(result) + [\"One\"]\n               ^~~~~~~\n/tmp/tmp0snccxdt.swift:43:16:\
    \ error: cannot find 'reverse' in scope\n        return reverse(result) + [\"\
    One\"]\n               ^~~~~~~\n/tmp/tmp0snccxdt.swift:46:16: error: cannot find\
    \ 'reverse' in scope\n        return reverse(result) + [\"One\"]\n           \
    \    ^~~~~~~\n/tmp/tmp0snccxdt.swift:49:16: error: cannot find 'reverse' in scope\n\
    \        return reverse(result) + [\"One\"]\n               ^~~~~~~\n/tmp/tmp0snccxdt.swift:51:9:\
    \ error: invalid redeclaration of 'minValue'\n    let minValue = arr[minIndex]\n\
    \        ^\n/tmp/tmp0snccxdt.swift:27:9: note: 'minValue' previously declared\
    \ here\n    var minValue = arr[minIndex]\n        ^\n/tmp/tmp0snccxdt.swift:52:9:\
    \ error: invalid redeclaration of 'maxValue'\n    let maxValue = arr[maxIndex]\n\
    \        ^\n/tmp/tmp0snccxdt.swift:28:9: note: 'maxValue' previously declared\
    \ here\n    var maxValue = arr[maxIndex]\n        ^\n/tmp/tmp0snccxdt.swift:53:9:\
    \ error: invalid redeclaration of 'minIndex'\n    var minIndex = 0\n        ^\n\
    /tmp/tmp0snccxdt.swift:25:9: note: 'minIndex' previously declared here\n    var\
    \ minIndex = 0\n        ^\n/tmp/tmp0snccxdt.swift:54:9: error: invalid redeclaration\
    \ of 'maxIndex'\n    var maxIndex = 0\n        ^\n/tmp/tmp0snccxdt.swift:26:9:\
    \ note: 'maxIndex' previously declared here\n  "
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let sorted = arr.sorted()\n    let reversed = sorted.reversed()\n   \
    \ var result = [String]()\n    for i in 0..<reversed.count {\n        let index\
    \ = sorted.count - i - 1\n        result.append(reversed[index])\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9b1o89hf.swift:25:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(reversed[index])\n               ^\n\
    /tmp/tmp9b1o89hf.swift:25:16: note: candidate expects value of type 'String' for\
    \ parameter #1 (got 'Int')\n        result.append(reversed[index])\n         \
    \      ^\n/tmp/tmp9b1o89hf.swift:25:16: note: candidate expects value of type\
    \ 'String' for parameter #1 (got 'Int')\n        result.append(reversed[index])\n\
    \               ^\n/tmp/tmp9b1o89hf.swift:25:16: note: found candidate with type\
    \ '(__owned Slice<ReversedCollection<[Int]>>) -> ()'\n        result.append(reversed[index])\n\
    \               ^\n/tmp/tmp9b1o89hf.swift:25:31: error: no exact matches in call\
    \ to subscript \n        result.append(reversed[index])\n                    \
    \          ^\n/tmp/tmp9b1o89hf.swift:25:31: note: candidate expects value of type\
    \ 'ReversedCollection<[Int]>.Index' for parameter #1 (got 'Int')\n        result.append(reversed[index])\n\
    \                              ^\n/tmp/tmp9b1o89hf.swift:25:31: note: candidate\
    \ expects value of type 'Range<ReversedCollection<[Int]>.Index>' for parameter\
    \ #1 (got 'Int')\n        result.append(reversed[index])\n                   \
    \           ^\n/tmp/tmp9b1o89hf.swift:25:31: note: candidate expects value of\
    \ type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n        result.append(reversed[index])\n\
    \                              ^\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    \n    var result = [String]()\n    \n    let one = arr[0]\n    let two\
    \ = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let five = arr[4]\n\
    \    let six = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n    let\
    \ nine = arr[8]\n    \n    if one > 9 {\n        one = one - 10\n        \n  \
    \      if one == 1 {\n            result.append(one)\n        } else {\n     \
    \       result.append(one)\n            result.append(one)\n        }\n    }\n\
    \    \n    if two > 9 {\n        two = two - 10\n        \n        if two == 1\
    \ {\n            result.append(two)\n        } else {\n            result.append(two)\n\
    \            result.append(two)\n        }\n    }\n    \n    if three > 9 {\n\
    \        three = three - 10\n        \n        if three == 1 {\n            result.append(three)\n\
    \        } else {\n            result.append(three)\n            result.append(three)\n\
    \        }\n    }\n    \n    if four > 9 {\n        four = four - 10\n       \
    \ \n        if four == 1 {\n            result.append(four)\n        } else {\n\
    \            result.append(four)\n            result.append(four)\n        }\n\
    \    }\n    \n    if five > 9 {\n        five = five - 10\n        \n        if\
    \ five == 1 {\n            result.append(five)\n        } else {\n           \
    \ result.append(five)\n            result.append(five)\n        }\n    }\n   \
    \ \n    if six > 9 {\n        six = six - 10\n        \n        if six == 1 {\n\
    \            result.append(six)\n        } else {\n            result.append(six)\n\
    \            result.append(six)\n        }\n    }\n    \n    if seven > 9 {\n\
    \        seven = seven - 10\n        \n        if seven == 1 {\n            result.append(seven)\n\
    \        } else {\n            result.append(seven)\n            result.append(seven)\n\
    \        }\n    }\n    \n    if eight > 9 {\n        eight = eight - 10\n    \
    \    \n        if eight == 1 {\n            result.append(eight)\n        } else\
    \ {\n            result.append(eight)\n            result.append(eight)\n    \
    \    }\n    }\n    \n    if nine > 9 {\n        nine = nine - 10\n        \n \
    \       if nine == 1 {\n            result.append(nine)\n        } else {\n  \
    \          result.append(nine)\n            result.append(nine)\n        }\n \
    \   }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk9kwmfnw.swift:34:9: error: cannot assign to value: 'one' is a\
    \ 'let' constant\n        one = one - 10\n        ^~~\n/tmp/tmpk9kwmfnw.swift:23:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let one = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpk9kwmfnw.swift:37:27: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String'\n            result.append(one)\n       \
    \                   ^\n/tmp/tmpk9kwmfnw.swift:39:27: error: cannot convert value\
    \ of type 'Int' to expected argument type 'String'\n            result.append(one)\n\
    \                          ^\n/tmp/tmpk9kwmfnw.swift:40:27: error: cannot convert\
    \ value of type 'Int' to expected argument type 'String'\n            result.append(one)\n\
    \                          ^\n/tmp/tmpk9kwmfnw.swift:45:9: error: cannot assign\
    \ to value: 'two' is a 'let' constant\n        two = two - 10\n        ^~~\n/tmp/tmpk9kwmfnw.swift:24:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let two = arr[1]\n    ^~~\n\
    \    var\n/tmp/tmpk9kwmfnw.swift:48:27: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String'\n            result.append(two)\n       \
    \                   ^\n/tmp/tmpk9kwmfnw.swift:50:27: error: cannot convert value\
    \ of type 'Int' to expected argument type 'String'\n            result.append(two)\n\
    \                          ^\n/tmp/tmpk9kwmfnw.swift:51:27: error: cannot convert\
    \ value of type 'Int' to expected argument type 'String'\n            result.append(two)\n\
    \                          ^\n/tmp/tmpk9kwmfnw.swift:56:9: error: cannot assign\
    \ to value: 'three' is a 'let' constant\n        three = three - 10\n        ^~~~~\n\
    /tmp/tmpk9kwmfnw.swift:25:5: note: change 'let' to 'var' to make it mutable\n\
    \    let three = arr[2]\n    ^~~\n    var\n/tmp/tmpk9kwmfnw.swift:59:27: error:\
    \ cannot convert value of type 'Int' to expected argument type 'String'\n    \
    \        result.append(three)\n                          ^\n/tmp/tmpk9kwmfnw.swift:61:27:\
    \ error: cannot convert value of type 'Int' to expected argument type 'String'\n\
    \            result.append(three)\n                          ^\n/tmp"
  stdout: ''
  timestamp: 1660014173
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let min = arr.min()!\n    let max = arr.max()!\n    var result = [String]()\n\
    \    var i = 0\n    while i < arr.count {\n        if arr[i] >= min && arr[i]\
    \ <= max {\n            result.append(String(arr[i]))\n        }\n        i +=\
    \ 1\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpohaengje/tmpohaengje.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4a1260c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4a0f57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4a0f57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4a0f567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpohaengje                        0x000055ff03866a41 <unavailable> + 6721

    5    libc.so.6                          0x00002af4a144c460 __libc_start_main +
    245

    6    tmpohaengje                        0x000055ff038664e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let maxLen = arr.max()!\n    var result = [String]()\n    for n in arr\
    \ {\n        if n > 0 && n < maxLen {\n            result.append(String(format:\
    \ \"%@\", n))\n        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9oz41z67.swift:24:33: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"%@\", n))\n                                ^~~~~~~\n                     \
    \            repeating     count: \n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let sortedArr = arr.sorted()\n    let reverseArr = sortedArr.reversed()\n\
    \    var result = [String]()\n    for i in reverseArr {\n        let index = sortedArr.index(of:\
    \ i)!\n        result.append(numbers[index])\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpa7c3skjz.swift:24:31: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = sortedArr.index(of: i)!\n        \
    \                      ^\n/tmp/tmpa7c3skjz.swift:24:31: note: use 'firstIndex(of:)'\
    \ instead\n        let index = sortedArr.index(of: i)!\n                     \
    \         ^~~~~\n                              firstIndex\n/tmp/tmpa7c3skjz.swift:25:23:\
    \ error: cannot find 'numbers' in scope\n        result.append(numbers[index])\n\
    \                      ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014172
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    \n   \
    \ if arr.isEmpty {\n        return result\n    }\n    \n    let minLength = min(arr.count,\
    \ 9)\n    \n    for i in minLength..<arr.count {\n        let value = arr[i]\n\
    \        \n        if value < 1 || value > 9 {\n            continue\n       \
    \ }\n        \n        let index = value - minLength\n        \n        result.append(names[index])\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9qg6bxyi.swift:36:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    \n    var result: [String] = []\n    var temp: Int = 0\n    \n    for\
    \ i in arr {\n        if i < 10 {\n            result.append(String(format: \"\
    %d\\\"\", i))\n        } else {\n            temp = (temp * 10) + i\n        \
    \    result.append(String(format: \"%d\\\"\", temp))\n        }\n    }\n    \n\
    \    for i in result {\n        if let index = result.index(of: i) {\n       \
    \     result.remove(at: index)\n        }\n    }\n    \n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6ewl6un9.swift:26:33: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"%d\\\"\", i))\n                                ^~~~~~~\n                 \
    \                repeating       count: \n/tmp/tmp6ewl6un9.swift:29:33: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"%d\\\"\", temp))\n               \
    \                 ^~~~~~~\n                                 repeating       count:\
    \ \n/tmp/tmp6ewl6un9.swift:34:31: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = result.index(of: i) {\n       \
    \                       ^\n/tmp/tmp6ewl6un9.swift:34:31: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = result.index(of: i) {\n                    \
    \          ^~~~~\n                              firstIndex\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    var result = [String]()\n    var index = 0\n    var length = 0\n    while\
    \ index < arr.count {\n        length = arr[index]\n        if length == 1 {\n\
    \            result.append(One)\n        } else if length == 2 {\n           \
    \ result.append(Two)\n        } else if length == 3 {\n            result.append(Three)\n\
    \        } else if length == 4 {\n            result.append(Four)\n        } else\
    \ if length == 5 {\n            result.append(Five)\n        } else if length\
    \ == 6 {\n            result.append(Six)\n        } else if length == 7 {\n  \
    \          result.append(Seven)\n        } else if length == 8 {\n           \
    \ result.append(Eight)\n        } else if length == 9 {\n            result.append(Nine)\n\
    \        } else {\n            result.append(String(arr[index % 10]))\n      \
    \  }\n        index += 1\n    }\n    return result.reverse()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwssgrz8a.swift:26:27: error: cannot find 'One' in scope\n     \
    \       result.append(One)\n                          ^~~\n/tmp/tmpwssgrz8a.swift:28:27:\
    \ error: cannot find 'Two' in scope\n            result.append(Two)\n        \
    \                  ^~~\n/tmp/tmpwssgrz8a.swift:30:27: error: cannot find 'Three'\
    \ in scope\n            result.append(Three)\n                          ^~~~~\n\
    /tmp/tmpwssgrz8a.swift:32:27: error: cannot find 'Four' in scope\n           \
    \ result.append(Four)\n                          ^~~~\n/tmp/tmpwssgrz8a.swift:34:27:\
    \ error: cannot find 'Five' in scope\n            result.append(Five)\n      \
    \                    ^~~~\n/tmp/tmpwssgrz8a.swift:36:27: error: cannot find 'Six'\
    \ in scope\n            result.append(Six)\n                          ^~~\n/tmp/tmpwssgrz8a.swift:38:27:\
    \ error: cannot find 'Seven' in scope\n            result.append(Seven)\n    \
    \                      ^~~~~\n/tmp/tmpwssgrz8a.swift:40:27: error: cannot find\
    \ 'Eight' in scope\n            result.append(Eight)\n                       \
    \   ^~~~~\n/tmp/tmpwssgrz8a.swift:42:27: error: cannot find 'Nine' in scope\n\
    \            result.append(Nine)\n                          ^~~~\n/tmp/tmpwssgrz8a.swift:48:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    var result = [String]()\n    var reversed = [Int]()\n    for i in arr\
    \ {\n        if i < 1 || i > 9 {\n            continue\n        }\n        reversed.append(i)\n\
    \    }\n    for i in reversed[0..<reversed.count] {\n        let index = reversed.index(of:\
    \ i)!\n        result.append(names[index])\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdqfgj_r4.swift:29:30: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = reversed.index(of: i)!\n         \
    \                    ^\n/tmp/tmpdqfgj_r4.swift:29:30: note: use 'firstIndex(of:)'\
    \ instead\n        let index = reversed.index(of: i)!\n                      \
    \       ^~~~~\n                             firstIndex\n/tmp/tmpdqfgj_r4.swift:30:23:\
    \ error: cannot find 'names' in scope\n        result.append(names[index])\n \
    \                     ^~~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    var reversed = arr.reverse()\n    var ones\
    \ = reversed.filter{$0 % 10 == 1}\n    var tens = reversed.filter{$0 % 10 == 0}\n\
    \    var tensReversed = tens.reverse()\n    var tensReversedString = \"\"\n  \
    \  for element in tensReversed {\n        tensReversedString += String(element)\n\
    \    }\n    var tensReversedStringArray = tensReversedString.characters.split{$0\
    \ == \" \"}.map(String.init)\n    var tensReversedStringArrayLength = tensReversedStringArray.count\n\
    \    var tensReversedStringArrayLength = tensReversedStringArrayLength!\n    var\
    \ tensReversedStringArray = tensReversedStringArray.reverse()\n    var tensReversedStringArrayString\
    \ = \"\"\n    for element in tensReversedStringArray {\n        tensReversedStringArrayString\
    \ += String(element)\n    }\n    var tensReversedStringArrayStringArray = tensReversedStringArrayString.characters.split{$0\
    \ == \" \"}.map(String.init)\n    var tensReversedStringArrayStringArrayLength\
    \ = tensReversedStringArrayStringArray.count\n    var tensReversedStringArrayStringArrayLength\
    \ = tensReversedStringArrayStringArrayLength!\n    var tensReversedStringArrayStringArray\
    \ = tensReversedStringArrayStringArray.reverse()\n    var tensReversedStringArrayStringArrayString\
    \ = \"\"\n    for element in tensReversedStringArrayStringArray {\n        tensReversedStringArrayStringArrayString\
    \ += String(element)\n    }\n    var tensReversedStringArrayStringArrayStringArray\
    \ = tensReversedStringArrayStringArrayString.characters.split{$0 == \" \"}.map(String.init)\n\
    \    var tensReversedStringArrayStringArrayStringArrayLength = tensReversedStringArrayStringArrayStringArray.count\n\
    \    var tensReversedStringArrayStringArrayStringArrayLength = tensReversedStringArrayStringArrayStringArrayLength!\n\
    \    var tensReversedStringArrayStringArrayStringArray = tensReversedStringArrayStringArrayStringArray.reverse()\n\
    \    var tensReversedStringArrayStringArrayStringArrayString = \"\"\n    for element\
    \ in tensReversedStringArrayStringArrayStringArray {\n        tensReversedStringArrayStringArrayStringArrayString\
    \ += String(element)\n    }\n    var tensReversedStringArrayStringArrayStringArrayStringArray\
    \ = tensReversedStringArrayStringArrayStringArrayStringArray.reverse()\n    var\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr:\
    \ [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\"\
    , \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpo6197d8h.swift:56:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpo6197d8h.swift:23:24: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n    var reversed = arr.reverse()\n       \
    \            ~~~ ^\n/tmp/tmpo6197d8h.swift:31:54: error: 'characters' is unavailable:\
    \ Please use String directly\n    var tensReversedStringArray = tensReversedString.characters.split{$0\
    \ == \" \"}.map(String.init)\n                                               \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpo6197d8h.swift:33:70:\
    \ error: cannot force unwrap value of non-optional type 'Int'\n    var tensReversedStringArrayLength\
    \ = tensReversedStringArrayLength!\n                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                     \n/tmp/tmpo6197d8h.swift:34:9:\
    \ warning: variable 'tensReversedStringArray' inferred to have type '()', which\
    \ may be unexpected\n    var tensReversedStringArray = tensReversedStringArray.reverse()\n\
    \        ^\n/tmp/tmpo6197d8h.swift:34:9: note: add an explicit type annotation\
    \ to silence this warning\n    var tensReversedStringArray = tensReversedStringArray.reverse()\n\
    \        ^\n                               : ()\n/tmp/tmpo6197d8h.swift:34:9:\
    \ error: invalid redeclaration of 'tensReversedStringArray'\n    var tensReversedStringArray\
    \ = tensReversedStringArray.reverse()\n        ^\n/tmp/tmpo6197d8h.swift:31:9:\
    \ note: 'tensReversedStringArray' previously declared here\n    var tensReversedStringArray\
    \ = tensReversedString.characters.split{$0 == \" \"}.map(String.init)\n      \
    \  ^\n/tmp/tmpo6197d8h.swift:39:76: error: 'characters' is unavailable: Please\
    \ use String directly\n    var tensReversedStringArrayStringArray = tensReversedStringArrayString.characters.split{$0\
    \ == \" \"}.map(String.init)\n                                               \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swi"
  stdout: ''
  timestamp: 1660014173
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    var max = 0\n    for num in arr {\n   \
    \     if num > max {\n            max = num\n        }\n    }\n    for num in\
    \ arr {\n        if num == max {\n            result.append(String(num))\n   \
    \     } else {\n            result.append(String(num))\n            result.append(String(max\
    \ - num))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpxcc85_z8/tmpxcc85_z8.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50b92b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50b8faab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50b8faa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50b8fa97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxcc85_z8                        0x000055b49e218951 <unavailable> + 6481

    5    libc.so.6                          0x00002b50b949f460 __libc_start_main +
    245

    6    tmpxcc85_z8                        0x000055b49e2183f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let ones = arr.filter{ $0 < 10 }\n    let tens = arr.filter{ $0 >= 10\
    \ }\n    let tensReversed = reverseArray(tens)\n    let onesReversed = reverseArray(ones)\n\
    \    var result = [String]()\n    for number in onesReversed{\n        result.append(ones[onesReversed.index(of:\
    \ number)])\n    }\n    for number in tensReversed{\n        result.append(tens[tensReversed.index(of:\
    \ number)])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpd67bg97c.swift:22:24: error: cannot find 'reverseArray' in scope\n\
    \    let tensReversed = reverseArray(tens)\n                       ^~~~~~~~~~~~\n\
    /tmp/tmpd67bg97c.swift:23:24: error: cannot find 'reverseArray' in scope\n   \
    \ let onesReversed = reverseArray(ones)\n                       ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let sortedArr = arr.sorted(by: { $0 < $1 })\n    let reverseArr = sortedArr.reversed()\n\
    \    let resultArr = reverseArr.map { String($0) }\n    return resultArr\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpse3u2p1c/tmpse3u2p1c.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9331f42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9331c39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9331c39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9331c387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpse3u2p1c                        0x000055b30ac6f931 <unavailable> + 6449

    5    libc.so.6                          0x00002b933212e460 __libc_start_main +
    245

    6    tmpse3u2p1c                        0x000055b30ac6f3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    var index = 0\n    var min = arr[0]\n \
    \   var max = arr[0]\n    for element in arr {\n        if element < min {\n \
    \           min = element\n        }\n        if element > max {\n           \
    \ max = element\n        }\n    }\n    var minIndex = arr.index(min)\n    var\
    \ maxIndex = arr.index(max)\n    if maxIndex == minIndex {\n        return result\n\
    \    }\n    var minValue = arr[minIndex]\n    var maxValue = arr[maxIndex]\n \
    \   var minString = \"\"\n    var maxString = \"\"\n    if minIndex > 0 {\n  \
    \      minString = arr[minIndex-1]\n    }\n    if maxIndex < arr.count - 1 {\n\
    \        maxString = arr[maxIndex+1]\n    }\n    if minIndex < arr.count - 1 {\n\
    \        minString = arr[minIndex+1]\n    }\n    if maxIndex > 0 {\n        maxString\
    \ = arr[maxIndex-1]\n    }\n    if minIndex == 0 {\n        minString = \"One\"\
    \n    }\n    if maxIndex == arr.count - 1 {\n        maxString = \"Nine\"\n  \
    \  }\n    if minIndex == arr.count - 1 {\n        minString = \"One\"\n    }\n\
    \    if maxIndex == 0 {\n        maxString = \"Nine\"\n    }\n    if minIndex\
    \ == 0 {\n        minString = \"One\"\n    }\n    if maxIndex == arr.count - 1\
    \ {\n        maxString = \"Nine\"\n    }\n    if minIndex == arr.count - 1 {\n\
    \        minString = \"One\"\n    }\n    if maxIndex == 0 {\n        maxString\
    \ = \"Nine\"\n    }\n    if minIndex == 0 {\n        minString = \"One\"\n   \
    \ }\n    if maxIndex == arr.count - 1 {\n        maxString = \"Nine\"\n    }\n\
    \    if minIndex == arr.count - 1 {\n        minString = \"One\"\n    }\n    if\
    \ maxIndex == 0 {\n        maxString = \"Nine\"\n    }\n    if minIndex == 0 {\n\
    \        minString = \"One\"\n    }\n    if maxIndex == arr.count - 1 {\n    \
    \    maxString = \"Nine\"\n    }\n    if minIndex == arr.count - 1 {\n       \
    \ minString = \"One\"\n    }\n    if maxIndex == 0 {\n        maxString = \"Nine\"\
    \n    }\n    if minIndex == 0 {\n        minString = \"One\"\n    }\n    if maxIndex\
    \ == arr.count - 1 {\n        maxString = \"Nine\"\n    }\n    if minIndex ==\
    \ arr.count - 1 {\n        minString = \"One\"\n    }\n    if maxIndex == 0 {\n\
    \        maxString = \"Nine\"\n    }\n    if minIndex == 0 {\n        minString\
    \ = \"One\"\n    }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc9ywgavx.swift:34:24: error: no exact matches in call to instance\
    \ method 'index'\n    var minIndex = arr.index(min)\n                       ^\n\
    Swift.Array:7:28: note: incorrect labels for candidate (have: '(_:)', expected:\
    \ '(after:)')\n    @inlinable public func index(after i: Int) -> Int\n       \
    \                    ^\nSwift.Array:9:28: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(before:)')\n    @inlinable public func index(before\
    \ i: Int) -> Int\n                           ^\nSwift.Collection:3:28: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(of:)')\n    @inlinable public\
    \ func index(of element: Self.Element) -> Self.Index?\n                      \
    \     ^\nSwift.RandomAccessCollection:3:28: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(after:)')\n    @inlinable public func index(after\
    \ i: Self.Index) -> Self.Index\n                           ^\nSwift.RandomAccessCollection:4:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(before:)')\n\
    \    @inlinable public func index(before i: Self.Index) -> Self.Index\n      \
    \                     ^\n/tmp/tmpc9ywgavx.swift:35:24: error: no exact matches\
    \ in call to instance method 'index'\n    var maxIndex = arr.index(max)\n    \
    \                   ^\nSwift.Array:7:28: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(after:)')\n    @inlinable public func index(after\
    \ i: Int) -> Int\n                           ^\nSwift.Array:9:28: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public\
    \ func index(before i: Int) -> Int\n                           ^\nSwift.Collection:3:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(of:)')\n   \
    \ @inlinable public func index(of element: Self.Element) -> Self.Index?\n    \
    \                       ^\nSwift.RandomAccessCollection:3:28: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(after:)')\n    @inlinable public\
    \ func index(after i: Self.Index) -> Self.Index\n                           ^\n\
    Swift.RandomAccessCollection:4:28:"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var i\
    \ = 0\n    var j = 0\n    while i < arr.count {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1\n            continue\n        }\n        let index\
    \ = arr[i] - 1\n        result.append(names[index])\n        i += 1\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe5xhtbzc.swift:28:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = arr[0]\n    let max = arr[0]\n\
    \    for i in arr {\n        if i < min {\n            min = i\n        }\n  \
    \      if i > max {\n            max = i\n        }\n    }\n    if min == max\
    \ {\n        return [\"One\"]\n    }\n    var reversed = [Int]()\n    for i in\
    \ arr {\n        reversed.append(max - i)\n    }\n    reversed.reverse()\n   \
    \ for i in reversed {\n        let index = arr.index(of: i)\n        if index\
    \ != nil {\n            result.append(names[index!])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8d4zbbnc.swift:27:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = i\n            ^~~\n/tmp/tmp8d4zbbnc.swift:23:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmp8d4zbbnc.swift:30:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = i\n            ^~~\n/tmp/tmp8d4zbbnc.swift:24:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmp8d4zbbnc.swift:42:25: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = arr.index(of: i)\n               \
    \         ^\n/tmp/tmp8d4zbbnc.swift:42:25: note: use 'firstIndex(of:)' instead\n\
    \        let index = arr.index(of: i)\n                        ^~~~~\n       \
    \                 firstIndex\n/tmp/tmp8d4zbbnc.swift:44:27: error: cannot find\
    \ 'names' in scope\n            result.append(names[index!])\n               \
    \           ^~~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    \n    let minLength = min(arr.count, 9)\n    \n    var result = [String]()\n\
    \    \n    for i in minLength..<arr.count {\n        let digit = arr[i]\n    \
    \    \n        if digit < 1 {\n            continue\n        }\n        \n   \
    \     if digit > 9 {\n            continue\n        }\n        \n        let index\
    \ = digit - minLength\n        \n        result.append(names[index])\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp08b7el3b.swift:38:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let sortedArr = arr.sorted(by: { $0 < $1 })\n    let reverseArr = sortedArr.reversed()\n\
    \    let reversedArr = reverseArr.map { Int(String($0)) }\n    let ones = reversedArr.filter\
    \ { $0 == 1 }\n    let tens = reversedArr.filter { $0 == 10 }\n    let hundreds\
    \ = reversedArr.filter { $0 == 100 }\n    let thousands = reversedArr.filter {\
    \ $0 == 1000 }\n    let tenThousands = reversedArr.filter { $0 == 10000 }\n  \
    \  let oneThousands = reversedArr.filter { $0 == 100000 }\n    let oneHundreds\
    \ = reversedArr.filter { $0 == 1000000 }\n    let oneThousandHundreds = reversedArr.filter\
    \ { $0 == 10000000 }\n    let oneThousandThousands = reversedArr.filter { $0 ==\
    \ 100000000 }\n    let oneThousandThousandHundreds = reversedArr.filter { $0 ==\
    \ 1000000000 }\n    let oneThousandThousandThousands = reversedArr.filter { $0\
    \ == 10000000000 }\n    let oneThousandThousandThousandHundreds = reversedArr.filter\
    \ { $0 == 100000000000 }\n    let oneThousandThousandThousandThousands = reversedArr.filter\
    \ { $0 == 1000000000000 }\n    let oneThousandThousandThousandThousandHundreds\
    \ = reversedArr.filter { $0 == 10000000000000 }\n    let oneThousandThousandThousandThousandThousands\
    \ = reversedArr.filter { $0 == 100000000000000 }\n    let oneThousandThousandThousandThousandThousandHundreds\
    \ = reversedArr.filter { $0 == 1000000000000000 }\n    let oneThousandThousandThousandThousandThousandThousands\
    \ = reversedArr.filter { $0 == 10000000000000000 }\n    let oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = reversedArr.filter { $0 == 100000000000000000 }\n    let oneThousandThousandThousandThousandThousandThousandThousands\
    \ = reversedArr.filter { $0 == 1000000000000000000 }\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmyk0teo_.swift:23:9: warning: initialization of immutable value\
    \ 'ones' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let ones = reversedArr.filter { $0 == 1 }\n    ~~~~^~~~\n    _\n/tmp/tmpmyk0teo_.swift:24:9:\
    \ warning: initialization of immutable value 'tens' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let tens = reversedArr.filter { $0\
    \ == 10 }\n    ~~~~^~~~\n    _\n/tmp/tmpmyk0teo_.swift:25:9: warning: initialization\
    \ of immutable value 'hundreds' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    let hundreds = reversedArr.filter { $0 == 100 }\n\
    \    ~~~~^~~~~~~~\n    _\n/tmp/tmpmyk0teo_.swift:26:9: warning: initialization\
    \ of immutable value 'thousands' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    let thousands = reversedArr.filter { $0 == 1000 }\n\
    \    ~~~~^~~~~~~~~\n    _\n/tmp/tmpmyk0teo_.swift:27:9: warning: initialization\
    \ of immutable value 'tenThousands' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    let tenThousands = reversedArr.filter { $0 == 10000\
    \ }\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpmyk0teo_.swift:28:9: warning: initialization\
    \ of immutable value 'oneThousands' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    let oneThousands = reversedArr.filter { $0 == 100000\
    \ }\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpmyk0teo_.swift:29:9: warning: initialization\
    \ of immutable value 'oneHundreds' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    let oneHundreds = reversedArr.filter { $0 == 1000000\
    \ }\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpmyk0teo_.swift:30:9: warning: initialization\
    \ of immutable value 'oneThousandHundreds' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let oneThousandHundreds = reversedArr.filter\
    \ { $0 == 10000000 }\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpmyk0teo_.swift:31:9:\
    \ warning: initialization of immutable value 'oneThousandThousands' was never\
    \ used; consider replacing with assignme"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return arr\n\
    \    }\n    let len = arr.count\n    let min = arr.min()!\n    let max = arr.max()!\n\
    \    var result = [String]()\n    for i in 0..<len {\n        if min <= arr[i]\
    \ && arr[i] <= max {\n            result.append(name[arr[i]])\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmplouqo_ew.swift:20:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmplouqo_ew.swift:20:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n\
    /tmp/tmplouqo_ew.swift:28:27: error: cannot find 'name' in scope\n           \
    \ result.append(name[arr[i]])\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    \n   \
    \ if arr.isEmpty {\n        return result\n    }\n    \n    let min = arr[0]\n\
    \    let max = arr[0]\n    \n    for i in arr {\n        if i < min {\n      \
    \      min = i\n        } else if i > max {\n            max = i\n        }\n\
    \    }\n    \n    var reversed = [Int]()\n    \n    for i in arr {\n        reversed.append(max\
    \ - i)\n    }\n    \n    for i in reversed {\n        let index = reversed.index(of:\
    \ i)\n        result.append(names[index])\n    }\n    \n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcdgusuzr.swift:30:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = i\n            ^~~\n/tmp/tmpcdgusuzr.swift:25:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpcdgusuzr.swift:32:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = i\n            ^~~\n/tmp/tmpcdgusuzr.swift:26:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpcdgusuzr.swift:43:30: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = reversed.index(of: i)\n          \
    \                   ^\n/tmp/tmpcdgusuzr.swift:43:30: note: use 'firstIndex(of:)'\
    \ instead\n        let index = reversed.index(of: i)\n                       \
    \      ^~~~~\n                             firstIndex\n/tmp/tmpcdgusuzr.swift:44:23:\
    \ error: cannot find 'names' in scope\n        result.append(names[index])\n \
    \                     ^~~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    \n    let min = 1\n    let max = 9\n  \
    \  \n    var i = 0\n    var j = 0\n    \n    while i < arr.count {\n        let\
    \ value = arr[i]\n        \n        if value < min {\n            i += 1\n   \
    \         continue\n        }\n        \n        if value > max {\n          \
    \  i += 1\n            continue\n        }\n        \n        if i == 0 {\n  \
    \          result.append(String(value))\n            i += 1\n            continue\n\
    \        }\n        \n        if j == 0 {\n            result.append(String(value))\n\
    \            i += 1\n            continue\n        }\n        \n        if arr[j-1]\
    \ < value {\n            result.append(String(value))\n            i += 1\n  \
    \          continue\n        }\n        \n        if arr[j-1] > value {\n    \
    \        result.append(String(value))\n            i += 1\n            continue\n\
    \        }\n        \n        if arr[j-1] == value {\n            result.append(String(value))\n\
    \            i += 1\n            j += 1\n            continue\n        }\n   \
    \     \n        if arr[j-1] > value {\n            result.append(String(value))\n\
    \            i += 1\n            j += 1\n            continue\n        }\n   \
    \     \n        if arr[j-1] == value {\n            result.append(String(value))\n\
    \            i += 1\n            j += 1\n            continue\n        }\n   \
    \     \n        result.append(String(value))\n        i += 1\n        j += 1\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpsd1pf1re/tmpsd1pf1re.swift:109: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9cbdbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9cbab5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9cbab5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9cbab47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsd1pf1re                        0x000055f3bb6e18d1 <unavailable> + 6353

    5    libc.so.6                          0x00002ba9cbfaa460 __libc_start_main +
    245

    6    tmpsd1pf1re                        0x000055f3bb6e1379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    \n   \
    \ if arr.isEmpty {\n        return result\n    }\n    \n    let sortedArr = arr.sorted()\n\
    \    \n    if sortedArr.count > 9 {\n        let reversedArr = reverseArray(sortedArr)\n\
    \        let reversedStrings = reversedArr.map { String($0) }\n        \n    \
    \    for string in reversedStrings {\n            let index = string.index(string.startIndex,\
    \ offsetBy: 1)\n            let name = string[..index]\n            \n       \
    \     if let index = result.firstIndex(of: name) {\n                result.remove(at:\
    \ index)\n            }\n            \n            result.append(name)\n     \
    \   }\n    } else {\n        let reversedArr = reverseArray(sortedArr)\n     \
    \   let reversedStrings = reversedArr.map { String($0) }\n        \n        for\
    \ string in reversedStrings {\n            let index = string.index(string.startIndex,\
    \ offsetBy: 1)\n            let name = string[..index]\n            \n       \
    \     if let index = result.firstIndex(of: name) {\n                result.remove(at:\
    \ index)\n            }\n            \n            result.append(name)\n     \
    \   }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmply1zbds3.swift:28:27: error: cannot find 'reverseArray' in scope\n\
    \        let reversedArr = reverseArray(sortedArr)\n                         \
    \ ^~~~~~~~~~~~\n/tmp/tmply1zbds3.swift:42:27: error: cannot find 'reverseArray'\
    \ in scope\n        let reversedArr = reverseArray(sortedArr)\n              \
    \            ^~~~~~~~~~~~\n/tmp/tmply1zbds3.swift:33:31: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            let name = string[..index]\n\
    \                              ^~\n                              ...\n/tmp/tmply1zbds3.swift:47:31:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n           \
    \ let name = string[..index]\n                              ^~\n             \
    \                 ...\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = 1\n    let max = 9\n    var i\
    \ = 0\n    while i < arr.count {\n        if arr[i] < min {\n            i +=\
    \ 1\n            continue\n        }\n        if arr[i] > max {\n            i\
    \ += 1\n            continue\n        }\n        let index = i - 1\n        let\
    \ value = arr[i]\n        let digit = String(value)\n        if digit == \"1\"\
    \ {\n            result.append(One)\n        } else if digit == \"2\" {\n    \
    \        result.append(Two)\n        } else if digit == \"3\" {\n            result.append(Three)\n\
    \        } else if digit == \"4\" {\n            result.append(Four)\n       \
    \ } else if digit == \"5\" {\n            result.append(Five)\n        } else\
    \ if digit == \"6\" {\n            result.append(Six)\n        } else if digit\
    \ == \"7\" {\n            result.append(Seven)\n        } else if digit == \"\
    8\" {\n            result.append(Eight)\n        } else if digit == \"9\" {\n\
    \            result.append(Nine)\n        } else {\n            i += 1\n     \
    \   }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpemxq6nvp.swift:39:27: error: cannot find 'One' in scope\n     \
    \       result.append(One)\n                          ^~~\n/tmp/tmpemxq6nvp.swift:41:27:\
    \ error: cannot find 'Two' in scope\n            result.append(Two)\n        \
    \                  ^~~\n/tmp/tmpemxq6nvp.swift:43:27: error: cannot find 'Three'\
    \ in scope\n            result.append(Three)\n                          ^~~~~\n\
    /tmp/tmpemxq6nvp.swift:45:27: error: cannot find 'Four' in scope\n           \
    \ result.append(Four)\n                          ^~~~\n/tmp/tmpemxq6nvp.swift:47:27:\
    \ error: cannot find 'Five' in scope\n            result.append(Five)\n      \
    \                    ^~~~\n/tmp/tmpemxq6nvp.swift:49:27: error: cannot find 'Six'\
    \ in scope\n            result.append(Six)\n                          ^~~\n/tmp/tmpemxq6nvp.swift:51:27:\
    \ error: cannot find 'Seven' in scope\n            result.append(Seven)\n    \
    \                      ^~~~~\n/tmp/tmpemxq6nvp.swift:53:27: error: cannot find\
    \ 'Eight' in scope\n            result.append(Eight)\n                       \
    \   ^~~~~\n/tmp/tmpemxq6nvp.swift:55:27: error: cannot find 'Nine' in scope\n\
    \            result.append(Nine)\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let sortedArr = arr.sorted()\n    let reversedArr = sortedArr.reversed()\n\
    \    var result = [String]()\n    for i in reversedArr {\n        let index =\
    \ sortedArr.index(of: i)\n        if index != nil {\n            result.append(names[index!])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaaob_tpz.swift:24:31: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = sortedArr.index(of: i)\n         \
    \                     ^\n/tmp/tmpaaob_tpz.swift:24:31: note: use 'firstIndex(of:)'\
    \ instead\n        let index = sortedArr.index(of: i)\n                      \
    \        ^~~~~\n                              firstIndex\n/tmp/tmpaaob_tpz.swift:26:27:\
    \ error: cannot find 'names' in scope\n            result.append(names[index!])\n\
    \                          ^~~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    var len = arr.count\n    var min = 1\n\
    \    var max = 9\n    var min_index = 0\n    var max_index = 0\n    while len\
    \ > 0 {\n        let mid = len / 2\n        let mid_index = mid - 1\n        if\
    \ arr[mid_index] > max {\n            max = arr[mid_index]\n            max_index\
    \ = mid_index\n        }\n        if arr[mid_index] < min {\n            min =\
    \ arr[mid_index]\n            min_index = mid_index\n        }\n        len -=\
    \ 1\n    }\n    \n    var i = min_index\n    var j = max_index\n    while i <\
    \ j {\n        let temp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = temp\n\
    \        i += 1\n        j -= 1\n    }\n    \n    for i in 0..<arr.count {\n \
    \       let digit = arr[i]\n        if digit < 1 {\n            result.append(String(digit))\n\
    \        } else {\n            result.append(String(digit - 1))\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpud2m20bl.swift:46:12: error: cannot assign through subscript: 'arr'\
    \ is a 'let' constant\n        arr[i] = arr[j]\n        ~~~^\n/tmp/tmpud2m20bl.swift:47:12:\
    \ error: cannot assign through subscript: 'arr' is a 'let' constant\n        arr[j]\
    \ = temp\n        ~~~^\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let sortedArr = arr.sorted(by: { $0 < $1 })\n    let reverseArr = sortedArr.reversed()\n\
    \    let reversedArr = reverseArr.map { $0.description }\n    return reversedArr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpbxc1vvg9/tmpbxc1vvg9.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b141ac67c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b141a95eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b141a95e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b141a95d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbxc1vvg9                        0x0000556333eb9901 <unavailable> + 6401

    5    libc.so.6                          0x00002b141ae53460 __libc_start_main +
    245

    6    tmpbxc1vvg9                        0x0000556333eb93a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let sortedArr = arr.sorted()\n    let reverseArr = sortedArr.reversed()\n\
    \    var result = [String]()\n    for i in reverseArr {\n        let index = sortedArr.index(of:\
    \ i)\n        if index != nil {\n            result.append(names[index!])\n  \
    \      } else {\n            result.append(\"\")\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpz1r511fp.swift:24:31: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = sortedArr.index(of: i)\n         \
    \                     ^\n/tmp/tmpz1r511fp.swift:24:31: note: use 'firstIndex(of:)'\
    \ instead\n        let index = sortedArr.index(of: i)\n                      \
    \        ^~~~~\n                              firstIndex\n/tmp/tmpz1r511fp.swift:26:27:\
    \ error: cannot find 'names' in scope\n            result.append(names[index!])\n\
    \                          ^~~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let min = arr.min()!\n    let max = arr.max()!\n    var result = [String]()\n\
    \    for n in arr {\n        if min <= n && n <= max {\n            result.append(names[Int(n)])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfn4lup6j.swift:25:27: error: cannot find 'names' in scope\n   \
    \         result.append(names[Int(n)])\n                          ^~~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    var result = [String]()\n    var reversed = arr.reverse()\n    var ones\
    \ = reversed.prefix(1)\n    var tens = reversed.prefix(10)\n    var hundreds =\
    \ reversed.prefix(100)\n    var thousands = reversed.prefix(1000)\n    var tenThousands\
    \ = reversed.prefix(10000)\n    var hundredThousands = reversed.prefix(100000)\n\
    \    var thousandThousands = reversed.prefix(1000000)\n    var millionThousands\
    \ = reversed.prefix(10000000)\n    var billionThousands = reversed.prefix(100000000)\n\
    \    var trillionThousands = reversed.prefix(1000000000)\n    var quadrillionThousands\
    \ = reversed.prefix(10000000000)\n    var quintillionThousands = reversed.prefix(100000000000)\n\
    \    var sextillionThousands = reversed.prefix(1000000000000)\n    var septillionThousands\
    \ = reversed.prefix(10000000000000)\n    var octillionThousands = reversed.prefix(100000000000000)\n\
    \    var nonillionThousands = reversed.prefix(1000000000000000)\n    var decillionThousands\
    \ = reversed.prefix(10000000000000000)\n    var undecillionThousands = reversed.prefix(100000000000000000)\n\
    \    var duodecillionThousands = reversed.prefix(1000000000000000000)\n    var\
    \ tredecillionThousands = reversed.prefix(10000000000000000000)\n    var quattuordecillionThousands\
    \ = reversed.prefix(100000000000000000000)\n    var quindecillionThousands = reversed.prefix(1000000000000000000000)\n\
    \    var sexdecillionThousands = reversed.prefix(10000000000000000000000)\n  \
    \  var septendecillionThousands = reversed.prefix(100000000000000000000000)\n\
    \    var octodecillionThousands = reversed.prefix(1000000000000000000000000)\n\
    \    var novemdecillionThousands = reversed.prefix(10000000000000000000000000)\n\
    \    var vigintillionThousands = reversed.prefix(100000000000000000000000000)\n\
    \    var billions = reversed.prefix(1000000000000000000000000000)\n    var millions\
    \ = reversed.prefix(10000000000000000000000000000)\n    var thousands = reversed.prefix(1000000000000000000000000000000)\n\
    \    var hundreds = reversed.prefix(10000000000000000000000000000000)\n    var\
    \ tens = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpp8lffwaw.swift:53:15: error: expected initial value after '='\n\
    \    var tens = \n              ^\n/tmp/tmpp8lffwaw.swift:21:24: error: cannot\
    \ use mutating member on immutable value: 'arr' is a 'let' constant\n    var reversed\
    \ = arr.reverse()\n                   ~~~ ^\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let sortedArr = arr.sorted()\n    let reverseArr\
    \ = sortedArr.reverse()\n    for number in reverseArr {\n        let index = sortedArr.index(of:\
    \ number)\n        if index != nil {\n            let name = arr[index!]\n   \
    \         result.append(name)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwjgyzxpi.swift:24:32: error: cannot use mutating member on immutable\
    \ value: 'sortedArr' is a 'let' constant\n    let reverseArr = sortedArr.reverse()\n\
    \                     ~~~~~~~~~ ^\n/tmp/tmpwjgyzxpi.swift:23:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let sortedArr = arr.sorted()\n    ^~~\n   \
    \ var\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    var result = [String]()\n    var index = 0\n    while index < arr.count\
    \ {\n        let value = arr[index]\n        let length = String(value).count\n\
    \        if length == 1 {\n            result.append(String(value))\n        }\
    \ else if length == 2 && value >= 1 && value <= 9 {\n            result.append(String(value))\n\
    \        } else if length == 3 && value >= 1 && value <= 9 && value >= 10 {\n\
    \            result.append(String(value))\n        } else if length == 4 && value\
    \ >= 1 && value <= 9 && value >= 10 && value <= 99 {\n            result.append(String(value))\n\
    \        } else if length == 5 && value >= 1 && value <= 9 && value >= 10 && value\
    \ <= 99 && value >= 100 {\n            result.append(String(value))\n        }\
    \ else if length == 6 && value >= 1 && value <= 9 && value >= 10 && value <= 99\
    \ && value >= 100 && value <= 999 {\n            result.append(String(value))\n\
    \        } else if length == 7 && value >= 1 && value <= 9 && value >= 10 && value\
    \ <= 99 && value >= 100 && value <= 999 && value >= 1000 {\n            result.append(String(value))\n\
    \        } else if length == 8 && value >= 1 && value <= 9 && value >= 10 && value\
    \ <= 99 && value >= 100 && value <= 999 && value >= 1000 && value <= 9999 {\n\
    \            result.append(String(value))\n        } else if length == 9 && value\
    \ >= 1 && value <= 9 && value >= 10 && value <= 99 && value >= 100 && value <=\
    \ 999 && value >= 1000 && value <= 9999 && value >= 10000 {\n            result.append(String(value))\n\
    \        } else {\n            result.append(String(value))\n        }\n     \
    \   index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpdsxpxjw0/tmpdsxpxjw0.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad402ceec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4029e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4029e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4029e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdsxpxjw0                        0x000055be682be921 <unavailable> + 6433

    5    libc.so.6                          0x00002ad402eda460 __libc_start_main +
    245

    6    tmpdsxpxjw0                        0x000055be682be3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let sortedArr = arr.sorted()\n    let reverseArr\
    \ = sortedArr.reversed()\n    for i in 0..<reverseArr.count {\n        let index\
    \ = reverseArr.index(i)\n        let digit = sortedArr[index]\n        let name\
    \ = digitToName(digit)\n        result.append(name)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcyob6456.swift:26:38: error: missing argument label 'of:' in call\n\
    \        let index = reverseArr.index(i)\n                                   \
    \  ^\n                                     of: \n/tmp/tmpcyob6456.swift:28:20:\
    \ error: cannot find 'digitToName' in scope\n        let name = digitToName(digit)\n\
    \                   ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let minLength = min(arr.count, 9)\n    let maxLength = max(arr.count,\
    \ 9)\n    var arr2 = arr.map { $0 < 0 ? $0 - 1 : $0 }\n    arr2.reverse()\n  \
    \  let arr3 = arr2.map { $0 < 10 ? \"\\(Int($0)+1)\" : $0 }\n    return arr3.map\
    \ { $0.isEmpty ? \"One\" : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmptytfus5q.swift:24:37: error: result values in '? :' expression\
    \ have mismatching types 'String' and 'Int'\n    let arr3 = arr2.map { $0 < 10\
    \ ? \"\\(Int($0)+1)\" : $0 }\n                                    ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    let sortedArr = arr.sorted()\n    let reverseArr = sortedArr.reversed()\n\
    \    let ones = reverseArr.filter{$0 % 10 == 1}\n    let tens = reverseArr.filter{$0\
    \ % 10 == 0}\n    let onesAndTens = ones + tens\n    let onesAndTensReversed =\
    \ onesAndTens.reversed()\n    let onesAndTensReversedString = onesAndTensReversed.map\
    \ { String($0) }\n    return onesAndTensReversedString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpyofte5gt/tmpyofte5gt.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa22076c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa21d6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa21d6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa21d6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyofte5gt                        0x00005578eb71eb41 <unavailable> + 6977

    5    libc.so.6                          0x00002afa22262460 __libc_start_main +
    245

    6    tmpyofte5gt                        0x00005578eb71e5e9 <unavailable> + 5609

    '
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let min = min(arr)\n    let max = max(arr)\n    var result = [String]()\n\
    \    var i = 0\n    while i < arr.count {\n        if arr[i] < min || arr[i] >\
    \ max {\n            i += 1\n            continue\n        }\n        result.append(name[arr[i]\
    \ - 1])\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpb1rgwzdj.swift:20:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpb1rgwzdj.swift:21:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpb1rgwzdj.swift:29:23: error: cannot find 'name' in scope\n    \
    \    result.append(name[arr[i] - 1])\n                      ^~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    var result: [String] = []\n    var index = 0\n    while index < arr.count\
    \ {\n        let value = arr[index]\n        if value < 1 || value > 9 {\n   \
    \         index += 1\n            continue\n        }\n        let index = value\
    \ - 1\n        result.append(names[index])\n        index += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv9w2cgq1.swift:29:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n/tmp/tmpv9w2cgq1.swift:30:15:\
    \ error: left side of mutating operator isn't mutable: 'index' is a 'let' constant\n\
    \        index += 1\n        ~~~~~ ^\n/tmp/tmpv9w2cgq1.swift:28:9: note: change\
    \ 'let' to 'var' to make it mutable\n        let index = value - 1\n        ^~~\n\
    \        var\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    \n    let sortedArr = arr.sorted()\n  \
    \  let reverseArr = sortedArr.map { $0 * 10 % 10 + 1 }.reverse()\n    \n    for\
    \ i in 0..<reverseArr.count {\n        let index = reverseArr[i]\n        let\
    \ digit = sortedArr[i]\n        let name = digitToName(digit)\n        result.append(name)\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpd38dpu9u.swift:25:57: error: cannot use mutating member on immutable\
    \ value: function call returns immutable value\n    let reverseArr = sortedArr.map\
    \ { $0 * 10 % 10 + 1 }.reverse()\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^\n/tmp/tmpd38dpu9u.swift:30:20: error: cannot find 'digitToName' in scope\n\
    \        let name = digitToName(digit)\n                   ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    \n   \
    \ if arr.isEmpty {\n        return result\n    }\n    \n    let min = min(arr)\n\
    \    let max = max(arr)\n    \n    if min == max {\n        return [\"One\"]\n\
    \    }\n    \n    let digits = max - min + 1\n    \n    if digits < 10 {\n   \
    \     return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n    }\n    \n    let ones = digits / 10\n    let tens\
    \ = digits % 10\n    \n    if ones == 0 {\n        return [\"One\"]\n    }\n \
    \   \n    if tens == 0 {\n        return [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    }\n    \n    let onesDigits\
    \ = ones * 10\n    let tensDigits = tens * 10\n    \n    if onesDigits == 0 {\n\
    \        return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"]\n    }\n    \n    if tensDigits == 0 {\n       \
    \ return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n    }\n    \n    let onesDigit = onesDigits - 1\n    let\
    \ tensDigit = tensDigits - 1\n    \n    if onesDigit == 0 {\n        return [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"]\n    }\n    \n    if tensDigit == 0 {\n        return [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n    }\n    \n    let onesName = ones[onesDigit]\n    let tensName = tens[tensDigit]\n\
    \    \n    if onesDigit == 0 {\n        return [\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    }\n    \n    if\
    \ tensDigit == 0 {\n        return [\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    }\n    \n    let onesNameReversed\
    \ = onesName.reversed()\n    let tensNameReversed = tensName.reversed()\n    \n\
    \    let onesNameReversedString = onesNameReversed.joined(separator: \"\")\n \
    \   let tensNameReversedString = tensNameReversed.joined(separator: \"\")\n  \
    \  \n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1cm46dgk.swift:25:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp1cm46dgk.swift:26:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp1cm46dgk.swift:32:28: error: binary operator '+' cannot be applied\
    \ to operands of type 'Duration' and 'Int'\n    let digits = max - min + 1\n \
    \                ~~~~~~~~~ ^ ~\n/tmp/tmp1cm46dgk.swift:32:28: note: overloads\
    \ for '+' exist with these partially matching parameter lists: (Duration, Duration),\
    \ (Int, Int)\n    let digits = max - min + 1\n                           ^\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    var result = [String]()\n    var index = 0\n    var last = 0\n    var\
    \ current = 0\n    var length = 0\n    var lastLength = 0\n    var lastDigit =\
    \ 0\n    var lastDigitIndex = 0\n    var lastDigitName = \"\"\n    var lastDigitNameIndex\
    \ = 0\n    var lastDigitNameLength = 0\n    var lastDigitNameIndex = 0\n    var\
    \ lastDigitName = \"\"\n    var lastDigitNameIndex = 0\n    var lastDigitName\
    \ = \"\"\n    var lastDigitNameIndex = 0\n    var lastDigitName = \"\"\n    var\
    \ lastDigitNameIndex = 0\n    var lastDigitName = \"\"\n    var lastDigitNameIndex\
    \ = 0\n    var lastDigitName = \"\"\n    var lastDigitNameIndex = 0\n    var lastDigitName\
    \ = \"\"\n    var lastDigitNameIndex = 0\n    var lastDigitName = \"\"\n    var\
    \ lastDigitNameIndex = 0\n    var lastDigitName = \"\"\n    var lastDigitNameIndex\
    \ = 0\n    var lastDigitName = \"\"\n    var lastDigitNameIndex = 0\n    var lastDigitName\
    \ = \"\"\n    var lastDigitNameIndex = 0\n    var lastDigitName = \"\"\n    var\
    \ lastDigitNameIndex = 0\n    var lastDigitName = \"\"\n    var lastDigitNameIndex\
    \ = 0\n    var lastDigitName = \"\"\n    var lastDigitNameIndex = 0\n    var lastDigitName\
    \ = \"\"\n    var lastDigitNameIndex = 0\n    var lastDigitName = \"\"\n    var\
    \ lastDigitNameIndex = 0\n    var lastDigitName = \"\"\n    var lastDigitNameIndex\
    \ = 0\n    var lastDigitName = \"\"\n    var lastDigitNameIndex = 0\n    var lastDigitName\
    \ = \"\"\n    var lastDigitNameIndex = 0\n    var lastDigitName = \"\"\n    var\
    \ lastDigitNameIndex = 0\n    var lastDigitName = \"\"\n    var lastDigitNameIndex\
    \ = 0\n    var lastDigitName = \"\"\n    var lastDigitNameIndex = 0\n    var lastDigitName\
    \ = \"\"\n    var lastDigitNameIndex = 0\n    var lastDigitName = \"\"\n    var\
    \ lastDigitNameIndex = 0\n    var lastDigitName = \"\"\n    var lastDigitNameIndex\
    \ = 0\n    var lastDigitName = \"\"\n    var lastDigitNameIndex = 0\n    var lastDigitName\
    \ = \"\"\n    var lastDigitNameIndex = 0\n    var lastDigitName = \"\"\n    var\
    \ lastDigitNameIndex = 0\n    var lastDigitName = \"\"\n    var lastDigitNameIndex\
    \ = 0\n    var lastDigitName = \"\"\n    var lastDigitNameIndex = 0\n    var lastDigitName\
    \ = \"\"\n    var lastDigitNameIndex = 0\n    var lastDigitName = \"\"\n    var\
    \ lastDigitNameIndex = 0\n    var lastDigitName = \"\"\n    var lastDigitNameIndex\
    \ = 0\n    var lastDigitName = \"\"\n    var lastDigitNameIndex = 0\n    var lastDigitName\
    \ = \"\"\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyvbff7mo.swift:31:9: error: invalid redeclaration of 'lastDigitNameIndex'\n\
    \    var lastDigitNameIndex = 0\n        ^\n/tmp/tmpyvbff7mo.swift:29:9: note:\
    \ 'lastDigitNameIndex' previously declared here\n    var lastDigitNameIndex =\
    \ 0\n        ^\n/tmp/tmpyvbff7mo.swift:32:9: error: invalid redeclaration of 'lastDigitName'\n\
    \    var lastDigitName = \"\"\n        ^\n/tmp/tmpyvbff7mo.swift:28:9: note: 'lastDigitName'\
    \ previously declared here\n    var lastDigitName = \"\"\n        ^\n/tmp/tmpyvbff7mo.swift:33:9:\
    \ error: invalid redeclaration of 'lastDigitNameIndex'\n    var lastDigitNameIndex\
    \ = 0\n        ^\n/tmp/tmpyvbff7mo.swift:29:9: note: 'lastDigitNameIndex' previously\
    \ declared here\n    var lastDigitNameIndex = 0\n        ^\n/tmp/tmpyvbff7mo.swift:34:9:\
    \ error: invalid redeclaration of 'lastDigitName'\n    var lastDigitName = \"\"\
    \n        ^\n/tmp/tmpyvbff7mo.swift:28:9: note: 'lastDigitName' previously declared\
    \ here\n    var lastDigitName = \"\"\n        ^\n/tmp/tmpyvbff7mo.swift:35:9:\
    \ error: invalid redeclaration of 'lastDigitNameIndex'\n    var lastDigitNameIndex\
    \ = 0\n        ^\n/tmp/tmpyvbff7mo.swift:29:9: note: 'lastDigitNameIndex' previously\
    \ declared here\n    var lastDigitNameIndex = 0\n        ^\n/tmp/tmpyvbff7mo.swift:36:9:\
    \ error: invalid redeclaration of 'lastDigitName'\n    var lastDigitName = \"\"\
    \n        ^\n/tmp/tmpyvbff7mo.swift:28:9: note: 'lastDigitName' previously declared\
    \ here\n    var lastDigitName = \"\"\n        ^\n/tmp/tmpyvbff7mo.swift:37:9:\
    \ error: invalid redeclaration of 'lastDigitNameIndex'\n    var lastDigitNameIndex\
    \ = 0\n        ^\n/tmp/tmpyvbff7mo.swift:29:9: note: 'lastDigitNameIndex' previously\
    \ declared here\n    var lastDigitNameIndex = 0\n        ^\n/tmp/tmpyvbff7mo.swift:38:9:\
    \ error: invalid redeclaration of 'lastDigitName'\n    var lastDigitName = \"\"\
    \n        ^\n/tmp/tmpyvbff7mo.swift:28:9: note: 'lastDigitName' previously declared\
    \ here\n    var lastDigitName = \"\"\n        ^\n/tmp/tmpyvbff7mo.swift:39:9:\
    \ error: invalid redeclaration of 'lastDigitNameIndex'\n    var lastDigitNameIndex\
    \ = 0\n        ^\n/tmp/tmpyvbff7mo.swift:29:9: note: 'l"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let min = min(arr)\n    let max = max(arr)\n    var result = [String]()\n\
    \    var i = 0\n    while i < arr.count {\n        if arr[i] < min {\n       \
    \     i += 1\n            continue\n        }\n        if arr[i] > max {\n   \
    \         i += 1\n            continue\n        }\n        result.append(String(arr[i]))\n\
    \        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgvly2vug.swift:20:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpgvly2vug.swift:21:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    \n    let sortedArr = arr.sorted()\n    let reverseArr = sortedArr.reversed()\n\
    \    \n    var result = [String]()\n    \n    for number in reverseArr {\n   \
    \     let index = Int(number) - 1\n        guard index < 10 else { continue }\n\
    \        result.append(String(index))\n    }\n    \n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpiozpnkb4/tmpiozpnkb4.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab72e3e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab72e0ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab72e0dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab72e0dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiozpnkb4                        0x0000564e7f2a6bd1 <unavailable> + 7121

    5    libc.so.6                          0x00002ab72e5d2460 __libc_start_main +
    245

    6    tmpiozpnkb4                        0x0000564e7f2a6679 <unavailable> + 5753

    '
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let sortedArr = arr.sorted()\n    let reverseArr\
    \ = sortedArr.reversed()\n    let ones = reverseArr.filter{$0 % 10 == 1}\n   \
    \ let tens = reverseArr.filter{$0 % 10 == 0}\n    let tensReversed = tens.reversed()\n\
    \    let tensReversedString = tensReversed.map { String($0) }\n    let tensReversedStringArray\
    \ = tensReversedString.map { Int($0) }\n    let tensReversedStringArraySorted\
    \ = tensReversedStringArray\n        .sorted()\n        .map { String($0) }\n\
    \    let tensReversedStringArraySortedString = tensReversedStringArraySorted\n\
    \        .map { String($0) }\n    let tensReversedStringArraySortedStringArray\
    \ = tensReversedStringArraySortedString\n        .map { String($0) }\n    let\
    \ tensReversedStringArraySortedStringArraySorted = tensReversedStringArraySortedStringArray\n\
    \        .sorted()\n        .map { String($0) }\n    let tensReversedStringArraySortedStringArraySortedString\
    \ = tensReversedStringArraySortedStringArraySorted\n        .map { String($0)\
    \ }\n    let tensReversedStringArraySortedStringArraySortedStringArray = tensReversedStringArraySortedStringArraySorted\n\
    \        .map { String($0) }\n    let tensReversedStringArraySortedStringArraySortedStringArraySorted\
    \ = tensReversedStringArraySortedStringArraySorted\n        .map { String($0)\
    \ }\n    let tensReversedStringArraySortedStringArraySortedStringArraySortedString\
    \ = tensReversedStringArraySortedStringArraySortedStringArraySorted\n        .map\
    \ { String($0) }\n    let tensReversedStringArraySortedStringArraySortedStringArraySortedStringArray\
    \ = tensReversedStringArraySortedStringArraySortedStringArraySorted\n        .map\
    \ { String($0) }\n    let tensReversedStringArraySortedStringArraySortedStringArraySortedStringArraySorted\
    \ = tensReversedStringArraySortedStringArraySortedStringArraySorted\n        .map\
    \ { String($0) }\n    let tensReversedStringArraySortedStringArraySortedStringArraySortedStringArraySortedStringArray\
    \ = tensReversedStringArraySortedStringArraySortedStringArraySortedStringArraySorted\n\
    \        .map { String($0) }\n    let tensReversedStringArraySortedStringArraySortedStringArraySortedStringArraySortedStringArraySorted\
    \ = tensReversedStringArraySortedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpi18rr05b.swift:32:16: error: no exact matches in call to initializer\
    \ \n        .map { String($0) }\n               ^\n/tmp/tmpi18rr05b.swift:32:16:\
    \ note: found candidate with type '(Int) -> String'\n        .map { String($0)\
    \ }\n               ^\n/tmp/tmpi18rr05b.swift:32:16: note: found candidate with\
    \ type '(Int, Int, Bool) -> String'\n        .map { String($0) }\n           \
    \    ^\n/tmp/tmpi18rr05b.swift:32:16: note: found candidate with type '(Int?)\
    \ -> String'\n        .map { String($0) }\n               ^\n/tmp/tmpi18rr05b.swift:32:16:\
    \ note: found candidate with type '(Int?) -> String'\n        .map { String($0)\
    \ }\n               ^\n/tmp/tmpi18rr05b.swift:30:41: error: referencing instance\
    \ method 'sorted()' on 'Sequence' requires that 'Int?' conform to 'Comparable'\n\
    \    let tensReversedStringArraySorted = tensReversedStringArray\n           \
    \                             ^\n/tmp/tmpi18rr05b.swift:30:41: note: wrapped type\
    \ 'Int' satisfies this requirement; did you mean to unwrap?\n    let tensReversedStringArraySorted\
    \ = tensReversedStringArray\n                                        ^\nSwift.Sequence:1:11:\
    \ note: where 'Self.Element' = 'Int?'\nextension Sequence where Self.Element :\
    \ Comparable {\n          ^\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = arr[0]\n    let max = arr[0]\n\
    \    for value in arr {\n        if value < min {\n            min = value\n \
    \       } else if value > max {\n            max = value\n        }\n    }\n \
    \   var reversed = [Int]()\n    for value in arr {\n        reversed.append(min\
    \ - value)\n    }\n    reversed.reverse()\n    for value in reversed {\n     \
    \   let index = reversed.index(of: value)\n        result.append(names[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpw2h1vqcc.swift:27:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = value\n            ^~~\n/tmp/tmpw2h1vqcc.swift:23:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpw2h1vqcc.swift:29:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = value\n            ^~~\n/tmp/tmpw2h1vqcc.swift:24:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpw2h1vqcc.swift:38:30: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = reversed.index(of: value)\n      \
    \                       ^\n/tmp/tmpw2h1vqcc.swift:38:30: note: use 'firstIndex(of:)'\
    \ instead\n        let index = reversed.index(of: value)\n                   \
    \          ^~~~~\n                             firstIndex\n/tmp/tmpw2h1vqcc.swift:39:23:\
    \ error: cannot find 'names' in scope\n        result.append(names[index])\n \
    \                     ^~~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    \n    let min = arr[0]\n    let max = arr[0]\n    \n    for n in arr\
    \ {\n        if n > max { max = n }\n        if n < min { min = n }\n    }\n \
    \   \n    let reversed = Array(1...max).reversed()\n    \n    var result = [String]()\n\
    \    \n    for n in reversed {\n        let index = n - min\n        result.append(names[index])\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfpriauf7.swift:25:22: error: cannot assign to value: 'max' is a\
    \ 'let' constant\n        if n > max { max = n }\n                     ^~~\n/tmp/tmpfpriauf7.swift:22:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpfpriauf7.swift:26:22: error: cannot assign to value: 'min' is\
    \ a 'let' constant\n        if n < min { min = n }\n                     ^~~\n\
    /tmp/tmpfpriauf7.swift:21:5: note: change 'let' to 'var' to make it mutable\n\
    \    let min = arr[0]\n    ^~~\n    var\n/tmp/tmpfpriauf7.swift:35:23: error:\
    \ cannot find 'names' in scope\n        result.append(names[index])\n        \
    \              ^~~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let len = arr.count\n    var result = [String]()\n    for i in 0..<len\
    \ {\n        let n = arr[i]\n        let index = Int(log10(Double(n))) + 1\n \
    \       result.append(String(format: \"%\\(index)s\", n))\n    }\n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpftpukr8a.swift:24:25: error: cannot find 'log10' in scope\n   \
    \     let index = Int(log10(Double(n))) + 1\n                        ^~~~~\n/tmp/tmpftpukr8a.swift:25:29:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \        result.append(String(format: \"%\\(index)s\", n))\n                 \
    \           ^~~~~~~\n                             repeating             count:\
    \ \n"
  stdout: ''
  timestamp: 1660014173
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    var result: [String] = []\n    var temp: Int = 0\n    var last: Int =\
    \ 0\n    var lastName: String = \"\"\n    for num in arr {\n        if num > 9\
    \ {\n            last = num\n            lastName = \"Nine\"\n        } else if\
    \ num > 0 {\n            last = num\n            lastName = \"One\"\n        }\
    \ else {\n            last = num\n            lastName = \"Two\"\n        }\n\
    \        if temp == last {\n            result.append(lastName)\n        } else\
    \ {\n            temp += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpfwqssczx/tmpfwqssczx.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ed12eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ed0fe1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ed0fe1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ed0fe07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfwqssczx                        0x0000558a23a8f841 <unavailable> + 6209

    5    libc.so.6                          0x00002b3ed14d6460 __libc_start_main +
    245

    6    tmpfwqssczx                        0x0000558a23a8f2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    \n   \
    \ if arr.isEmpty {\n        return result\n    }\n    \n    let min = arr[0]\n\
    \    let max = arr[arr.count-1]\n    \n    for i in 0..<arr.count {\n        if\
    \ min > arr[i] {\n            min = arr[i]\n        }\n        if max < arr[i]\
    \ {\n            max = arr[i]\n        }\n    }\n    \n    let minStr = String(min)\n\
    \    let maxStr = String(max)\n    \n    for i in 0..<arr.count {\n        let\
    \ str = String(arr[i])\n        if str < minStr {\n            minStr = str\n\
    \        }\n        if str > maxStr {\n            maxStr = str\n        }\n \
    \   }\n    \n    for i in 0..<arr.count {\n        let str = String(arr[i])\n\
    \        if str == minStr {\n            result.append(minStr)\n        }\n  \
    \      if str == maxStr {\n            result.append(maxStr)\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvpk9su95.swift:30:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = arr[i]\n            ^~~\n/tmp/tmpvpk9su95.swift:25:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpvpk9su95.swift:33:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = arr[i]\n            ^~~\n/tmp/tmpvpk9su95.swift:26:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[arr.count-1]\n\
    \    ^~~\n    var\n/tmp/tmpvpk9su95.swift:43:13: error: cannot assign to value:\
    \ 'minStr' is a 'let' constant\n            minStr = str\n            ^~~~~~\n\
    /tmp/tmpvpk9su95.swift:37:5: note: change 'let' to 'var' to make it mutable\n\
    \    let minStr = String(min)\n    ^~~\n    var\n/tmp/tmpvpk9su95.swift:46:13:\
    \ error: cannot assign to value: 'maxStr' is a 'let' constant\n            maxStr\
    \ = str\n            ^~~~~~\n/tmp/tmpvpk9su95.swift:38:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let maxStr = String(max)\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var i\
    \ = 0\n    for num in arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        i += 1\n        let index = num - 10\n        result.append(names[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7kd60h85.swift:27:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return arr\n\
    \    }\n    var result = [String]()\n    var index = 0\n    var last = 0\n   \
    \ var current = 0\n    var lastDigit = 0\n    var lastDigitName = \"\"\n    var\
    \ lastDigitNameReverse = \"\"\n    var lastDigitReverse = 0\n    var lastDigitReverseName\
    \ = \"\"\n    var lastDigitReverseNameReverse = \"\"\n    var lastDigitNameReverseReverse\
    \ = 0\n    var lastDigitNameReverseReverseName = \"\"\n    var lastDigitNameReverseReverseNameReverse\
    \ = \"\"\n    var lastDigitNameReverseReverseNameReverse = \"\"\n    var lastDigitNameReverseReverseNameReverse\
    \ = \"\"\n    var lastDigitNameReverseReverseNameReverse = \"\"\n    var lastDigitNameReverseReverseNameReverse\
    \ = \"\"\n    var lastDigitNameReverseReverseNameReverse = \"\"\n    var lastDigitNameReverseReverseNameReverse\
    \ = \"\"\n    var lastDigitNameReverseReverseNameReverse = \"\"\n    var lastDigitNameReverseReverseNameReverse\
    \ = \"\"\n    var lastDigitNameReverseReverseNameReverse = \"\"\n    var lastDigitNameReverseReverseNameReverse\
    \ = \"\"\n    var lastDigitNameReverseReverseNameReverse = \"\"\n    var lastDigitNameReverseReverseNameReverse\
    \ = \"\"\n    var lastDigitNameReverseReverseNameReverse = \"\"\n    var lastDigitNameReverseReverseNameReverse\
    \ = \"\"\n    var lastDigitNameReverseReverseNameReverse = \"\"\n    var lastDigitNameReverseReverseNameReverse\
    \ = \"\"\n    var lastDigitNameReverseReverseNameReverse = \"\"\n    var lastDigitNameReverseReverseNameReverse\
    \ = \"\"\n    var lastDigitNameReverseReverseNameReverse = \"\"\n    var lastDigitNameReverseReverseNameReverse\
    \ = \"\"\n    var lastDigitNameReverseReverseNameReverse = \"\"\n    var lastDigitNameReverseReverseNameReverse\
    \ = \"\"\n    var lastDigitNameReverseReverseNameReverse = \"\"\n    var lastDigitNameReverseReverseNameReverse\
    \ = \"\"\n    var lastDigitNameReverseReverseNameReverse = \"\"\n    var lastDigitNameReverseReverseNameReverse\
    \ = \"\"\n    var lastDigitNameReverseReverseNameReverse = \"\"\n    var lastDigitNameReverseReverseNameReverse\
    \ = \"\"\n    var lastDigitNameReverseReverseNameReverse = \"\"\n    var lastDigitNameReverseReverseNameReverse\
    \ = \"\"\n    var lastDigitNameReverseReverseNameReverse = \"\"\n    var lastDigitNameReverseReverseNameReverse\
    \ = \"\"\n    var lastDigitNameReverseReverseNameReverse = \"\"\n    var lastDigitNameReverseReverseNameReverse\
    \ = \"\"\n    var lastDigitNameReverseReverseNameReverse = \"\"\n    var lastDigitNameReverseReverseNameReverse\
    \ = \"\"\n    var lastDigitNameReverseReverseNameReverse = \"\"\n    var lastDigitNameReverseReverseNameReverse\
    \ = \"\"\n    var lastDigitNameReverseReverseNameReverse = \"\"\n    var lastDigitNameReverseReverseNameReverse\
    \ = \"\"\n    var lastDigitNameReverseReverseNameReverse = \"\"\n    var lastDigitNameReverseReverse\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp83vm24w7.swift:20:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmp83vm24w7.swift:20:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n\
    /tmp/tmp83vm24w7.swift:35:9: error: invalid redeclaration of 'lastDigitNameReverseReverseNameReverse'\n\
    \    var lastDigitNameReverseReverseNameReverse = \"\"\n        ^\n/tmp/tmp83vm24w7.swift:34:9:\
    \ note: 'lastDigitNameReverseReverseNameReverse' previously declared here\n  \
    \  var lastDigitNameReverseReverseNameReverse = \"\"\n        ^\n/tmp/tmp83vm24w7.swift:36:9:\
    \ error: invalid redeclaration of 'lastDigitNameReverseReverseNameReverse'\n \
    \   var lastDigitNameReverseReverseNameReverse = \"\"\n        ^\n/tmp/tmp83vm24w7.swift:34:9:\
    \ note: 'lastDigitNameReverseReverseNameReverse' previously declared here\n  \
    \  var lastDigitNameReverseReverseNameReverse = \"\"\n        ^\n/tmp/tmp83vm24w7.swift:37:9:\
    \ error: invalid redeclaration of 'lastDigitNameReverseReverseNameReverse'\n \
    \   var lastDigitNameReverseReverseNameReverse = \"\"\n        ^\n/tmp/tmp83vm24w7.swift:34:9:\
    \ note: 'lastDigitNameReverseReverseNameReverse' previously declared here\n  \
    \  var lastDigitNameReverseReverseNameReverse = \"\"\n        ^\n/tmp/tmp83vm24w7.swift:38:9:\
    \ error: invalid redeclaration of 'lastDigitNameReverseReverseNameReverse'\n \
    \   var lastDigitNameReverseReverseNameReverse = \"\"\n        ^\n/tmp/tmp83vm24w7.swift:34:9:\
    \ note: 'lastDigitNameReverseReverseNameReverse' previously declared here\n  \
    \  var lastDigitNameReverseReverseNameReverse = \"\"\n        ^\n/tmp/tmp83vm24w7.swift:39:9:\
    \ error: invalid redeclaration of 'lastDigitNameReverseReverseNameReverse'\n \
    \   var lastDigitNameReverseReverseNameReverse = \"\"\n        ^\n/tmp/tmp83vm24w7.swift:34:9:\
    \ note: 'lastDigitNameReverseReverseNameReverse' previously declared here\n  \
    \  var lastDigitNameReverseReverseNameReverse = \"\"\n        ^\n/tmp/tmp83vm24w7.swift:40:9:\
    \ error: invalid redeclaration of 'lastDigitNameReverseReverseNameReverse'\n \
    \   "
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    var len = arr.count\n    if len < 10 {\n\
    \        return result\n    }\n    \n    var min = 1\n    var max = 9\n    var\
    \ mid = len / 2\n    var pivot = arr[mid]\n    \n    for index in 0..<len {\n\
    \        if arr[index] > pivot {\n            min = index + 1\n        } else\
    \ {\n            max = index\n        }\n    }\n    \n    for index in min..<max\
    \ {\n        result.append(names[index])\n    }\n    \n    for index in max..<len\
    \ {\n        result.append(names[index])\n    }\n    \n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcne5pkjd.swift:42:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n/tmp/tmpcne5pkjd.swift:46:23:\
    \ error: cannot find 'names' in scope\n        result.append(names[index])\n \
    \                     ^~~~~\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    var min = 1\n    var max = 9\n    var min_index\
    \ = 0\n    var max_index = 0\n    var min_value = arr[min_index]\n    var max_value\
    \ = arr[max_index]\n    for index in 0..<arr.count {\n        let value = arr[index]\n\
    \        if value < min_value {\n            min_value = value\n            min_index\
    \ = index\n        }\n        if value > max_value {\n            max_value =\
    \ value\n            max_index = index\n        }\n    }\n    if min_value ==\
    \ max_value {\n        result.append(arr[min_index])\n    } else {\n        let\
    \ diff = max_value - min_value\n        for index in 0..<arr.count {\n       \
    \     let value = arr[index]\n            if value == min_value {\n          \
    \      result.append(String(min_index))\n            } else {\n              \
    \  result.append(String(value - diff))\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmplor2ddqf.swift:41:26: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String'\n        result.append(arr[min_index])\n\
    \                         ^\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var reversed\
    \ = [Int]()\n    var lengths = [Int]()\n    var i = 0\n    for num in arr {\n\
    \        i += 1\n        if num > 9 {\n            reversed.append(num - 10)\n\
    \        } else {\n            reversed.append(num)\n        }\n        lengths.append(i)\n\
    \    }\n    lengths.sortInPlace()\n    for length in lengths {\n        result.append(reversed[length])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfl2zlb64.swift:32:13: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    lengths.sortInPlace()\n    ~~~~~~~ ^~~~~~~~~~~\n/tmp/tmpfl2zlb64.swift:34:31:\
    \ error: cannot convert value of type 'Int' to expected argument type 'String'\n\
    \        result.append(reversed[length])\n                              ^\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let sorted = arr.sorted()\n    let reversed\
    \ = sorted.reversed()\n    var i = 0\n    while i < reversed.count {\n       \
    \ let num = reversed[i]\n        if num >= 1 && num <= 9 {\n            result.append(String(num))\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6mh4if81.swift:27:27: error: no exact matches in call to subscript\
    \ \n        let num = reversed[i]\n                          ^\nSwift.ReversedCollection:9:23:\
    \ note: candidate expects value of type 'ReversedCollection<[Int]>.Index' for\
    \ parameter #1 (got 'Int')\n    @inlinable public subscript(position: ReversedCollection<Base>.Index)\
    \ -> ReversedCollection<Base>.Element { get }\n                      ^\nSwift.Collection:2:23:\
    \ note: candidate expects value of type 'Range<ReversedCollection<[Int]>.Index>'\
    \ for parameter #1 (got 'Int')\n    @inlinable public subscript(bounds: Range<Self.Index>)\
    \ -> Slice<Self> { get }\n                      ^\nSwift.Collection:3:23: note:\
    \ candidate expects value of type '(UnboundedRange_) -> ()' for parameter #1 (got\
    \ 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence\
    \ { get }\n                      ^\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = 1\n    let max = 9\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var tmp = 0\n    var tmp2 = 0\n    var\
    \ tmp3 = 0\n    var tmp4 = 0\n    var tmp5 = 0\n    var tmp6 = 0\n    var tmp7\
    \ = 0\n    var tmp8 = 0\n    var tmp9 = 0\n    var tmp10 = 0\n    var tmp11 =\
    \ 0\n    var tmp12 = 0\n    var tmp13 = 0\n    var tmp14 = 0\n    var tmp15 =\
    \ 0\n    var tmp16 = 0\n    var tmp17 = 0\n    var tmp18 = 0\n    var tmp19 =\
    \ 0\n    var tmp20 = 0\n    var tmp21 = 0\n    var tmp22 = 0\n    var tmp23 =\
    \ 0\n    var tmp24 = 0\n    var tmp25 = 0\n    var tmp26 = 0\n    var tmp27 =\
    \ 0\n    var tmp28 = 0\n    var tmp29 = 0\n    var tmp30 = 0\n    var tmp31 =\
    \ 0\n    var tmp32 = 0\n    var tmp33 = 0\n    var tmp34 = 0\n    var tmp35 =\
    \ 0\n    var tmp36 = 0\n    var tmp37 = 0\n    var tmp38 = 0\n    var tmp39 =\
    \ 0\n    var tmp40 = 0\n    var tmp41 = 0\n    var tmp42 = 0\n    var tmp43 =\
    \ 0\n    var tmp44 = 0\n    var tmp45 = 0\n    var tmp46 = 0\n    var tmp47 =\
    \ 0\n    var tmp48 = 0\n    var tmp49 = 0\n    var tmp50 = 0\n    var tmp51 =\
    \ 0\n    var tmp52 = 0\n    var tmp53 = 0\n    var tmp54 = 0\n    var tmp55 =\
    \ 0\n    var tmp56 = 0\n    var tmp57 = 0\n    var tmp58 = 0\n    var tmp59 =\
    \ 0\n    var tmp60 = 0\n    var tmp61 = 0\n    var tmp62 = 0\n    var tmp63 =\
    \ 0\n    var tmp64 = 0\n    var tmp65 = 0\n    var tmp66 = 0\n    var tmp67 =\
    \ 0\n    var tmp68 = 0\n    var tmp69 = 0\n    var tmp70 = 0\n    var tmp71 =\
    \ 0\n    var tmp72 = 0\n    var tmp73 = 0\n    var tmp74 = 0\n    var tmp75 =\
    \ 0\n    var tmp76 = 0\n    var tmp77 = 0\n    var tmp78 = 0\n    var tmp79 =\
    \ 0\n    var tmp80 = 0\n    var tmp81 = 0\n    var tmp82 = 0\n    var tmp83 =\
    \ 0\n    var tmp84 = 0\n    var tmp85 = 0\n    var tmp86 = 0\n    var tmp87 =\
    \ 0\n    var tmp88 = 0\n    var tmp89 = 0\n    var tmp90 = 0\n    var tmp91 =\
    \ 0\n    var tmp92 = 0\n    var tmp93 = 0\n    var tmp94 = 0\n    var tmp95 =\
    \ 0\n    var tmp\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9k0zmgp3.swift:123:9: error: type annotation missing in pattern\n\
    \    var tmp\n        ^\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let ones = arr.filter { $0 < 10 }\n    let tens = arr.filter { $0 >=\
    \ 10 }\n    let tensReversed = tens.reversed()\n    let onesReversed = ones.reversed()\n\
    \    let onesReversedString = onesReversed.map { String($0) }\n    let tensReversedString\
    \ = tensReversed.map { String($0) }\n    let result = onesReversedString.append(tensReversedString)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzwse5l9h.swift:26:37: error: no exact matches in call to instance\
    \ method 'append'\n    let result = onesReversedString.append(tensReversedString)\n\
    \                                    ^\n/tmp/tmpzwse5l9h.swift:26:37: note: found\
    \ candidate with type '(__owned [String]) -> ()'\n    let result = onesReversedString.append(tensReversedString)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    \n   \
    \ if arr.isEmpty {\n        return result\n    }\n    \n    let min = min(arr)\n\
    \    let max = max(arr)\n    \n    for number in arr {\n        if number >= min\
    \ && number <= max {\n            result.append(numberToName(number))\n      \
    \  }\n    }\n    \n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4k3xh3pf.swift:25:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp4k3xh3pf.swift:26:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp4k3xh3pf.swift:30:27: error: cannot find 'numberToName' in scope\n\
    \            result.append(numberToName(number))\n                          ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    var result = [String]()\n    var index = 0\n    var temp = 0\n   \
    \ while index < arr.count {\n        temp = arr[index]\n        if temp < 10 {\n\
    \            result.append(String(temp))\n        } else {\n            if temp\
    \ < 100 {\n                result.append(String(temp / 10))\n                result.append(String(temp\
    \ % 10))\n            } else {\n                if temp < 1000 {\n           \
    \         result.append(String(temp / 100))\n                    result.append(String(temp\
    \ % 100))\n                } else {\n                    if temp < 10000 {\n \
    \                       result.append(String(temp / 1000))\n                 \
    \       result.append(String(temp % 1000))\n                    } else {\n   \
    \                     if temp < 100000 {\n                            result.append(String(temp\
    \ / 10000))\n                            result.append(String(temp % 10000))\n\
    \                        } else {\n                            if temp < 1000000\
    \ {\n                                result.append(String(temp / 100000))\n  \
    \                              result.append(String(temp % 100000))\n        \
    \                    } else {\n                                if temp < 10000000\
    \ {\n                                    result.append(String(temp / 1000000))\n\
    \                                    result.append(String(temp % 1000000))\n \
    \                               } else {\n                                   \
    \ if temp < 100000000 {\n                                        result.append(String(temp\
    \ / 10000000))\n                                        result.append(String(temp\
    \ % 10000000))\n                                    } else {\n               \
    \                         if temp < 1000000000 {\n                           \
    \                 result.append(String(temp / 100000000))\n                  \
    \                          result.append(String(temp % 100000000))\n         \
    \                               } else {\n                                   \
    \         if temp < 10000000000 {\n                                          \
    \      result.append(String(temp / 1000000000))\n                            \
    \                    result.append(String(temp % 1000000000))\n              \
    \                              } else {\n                                    \
    \            if temp < 100000000000 {\n                                      \
    \              result.append(String(temp / 10000000000))\n                   \
    \                                 result.append(String(temp % 10000000000))\n\
    \                                                } else {\n                  \
    \                                  if temp < 1000000000000 {\n               \
    \                                         result.append(String(temp / 100000000000))\n\
    \                                                        result.append(String(temp\
    \ % 100000000000))\n                                                    } else\
    \ {\n                                                        if temp < 10000000000000\
    \ {\n                                                            result.append(String(temp\
    \ / 1000000000000))\n                                                        \
    \    result.append(String(temp % 1000000000000))\n                           \
    \                             } else {\n                                     \
    \                       if temp < 100000000000000 {\n                        \
    \                                        result.append(String(temp / 10000000000000))\n\
    \                                                                result.append(String(temp\
    \ % 10000000000000))\n                                                       \
    \     } else {\n                                                             \
    \   if temp < 1000000000000000 {\n                                           \
    \                         result.append(String(temp / 100000000000000))\n    \
    \                                                                result.append(String(temp\
    \ % 100000000000000))\n                                                      \
    \          } else {\n                                                        \
    \            if temp < 10000000000000000 {\n                                 \
    \                                       result.append(String(temp / 1000000000000000))\n\
    \                                                                        result.append(String(temp\
    \ % 1000000000000000))\n                                                     \
    \               } else {\n                                                   \
    \                     if temp < 100000000000000000 {\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6zyeg4bi.swift:111:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmp6zyeg4bi.swift:89:76:\
    \ note: to match this opening '{'\n                                          \
    \                          } else {\n                                        \
    \                                   ^\n/tmp/tmp6zyeg4bi.swift:111:63: error: expected\
    \ '}' at end of brace statement\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\n                                                    \
    \          ^\n/tmp/tmp6zyeg4bi.swift:85:72: note: to match this opening '{'\n\
    \                                                                } else {\n  \
    \                                                                     ^\n/tmp/tmp6zyeg4bi.swift:111:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmp6zyeg4bi.swift:81:68: note: to match this\
    \ opening '{'\n                                                            } else\
    \ {\n                                                                   ^\n/tmp/tmp6zyeg4bi.swift:111:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmp6zyeg4bi.swift:77:64: note: to match this\
    \ opening '{'\n                                                        } else\
    \ {\n                                                               ^\n/tmp/tmp6zyeg4bi.swift:111:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmp6zyeg4bi.swift:73:60: note: to match this\
    \ opening '{'\n                                                    } else {\n\
    \                                                           ^\n/tmp/tmp6zyeg4bi.swift:111:6"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    var temp = [Int]()\n    for n in arr {\n\
    \        if n >= 1 && n <= 9 {\n            temp.append(n)\n        }\n    }\n\
    \    temp.sort()\n    temp.reverse()\n    for n in temp {\n        if n > 0 {\n\
    \            result.append(names[Int(n)])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5abbpi8l.swift:33:27: error: cannot find 'names' in scope\n   \
    \         result.append(names[Int(n)])\n                          ^~~~~\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var arrCopy\
    \ = arr\n    if arrCopy.count > 0 {\n        let min = arrCopy.min()\n       \
    \ let max = arrCopy.max()\n        let range = (max - min) + 1\n        var arrReversed\
    \ = [Int]()\n        for i in 0 ..< range {\n            arrReversed.append(min\
    \ + i)\n        }\n        arrCopy.reverse()\n        for i in 0 ..< arrCopy.count\
    \ {\n            let index = arrCopy.index(of: arrCopy[i])\n            if index\
    \ != nil {\n                result.append(arrReversed[index!])\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj891peq9.swift:24:26: error: binary operator '-' cannot be applied\
    \ to two 'Int?' operands\n        let range = (max - min) + 1\n              \
    \       ~~~ ^ ~~~\n/tmp/tmpj891peq9.swift:24:26: note: overloads for '-' exist\
    \ with these partially matching parameter lists: (Int, Int)\n        let range\
    \ = (max - min) + 1\n                         ^\n/tmp/tmpj891peq9.swift:31:33:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \    let index = arrCopy.index(of: arrCopy[i])\n                             \
    \   ^\n/tmp/tmpj891peq9.swift:31:33: note: use 'firstIndex(of:)' instead\n   \
    \         let index = arrCopy.index(of: arrCopy[i])\n                        \
    \        ^~~~~\n                                firstIndex\n/tmp/tmpj891peq9.swift:33:42:\
    \ error: cannot convert value of type 'Int' to expected argument type 'String'\n\
    \                result.append(arrReversed[index!])\n                        \
    \                 ^\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty else { return []\
    \ }\n    var result = [String]()\n    var index = 0\n    var current = 0\n   \
    \ var last = 0\n    var currentString = \"\"\n    var lastString = \"\"\n    while\
    \ index < arr.count {\n        current = arr[index]\n        if current < 10 {\n\
    \            currentString += String(current)\n        } else {\n            currentString\
    \ += String(current - 10) + String(current % 10)\n        }\n        last = current\n\
    \        if current == last {\n            lastString += String(current - 10)\n\
    \        } else {\n            lastString += String(current - 10) + String(current\
    \ % 10)\n        }\n        index += 1\n    }\n    result.insert(lastString.reversed(),\
    \ at: 0)\n    result.insert(currentString.reversed(), at: 0)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpo67vbzk1.swift:41:12: error: no exact matches in call to instance\
    \ method 'insert'\n    result.insert(lastString.reversed(), at: 0)\n         \
    \  ^\nSwift.Array:11:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'ReversedCollection<String>')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: candidate expects value of\
    \ type 'String' for parameter #1 (got 'ReversedCollection<String>')\n    @inlinable\
    \ public mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n/tmp/tmpo67vbzk1.swift:41:12: note: found\
    \ candidate with type '(__owned ReversedCollection<String>, Array<String>.Index)\
    \ -> ()' (aka '(__owned ReversedCollection<String>, Int) -> ()')\n    result.insert(lastString.reversed(),\
    \ at: 0)\n           ^\n/tmp/tmpo67vbzk1.swift:42:12: error: no exact matches\
    \ in call to instance method 'insert'\n    result.insert(currentString.reversed(),\
    \ at: 0)\n           ^\nSwift.Array:11:37: note: candidate expects value of type\
    \ 'String' for parameter #1 (got 'ReversedCollection<String>')\n    @inlinable\
    \ public mutating func insert(_ newElement: __owned Element, at i: Int)\n    \
    \                                ^\nSwift.RangeReplaceableCollection:6:37: note:\
    \ candidate expects value of type 'String' for parameter #1 (got 'ReversedCollection<String>')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpo67vbzk1.swift:42:12:\
    \ note: found candidate with type '(__owned ReversedCollection<String>, Array<String>.Index)\
    \ -> ()' (aka '(__owned ReversedCollection<String>, Int) -> ()')\n    result.insert(currentString.reversed(),\
    \ at: 0)\n           ^\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    \n    let sortedArr = arr.sorted(by: { $0 < $1 })\n    let reverseArr\
    \ = sortedArr.reversed()\n    var result = [String]()\n    for i in reverseArr\
    \ {\n        if i < 10 {\n            result.append(String(format: \"%d\\\"\"\
    , i))\n        } else {\n            result.append(String(format: \"%d\\\"\",\
    \ i - 10))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuhhvdu75.swift:26:33: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"%d\\\"\", i))\n                                ^~~~~~~\n                 \
    \                repeating       count: \n/tmp/tmpuhhvdu75.swift:28:33: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"%d\\\"\", i - 10))\n             \
    \                   ^~~~~~~\n                                 repeating      \
    \ count: \n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    let sortedArr = arr.sorted()\n    let reverseArr = sortedArr.reversed()\n\
    \    var result = [String]()\n    for i in reverseArr {\n        let index = sortedArr.index(of:\
    \ i)\n        if index != nil {\n            let name = arr[index!]\n        \
    \    result.append(name)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpm_g2q3rs.swift:26:31: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = sortedArr.index(of: i)\n         \
    \                     ^\n/tmp/tmpm_g2q3rs.swift:26:31: note: use 'firstIndex(of:)'\
    \ instead\n        let index = sortedArr.index(of: i)\n                      \
    \        ^~~~~\n                              firstIndex\n/tmp/tmpm_g2q3rs.swift:29:27:\
    \ error: cannot convert value of type 'Int' to expected argument type 'String'\n\
    \            result.append(name)\n                          ^\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let sorted = arr.sorted()\n    let reversed = sorted.reversed()\n   \
    \ var result = [String]()\n    for i in 0..<reversed.count {\n        let digit\
    \ = reversed[i]\n        let index = Int(digit)\n        if index >= 1 && index\
    \ <= 9 {\n            result.append(names[index])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpm32dsdfa.swift:24:29: error: no exact matches in call to subscript\
    \ \n        let digit = reversed[i]\n                            ^\nSwift.ReversedCollection:9:23:\
    \ note: candidate expects value of type 'ReversedCollection<[Int]>.Index' for\
    \ parameter #1 (got 'Int')\n    @inlinable public subscript(position: ReversedCollection<Base>.Index)\
    \ -> ReversedCollection<Base>.Element { get }\n                      ^\nSwift.Collection:2:23:\
    \ note: candidate expects value of type 'Range<ReversedCollection<[Int]>.Index>'\
    \ for parameter #1 (got 'Int')\n    @inlinable public subscript(bounds: Range<Self.Index>)\
    \ -> Slice<Self> { get }\n                      ^\nSwift.Collection:3:23: note:\
    \ candidate expects value of type '(UnboundedRange_) -> ()' for parameter #1 (got\
    \ 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence\
    \ { get }\n                      ^\n/tmp/tmpm32dsdfa.swift:27:27: error: cannot\
    \ find 'names' in scope\n            result.append(names[index])\n           \
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    \n    let sortedArr = arr.sorted(by: { $0 < $1 })\n    let reverseArr\
    \ = sortedArr.sorted(by: { $0 < $1 }).reversed()\n    \n    var result = [String]()\n\
    \    \n    for n in reverseArr {\n        let index = sortedArr.index(of: n)!\n\
    \        result.append(String(sortedArr[index]))\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmp79gtovnl/tmp79gtovnl.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ae41c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ae3eb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ae3eb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ae3eb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp79gtovnl                        0x0000559ace54bc01 <unavailable> + 7169

    5    libc.so.6                          0x00002b9ae43ad460 __libc_start_main +
    245

    6    tmp79gtovnl                        0x0000559ace54b6a9 <unavailable> + 5801

    '
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    var min = 1\n    var max = 9\n    var min_index\
    \ = 0\n    var max_index = arr.count-1\n    while min_index <= max_index {\n \
    \       let mid = min_index + (max_index-min_index)/2\n        if arr[mid] < min\
    \ {\n            min = mid + 1\n            min_index = mid\n        } else if\
    \ arr[mid] > max {\n            max = mid - 1\n            max_index = mid\n \
    \       } else {\n            let index = mid\n            let value = arr[mid]\n\
    \            if value == 1 {\n                result.append(One[index])\n    \
    \        } else if value == 2 {\n                result.append(Two[index])\n \
    \           } else if value == 3 {\n                result.append(Three[index])\n\
    \            } else if value == 4 {\n                result.append(Four[index])\n\
    \            } else if value == 5 {\n                result.append(Five[index])\n\
    \            } else if value == 6 {\n                result.append(Six[index])\n\
    \            } else if value == 7 {\n                result.append(Seven[index])\n\
    \            } else if value == 8 {\n                result.append(Eight[index])\n\
    \            } else if value == 9 {\n                result.append(Nine[index])\n\
    \            }\n            min_index += 1\n            max_index -= 1\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp07160te1.swift:39:31: error: cannot find 'One' in scope\n     \
    \           result.append(One[index])\n                              ^~~\n/tmp/tmp07160te1.swift:41:31:\
    \ error: cannot find 'Two' in scope\n                result.append(Two[index])\n\
    \                              ^~~\n/tmp/tmp07160te1.swift:43:31: error: cannot\
    \ find 'Three' in scope\n                result.append(Three[index])\n       \
    \                       ^~~~~\n/tmp/tmp07160te1.swift:45:31: error: cannot find\
    \ 'Four' in scope\n                result.append(Four[index])\n              \
    \                ^~~~\n/tmp/tmp07160te1.swift:47:31: error: cannot find 'Five'\
    \ in scope\n                result.append(Five[index])\n                     \
    \         ^~~~\n/tmp/tmp07160te1.swift:49:31: error: cannot find 'Six' in scope\n\
    \                result.append(Six[index])\n                              ^~~\n\
    /tmp/tmp07160te1.swift:51:31: error: cannot find 'Seven' in scope\n          \
    \      result.append(Seven[index])\n                              ^~~~~\n/tmp/tmp07160te1.swift:53:31:\
    \ error: cannot find 'Eight' in scope\n                result.append(Eight[index])\n\
    \                              ^~~~~\n/tmp/tmp07160te1.swift:55:31: error: cannot\
    \ find 'Nine' in scope\n                result.append(Nine[index])\n         \
    \                     ^~~~\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    var result = [String]()\n    var reversed = [Int]()\n    var last\
    \ = 0\n    for number in arr {\n        if number > 9 {\n            reversed.append(number\
    \ - 10)\n        } else {\n            reversed.append(number)\n        }\n  \
    \  }\n    reversed.reverse()\n    for number in reversed {\n        if number\
    \ > 0 {\n            if last == 0 {\n                result.append(String(number))\n\
    \            } else {\n                result.append(String(last))\n         \
    \       result.append(String(number))\n            }\n            last = number\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpc72dys7s/tmpc72dys7s.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31776fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31773f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31773f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31773f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc72dys7s                        0x000055f86d722ad1 <unavailable> + 6865

    5    libc.so.6                          0x00002b31778ea460 __libc_start_main +
    245

    6    tmpc72dys7s                        0x000055f86d722579 <unavailable> + 5497

    '
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    var result = [String]()\n    var index = 0\n    while index < arr.count\
    \ {\n        let value = arr[index]\n        if value < 1 || value > 9 {\n   \
    \         index += 1\n            continue\n        }\n        let digit = value\
    \ - 10\n        let index = result.index(of: String(digit))\n        if index\
    \ == nil {\n            result.append(String(digit))\n        } else {\n     \
    \       result[index] = String(digit)\n        }\n        index += 1\n    }\n\
    \    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp79linpch.swift:29:28: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = result.index(of: String(digit))\n\
    \                           ^\n/tmp/tmp79linpch.swift:29:28: note: use 'firstIndex(of:)'\
    \ instead\n        let index = result.index(of: String(digit))\n             \
    \              ^~~~~\n                           firstIndex\n/tmp/tmp79linpch.swift:33:20:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    result[index] = String(digit)\n                   ^\n/tmp/tmp79linpch.swift:33:20:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            result[index] = String(digit)\n                   ^\n   \
    \                      ?? <#default value#>\n/tmp/tmp79linpch.swift:33:20: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            result[index] = String(digit)\n                   ^\n           \
    \             !\n/tmp/tmp79linpch.swift:35:9: error: cannot convert value of type\
    \ 'Array<String>.Index?' (aka 'Optional<Int>') to expected argument type 'Int'\n\
    \        index += 1\n        ^\n             !\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    let len = arr.count\n    let min = arr.min()!\n    let max = arr.max()!\n\
    \    let arr2 = arr.map { $0 }\n    let arr3 = arr2.reverse()\n    let arr4 =\
    \ arr3.map { $0 }\n    let arr5 = arr4.map { $0 }\n    let arr6 = arr5.map { $0\
    \ }\n    let arr7 = arr6.map { $0 }\n    let arr8 = arr7.map { $0 }\n    let arr9\
    \ = arr8.map { $0 }\n    let arr10 = arr9.map { $0 }\n    let arr11 = arr10.map\
    \ { $0 }\n    let arr12 = arr11.map { $0 }\n    let arr13 = arr12.map { $0 }\n\
    \    let arr14 = arr13.map { $0 }\n    let arr15 = arr14.map { $0 }\n    let arr16\
    \ = arr15.map { $0 }\n    let arr17 = arr16.map { $0 }\n    let arr18 = arr17.map\
    \ { $0 }\n    let arr19 = arr18.map { $0 }\n    let arr20 = arr19.map { $0 }\n\
    \    let arr21 = arr20.map { $0 }\n    let arr22 = arr21.map { $0 }\n    let arr23\
    \ = arr22.map { $0 }\n    let arr24 = arr23.map { $0 }\n    let arr25 = arr24.map\
    \ { $0 }\n    let arr26 = arr25.map { $0 }\n    let arr27 = arr26.map { $0 }\n\
    \    let arr28 = arr27.map { $0 }\n    let arr29 = arr28.map { $0 }\n    let arr30\
    \ = arr29.map { $0 }\n    let arr31 = arr30.map { $0 }\n    let arr32 = arr31.map\
    \ { $0 }\n    let arr33 = arr32.map { $0 }\n    let arr34 = arr33.map { $0 }\n\
    \    let arr35 = arr34.map { $0 }\n    let arr36 = arr35.map { $0 }\n    let arr37\
    \ = arr36.map { $0 }\n    let arr38 = arr37.map { $0 }\n    let arr39 = arr38.map\
    \ { $0 }\n    let arr40 = arr39.map { $0 }\n    let arr41 = arr40.map { $0 }\n\
    \    let arr42 = arr41.map { $0 }\n    let arr43 = arr4\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5t1oqfh0.swift:26:21: error: cannot use mutating member on immutable\
    \ value: 'arr2' is a 'let' constant\n    let arr3 = arr2.reverse()\n         \
    \      ~~~~ ^\n/tmp/tmp5t1oqfh0.swift:25:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let arr2 = arr.map { $0 }\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    let sortedArr = arr.sorted()\n    let reverseArr = sortedArr.reversed()\n\
    \    var result = [String]()\n    for n in reverseArr {\n        let index = sortedArr.index(of:\
    \ n)\n        result.append(String(sortedArr[index]))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpy_ejdpbc.swift:26:31: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = sortedArr.index(of: n)\n         \
    \                     ^\n/tmp/tmpy_ejdpbc.swift:26:31: note: use 'firstIndex(of:)'\
    \ instead\n        let index = sortedArr.index(of: n)\n                      \
    \        ^~~~~\n                              firstIndex\n/tmp/tmpy_ejdpbc.swift:27:40:\
    \ error: value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<Int>.Index' (aka 'Int')\n        result.append(String(sortedArr[index]))\n\
    \                                       ^\n/tmp/tmpy_ejdpbc.swift:26:13: note:\
    \ short-circuit using 'guard' to exit this function early if the optional value\
    \ contains 'nil'\n        let index = sortedArr.index(of: n)\n            ^\n\
    \        guard                              else { return <#default value#> }\n\
    /tmp/tmpy_ejdpbc.swift:26:31: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n        let index = sortedArr.index(of: n)\n\
    \                              ^\n                                           ??\
    \ <#default value#>\n/tmp/tmpy_ejdpbc.swift:26:31: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n        let index =\
    \ sortedArr.index(of: n)\n                              ^\n                  \
    \                        !\n/tmp/tmpy_ejdpbc.swift:27:40: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n        result.append(String(sortedArr[index]))\n\
    \                                       ^\n                                  \
    \           ?? <#default value#>\n/tmp/tmpy_ejdpbc.swift:27:40: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        result.append(String(sortedArr[index]))\n\
    \                                       ^\n                                  \
    \          !\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = arr[0]\n    let max = arr[0]\n\
    \    for i in arr {\n        if i < min {\n            min = i\n        }\n  \
    \      if i > max {\n            max = i\n        }\n    }\n    let minStr = String(min)\n\
    \    let maxStr = String(max)\n    let minIndex = minStr.index(minStr.startIndex,\
    \ offsetBy: 0)\n    let maxIndex = maxStr.index(maxStr.startIndex, offsetBy: 0)\n\
    \    let minLen = minStr.distance(from: minIndex, to: minIndex)\n    let maxLen\
    \ = maxStr.distance(from: maxIndex, to: maxIndex)\n    if minLen > maxLen {\n\
    \        let tmp = minStr\n        minStr = maxStr\n        maxStr = tmp\n   \
    \ }\n    let minStr = minStr.dropLast()\n    let maxStr = maxStr.dropFirst()\n\
    \    for i in minStr.unicodeScalars {\n        let index = minStr.index(i, offsetBy:\
    \ 0)\n        let str = String(minStr[index])\n        result.append(str)\n  \
    \  }\n    for i in maxStr.unicodeScalars {\n        let index = maxStr.index(i,\
    \ offsetBy: 0)\n        let str = String(maxStr[index])\n        result.append(str)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5n3jvy2j.swift:27:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = i\n            ^~~\n/tmp/tmp5n3jvy2j.swift:23:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmp5n3jvy2j.swift:30:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = i\n            ^~~\n/tmp/tmp5n3jvy2j.swift:24:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmp5n3jvy2j.swift:41:9: error: cannot assign to value: 'minStr'\
    \ is a 'let' constant\n        minStr = maxStr\n        ^~~~~~\n/tmp/tmp5n3jvy2j.swift:33:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let minStr = String(min)\n\
    \    ^~~\n    var\n/tmp/tmp5n3jvy2j.swift:42:9: error: cannot assign to value:\
    \ 'maxStr' is a 'let' constant\n        maxStr = tmp\n        ^~~~~~\n/tmp/tmp5n3jvy2j.swift:34:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let maxStr = String(max)\n\
    \    ^~~\n    var\n/tmp/tmp5n3jvy2j.swift:44:9: error: invalid redeclaration of\
    \ 'minStr'\n    let minStr = minStr.dropLast()\n        ^\n/tmp/tmp5n3jvy2j.swift:33:9:\
    \ note: 'minStr' previously declared here\n    let minStr = String(min)\n    \
    \    ^\n/tmp/tmp5n3jvy2j.swift:45:9: error: invalid redeclaration of 'maxStr'\n\
    \    let maxStr = maxStr.dropFirst()\n        ^\n/tmp/tmp5n3jvy2j.swift:34:9:\
    \ note: 'maxStr' previously declared here\n    let maxStr = String(max)\n    \
    \    ^\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let min = min(arr)\n    let max = max(arr)\n    var arr2 = arr.sorted()\n\
    \    arr2.reverse()\n    var arr3 = arr2.map { $0.description }\n    arr3.removeAll(\"\
    One\")\n    arr3.removeAll(\"Two\")\n    arr3.removeAll(\"Three\")\n    arr3.removeAll(\"\
    Four\")\n    arr3.removeAll(\"Five\")\n    arr3.removeAll(\"Six\")\n    arr3.removeAll(\"\
    Seven\")\n    arr3.removeAll(\"Eight\")\n    arr3.removeAll(\"Nine\")\n    arr3.removeAll(\"\
    Ten\")\n    arr3.removeAll(\"Eleven\")\n    arr3.removeAll(\"Twelve\")\n    arr3.removeAll(\"\
    Thirteen\")\n    arr3.removeAll(\"Fourteen\")\n    arr3.removeAll(\"Fifteen\"\
    )\n    arr3.removeAll(\"Sixteen\")\n    arr3.removeAll(\"Seventeen\")\n    arr3.removeAll(\"\
    Eighteen\")\n    arr3.removeAll(\"Nineteen\")\n    arr3.removeAll(\"Twenty\")\n\
    \    arr3.removeAll(\"Twenty-one\")\n    arr3.removeAll(\"Twenty-two\")\n    arr3.removeAll(\"\
    Twenty-three\")\n    arr3.removeAll(\"Twenty-four\")\n    arr3.removeAll(\"Twenty-five\"\
    )\n    arr3.removeAll(\"Twenty-six\")\n    arr3.removeAll(\"Twenty-seven\")\n\
    \    arr3.removeAll(\"Twenty-eight\")\n    arr3.removeAll(\"Twenty-nine\")\n \
    \   arr3.removeAll(\"Thirty\")\n    arr3.removeAll(\"Thirty-one\")\n    arr3.removeAll(\"\
    Thirty-two\")\n    arr3.removeAll(\"Thirty-three\")\n    arr3.removeAll(\"Thirty-four\"\
    )\n    arr3.removeAll(\"Thirty-five\")\n    arr3.removeAll(\"Thirty-six\")\n \
    \   arr3.removeAll(\"Thirty-seven\")\n    arr3.removeAll(\"Thirty-eight\")\n \
    \   arr3.removeAll(\"Thirty-nine\")\n    arr3.removeAll(\"Forty\")\n    arr3.removeAll(\"\
    Forty-one\")\n    arr3.removeAll(\"Forty-two\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6q_9a65h.swift:20:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp6q_9a65h.swift:21:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp6q_9a65h.swift:25:10: error: no exact matches in call to instance\
    \ method 'removeAll'\n    arr3.removeAll(\"One\")\n         ^\n/tmp/tmp6q_9a65h.swift:25:10:\
    \ note: candidate expects value of type '(String) throws -> Bool' for parameter\
    \ #1 (got 'String')\n    arr3.removeAll(\"One\")\n         ^\n/tmp/tmp6q_9a65h.swift:25:10:\
    \ note: candidate expects value of type '(String) throws -> Bool' for parameter\
    \ #1 (got 'String')\n    arr3.removeAll(\"One\")\n         ^\n/tmp/tmp6q_9a65h.swift:26:10:\
    \ error: no exact matches in call to instance method 'removeAll'\n    arr3.removeAll(\"\
    Two\")\n         ^\n/tmp/tmp6q_9a65h.swift:26:10: note: candidate expects value\
    \ of type '(String) throws -> Bool' for parameter #1 (got 'String')\n    arr3.removeAll(\"\
    Two\")\n         ^\n/tmp/tmp6q_9a65h.swift:26:10: note: candidate expects value\
    \ of type '(String) throws -> Bool' for parameter #1 (got 'String')\n    arr3.removeAll(\"\
    Two\")\n         ^\n/tmp/tmp6q_9a65h.swift:27:10: error: no exact matches in call\
    \ to instance method 'removeAll'\n    arr3.removeAll(\"Three\")\n         ^\n\
    /tmp/tmp6q_9a65h.swift:27:10: note: candidate expects value of type '(String)\
    \ throws -> Bool' for parameter #1 (got 'String')\n    arr3.removeAll(\"Three\"\
    )\n         ^\n/tmp/tmp6q_9a65h.swift:27:10: note: candidate expects value of\
    \ type '(String) throws -> Bool' for parameter #1 (got 'String')\n    arr3.removeAll(\"\
    Three\")\n         ^\n/tmp/tmp6q_9a65h.swift:28:10: error: no exact matches in\
    \ call to instance method"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    var result = [String]()\n    var length = 0\n    for number in arr\
    \ {\n        if number > 9 {\n            length += 1\n        }\n    }\n    for\
    \ number in arr {\n        if number > 9 {\n            result += [String](repeatElement(number,\
    \ length))\n        } else {\n            result += [String](repeatElement(\"\
    One\", length))\n        }\n    }\n    return result.reverse()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6c6niggp.swift:31:45: error: missing argument label 'count:' in\
    \ call\n            result += [String](repeatElement(number, length))\n      \
    \                                      ^\n                                   \
    \                  count: \n/tmp/tmp6c6niggp.swift:31:46: error: cannot convert\
    \ value of type 'Int' to expected argument type 'String'\n            result +=\
    \ [String](repeatElement(number, length))\n                                  \
    \           ^\n/tmp/tmp6c6niggp.swift:33:45: error: missing argument label 'count:'\
    \ in call\n            result += [String](repeatElement(\"One\", length))\n  \
    \                                          ^\n                               \
    \                     count: \n/tmp/tmp6c6niggp.swift:36:19: error: cannot convert\
    \ return expression of type '()' to return type '[String]'\n    return result.reverse()\n\
    \           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = arr[0]\n    let max = arr[0]\n\
    \    for number in arr {\n        if number > max {\n            max = number\n\
    \        }\n        if number < min {\n            min = number\n        }\n \
    \   }\n    var reversed: [Int] = []\n    for number in arr {\n        reversed.append(number\
    \ * 10 + number - min)\n    }\n    reversed.reverse()\n    for number in reversed\
    \ {\n        let index = reversed.index(of: number)\n        result.append(String(format:\
    \ \"%@\", names[index]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvpsjrmhu.swift:27:13: error: cannot assign to value: 'max' is a\
    \ 'let' constant\n            max = number\n            ^~~\n/tmp/tmpvpsjrmhu.swift:24:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpvpsjrmhu.swift:30:13: error: cannot assign to value: 'min' is\
    \ a 'let' constant\n            min = number\n            ^~~\n/tmp/tmpvpsjrmhu.swift:23:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpvpsjrmhu.swift:39:30: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = reversed.index(of: number)\n     \
    \                        ^\n/tmp/tmpvpsjrmhu.swift:39:30: note: use 'firstIndex(of:)'\
    \ instead\n        let index = reversed.index(of: number)\n                  \
    \           ^~~~~\n                             firstIndex\n/tmp/tmpvpsjrmhu.swift:40:44:\
    \ error: cannot find 'names' in scope\n        result.append(String(format: \"\
    %@\", names[index]))\n                                           ^~~~~\n/tmp/tmpvpsjrmhu.swift:40:29:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \        result.append(String(format: \"%@\", names[index]))\n               \
    \             ^~~~~~~\n                             repeating     count: \n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    var result = [String]()\n    var len = arr.count\n    var min = 1\n\
    \    var max = 9\n    var minIndex = 0\n    var maxIndex = 0\n    while len >\
    \ 0 {\n        let mid = len / 2\n        let midValue = arr[mid]\n        if\
    \ midValue < min {\n            min = midValue\n            minIndex = mid\n \
    \       }\n        if midValue > max {\n            max = midValue\n         \
    \   maxIndex = mid\n        }\n        len -= 1\n    }\n    let minValue = arr[minIndex]\n\
    \    let maxValue = arr[maxIndex]\n    if minValue == maxValue {\n        result.append(minValue)\n\
    \    } else {\n        let minName = one[minValue]\n        let maxName = one[maxValue]\n\
    \        result.append(minName)\n        result.append(maxName)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9t0dy143.swift:44:23: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String'\n        result.append(minValue)\n      \
    \                ^\n/tmp/tmp9t0dy143.swift:46:23: error: cannot find 'one' in\
    \ scope\n        let minName = one[minValue]\n                      ^~~\n/tmp/tmp9t0dy143.swift:47:23:\
    \ error: cannot find 'one' in scope\n        let maxName = one[maxValue]\n   \
    \                   ^~~\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    let sorted = arr.sorted()\n    let reversed = sorted.reversed()\n\
    \    var result = [String]()\n    for i in 0..<sorted.count {\n        let digit\
    \ = sorted[i]\n        let index = reversed.index(of: digit)\n        if index\
    \ != nil {\n            result.append(reversed[index!])\n        } else {\n  \
    \          result.append(digit)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpeyo4t048.swift:27:30: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = reversed.index(of: digit)\n      \
    \                       ^\n/tmp/tmpeyo4t048.swift:27:30: note: use 'firstIndex(of:)'\
    \ instead\n        let index = reversed.index(of: digit)\n                   \
    \          ^~~~~\n                             firstIndex\n/tmp/tmpeyo4t048.swift:29:35:\
    \ error: cannot convert value of type 'Int' to expected argument type 'String'\n\
    \            result.append(reversed[index!])\n                               \
    \   ^\n/tmp/tmpeyo4t048.swift:31:27: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String'\n            result.append(digit)\n     \
    \                     ^\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    guard arr.count <= 9 else { return [] }\n    \n    var result = [String]()\n\
    \    \n    let one = String(format: \"One\")\n    let two = String(format: \"\
    Two\")\n    let three = String(format: \"Three\")\n    let four = String(format:\
    \ \"Four\")\n    let five = String(format: \"Five\")\n    let six = String(format:\
    \ \"Six\")\n    let seven = String(format: \"Seven\")\n    let eight = String(format:\
    \ \"Eight\")\n    let nine = String(format: \"Nine\")\n    \n    var i = 0\n \
    \   while i < arr.count {\n        let value = arr[i]\n        \n        if value\
    \ < 1 || value > 9 {\n            i += 1\n            continue\n        }\n  \
    \      \n        let index = value - 1 // convert from 0-10 to 1-9\n        \n\
    \        result.append(one[index])\n        result.append(two[index])\n      \
    \  result.append(three[index])\n        result.append(four[index])\n        result.append(five[index])\n\
    \        result.append(six[index])\n        result.append(seven[index])\n    \
    \    result.append(eight[index])\n        result.append(nine[index])\n       \
    \ \n        i += 1\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkpnjn0vj.swift:24:15: error: no exact matches in call to initializer\
    \ \n    let one = String(format: \"One\")\n              ^\nSwift.String:4:23:\
    \ note: incorrect labels for candidate (have: '(format:)', expected: '(_:)')\n\
    \    @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible\n\
    \                      ^\nSwift.String:3:12: note: incorrect labels for candidate\
    \ (have: '(format:)', expected: '(_:)')\n    public init<S>(_ other: S) where\
    \ S : LosslessStringConvertible, S : Sequence, S.Element == Character\n      \
    \     ^\nSwift.String:4:12: note: incorrect labels for candidate (have: '(format:)',\
    \ expected: '(_:)')\n    public init<S>(_ characters: S) where S : Sequence, S.Element\
    \ == Character\n           ^\nSwift.RangeReplaceableCollection:3:23: note: incorrect\
    \ labels for candidate (have: '(format:)', expected: '(_:)')\n    @inlinable public\
    \ init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element\n     \
    \                 ^\n/tmp/tmpkpnjn0vj.swift:25:15: error: no exact matches in\
    \ call to initializer \n    let two = String(format: \"Two\")\n              ^\n\
    Swift.String:4:23: note: incorrect labels for candidate (have: '(format:)', expected:\
    \ '(_:)')\n    @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible\n\
    \                      ^\nSwift.String:3:12: note: incorrect labels for candidate\
    \ (have: '(format:)', expected: '(_:)')\n    public init<S>(_ other: S) where\
    \ S : LosslessStringConvertible, S : Sequence, S.Element == Character\n      \
    \     ^\nSwift.String:4:12: note: incorrect labels for candidate (have: '(format:)',\
    \ expected: '(_:)')\n    public init<S>(_ characters: S) where S : Sequence, S.Element\
    \ == Character\n           ^\nSwift.RangeReplaceableCollection:3:23: note: incorrect\
    \ labels for candidate (have: '(format:)', expected: '(_:)')\n    @inlinable public\
    \ init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element\n     \
    \                 ^\n/tmp/tmpkpnjn0vj.swift:26:17: error: no exact matches in\
    \ call to initializer \n    let three = String(format: \"Three\")\n          \
    \      ^\nSwift."
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = min(arr)\n    let max = max(arr)\n\
    \    var reversed = reverseArray(arr)\n    var i = 0\n    while i < reversed.count\
    \ {\n        let digit = reversed[i]\n        if digit < min || digit > max {\n\
    \            i += 1\n            continue\n        }\n        result.append(name[digit])\n\
    \        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2gu8p3v1.swift:23:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp2gu8p3v1.swift:24:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp2gu8p3v1.swift:25:20: error: cannot find 'reverseArray' in scope\n\
    \    var reversed = reverseArray(arr)\n                   ^~~~~~~~~~~~\n/tmp/tmp2gu8p3v1.swift:33:23:\
    \ error: cannot find 'name' in scope\n        result.append(name[digit])\n   \
    \                   ^~~~\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    var result: [String] = []\n    let one = \"One\"\n    let two = \"Two\"\
    \n    let three = \"Three\"\n    let four = \"Four\"\n    let five = \"Five\"\n\
    \    let six = \"Six\"\n    let seven = \"Seven\"\n    let eight = \"Eight\"\n\
    \    let nine = \"Nine\"\n    var temp: Int = 0\n    for element in arr {\n  \
    \      if element < 10 {\n            temp += element\n        } else {\n    \
    \        temp -= element\n            if temp > 0 {\n                result.insert(one[temp],\
    \ at: 0)\n                temp -= one[temp]\n            }\n            if temp\
    \ > 0 {\n                result.insert(two[temp], at: 1)\n                temp\
    \ -= two[temp]\n            }\n            if temp > 0 {\n                result.insert(three[temp],\
    \ at: 2)\n                temp -= three[temp]\n            }\n            if temp\
    \ > 0 {\n                result.insert(four[temp], at: 3)\n                temp\
    \ -= four[temp]\n            }\n            if temp > 0 {\n                result.insert(five[temp],\
    \ at: 4)\n                temp -= five[temp]\n            }\n            if temp\
    \ > 0 {\n                result.insert(six[temp], at: 5)\n                temp\
    \ -= six[temp]\n            }\n            if temp > 0 {\n                result.insert(seven[temp],\
    \ at: 6)\n                temp -= seven[temp]\n            }\n            if temp\
    \ > 0 {\n                result.insert(eight[temp], at: 7)\n                temp\
    \ -= eight[temp]\n            }\n            if temp > 0 {\n                result.insert(nine[temp],\
    \ at: 8)\n                temp -= nine[temp]\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmps8ocqsim.swift:37:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n                result.insert(one[temp],\
    \ at: 0)\n                                 ^\n/tmp/tmps8ocqsim.swift:38:28: error:\
    \ cannot convert value of type 'Character' to expected argument type 'Int'\n \
    \               temp -= one[temp]\n                           ^\n/tmp/tmps8ocqsim.swift:41:34:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result.insert(two[temp], at: 1)\n                           \
    \      ^\n/tmp/tmps8ocqsim.swift:42:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n                temp -= two[temp]\n       \
    \                    ^\n/tmp/tmps8ocqsim.swift:45:36: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result.insert(three[temp],\
    \ at: 2)\n                                   ^\n/tmp/tmps8ocqsim.swift:46:30:\
    \ error: cannot convert value of type 'Character' to expected argument type 'Int'\n\
    \                temp -= three[temp]\n                             ^\n/tmp/tmps8ocqsim.swift:49:35:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result.insert(four[temp], at: 3)\n                          \
    \        ^\n/tmp/tmps8ocqsim.swift:50:29: error: cannot convert value of type\
    \ 'Character' to expected argument type 'Int'\n                temp -= four[temp]\n\
    \                            ^\n/tmp/tmps8ocqsim.swift:53:35: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n             \
    \   result.insert(five[temp], at: 4)\n                                  ^\n/tmp/tmps8ocqsim.swift:54:29:\
    \ error: cannot convert value of type 'Character' to expected argument type 'Int'\n\
    \                temp -= five[temp]\n                            ^\n/tmp/tmps8ocqsim.swift:57:34:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result.insert(six[temp], at: 5)\n                          "
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = 1\n    let max = 9\n    var temp\
    \ = 0\n    for number in arr {\n        if number < min {\n            temp =\
    \ min\n        } else if number > max {\n            temp = max\n        } else\
    \ {\n            temp = number\n        }\n        let index = temp - min\n  \
    \      result.append(names[index])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmprpsksbg0.swift:35:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    \n   \
    \ if arr.isEmpty {\n        return result\n    }\n    \n    let min = min(arr)\n\
    \    let max = max(arr)\n    \n    for i in arr {\n        if i <= min {\n   \
    \         continue\n        }\n        \n        if i > max {\n            continue\n\
    \        }\n        \n        let index = arr.index(of: i)\n        \n       \
    \ if index == 0 {\n            result.append(String(describing: i))\n        \
    \    continue\n        }\n        \n        let first = String(describing: arr[index\
    \ - 1])\n        let second = String(describing: i)\n        \n        result.append(first)\n\
    \        result.append(second)\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpoql6ddjs.swift:25:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpoql6ddjs.swift:26:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpoql6ddjs.swift:37:25: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = arr.index(of: i)\n               \
    \         ^\n/tmp/tmpoql6ddjs.swift:37:25: note: use 'firstIndex(of:)' instead\n\
    \        let index = arr.index(of: i)\n                        ^~~~~\n       \
    \                 firstIndex\n/tmp/tmpoql6ddjs.swift:44:44: error: value of optional\
    \ type 'Array<Int>.Index?' (aka 'Optional<Int>') must be unwrapped to a value\
    \ of type 'Array<Int>.Index' (aka 'Int')\n        let first = String(describing:\
    \ arr[index - 1])\n                                           ^\n/tmp/tmpoql6ddjs.swift:44:44:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let first = String(describing: arr[index - 1])\n            \
    \                               ^\n                                          \
    \ (     ?? <#default value#>)\n/tmp/tmpoql6ddjs.swift:44:44: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        let\
    \ first = String(describing: arr[index - 1])\n                               \
    \            ^\n                                                !\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    \n    var min = 0\n    var max = 9\n  \
    \  var min_index = 0\n    var max_index = 0\n    \n    for index in 0..<arr.count\
    \ {\n        let value = arr[index]\n        \n        if value < min {\n    \
    \        min = value\n            min_index = index\n        }\n        \n   \
    \     if value > max {\n            max = value\n            max_index = index\n\
    \        }\n    }\n    \n    if min == max {\n        return arr\n    }\n    \n\
    \    var temp = min\n    min = max\n    max = temp\n    \n    var temp_min = min\n\
    \    var temp_max = max\n    \n    var temp_min_index = 0\n    var temp_max_index\
    \ = 0\n    \n    for index in 0..<arr.count {\n        let value = arr[index]\n\
    \        \n        if value < min {\n            min = value\n            min_index\
    \ = index\n        }\n        \n        if value > max {\n            max = value\n\
    \            max_index = index\n        }\n    }\n    \n    if min == max {\n\
    \        return arr\n    }\n    \n    var temp = min\n    min = max\n    max =\
    \ temp\n    \n    var temp_min = min\n    var temp_max = max\n    \n    var temp_min_index\
    \ = 0\n    var temp_max_index = 0\n    \n    for index in 0..<arr.count {\n  \
    \      let value = arr[index]\n        \n        if value < min {\n          \
    \  min = value\n            min_index = index\n        }\n        \n        if\
    \ value > max {\n            max = value\n            max_index = index\n    \
    \    }\n    }\n    \n    if min == max {\n        return arr\n    }\n    \n  \
    \  var temp = min\n    min = max\n    max = temp\n    \n    var temp_min = min\n\
    \    var temp_max = max\n    \n    var temp_min_index = 0\n    var temp_max_index\
    \ = 0\n    \n    for index in 0..<arr.count {\n        let value = arr[index]\n\
    \        \n        if value < min {\n            min = value\n            min_index\
    \ = index\n        }\n        \n        if value > max {\n            max = value\n\
    \            max_index = index\n        }\n    }\n    \n    if min == max {\n\
    \        return arr\n    }\n    \n    var temp = min\n    min = max\n    max =\
    \ temp\n    \n    var temp_min = min\n    var temp_max = max\n    \n    var temp_min_index\
    \ = 0\n    var temp_max_index = 0\n    \n    for index in 0..<arr.count {\n  \
    \      let value = arr[index]\n        \n        if value < min {\n          \
    \  min = value\n            min_index = index\n        }\n        \n        if\
    \ value > max {\n            max = value\n            max_index = index\n    \
    \    }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5olv2tam.swift:173:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmp5olv2tam.swift:18:40:\
    \ note: to match this opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n\
    \                                       ^\n/tmp/tmp5olv2tam.swift:44:16: error:\
    \ cannot convert return expression of type '[Int]' to return type '[String]'\n\
    \        return arr\n               ^\n/tmp/tmp5olv2tam.swift:44:16: note: arguments\
    \ to generic parameter 'Element' ('Int' and 'String') are expected to be equal\n\
    \        return arr\n               ^\n/tmp/tmp5olv2tam.swift:72:16: error: cannot\
    \ convert return expression of type '[Int]' to return type '[String]'\n      \
    \  return arr\n               ^\n/tmp/tmp5olv2tam.swift:72:16: note: arguments\
    \ to generic parameter 'Element' ('Int' and 'String') are expected to be equal\n\
    \        return arr\n               ^\n/tmp/tmp5olv2tam.swift:75:9: error: invalid\
    \ redeclaration of 'temp'\n    var temp = min\n        ^\n/tmp/tmp5olv2tam.swift:47:9:\
    \ note: 'temp' previously declared here\n    var temp = min\n        ^\n/tmp/tmp5olv2tam.swift:79:9:\
    \ error: invalid redeclaration of 'temp_min'\n    var temp_min = min\n       \
    \ ^\n/tmp/tmp5olv2tam.swift:51:9: note: 'temp_min' previously declared here\n\
    \    var temp_min = min\n        ^\n/tmp/tmp5olv2tam.swift:80:9: error: invalid\
    \ redeclaration of 'temp_max'\n    var temp_max = max\n        ^\n/tmp/tmp5olv2tam.swift:52:9:\
    \ note: 'temp_max' previously declared here\n    var temp_max = max\n        ^\n\
    /tmp/tmp5olv2tam.swift:82:9: error: invalid redeclaration of 'temp_min_index'\n\
    \    var temp_min_index = 0\n        ^\n/tmp/tmp5olv2tam.swift:54:9: note: 'temp_min_index'\
    \ previously declared here\n    var temp_min_index = 0\n        ^\n/tmp/tmp5olv2tam.swift:83:9:\
    \ error: invalid redeclaration of 'temp_max_index'\n    var temp_max_index = 0\n\
    \        ^\n/tmp/tmp5olv2tam.swift:55:9: note: 'temp_max_index' previously declared\
    \ here\n    var temp_max_index = 0\n        ^\n/tmp/tmp5olv2tam."
  stdout: ''
  timestamp: 1660014174
- exit_code: -1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var index\
    \ = 0\n    while index < arr.count {\n        let value = arr[index]\n       \
    \ let index = arr.index(before: index)\n        if value < 10 {\n            result.append(String(value))\n\
    \        } else {\n            let value = value - 10\n            result.append(String(value))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014179
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let ones = arr.filter{ $0 < 10 }\n    let tens = arr.filter{ $0 >= 10\
    \ && $0 < 20 }\n    let hundreds = arr.filter{ $0 >= 20 }\n    let thousands =\
    \ arr.filter{ $0 >= 100 && $0 < 1000 }\n    let millions = arr.filter{ $0 >= 1000\
    \ && $0 < 10000 }\n    let billions = arr.filter{ $0 >= 10000 && $0 < 100000 }\n\
    \    let trillions = arr.filter{ $0 >= 100000 && $0 < 1000000 }\n    let quadrillions\
    \ = arr.filter{ $0 >= 1000000 && $0 < 10000000 }\n    let quintillions = arr.filter{\
    \ $0 >= 10000000 && $0 < 100000000 }\n    let sextillions = arr.filter{ $0 >=\
    \ 100000000 && $0 < 1000000000 }\n    let septillions = arr.filter{ $0 >= 1000000000\
    \ && $0 < 10000000000 }\n    let octillions = arr.filter{ $0 >= 10000000000 &&\
    \ $0 < 100000000000 }\n    let nonillions = arr.filter{ $0 >= 100000000000 &&\
    \ $0 < 1000000000000 }\n    let decillions = arr.filter{ $0 >= 1000000000000 &&\
    \ $0 < 10000000000000 }\n    let undecillions = arr.filter{ $0 >= 10000000000000\
    \ && $0 < 100000000000000 }\n    let duodecillions = arr.filter{ $0 >= 100000000000000\
    \ && $0 < 1000000000000000 }\n    let tredecillions = arr.filter{ $0 >= 1000000000000000\
    \ && $0 < 10000000000000000 }\n    let quattuordecillions = arr.filter{ $0 >=\
    \ 10000000000000000 && $0 < 100000000000000000 }\n    let quindecillions = arr.filter{\
    \ $0 >= 100000000000000000 && $0 < 1000000000000000000 }\n    let sexdecillions\
    \ = arr.filter{ $0 >= 1000000000000000000 && $0 < 10000000000000000000 }\n   \
    \ let septendecillions = arr.filter{ $0 >= 10000000000000000000 && $0 < 1000000000000000000\
    \ }\n    let octodecillions = arr.filter{ $0 >= 1000000000000000000 && $0 < 10000000000000000000\
    \ }\n    let novemdecillions = arr.filter{ $0 >= 10000000000000000000 && $0 <\
    \ 100000000000000000000 }\n    let vigintillions = arr.filter{ $0 >= 100000000000000000000\
    \ && $0 < 1000000000000000000000 }\n    let thous\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnjux6wv0.swift:44:9: error: type annotation missing in pattern\n\
    \    let thous\n        ^\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    var min = arr[0]\n    var max = arr[0]\n\
    \    for value in arr {\n        if value < min {\n            min = value\n \
    \       } else if value > max {\n            max = value\n        }\n    }\n \
    \   var reversed = [Int]()\n    for value in arr {\n        reversed.append(min\
    \ - value)\n    }\n    var resultStrings = [String]()\n    for value in reversed\
    \ {\n        resultStrings.append(by_digit(String(value)))\n    }\n    for value\
    \ in resultStrings {\n        if value == \"\" {\n            continue\n     \
    \   }\n        if value < 10 {\n            result.append(value)\n        } else\
    \ {\n            result.append(by_digit(String(value - 10)))\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpoin4uldb.swift:38:30: error: cannot find 'by_digit' in scope\n\
    \        resultStrings.append(by_digit(String(value)))\n                     \
    \        ^~~~~~~~\n/tmp/tmpoin4uldb.swift:44:18: error: binary operator '<' cannot\
    \ be applied to operands of type 'String' and 'Int'\n        if value < 10 {\n\
    \           ~~~~~ ^ ~~\n/tmp/tmpoin4uldb.swift:44:18: note: overloads for '<'\
    \ exist with these partially matching parameter lists: (Int, Int), (String, String)\n\
    \        if value < 10 {\n                 ^\n/tmp/tmpoin4uldb.swift:47:27: error:\
    \ cannot find 'by_digit' in scope\n            result.append(by_digit(String(value\
    \ - 10)))\n                          ^~~~~~~~\n/tmp/tmpoin4uldb.swift:47:43: error:\
    \ cannot convert value of type 'String' to expected argument type 'Int'\n    \
    \        result.append(by_digit(String(value - 10)))\n                       \
    \                   ^\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = min(arr)\n    let max = max(arr)\n\
    \    for i in arr {\n        if min <= i && i <= max {\n            result.append(String(format:\
    \ \"%@\", i))\n        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpje3d2j9p.swift:23:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpje3d2j9p.swift:24:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpje3d2j9p.swift:27:33: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"%@\", i))\n                                ^~~~~~~\n                     \
    \            repeating     count: \n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    var i = 0\n    var j = 0\n    var k = 0\n\
    \    var temp = 0\n    var length = 0\n    for k in arr {\n        length = k\n\
    \    }\n    for j in arr {\n        if j == 1 {\n            i += 1\n        }\n\
    \        if j == 2 {\n            i += 2\n        }\n        if j == 3 {\n   \
    \         i += 3\n        }\n        if j == 4 {\n            i += 4\n       \
    \ }\n        if j == 5 {\n            i += 5\n        }\n        if j == 6 {\n\
    \            i += 6\n        }\n        if j == 7 {\n            i += 7\n    \
    \    }\n        if j == 8 {\n            i += 8\n        }\n        if j == 9\
    \ {\n            i += 9\n        }\n        if j == 10 {\n            i += 10\n\
    \        }\n        if j == 11 {\n            i += 11\n        }\n        if j\
    \ == 12 {\n            i += 12\n        }\n        if j == 13 {\n            i\
    \ += 13\n        }\n        if j == 14 {\n            i += 14\n        }\n   \
    \     if j == 15 {\n            i += 15\n        }\n        if j == 16 {\n   \
    \         i += 16\n        }\n        if j == 17 {\n            i += 17\n    \
    \    }\n        if j == 18 {\n            i += 18\n        }\n        if j ==\
    \ 19 {\n            i += 19\n        }\n        if j == 20 {\n            i +=\
    \ 20\n        }\n        if j == 21 {\n            i += 21\n        }\n      \
    \  if j == 22 {\n            i += 22\n        }\n        if j == 23 {\n      \
    \      i += 23\n        }\n        if j == 24 {\n            i += 24\n       \
    \ }\n        if j == 25 {\n            i += 25\n        }\n        if j == 26\
    \ {\n            i += 26\n        }\n        if j == 27 {\n            i += 27\n\
    \        }\n        if j == 28 {\n            i += 28\n        }\n        if j\
    \ == 29 {\n            i += 29\n        }\n        if j == 30 {\n            i\
    \ += 30\n        }\n        if j == 31 {\n            i += 31\n        }\n   \
    \     if j == 32 {\n            i += 32\n        }\n        if j == 33 {\n   \
    \         i += 33\n        }\n        if j == 34 {\n            i += 34\n    \
    \    }\n        if j == 35 {\n            i += 35\n        }\n        if j ==\
    \ 36 {\n            i += 36\n        }\n        if j == 37 {\n            i +=\
    \ 37\n        }\n        if j == 38 {\n            i += 38\n        }\n      \
    \  if j == 39 {\n            i += 39\n        }\n        if j == 40{\n       \
    \     i += 40\n        }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpljwrt06c.swift:172:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmpljwrt06c.swift:18:40:\
    \ note: to match this opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n\
    \                                       ^\n/tmp/tmpljwrt06c.swift:156:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpljwrt06c.swift:19:9:\
    \ warning: variable 'result' was never mutated; consider changing to 'let' constant\n\
    \    var result = [String]()\n    ~~~ ^\n    let\n/tmp/tmpljwrt06c.swift:24:9:\
    \ warning: initialization of variable 'j' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmpljwrt06c.swift:25:9:\
    \ warning: initialization of variable 'k' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var k = 0\n    ~~~~^\n    _\n/tmp/tmpljwrt06c.swift:26:9:\
    \ warning: initialization of variable 'temp' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var temp = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmpljwrt06c.swift:27:9: warning: variable 'length' was written to, but never\
    \ read\n    var length = 0\n        ^\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    var result = [String]()\n    var index = 0\n    var last = 0\n    var\
    \ current = 0\n    var lastString = \"\"\n    var currentString = \"\"\n    while\
    \ index < arr.count {\n        current = arr[index]\n        if current > last\
    \ {\n            lastString = arr[last]\n            currentString = arr[current]\n\
    \            result.append(lastString)\n            result.append(currentString)\n\
    \            last += 1\n            current -= 1\n        } else {\n         \
    \   lastString = arr[last]\n            currentString = arr[current]\n       \
    \     result.append(lastString)\n            result.append(currentString)\n  \
    \          last += 1\n        }\n        index += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpppk1rhdn.swift:29:29: error: cannot assign value of type 'Int'\
    \ to type 'String'\n            lastString = arr[last]\n                     \
    \    ~~~^~~~~~\n/tmp/tmpppk1rhdn.swift:30:32: error: cannot assign value of type\
    \ 'Int' to type 'String'\n            currentString = arr[current]\n         \
    \                   ~~~^~~~~~~~~\n/tmp/tmpppk1rhdn.swift:36:29: error: cannot\
    \ assign value of type 'Int' to type 'String'\n            lastString = arr[last]\n\
    \                         ~~~^~~~~~\n/tmp/tmpppk1rhdn.swift:37:32: error: cannot\
    \ assign value of type 'Int' to type 'String'\n            currentString = arr[current]\n\
    \                            ~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return arr\n\
    \    }\n    var result = [String]()\n    var len = arr.count\n    var min = 1\n\
    \    var max = 9\n    while min <= max {\n        var mid = min + (max - min)\
    \ / 2\n        if arr[mid] < 1 {\n            min = mid + 1\n        } else if\
    \ arr[mid] > 9 {\n            max = mid - 1\n        } else {\n            var\
    \ index = mid - min\n            var digit = String(arr[mid])\n            if\
    \ digit == \"1\" {\n                result.append(String(min))\n            }\
    \ else if digit == \"2\" {\n                result.append(String(min + 1))\n \
    \           } else if digit == \"3\" {\n                result.append(String(min\
    \ + 2))\n            } else if digit == \"4\" {\n                result.append(String(min\
    \ + 3))\n            } else if digit == \"5\" {\n                result.append(String(min\
    \ + 4))\n            } else if digit == \"6\" {\n                result.append(String(min\
    \ + 5))\n            } else if digit == \"7\" {\n                result.append(String(min\
    \ + 6))\n            } else if digit == \"8\" {\n                result.append(String(min\
    \ + 7))\n            } else if digit == \"9\" {\n                result.append(String(min\
    \ + 8))\n            } else {\n                result.append(String(min))\n  \
    \          }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmppm4314tt.swift:20:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmppm4314tt.swift:20:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var i\
    \ = 0\n    for num in arr {\n        if num > 9 {\n            result.append(String(num))\n\
    \        } else {\n            result.append(by_length_helper(num, &i))\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf0wj_oms.swift:25:27: error: cannot find 'by_length_helper' in\
    \ scope\n            result.append(by_length_helper(num, &i))\n              \
    \            ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var index\
    \ = 0\n    while index < arr.count {\n        let value = arr[index]\n       \
    \ if value < 1 || value > 9 {\n            index += 1\n            continue\n\
    \        }\n        let digit = value - 10\n        if digit < 0 {\n         \
    \   digit *= -1\n        }\n        let name = digitToName(digit)\n        result.append(name)\n\
    \        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpui0yhlga.swift:29:19: error: left side of mutating operator isn't\
    \ mutable: 'digit' is a 'let' constant\n            digit *= -1\n            ~~~~~\
    \ ^\n/tmp/tmpui0yhlga.swift:27:9: note: change 'let' to 'var' to make it mutable\n\
    \        let digit = value - 10\n        ^~~\n        var\n/tmp/tmpui0yhlga.swift:31:20:\
    \ error: cannot find 'digitToName' in scope\n        let name = digitToName(digit)\n\
    \                   ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let min = min(arr)\n    let max = max(arr)\n\
    \    let length = max - min + 1\n    let one = String(repeating: oneDigit[min],\
    \ count: length)\n    let two = String(repeating: twoDigit[min], count: length)\n\
    \    let three = String(repeating: threeDigit[min], count: length)\n    let four\
    \ = String(repeating: fourDigit[min], count: length)\n    let five = String(repeating:\
    \ fiveDigit[min], count: length)\n    let six = String(repeating: sixDigit[min],\
    \ count: length)\n    let seven = String(repeating: sevenDigit[min], count: length)\n\
    \    let eight = String(repeating: eightDigit[min], count: length)\n    let nine\
    \ = String(repeating: nineDigit[min], count: length)\n    \n    let ones = arr.filter{$0\
    \ >= 1 && $0 <= 9}\n    let twos = arr.filter{$0 >= 10 && $0 <= 99}\n    let threes\
    \ = arr.filter{$0 >= 100 && $0 <= 999}\n    let fours = arr.filter{$0 >= 1000\
    \ && $0 <= 9999}\n    let fives = arr.filter{$0 >= 10000 && $0 <= 99999}\n   \
    \ let sixes = arr.filter{$0 >= 100000 && $0 <= 999999}\n    let sevens = arr.filter{$0\
    \ >= 1000000 && $0 <= 9999999}\n    let eights = arr.filter{$0 >= 10000000 &&\
    \ $0 <= 99999999}\n    let nines = arr.filter{$0 >= 100000000 && $0 <= 999999999}\n\
    \    \n    let onesReversed = ones[0..<ones.count].reversed()\n    let twosReversed\
    \ = twos[0..<twos.count].reversed()\n    let threesReversed = threes[0..<threes.count].reversed()\n\
    \    let foursReversed = fours[0..<foos.count].reversed()\n    let fivesReversed\
    \ = fives[0..<fives.count].reversed()\n    let sixesReversed = sixes[0..<sixes.count].reversed()\n\
    \    let sevensReversed = sevens[0..<sevens.count].reversed()\n    let eightsReversed\
    \ = eights[0..<eights.count].reversed()\n    let ninesReversed = nines[0..<nines.count].reversed()\n\
    \    \n    let onesReversedString = onesReversed.map { oneDigit[$0] }\n    let\
    \ twosReversedString = twosReversed.map { \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpumw5rmql.swift:77:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmpumw5rmql.swift:18:40:\
    \ note: to match this opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n\
    \                                       ^\n/tmp/tmpumw5rmql.swift:23:22: error:\
    \ missing argument for parameter #2 in call\n    let min = min(arr)\n        \
    \             ^\n                     , <#[Int]#>\nSwift.min:1:24: note: 'min'\
    \ declared here\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T :\
    \ Comparable\n                       ^\n/tmp/tmpumw5rmql.swift:24:22: error: missing\
    \ argument for parameter #2 in call\n    let max = max(arr)\n                \
    \     ^\n                     , <#[Int]#>\nSwift.max:1:24: note: 'max' declared\
    \ here\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n\
    \                       ^\n/tmp/tmpumw5rmql.swift:25:28: error: binary operator\
    \ '+' cannot be applied to operands of type 'Duration' and 'Int'\n    let length\
    \ = max - min + 1\n                 ~~~~~~~~~ ^ ~\n/tmp/tmpumw5rmql.swift:25:28:\
    \ note: overloads for '+' exist with these partially matching parameter lists:\
    \ (Duration, Duration), (Int, Int)\n    let length = max - min + 1\n         \
    \                  ^\n/tmp/tmpumw5rmql.swift:26:33: error: cannot find 'oneDigit'\
    \ in scope\n    let one = String(repeating: oneDigit[min], count: length)\n  \
    \                              ^~~~~~~~\n/tmp/tmpumw5rmql.swift:27:33: error:\
    \ cannot find 'twoDigit' in scope\n    let two = String(repeating: twoDigit[min],\
    \ count: length)\n                                ^~~~~~~~\n/tmp/tmpumw5rmql.swift:28:35:\
    \ error: cannot find 'threeDigit' in scope\n    let three = String(repeating:\
    \ threeDigit[min], count: length)\n                                  ^~~~~~~~~~\n\
    /tmp/tmpumw5rmql.swift:29:34: error: cannot find 'fourDigit' in scope\n    let\
    \ four = String(repeating: fourDigit[min], count: length)\n                  \
    \               ^~~~~~~~~\n/tmp/tmpumw5rmql.swift:30:"
  stdout: ''
  timestamp: 1660014174
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    var\
    \ index = 0\n    var length = 0\n    var last = 0\n    for number in arr {\n \
    \       length += 1\n        if number == last {\n            continue\n     \
    \   }\n        last = number\n        if length == 1 {\n            result.append(String(number))\n\
    \            continue\n        }\n        if number > 9 {\n            result.append(String(number))\n\
    \            continue\n        }\n        let index = number - 10\n        result.append(String(index))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpx7v83g_6/tmpx7v83g_6.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30ad4a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30ad197b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30ad197988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30ad1967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7v83g_6                        0x000055798782e8b1 <unavailable> + 6321

    5    libc.so.6                          0x00002b30ad68c460 __libc_start_main +
    245

    6    tmpx7v83g_6                        0x000055798782e359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    var result = [String]()\n    var index = 0\n    var temp = 0\n   \
    \ var length = 0\n    while index < arr.count {\n        length = arr[index]\n\
    \        if length < 1 || length > 9 {\n            index += 1\n            continue\n\
    \        }\n        if length == 1 {\n            result.append(One)\n       \
    \ } else if length == 2 {\n            result.append(Two)\n        } else if length\
    \ == 3 {\n            result.append(Three)\n        } else if length == 4 {\n\
    \            result.append(Four)\n        } else if length == 5 {\n          \
    \  result.append(Five)\n        } else if length == 6 {\n            result.append(Six)\n\
    \        } else if length == 7 {\n            result.append(Seven)\n        }\
    \ else if length == 8 {\n            result.append(Eight)\n        } else if length\
    \ == 9 {\n            result.append(Nine)\n        } else {\n            index\
    \ += 1\n            continue\n        }\n        temp += 1\n        if temp ==\
    \ length {\n            temp = 0\n            index += 1\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp47szcijx.swift:33:27: error: cannot find 'One' in scope\n     \
    \       result.append(One)\n                          ^~~\n/tmp/tmp47szcijx.swift:35:27:\
    \ error: cannot find 'Two' in scope\n            result.append(Two)\n        \
    \                  ^~~\n/tmp/tmp47szcijx.swift:37:27: error: cannot find 'Three'\
    \ in scope\n            result.append(Three)\n                          ^~~~~\n\
    /tmp/tmp47szcijx.swift:39:27: error: cannot find 'Four' in scope\n           \
    \ result.append(Four)\n                          ^~~~\n/tmp/tmp47szcijx.swift:41:27:\
    \ error: cannot find 'Five' in scope\n            result.append(Five)\n      \
    \                    ^~~~\n/tmp/tmp47szcijx.swift:43:27: error: cannot find 'Six'\
    \ in scope\n            result.append(Six)\n                          ^~~\n/tmp/tmp47szcijx.swift:45:27:\
    \ error: cannot find 'Seven' in scope\n            result.append(Seven)\n    \
    \                      ^~~~~\n/tmp/tmp47szcijx.swift:47:27: error: cannot find\
    \ 'Eight' in scope\n            result.append(Eight)\n                       \
    \   ^~~~~\n/tmp/tmp47szcijx.swift:49:27: error: cannot find 'Nine' in scope\n\
    \            result.append(Nine)\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let sortedArr = arr.sorted(by: { $0 < $1 })\n    let reverseArr = sortedArr.reversed()\n\
    \    let result = reverseArr.map { String($0) }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpfizldg5g/tmpfizldg5g.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b218cd13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b218ca0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b218ca0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b218ca097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfizldg5g                        0x000055e49e148931 <unavailable> + 6449

    5    libc.so.6                          0x00002b218ceff460 __libc_start_main +
    245

    6    tmpfizldg5g                        0x000055e49e1483d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    var result = [String]()\n    var arrCopy = arr.sorted()\n    arrCopy.reverse()\n\
    \    for i in 0..<arrCopy.count {\n        let index = arrCopy.index(of: arrCopy[i])\n\
    \        result.append(String(arrCopy[index]))\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8_dftziz.swift:24:29: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = arrCopy.index(of: arrCopy[i])\n  \
    \                          ^\n/tmp/tmp8_dftziz.swift:24:29: note: use 'firstIndex(of:)'\
    \ instead\n        let index = arrCopy.index(of: arrCopy[i])\n               \
    \             ^~~~~\n                            firstIndex\n/tmp/tmp8_dftziz.swift:25:38:\
    \ error: value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<Int>.Index' (aka 'Int')\n        result.append(String(arrCopy[index]))\n\
    \                                     ^\n/tmp/tmp8_dftziz.swift:24:13: note: short-circuit\
    \ using 'guard' to exit this function early if the optional value contains 'nil'\n\
    \        let index = arrCopy.index(of: arrCopy[i])\n            ^\n        guard\
    \                                     else { return <#default value#> }\n/tmp/tmp8_dftziz.swift:24:29:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let index = arrCopy.index(of: arrCopy[i])\n                 \
    \           ^\n                                                  ?? <#default\
    \ value#>\n/tmp/tmp8_dftziz.swift:24:29: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n        let index = arrCopy.index(of:\
    \ arrCopy[i])\n                            ^\n                               \
    \                  !\n/tmp/tmp8_dftziz.swift:25:38: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n        result.append(String(arrCopy[index]))\n\
    \                                     ^\n                                    \
    \       ?? <#default value#>\n/tmp/tmp8_dftziz.swift:25:38: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        result.append(String(arrCopy[index]))\n\
    \                                     ^\n                                    \
    \      !\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    \n    let min = arr.min()!\n    let max\
    \ = arr.max()!\n    \n    var arr2 = arr\n    \n    if min == max {\n        arr2.removeFirst()\n\
    \    }\n    \n    if min < 9 {\n        arr2.removeLast()\n    }\n    \n    let\
    \ arr3 = arr2.reverse()\n    \n    for i in 0..<arr3.count {\n        let index\
    \ = arr3.index(of: arr3[i])!\n        result.append(names[index])\n    }\n   \
    \ \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpm5zau73r.swift:37:9: warning: constant 'arr3' inferred to have\
    \ type '()', which may be unexpected\n    let arr3 = arr2.reverse()\n        ^\n\
    /tmp/tmpm5zau73r.swift:37:9: note: add an explicit type annotation to silence\
    \ this warning\n    let arr3 = arr2.reverse()\n        ^\n            : ()\n/tmp/tmpm5zau73r.swift:39:23:\
    \ error: value of tuple type '()' has no member 'count'\n    for i in 0..<arr3.count\
    \ {\n                 ~~~~ ^~~~~\n/tmp/tmpm5zau73r.swift:40:26: error: value of\
    \ tuple type '()' has no member 'index'\n        let index = arr3.index(of: arr3[i])!\n\
    \                    ~~~~ ^~~~~\n/tmp/tmpm5zau73r.swift:40:40: error: value of\
    \ type '()' has no subscripts\n        let index = arr3.index(of: arr3[i])!\n\
    \                                   ~~~~^\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.isEmpty\
    \ {\n        return result\n    }\n    let sortedArr = arr.sorted()\n    let reverseArr\
    \ = sortedArr.reversed()\n    var i = 0\n    while i < reverseArr.count {\n  \
    \      let digit = reverseArr[i]\n        let index = Int(digit)\n        if index\
    \ < 10 {\n            result.append(String(index))\n        } else {\n       \
    \     let index = index - 10\n            result.append(String(index))\n     \
    \   }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvjg0e21j.swift:27:31: error: no exact matches in call to subscript\
    \ \n        let digit = reverseArr[i]\n                              ^\nSwift.ReversedCollection:9:23:\
    \ note: candidate expects value of type 'ReversedCollection<[Int]>.Index' for\
    \ parameter #1 (got 'Int')\n    @inlinable public subscript(position: ReversedCollection<Base>.Index)\
    \ -> ReversedCollection<Base>.Element { get }\n                      ^\nSwift.Collection:2:23:\
    \ note: candidate expects value of type 'Range<ReversedCollection<[Int]>.Index>'\
    \ for parameter #1 (got 'Int')\n    @inlinable public subscript(bounds: Range<Self.Index>)\
    \ -> Slice<Self> { get }\n                      ^\nSwift.Collection:3:23: note:\
    \ candidate expects value of type '(UnboundedRange_) -> ()' for parameter #1 (got\
    \ 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence\
    \ { get }\n                      ^\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    guard arr.count > 0 else { return []\
    \ }\n    let sorted = arr.sorted()\n    let reversed = sorted.reversed()\n   \
    \ var result = [String]()\n    for i in 0..<reversed.count {\n        let digit\
    \ = reversed[i]\n        let name = digitToName(digit)\n        result.append(name)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjbbd2q8h.swift:24:29: error: no exact matches in call to subscript\
    \ \n        let digit = reversed[i]\n                            ^\nSwift.ReversedCollection:9:23:\
    \ note: candidate expects value of type 'ReversedCollection<[Int]>.Index' for\
    \ parameter #1 (got 'Int')\n    @inlinable public subscript(position: ReversedCollection<Base>.Index)\
    \ -> ReversedCollection<Base>.Element { get }\n                      ^\nSwift.Collection:2:23:\
    \ note: candidate expects value of type 'Range<ReversedCollection<[Int]>.Index>'\
    \ for parameter #1 (got 'Int')\n    @inlinable public subscript(bounds: Range<Self.Index>)\
    \ -> Slice<Self> { get }\n                      ^\nSwift.Collection:3:23: note:\
    \ candidate expects value of type '(UnboundedRange_) -> ()' for parameter #1 (got\
    \ 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence\
    \ { get }\n                      ^\n/tmp/tmpjbbd2q8h.swift:25:20: error: cannot\
    \ find 'digitToName' in scope\n        let name = digitToName(digit)\n       \
    \            ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014174
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    var\
    \ index = 0\n    for element in arr {\n        if element > 9 {\n            element\
    \ = element - 10\n        }\n        result[index] = names[element]\n        index++\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpardzr6pv.swift:23:13: error: cannot assign to value: 'element'\
    \ is a 'let' constant\n            element = element - 10\n            ^~~~~~~\n\
    /tmp/tmpardzr6pv.swift:25:25: error: cannot find 'names' in scope\n        result[index]\
    \ = names[element]\n                        ^~~~~\n/tmp/tmpardzr6pv.swift:26:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        index++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1660014174
