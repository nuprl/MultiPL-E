language: swift
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() {\n            count += 1\n        }\n    }\n   \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp1m65o6qn.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() {\n            ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string, 0)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpv20g8ukd.swift:8:46: error: extra argument in call\n    return\
    \ count_distinct_characters(string, 0)\n                                    ~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmph12d7jq_.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmph12d7jq_.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk67czmp7.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpk67czmp7.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpk67czmp7.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if let _\
    \ = c.unicodeScalars.first {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpek_io_65/tmpek_io_65.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05a0b17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05a080eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05a080e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05a080d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpek_io_65                        0x0000558cc15315d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b05a0d03460 __libc_start_main +
    245

    6    tmpek_io_65                        0x0000558cc1531109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppbcf8spt.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmppbcf8spt.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isNonSpacing {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmppbcf8spt.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isNonSpacing'\n        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing\
    \ {\n                                                ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = Array(string)\n    var distinctCharacters\
    \ = 0\n    for character in characters {\n        if let _ = CharacterSet.lowercaseLetters.contains(character)\
    \ {\n            distinctCharacters += 2\n        } else if let _ = CharacterSet.uppercaseLetters.contains(character)\
    \ {\n            distinctCharacters += 1\n        } else if let _ = CharacterSet.numbersAndPunctuation.contains(character)\
    \ {\n            distinctCharacters += 1\n        } else if let _ = CharacterSet.symbols.contains(character)\
    \ {\n            distinctCharacters += 1\n        }\n    }\n    return distinctCharacters\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpvj11ysnj.swift:11:20: error: cannot find 'CharacterSet' in scope\n\
    \        if let _ = CharacterSet.lowercaseLetters.contains(character) {\n    \
    \               ^~~~~~~~~~~~\n/tmp/tmpvj11ysnj.swift:13:27: error: cannot find\
    \ 'CharacterSet' in scope\n        } else if let _ = CharacterSet.uppercaseLetters.contains(character)\
    \ {\n                          ^~~~~~~~~~~~\n/tmp/tmpvj11ysnj.swift:15:27: error:\
    \ cannot find 'CharacterSet' in scope\n        } else if let _ = CharacterSet.numbersAndPunctuation.contains(character)\
    \ {\n                          ^~~~~~~~~~~~\n/tmp/tmpvj11ysnj.swift:17:27: error:\
    \ cannot find 'CharacterSet' in scope\n        } else if let _ = CharacterSet.symbols.contains(character)\
    \ {\n                          ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isPunctuation {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpflhxu_24.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpflhxu_24.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isPunctuation {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpflhxu_24.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isPunctuation'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppbcf8spt.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmppbcf8spt.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isNonSpacing {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmppbcf8spt.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isNonSpacing'\n        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing\
    \ {\n                                                ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk67czmp7.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpk67czmp7.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpk67czmp7.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if let _\
    \ = c.unicodeScalars.first {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpek_io_65/tmpek_io_65.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05a0b17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05a080eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05a080e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05a080d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpek_io_65                        0x0000558cc15315d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b05a0d03460 __libc_start_main +
    245

    6    tmpek_io_65                        0x0000558cc1531109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmped9g3n23.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() {\n\
    \            ~ ^~~~~~~~~~~\n/tmp/tmped9g3n23.swift:10:35: error: value of type\
    \ 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase() &&\
    \ !c.isLowercase() {\n                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase && !c.isModifier\
    \ && !c.isCombiningDiacritical {\n            count += 1\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpoo9no35g.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ && !c.isModifier && !c.isCombiningDiacritical {\n            ~ ^~~~~~~~~~~\n\
    /tmp/tmpoo9no35g.swift:10:33: error: value of type 'Unicode.Scalar' has no member\
    \ 'isLowercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ && !c.isModifier && !c.isCombiningDiacritical {\n                          \
    \    ~ ^~~~~~~~~~~\n/tmp/tmpoo9no35g.swift:10:51: error: value of type 'Unicode.Scalar'\
    \ has no member 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase &&\
    \ !c.isTitlecase && !c.isModifier && !c.isCombiningDiacritical {\n           \
    \                                     ~ ^~~~~~~~~~~\n/tmp/tmpoo9no35g.swift:10:69:\
    \ error: value of type 'Unicode.Scalar' has no member 'isModifier'\n        if\
    \ !c.isUppercase && !c.isLowercase && !c.isTitlecase && !c.isModifier && !c.isCombiningDiacritical\
    \ {\n                                                                  ~ ^~~~~~~~~~\n\
    /tmp/tmpoo9no35g.swift:10:86: error: value of type 'Unicode.Scalar' has no member\
    \ 'isCombiningDiacritical'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ && !c.isModifier && !c.isCombiningDiacritical {\n                          \
    \                                                         ~ ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() {\n            count += 1\n        }\n    }\n   \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp1m65o6qn.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() {\n            ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmph12d7jq_.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmph12d7jq_.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk67czmp7.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpk67czmp7.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpk67czmp7.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk67czmp7.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpk67czmp7.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpk67czmp7.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmph12d7jq_.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isWhitespace {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppyajo063.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isWhitespace\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmppyajo063.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isWhitespace {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmppyajo063.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isWhitespace'\n        if !c.isUppercase && !c.isLowercase && !c.isWhitespace\
    \ {\n                                                ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isPunctuation {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpflhxu_24.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpflhxu_24.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isPunctuation {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpflhxu_24.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isPunctuation'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk67czmp7.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpk67czmp7.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpk67czmp7.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmph12d7jq_.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let count = string.unicodeScalars.filter({ $0.isInverted\
    \ }).count\n    return count > 0 ? count : count_distinct_characters(string.lowercased())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmptpv806jv.swift:8:51: error: value of type 'Unicode.Scalar' has\
    \ no member 'isInverted'\n    let count = string.unicodeScalars.filter({ $0.isInverted\
    \ }).count\n                                               ~~ ^~~~~~~~~~\n/tmp/tmptpv806jv.swift:9:58:\
    \ error: missing argument label 'string:' in call\n    return count > 0 ? count\
    \ : count_distinct_characters(string.lowercased())\n                         \
    \                                ^\n                                         \
    \                string: \n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp3lugh67k.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() &&\
    \ !c.isTitlecase() {\n            ~ ^~~~~~~~~~~\n/tmp/tmp3lugh67k.swift:10:35:\
    \ error: value of type 'Unicode.Scalar' has no member 'isLowercase'\n        if\
    \ !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n               \
    \                 ~ ^~~~~~~~~~~\n/tmp/tmp3lugh67k.swift:10:55: error: value of\
    \ type 'Unicode.Scalar' has no member 'isTitlecase'\n        if !c.isUppercase()\
    \ && !c.isLowercase() && !c.isTitlecase() {\n                                \
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_unique_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpdqehu_zm.swift:10:13: error: cannot find 'is_unique_character'\
    \ in scope\n        if !is_unique_character(c) {\n            ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isPunctuation {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpflhxu_24.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpflhxu_24.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isPunctuation {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpflhxu_24.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isPunctuation'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppbcf8spt.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmppbcf8spt.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isNonSpacing {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmppbcf8spt.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isNonSpacing'\n        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing\
    \ {\n                                                ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk67czmp7.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpk67czmp7.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpk67czmp7.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk67czmp7.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpk67czmp7.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpk67czmp7.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isWhitespace {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppyajo063.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isWhitespace\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmppyajo063.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isWhitespace {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmppyajo063.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isWhitespace'\n        if !c.isUppercase && !c.isLowercase && !c.isWhitespace\
    \ {\n                                                ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() {\n            count += 1\n        }\n    }\n   \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp1m65o6qn.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() {\n            ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string, 0)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpv20g8ukd.swift:8:46: error: extra argument in call\n    return\
    \ count_distinct_characters(string, 0)\n                                    ~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string).0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpz720xi_u.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string).0\n        \
    \   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if let _\
    \ = c.unicodeScalars.first {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpek_io_65/tmpek_io_65.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05a0b17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05a080eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05a080e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05a080d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpek_io_65                        0x0000558cc15315d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b05a0d03460 __libc_start_main +
    245

    6    tmpek_io_65                        0x0000558cc1531109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmph12d7jq_.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk67czmp7.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpk67czmp7.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpk67czmp7.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk67czmp7.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpk67czmp7.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpk67czmp7.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = Array(string)\n    var distinctCharacters\
    \ = 0\n    for character in characters {\n        if character != character {\n\
    \            distinctCharacters = distinctCharacters + 1\n        }\n    }\n \
    \   return distinctCharacters\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp8ws5bess/tmp8ws5bess.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe9024ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe8ff41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe8ff41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe8ff407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ws5bess                        0x000055c4d367063a <unavailable> + 5690

    5    libc.so.6                          0x00002abe90436460 __libc_start_main +
    245

    6    tmp8ws5bess                        0x000055c4d3670219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = Array(string)\n    var distinctCharacters\
    \ = 0\n    for character in characters {\n        if character != character.lowercaseString\
    \ {\n            distinctCharacters = distinctCharacters + 1\n        }\n    }\n\
    \    return distinctCharacters\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk44xwc3j.swift:11:35: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'lowercaseString'\n        if character != character.lowercaseString\
    \ {\n                        ~~~~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppbcf8spt.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmppbcf8spt.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isNonSpacing {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmppbcf8spt.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isNonSpacing'\n        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing\
    \ {\n                                                ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !isAlphaNumeric(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp9gz90loq.swift:10:13: error: cannot find 'isAlphaNumeric' in scope\n\
    \        if !isAlphaNumeric(c) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isPunctuation {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpflhxu_24.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpflhxu_24.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isPunctuation {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpflhxu_24.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isPunctuation'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isPunctuation {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpflhxu_24.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpflhxu_24.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isPunctuation {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpflhxu_24.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isPunctuation'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmph12d7jq_.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpwjrufiir.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string).count\n    \
    \       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk67czmp7.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpk67czmp7.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpk67czmp7.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk67czmp7.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpk67czmp7.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpk67czmp7.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if let _\
    \ = c.unicodeScalars.first {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpek_io_65/tmpek_io_65.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05a0b17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05a080eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05a080e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05a080d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpek_io_65                        0x0000558cc15315d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b05a0d03460 __libc_start_main +
    245

    6    tmpek_io_65                        0x0000558cc1531109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase && !c.isModifier\
    \ && !c.isOtherLetter {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpoyx0bxma.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ && !c.isModifier && !c.isOtherLetter {\n            ~ ^~~~~~~~~~~\n/tmp/tmpoyx0bxma.swift:10:33:\
    \ error: value of type 'Unicode.Scalar' has no member 'isLowercase'\n        if\
    \ !c.isUppercase && !c.isLowercase && !c.isTitlecase && !c.isModifier && !c.isOtherLetter\
    \ {\n                              ~ ^~~~~~~~~~~\n/tmp/tmpoyx0bxma.swift:10:51:\
    \ error: value of type 'Unicode.Scalar' has no member 'isTitlecase'\n        if\
    \ !c.isUppercase && !c.isLowercase && !c.isTitlecase && !c.isModifier && !c.isOtherLetter\
    \ {\n                                                ~ ^~~~~~~~~~~\n/tmp/tmpoyx0bxma.swift:10:69:\
    \ error: value of type 'Unicode.Scalar' has no member 'isModifier'\n        if\
    \ !c.isUppercase && !c.isLowercase && !c.isTitlecase && !c.isModifier && !c.isOtherLetter\
    \ {\n                                                                  ~ ^~~~~~~~~~\n\
    /tmp/tmpoyx0bxma.swift:10:86: error: value of type 'Unicode.Scalar' has no member\
    \ 'isOtherLetter'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ && !c.isModifier && !c.isOtherLetter {\n                                   \
    \                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk67czmp7.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpk67czmp7.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpk67czmp7.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmph12d7jq_.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() {\n            count += 1\n        }\n    }\n   \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp1m65o6qn.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() {\n            ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmped9g3n23.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() {\n\
    \            ~ ^~~~~~~~~~~\n/tmp/tmped9g3n23.swift:10:35: error: value of type\
    \ 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase() &&\
    \ !c.isLowercase() {\n                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp3lugh67k.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() &&\
    \ !c.isTitlecase() {\n            ~ ^~~~~~~~~~~\n/tmp/tmp3lugh67k.swift:10:35:\
    \ error: value of type 'Unicode.Scalar' has no member 'isLowercase'\n        if\
    \ !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n               \
    \                 ~ ^~~~~~~~~~~\n/tmp/tmp3lugh67k.swift:10:55: error: value of\
    \ type 'Unicode.Scalar' has no member 'isTitlecase'\n        if !c.isUppercase()\
    \ && !c.isLowercase() && !c.isTitlecase() {\n                                \
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string, 0)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpv20g8ukd.swift:8:46: error: extra argument in call\n    return\
    \ count_distinct_characters(string, 0)\n                                    ~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if let _\
    \ = c.unicodeScalars.first {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpek_io_65/tmpek_io_65.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05a0b17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05a080eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05a080e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05a080d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpek_io_65                        0x0000558cc15315d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b05a0d03460 __libc_start_main +
    245

    6    tmpek_io_65                        0x0000558cc1531109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk67czmp7.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpk67czmp7.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpk67czmp7.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isWhitespace {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppyajo063.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isWhitespace\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmppyajo063.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isWhitespace {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmppyajo063.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isWhitespace'\n        if !c.isUppercase && !c.isLowercase && !c.isWhitespace\
    \ {\n                                                ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isPunctuation {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpflhxu_24.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpflhxu_24.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isPunctuation {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpflhxu_24.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isPunctuation'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppbcf8spt.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmppbcf8spt.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isNonSpacing {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmppbcf8spt.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isNonSpacing'\n        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing\
    \ {\n                                                ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppbcf8spt.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmppbcf8spt.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isNonSpacing {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmppbcf8spt.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isNonSpacing'\n        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing\
    \ {\n                                                ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmph12d7jq_.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isPunctuation {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpflhxu_24.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpflhxu_24.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isPunctuation {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpflhxu_24.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isPunctuation'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_unique_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpdqehu_zm.swift:10:13: error: cannot find 'is_unique_character'\
    \ in scope\n        if !is_unique_character(c) {\n            ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isWhitespace {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppyajo063.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isWhitespace\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmppyajo063.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isWhitespace {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmppyajo063.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isWhitespace'\n        if !c.isUppercase && !c.isLowercase && !c.isWhitespace\
    \ {\n                                                ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string, string.unicodeScalars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmph21cp2m4.swift:8:53: error: extra argument in call\n    return\
    \ count_distinct_characters(string, string.unicodeScalars)\n                 \
    \                   ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_unique_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpdqehu_zm.swift:10:13: error: cannot find 'is_unique_character'\
    \ in scope\n        if !is_unique_character(c) {\n            ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isPunctuation {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpflhxu_24.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpflhxu_24.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isPunctuation {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpflhxu_24.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isPunctuation'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = string.unicodeScalars\n        .map {\
    \ $0.value }\n        .sorted()\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String(\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp91zeskzl.swift:73:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmp91zeskzl.swift:92:69: error: expected '}' at end of brace statement\n\
    assert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)\n     \
    \                                                               ^\n/tmp/tmp91zeskzl.swift:7:55:\
    \ note: to match this opening '{'\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n                                                      ^\n/tmp/tmp91zeskzl.swift:8:22:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    let characters\
    \ = string.unicodeScalars\n                     ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp91zeskzl.swift:76:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660015398
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppbcf8spt.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmppbcf8spt.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isNonSpacing {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmppbcf8spt.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isNonSpacing'\n        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing\
    \ {\n                                                ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase && !c.isModifier\
    \ && !c.isOtherLetter {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpoyx0bxma.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ && !c.isModifier && !c.isOtherLetter {\n            ~ ^~~~~~~~~~~\n/tmp/tmpoyx0bxma.swift:10:33:\
    \ error: value of type 'Unicode.Scalar' has no member 'isLowercase'\n        if\
    \ !c.isUppercase && !c.isLowercase && !c.isTitlecase && !c.isModifier && !c.isOtherLetter\
    \ {\n                              ~ ^~~~~~~~~~~\n/tmp/tmpoyx0bxma.swift:10:51:\
    \ error: value of type 'Unicode.Scalar' has no member 'isTitlecase'\n        if\
    \ !c.isUppercase && !c.isLowercase && !c.isTitlecase && !c.isModifier && !c.isOtherLetter\
    \ {\n                                                ~ ^~~~~~~~~~~\n/tmp/tmpoyx0bxma.swift:10:69:\
    \ error: value of type 'Unicode.Scalar' has no member 'isModifier'\n        if\
    \ !c.isUppercase && !c.isLowercase && !c.isTitlecase && !c.isModifier && !c.isOtherLetter\
    \ {\n                                                                  ~ ^~~~~~~~~~\n\
    /tmp/tmpoyx0bxma.swift:10:86: error: value of type 'Unicode.Scalar' has no member\
    \ 'isOtherLetter'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ && !c.isModifier && !c.isOtherLetter {\n                                   \
    \                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase && !c.isModifier\
    \ && !c.isNonSpacing {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpco17kxs_.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ && !c.isModifier && !c.isNonSpacing {\n            ~ ^~~~~~~~~~~\n/tmp/tmpco17kxs_.swift:10:33:\
    \ error: value of type 'Unicode.Scalar' has no member 'isLowercase'\n        if\
    \ !c.isUppercase && !c.isLowercase && !c.isTitlecase && !c.isModifier && !c.isNonSpacing\
    \ {\n                              ~ ^~~~~~~~~~~\n/tmp/tmpco17kxs_.swift:10:51:\
    \ error: value of type 'Unicode.Scalar' has no member 'isTitlecase'\n        if\
    \ !c.isUppercase && !c.isLowercase && !c.isTitlecase && !c.isModifier && !c.isNonSpacing\
    \ {\n                                                ~ ^~~~~~~~~~~\n/tmp/tmpco17kxs_.swift:10:69:\
    \ error: value of type 'Unicode.Scalar' has no member 'isModifier'\n        if\
    \ !c.isUppercase && !c.isLowercase && !c.isTitlecase && !c.isModifier && !c.isNonSpacing\
    \ {\n                                                                  ~ ^~~~~~~~~~\n\
    /tmp/tmpco17kxs_.swift:10:86: error: value of type 'Unicode.Scalar' has no member\
    \ 'isNonSpacing'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ && !c.isModifier && !c.isNonSpacing {\n                                    \
    \                                               ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = string.unicodeScalars\n        .map {\
    \ $0.value }\n        .sorted()\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String(\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp91zeskzl.swift:73:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmp91zeskzl.swift:92:69: error: expected '}' at end of brace statement\n\
    assert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)\n     \
    \                                                               ^\n/tmp/tmp91zeskzl.swift:7:55:\
    \ note: to match this opening '{'\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n                                                      ^\n/tmp/tmp91zeskzl.swift:8:22:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    let characters\
    \ = string.unicodeScalars\n                     ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp91zeskzl.swift:76:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660015398
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk67czmp7.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpk67czmp7.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpk67czmp7.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string, string.lowercase(),\
    \ string.uppercase())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmprljgvhy1.swift:8:37: error: extra arguments at positions #2, #3\
    \ in call\n    return count_distinct_characters(string, string.lowercase(), string.uppercase())\n\
    \                                    ^\n/tmp/tmprljgvhy1.swift:7:6: note: 'count_distinct_characters(string:)'\
    \ declared here\nfunc count_distinct_characters(string: String) -> Int {\n   \
    \  ^\n/tmp/tmprljgvhy1.swift:8:53: error: value of type 'String' has no member\
    \ 'lowercase'\n    return count_distinct_characters(string, string.lowercase(),\
    \ string.uppercase())\n                                             ~~~~~~ ^~~~~~~~~\n\
    /tmp/tmprljgvhy1.swift:8:73: error: value of type 'String' has no member 'uppercase'\n\
    \    return count_distinct_characters(string, string.lowercase(), string.uppercase())\n\
    \                                                                 ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmph12d7jq_.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmph12d7jq_.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpwjrufiir.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string).count\n    \
    \       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if let _\
    \ = c.unicodeScalars.first {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpek_io_65/tmpek_io_65.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05a0b17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05a080eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05a080e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05a080d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpek_io_65                        0x0000558cc15315d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b05a0d03460 __libc_start_main +
    245

    6    tmpek_io_65                        0x0000558cc1531109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk67czmp7.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpk67czmp7.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpk67czmp7.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string, 0)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpv20g8ukd.swift:8:46: error: extra argument in call\n    return\
    \ count_distinct_characters(string, 0)\n                                    ~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if let _\
    \ = c.unicodeScalars.first {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpek_io_65/tmpek_io_65.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05a0b17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05a080eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05a080e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05a080d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpek_io_65                        0x0000558cc15315d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b05a0d03460 __libc_start_main +
    245

    6    tmpek_io_65                        0x0000558cc1531109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isPunctuation {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpflhxu_24.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpflhxu_24.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isPunctuation {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpflhxu_24.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isPunctuation'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk67czmp7.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpk67czmp7.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpk67czmp7.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmped9g3n23.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() {\n\
    \            ~ ^~~~~~~~~~~\n/tmp/tmped9g3n23.swift:10:35: error: value of type\
    \ 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase() &&\
    \ !c.isLowercase() {\n                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmped9g3n23.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() {\n\
    \            ~ ^~~~~~~~~~~\n/tmp/tmped9g3n23.swift:10:35: error: value of type\
    \ 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase() &&\
    \ !c.isLowercase() {\n                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isPunctuation {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpflhxu_24.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpflhxu_24.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isPunctuation {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpflhxu_24.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isPunctuation'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if let _\
    \ = c.unicodeScalars.first {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpek_io_65/tmpek_io_65.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05a0b17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05a080eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05a080e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05a080d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpek_io_65                        0x0000558cc15315d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b05a0d03460 __libc_start_main +
    245

    6    tmpek_io_65                        0x0000558cc1531109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk67czmp7.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpk67czmp7.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpk67czmp7.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isPunctuation {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpflhxu_24.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpflhxu_24.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isPunctuation {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpflhxu_24.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isPunctuation'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmph12d7jq_.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp3lugh67k.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() &&\
    \ !c.isTitlecase() {\n            ~ ^~~~~~~~~~~\n/tmp/tmp3lugh67k.swift:10:35:\
    \ error: value of type 'Unicode.Scalar' has no member 'isLowercase'\n        if\
    \ !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n               \
    \                 ~ ^~~~~~~~~~~\n/tmp/tmp3lugh67k.swift:10:55: error: value of\
    \ type 'Unicode.Scalar' has no member 'isTitlecase'\n        if !c.isUppercase()\
    \ && !c.isLowercase() && !c.isTitlecase() {\n                                \
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmph12d7jq_.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmped9g3n23.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() {\n\
    \            ~ ^~~~~~~~~~~\n/tmp/tmped9g3n23.swift:10:35: error: value of type\
    \ 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase() &&\
    \ !c.isLowercase() {\n                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if let _\
    \ = c.unicodeScalars.first {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpek_io_65/tmpek_io_65.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05a0b17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05a080eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05a080e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05a080d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpek_io_65                        0x0000558cc15315d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b05a0d03460 __libc_start_main +
    245

    6    tmpek_io_65                        0x0000558cc1531109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() {\n            count += 1\n        }\n    }\n   \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp1m65o6qn.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() {\n            ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isPunctuation {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpflhxu_24.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpflhxu_24.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isPunctuation {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpflhxu_24.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isPunctuation'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk67czmp7.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpk67czmp7.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpk67czmp7.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_unique_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpdqehu_zm.swift:10:13: error: cannot find 'is_unique_character'\
    \ in scope\n        if !is_unique_character(c) {\n            ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let count = string.unicodeScalars.filter({ $0.isInverted\
    \ }).count\n    return count + (string.unicodeScalars.filter({ !$0.isInverted\
    \ }).count - count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmplah4qfyb.swift:8:51: error: value of type 'Unicode.Scalar' has\
    \ no member 'isInverted'\n    let count = string.unicodeScalars.filter({ $0.isInverted\
    \ }).count\n                                               ~~ ^~~~~~~~~~\n/tmp/tmplah4qfyb.swift:9:56:\
    \ error: value of type 'Unicode.Scalar' has no member 'isInverted'\n    return\
    \ count + (string.unicodeScalars.filter({ !$0.isInverted }).count - count)\n \
    \                                                   ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = Array(string)\n    return characters.reduce(0)\
    \ {\n        guard let character = $0 as? Character else { return 0 }\n      \
    \  return character == character ? $0 + 1 : $0\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp7em80p6u.swift:9:33: error: contextual closure type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int') expects 2 arguments, but\
    \ 1 was used in closure body\n    return characters.reduce(0) {\n            \
    \                    ^\n/tmp/tmp7em80p6u.swift:10:34: warning: cast from 'Int'\
    \ to unrelated type 'Character' always fails\n        guard let character = $0\
    \ as? Character else { return 0 }\n                              ~~ ^   ~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk67czmp7.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpk67czmp7.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpk67czmp7.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk67czmp7.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpk67czmp7.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpk67czmp7.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_unique_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpdqehu_zm.swift:10:13: error: cannot find 'is_unique_character'\
    \ in scope\n        if !is_unique_character(c) {\n            ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmph12d7jq_.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isPunctuation {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpflhxu_24.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpflhxu_24.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isPunctuation {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpflhxu_24.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isPunctuation'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppbcf8spt.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmppbcf8spt.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isNonSpacing {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmppbcf8spt.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isNonSpacing'\n        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing\
    \ {\n                                                ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmped9g3n23.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() {\n\
    \            ~ ^~~~~~~~~~~\n/tmp/tmped9g3n23.swift:10:35: error: value of type\
    \ 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase() &&\
    \ !c.isLowercase() {\n                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk67czmp7.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpk67czmp7.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpk67czmp7.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string, string.lowercase(),\
    \ string.uppercase())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmprljgvhy1.swift:8:37: error: extra arguments at positions #2, #3\
    \ in call\n    return count_distinct_characters(string, string.lowercase(), string.uppercase())\n\
    \                                    ^\n/tmp/tmprljgvhy1.swift:7:6: note: 'count_distinct_characters(string:)'\
    \ declared here\nfunc count_distinct_characters(string: String) -> Int {\n   \
    \  ^\n/tmp/tmprljgvhy1.swift:8:53: error: value of type 'String' has no member\
    \ 'lowercase'\n    return count_distinct_characters(string, string.lowercase(),\
    \ string.uppercase())\n                                             ~~~~~~ ^~~~~~~~~\n\
    /tmp/tmprljgvhy1.swift:8:73: error: value of type 'String' has no member 'uppercase'\n\
    \    return count_distinct_characters(string, string.lowercase(), string.uppercase())\n\
    \                                                                 ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmph12d7jq_.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk67czmp7.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpk67czmp7.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpk67czmp7.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isPunctuation {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpflhxu_24.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpflhxu_24.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isPunctuation {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpflhxu_24.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isPunctuation'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmph12d7jq_.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppbcf8spt.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmppbcf8spt.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isNonSpacing {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmppbcf8spt.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isNonSpacing'\n        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing\
    \ {\n                                                ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk67czmp7.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpk67czmp7.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpk67czmp7.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if let _\
    \ = c.unicodeScalars.first {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpek_io_65/tmpek_io_65.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05a0b17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05a080eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05a080e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05a080d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpek_io_65                        0x0000558cc15315d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b05a0d03460 __libc_start_main +
    245

    6    tmpek_io_65                        0x0000558cc1531109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014798
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if let _\
    \ = c.unicodeScalars.first {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpek_io_65/tmpek_io_65.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05a0b17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05a080eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05a080e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05a080d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpek_io_65                        0x0000558cc15315d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b05a0d03460 __libc_start_main +
    245

    6    tmpek_io_65                        0x0000558cc1531109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014798
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if let _\
    \ = c.unicodeScalars.first {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpek_io_65/tmpek_io_65.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05a0b17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05a080eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05a080e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05a080d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpek_io_65                        0x0000558cc15315d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b05a0d03460 __libc_start_main +
    245

    6    tmpek_io_65                        0x0000558cc1531109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmph12d7jq_.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if let _\
    \ = c.unicodeScalars.first {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpek_io_65/tmpek_io_65.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05a0b17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05a080eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05a080e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05a080d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpek_io_65                        0x0000558cc15315d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b05a0d03460 __libc_start_main +
    245

    6    tmpek_io_65                        0x0000558cc1531109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isPunctuation {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpflhxu_24.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpflhxu_24.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isPunctuation {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpflhxu_24.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isPunctuation'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp3lugh67k.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() &&\
    \ !c.isTitlecase() {\n            ~ ^~~~~~~~~~~\n/tmp/tmp3lugh67k.swift:10:35:\
    \ error: value of type 'Unicode.Scalar' has no member 'isLowercase'\n        if\
    \ !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n               \
    \                 ~ ^~~~~~~~~~~\n/tmp/tmp3lugh67k.swift:10:55: error: value of\
    \ type 'Unicode.Scalar' has no member 'isTitlecase'\n        if !c.isUppercase()\
    \ && !c.isLowercase() && !c.isTitlecase() {\n                                \
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string, 0)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpv20g8ukd.swift:8:46: error: extra argument in call\n    return\
    \ count_distinct_characters(string, 0)\n                                    ~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmped9g3n23.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() {\n\
    \            ~ ^~~~~~~~~~~\n/tmp/tmped9g3n23.swift:10:35: error: value of type\
    \ 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase() &&\
    \ !c.isLowercase() {\n                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmph12d7jq_.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() {\n            count += 1\n        }\n    }\n   \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp1m65o6qn.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() {\n            ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isPunctuation {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpflhxu_24.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpflhxu_24.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isPunctuation {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpflhxu_24.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isPunctuation'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmph12d7jq_.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppbcf8spt.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmppbcf8spt.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isNonSpacing {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmppbcf8spt.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isNonSpacing'\n        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing\
    \ {\n                                                ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !isLetter(c)\
    \ {\n            count = count + 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpmd9357jy.swift:10:13: error: cannot find 'isLetter' in scope\n\
    \        if !isLetter(c) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmph12d7jq_.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = Array(string)\n    var distinctCharacters\
    \ = 0\n    for character in characters {\n        if character != character {\n\
    \            distinctCharacters = distinctCharacters + 1\n        }\n    }\n \
    \   return distinctCharacters\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp8ws5bess/tmp8ws5bess.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe9024ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe8ff41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe8ff41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe8ff407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ws5bess                        0x000055c4d367063a <unavailable> + 5690

    5    libc.so.6                          0x00002abe90436460 __libc_start_main +
    245

    6    tmp8ws5bess                        0x000055c4d3670219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmph12d7jq_.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk67czmp7.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpk67czmp7.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpk67czmp7.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq5dedwo4.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !isLetter(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpgvaas937.swift:10:13: error: cannot find 'isLetter' in scope\n\
    \        if !isLetter(c) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014798
