language: swift
name: HumanEval_74_total_match
results:
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmppupwlr1f.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmppupwlr1f.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            }\n        }\n    }\n    return lst3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpsssiavf8/tmpsssiavf8.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac91c45bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac91c152b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac91c152988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac91c1517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsssiavf8                        0x000055c2d445995a <unavailable> + 6490

    5    libc.so.6                          0x00002ac91c647460 __libc_start_main +
    245

    6    tmpsssiavf8                        0x000055c2d4459339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpu4co8ief/tmpu4co8ief.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04074a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b040719fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b040719f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b040719e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4co8ief                        0x000055ca33b34c3f <unavailable> + 7231

    5    libc.so.6                          0x00002b0407694460 __libc_start_main +
    245

    6    tmpu4co8ief                        0x000055ca33b34339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpu4co8ief/tmpu4co8ief.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04074a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b040719fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b040719f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b040719e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4co8ief                        0x000055ca33b34c3f <unavailable> + 7231

    5    libc.so.6                          0x00002b0407694460 __libc_start_main +
    245

    6    tmpu4co8ief                        0x000055ca33b34339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpu4co8ief/tmpu4co8ief.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04074a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b040719fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b040719f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b040719e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4co8ief                        0x000055ca33b34c3f <unavailable> + 7231

    5    libc.so.6                          0x00002b0407694460 __libc_start_main +
    245

    6    tmpu4co8ief                        0x000055ca33b34339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for i in 0..<lst1.count\
    \ {\n        for j in 0..<lst2.count {\n            if lst1[i] < lst2[j] {\n \
    \               lst3.append(lst1[i])\n                break\n            }\n \
    \       }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp1hmacww7/tmp1hmacww7.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375be97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375bb8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375bb8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375bb8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1hmacww7                        0x000055b2c8f84a2a <unavailable> + 6698

    5    libc.so.6                          0x00002b375c083460 __libc_start_main +
    245

    6    tmp1hmacww7                        0x000055b2c8f84409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n                break\n            }\n         \
    \   if str1.count == str2.count {\n                lst3.append(str1)\n       \
    \     }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpo_57fwpo/tmpo_57fwpo.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba612ae5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6127dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6127dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6127db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo_57fwpo                        0x00005560cccb2c3f <unavailable> + 7231

    5    libc.so.6                          0x00002ba612cd1460 __libc_start_main +
    245

    6    tmpo_57fwpo                        0x00005560cccb2339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        if lst2.contains(str) {\n            lst3.append(str)\n        }\n  \
    \  }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpui0f7luq/tmpui0f7luq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebd5979c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebd5670b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebd5670988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebd566f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpui0f7luq                        0x0000556aaee9396a <unavailable> + 6506

    5    libc.so.6                          0x00002aebd5b65460 __libc_start_main +
    245

    6    tmpui0f7luq                        0x0000556aaee93349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmppupwlr1f.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmppupwlr1f.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var result = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          result.append(str1)\n            } else {\n                result.append(str2)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpr54hqgga/tmpr54hqgga.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6eb8bd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6eb88ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6eb88cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6eb88cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr54hqgga                        0x0000563148aae95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6eb8dc1460 __libc_start_main +
    245

    6    tmpr54hqgga                        0x0000563148aae339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n                break\n            }\n        }\n\
    \    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpxpiu809v/tmpxpiu809v.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7497421c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7497118b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7497118988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74971177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxpiu809v                        0x00005585267dc95a <unavailable> + 6490

    5    libc.so.6                          0x00002b749760d460 __libc_start_main +
    245

    6    tmpxpiu809v                        0x00005585267dc339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var result = [String]()\n    for str in lst1 {\n\
    \        if lst2.contains(str) {\n            result.append(str)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmph4tubxt4/tmph4tubxt4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98c0319c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98c0010b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98c0010988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98c000f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph4tubxt4                        0x0000555f21e0c96a <unavailable> + 6506

    5    libc.so.6                          0x00002b98c0505460 __libc_start_main +
    245

    6    tmph4tubxt4                        0x0000555f21e0c349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for i in 0 ..< lst1.count\
    \ {\n        for j in 0 ..< lst2.count {\n            if lst1[i] < lst2[j] {\n\
    \                lst3.append(lst1[i])\n                break\n            }\n\
    \        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpo7d171i7/tmpo7d171i7.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b84dc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b84abfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b84abf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b84abe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7d171i7                        0x000055ae687a7a2a <unavailable> + 6698

    5    libc.so.6                          0x00002b1b84fb4460 __libc_start_main +
    245

    6    tmpo7d171i7                        0x000055ae687a7409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n                break\n            }\n        }\n\
    \    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpxpiu809v/tmpxpiu809v.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7497421c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7497118b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7497118988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74971177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxpiu809v                        0x00005585267dc95a <unavailable> + 6490

    5    libc.so.6                          0x00002b749760d460 __libc_start_main +
    245

    6    tmpxpiu809v                        0x00005585267dc339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmppupwlr1f.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmppupwlr1f.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var result = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                result.append(str1)\n            }\n        }\n    }\n  \
    \  if lst1.count == lst2.count {\n        return result\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp6q_cy5t8.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp6q_cy5t8.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpu4co8ief/tmpu4co8ief.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04074a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b040719fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b040719f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b040719e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4co8ief                        0x000055ca33b34c3f <unavailable> + 7231

    5    libc.so.6                          0x00002b0407694460 __libc_start_main +
    245

    6    tmpu4co8ief                        0x000055ca33b34339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str.count < str2.count {\n       \
    \         lst3.append(str)\n                break\n            }\n        }\n\
    \    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmprjiy3np_/tmprjiy3np_.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba231dbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba231ab3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba231ab3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba231ab27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprjiy3np_                        0x00005630b4f3795a <unavailable> + 6490

    5    libc.so.6                          0x00002ba231fa8460 __libc_start_main +
    245

    6    tmprjiy3np_                        0x00005630b4f37339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpu4co8ief/tmpu4co8ief.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04074a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b040719fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b040719f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b040719e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4co8ief                        0x000055ca33b34c3f <unavailable> + 7231

    5    libc.so.6                          0x00002b0407694460 __libc_start_main +
    245

    6    tmpu4co8ief                        0x000055ca33b34339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        if lst2.contains(str) {\n            lst3.append(str)\n        }\n  \
    \  }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpui0f7luq/tmpui0f7luq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebd5979c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebd5670b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebd5670988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebd566f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpui0f7luq                        0x0000556aaee9396a <unavailable> + 6506

    5    libc.so.6                          0x00002aebd5b65460 __libc_start_main +
    245

    6    tmpui0f7luq                        0x0000556aaee93349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for i in 0..<lst1.count\
    \ {\n        if lst1[i] < lst2[i] {\n            lst3.append(lst1[i])\n      \
    \  } else {\n            lst3.append(lst2[i])\n        }\n    }\n    return lst3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpj7r_e66k/tmpj7r_e66k.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b731a3b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b731a0afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b731a0af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b731a0ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj7r_e66k                        0x0000558144cc3a2a <unavailable> + 6698

    5    libc.so.6                          0x00002b731a5a4460 __libc_start_main +
    245

    6    tmpj7r_e66k                        0x0000558144cc3409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpu4co8ief/tmpu4co8ief.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04074a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b040719fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b040719f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b040719e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4co8ief                        0x000055ca33b34c3f <unavailable> + 7231

    5    libc.so.6                          0x00002b0407694460 __libc_start_main +
    245

    6    tmpu4co8ief                        0x000055ca33b34339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n                break\n            }\n        }\n\
    \    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpxpiu809v/tmpxpiu809v.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7497421c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7497118b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7497118988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74971177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxpiu809v                        0x00005585267dc95a <unavailable> + 6490

    5    libc.so.6                          0x00002b749760d460 __libc_start_main +
    245

    6    tmpxpiu809v                        0x00005585267dc339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpu4co8ief/tmpu4co8ief.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04074a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b040719fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b040719f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b040719e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4co8ief                        0x000055ca33b34c3f <unavailable> + 7231

    5    libc.so.6                          0x00002b0407694460 __libc_start_main +
    245

    6    tmpu4co8ief                        0x000055ca33b34339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpu4co8ief/tmpu4co8ief.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04074a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b040719fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b040719f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b040719e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4co8ief                        0x000055ca33b34c3f <unavailable> + 7231

    5    libc.so.6                          0x00002b0407694460 __libc_start_main +
    245

    6    tmpu4co8ief                        0x000055ca33b34339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    \n    var lst3 = [String]()\n    \n    for str1\
    \ in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    \n    return lst3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpj0r_w137/tmpj0r_w137.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a02171c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a01e68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a01e68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a01e677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0r_w137                        0x000055e990c8395a <unavailable> + 6490

    5    libc.so.6                          0x00002b8a0235d460 __libc_start_main +
    245

    6    tmpj0r_w137                        0x000055e990c83339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmppupwlr1f.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmppupwlr1f.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmppupwlr1f.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmppupwlr1f.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpu4co8ief/tmpu4co8ief.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04074a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b040719fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b040719f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b040719e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4co8ief                        0x000055ca33b34c3f <unavailable> + 7231

    5    libc.so.6                          0x00002b0407694460 __libc_start_main +
    245

    6    tmpu4co8ief                        0x000055ca33b34339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for i in 0..<min(lst1.count,\
    \ lst2.count) {\n        if lst1[i] < lst2[i] {\n            lst3.append(lst1[i])\n\
    \        } else {\n            lst3.append(lst2[i])\n        }\n    }\n    return\
    \ lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(total_match(lst1: [] as\
    \ [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpnwi25mio/tmpnwi25mio.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab84eeac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab84be1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab84be1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab84be07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnwi25mio                        0x000055c6f3035aba <unavailable> + 6842

    5    libc.so.6                          0x00002aab850d6460 __libc_start_main +
    245

    6    tmpnwi25mio                        0x000055c6f3035499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n                break\n            }\n        }\n\
    \    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpxpiu809v/tmpxpiu809v.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7497421c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7497118b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7497118988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74971177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxpiu809v                        0x00005585267dc95a <unavailable> + 6490

    5    libc.so.6                          0x00002b749760d460 __libc_start_main +
    245

    6    tmpxpiu809v                        0x00005585267dc339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmppupwlr1f.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmppupwlr1f.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        if lst2.contains(str) {\n            lst3.append(str)\n        }\n  \
    \  }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpui0f7luq/tmpui0f7luq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebd5979c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebd5670b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebd5670988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebd566f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpui0f7luq                        0x0000556aaee9396a <unavailable> + 6506

    5    libc.so.6                          0x00002aebd5b65460 __libc_start_main +
    245

    6    tmpui0f7luq                        0x0000556aaee93349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n                break\n            }\n        }\n\
    \    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpxpiu809v/tmpxpiu809v.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7497421c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7497118b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7497118988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74971177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxpiu809v                        0x00005585267dc95a <unavailable> + 6490

    5    libc.so.6                          0x00002b749760d460 __libc_start_main +
    245

    6    tmpxpiu809v                        0x00005585267dc339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpu4co8ief/tmpu4co8ief.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04074a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b040719fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b040719f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b040719e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4co8ief                        0x000055ca33b34c3f <unavailable> + 7231

    5    libc.so.6                          0x00002b0407694460 __libc_start_main +
    245

    6    tmpu4co8ief                        0x000055ca33b34339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpu4co8ief/tmpu4co8ief.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04074a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b040719fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b040719f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b040719e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4co8ief                        0x000055ca33b34c3f <unavailable> + 7231

    5    libc.so.6                          0x00002b0407694460 __libc_start_main +
    245

    6    tmpu4co8ief                        0x000055ca33b34339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst = lst1\n    for _,i in enumerate(lst1)\
    \ {\n        for _,j in enumerate(lst2) {\n            if i == j {\n         \
    \       lst.remove(j)\n            }\n        }\n    }\n    return lst\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp9vjuxo00.swift:13:10: error: expected 'in' after for-each pattern\n\
    \    for _,i in enumerate(lst1) {\n         ^\n/tmp/tmp9vjuxo00.swift:13:10: error:\
    \ expected Sequence expression for for-each loop\n    for _,i in enumerate(lst1)\
    \ {\n         ^\n/tmp/tmp9vjuxo00.swift:14:14: error: expected 'in' after for-each\
    \ pattern\n        for _,j in enumerate(lst2) {\n             ^\n/tmp/tmp9vjuxo00.swift:14:14:\
    \ error: expected Sequence expression for for-each loop\n        for _,j in enumerate(lst2)\
    \ {\n             ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    \n    var lst3 = [String]()\n    \n    for str1\
    \ in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    \n    return lst3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpj0r_w137/tmpj0r_w137.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a02171c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a01e68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a01e68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a01e677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0r_w137                        0x000055e990c8395a <unavailable> + 6490

    5    libc.so.6                          0x00002b8a0235d460 __libc_start_main +
    245

    6    tmpj0r_w137                        0x000055e990c83339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var result = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp1esx516q.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp1esx516q.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var result = [String]()\n    for str in lst1 {\n\
    \        if lst2.contains(str) {\n            result = append(result, str)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpo0qogrsz.swift:15:22: error: cannot find 'append' in scope\n  \
    \          result = append(result, str)\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n                break\n            }\n        }\n\
    \    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpxpiu809v/tmpxpiu809v.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7497421c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7497118b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7497118988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74971177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxpiu809v                        0x00005585267dc95a <unavailable> + 6490

    5    libc.so.6                          0x00002b749760d460 __libc_start_main +
    245

    6    tmpxpiu809v                        0x00005585267dc339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n                break\n            }\n        }\n\
    \    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpxpiu809v/tmpxpiu809v.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7497421c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7497118b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7497118988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74971177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxpiu809v                        0x00005585267dc95a <unavailable> + 6490

    5    libc.so.6                          0x00002b749760d460 __libc_start_main +
    245

    6    tmpxpiu809v                        0x00005585267dc339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpu4co8ief/tmpu4co8ief.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04074a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b040719fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b040719f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b040719e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4co8ief                        0x000055ca33b34c3f <unavailable> + 7231

    5    libc.so.6                          0x00002b0407694460 __libc_start_main +
    245

    6    tmpu4co8ief                        0x000055ca33b34339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    \n    var lst3 = [String]()\n    \n    for i in\
    \ 0..<lst1.count {\n        if lst1[i] < lst2[i] {\n            lst3.append(lst1[i])\n\
    \        } else {\n            lst3.append(lst2[i])\n        }\n    }\n    \n\
    \    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpmq8j1inh/tmpmq8j1inh.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5f111cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5f0e13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5f0e13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5f0e127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmq8j1inh                        0x00005570894b7a2a <unavailable> + 6698

    5    libc.so.6                          0x00002ab5f1308460 __libc_start_main +
    245

    6    tmpmq8j1inh                        0x00005570894b7409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n                break\n            }\n\
    \            if str1.characters.count == str2.characters.count {\n           \
    \     lst3.append(str1)\n            }\n        }\n    }\n    return lst3\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpcpxxgca9.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpcpxxgca9.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpcpxxgca9.swift:19:21: error: 'characters'\
    \ is unavailable: Please use String directly\n            if str1.characters.count\
    \ == str2.characters.count {\n                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpcpxxgca9.swift:19:46: error: 'characters'\
    \ is unavailable: Please use String directly\n            if str1.characters.count\
    \ == str2.characters.count {\n                                             ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for i in 0..<min(lst1.count,\
    \ lst2.count) {\n        if lst1[i] < lst2[i] {\n            lst3.append(lst1[i])\n\
    \        } else {\n            lst3.append(lst2[i])\n        }\n    }\n    return\
    \ lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(total_match(lst1: [] as\
    \ [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpnwi25mio/tmpnwi25mio.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab84eeac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab84be1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab84be1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab84be07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnwi25mio                        0x000055c6f3035aba <unavailable> + 6842

    5    libc.so.6                          0x00002aab850d6460 __libc_start_main +
    245

    6    tmpnwi25mio                        0x000055c6f3035499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmppupwlr1f.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmppupwlr1f.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n                break\n            }\n\
    \            if str1.characters.count == str2.characters.count {\n           \
    \     lst3.append(str1)\n            }\n        }\n    }\n    return lst3\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpcpxxgca9.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpcpxxgca9.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpcpxxgca9.swift:19:21: error: 'characters'\
    \ is unavailable: Please use String directly\n            if str1.characters.count\
    \ == str2.characters.count {\n                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpcpxxgca9.swift:19:46: error: 'characters'\
    \ is unavailable: Please use String directly\n            if str1.characters.count\
    \ == str2.characters.count {\n                                             ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var result = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          result.append(str1)\n                break\n            }\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpiljz2cel/tmpiljz2cel.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba999e3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba999b31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba999b31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba999b307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiljz2cel                        0x0000555c2f6a195a <unavailable> + 6490

    5    libc.so.6                          0x00002ba99a026460 __libc_start_main +
    245

    6    tmpiljz2cel                        0x0000555c2f6a1339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n                break\n            }\n        }\n\
    \    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpxpiu809v/tmpxpiu809v.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7497421c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7497118b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7497118988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74971177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxpiu809v                        0x00005585267dc95a <unavailable> + 6490

    5    libc.so.6                          0x00002b749760d460 __libc_start_main +
    245

    6    tmpxpiu809v                        0x00005585267dc339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst = lst1\n    for element in lst2 {\n   \
    \     if !contains(lst, element) {\n            lst.append(element)\n        }\n\
    \    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp3fvlq89y.swift:14:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst, element) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n                break\n            }\n\
    \            if str1.characters.count == str2.characters.count {\n           \
    \     lst3.append(str1)\n            }\n        }\n    }\n    return lst3\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpcpxxgca9.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpcpxxgca9.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpcpxxgca9.swift:19:21: error: 'characters'\
    \ is unavailable: Please use String directly\n            if str1.characters.count\
    \ == str2.characters.count {\n                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpcpxxgca9.swift:19:46: error: 'characters'\
    \ is unavailable: Please use String directly\n            if str1.characters.count\
    \ == str2.characters.count {\n                                             ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n                break\n            }\n        }\n\
    \    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpxpiu809v/tmpxpiu809v.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7497421c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7497118b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7497118988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74971177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxpiu809v                        0x00005585267dc95a <unavailable> + 6490

    5    libc.so.6                          0x00002b749760d460 __libc_start_main +
    245

    6    tmpxpiu809v                        0x00005585267dc339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        if lst2.contains(str) {\n            lst3.append(str)\n        }\n  \
    \  }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpui0f7luq/tmpui0f7luq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebd5979c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebd5670b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebd5670988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebd566f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpui0f7luq                        0x0000556aaee9396a <unavailable> + 6506

    5    libc.so.6                          0x00002aebd5b65460 __libc_start_main +
    245

    6    tmpui0f7luq                        0x0000556aaee93349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmppupwlr1f.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmppupwlr1f.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        if !contains(lst2, str) {\n            lst3.append(str)\n        }\n\
    \    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp9gm1s68v.swift:14:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst2, str) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        if lst2.contains(str) {\n            lst3.append(str)\n        }\n  \
    \  }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpui0f7luq/tmpui0f7luq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebd5979c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebd5670b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebd5670988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebd566f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpui0f7luq                        0x0000556aaee9396a <unavailable> + 6506

    5    libc.so.6                          0x00002aebd5b65460 __libc_start_main +
    245

    6    tmpui0f7luq                        0x0000556aaee93349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    \n    var lst3 = [String]()\n    \n    for i in\
    \ 0..<lst1.count {\n        if lst1[i] < lst2[i] {\n            lst3.append(lst1[i])\n\
    \        } else {\n            lst3.append(lst2[i])\n        }\n    }\n    \n\
    \    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpmq8j1inh/tmpmq8j1inh.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5f111cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5f0e13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5f0e13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5f0e127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmq8j1inh                        0x00005570894b7a2a <unavailable> + 6698

    5    libc.so.6                          0x00002ab5f1308460 __libc_start_main +
    245

    6    tmpmq8j1inh                        0x00005570894b7409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpu4co8ief/tmpu4co8ief.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04074a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b040719fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b040719f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b040719e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4co8ief                        0x000055ca33b34c3f <unavailable> + 7231

    5    libc.so.6                          0x00002b0407694460 __libc_start_main +
    245

    6    tmpu4co8ief                        0x000055ca33b34339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpu4co8ief/tmpu4co8ief.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04074a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b040719fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b040719f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b040719e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4co8ief                        0x000055ca33b34c3f <unavailable> + 7231

    5    libc.so.6                          0x00002b0407694460 __libc_start_main +
    245

    6    tmpu4co8ief                        0x000055ca33b34339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n                break\n            }\n        }\n\
    \    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpxpiu809v/tmpxpiu809v.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7497421c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7497118b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7497118988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74971177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxpiu809v                        0x00005585267dc95a <unavailable> + 6490

    5    libc.so.6                          0x00002b749760d460 __libc_start_main +
    245

    6    tmpxpiu809v                        0x00005585267dc339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    \n    var lst3 = [String]()\n    \n    for str1\
    \ in lst1 {\n        for str2 in lst2 {\n            if str1.characters.count\
    \ < str2.characters.count {\n                lst3.append(str1)\n            }\
    \ else {\n                lst3.append(str2)\n            }\n        }\n    }\n\
    \    \n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpyg5pj7zm.swift:17:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpyg5pj7zm.swift:17:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst = lst1\n    for _ in lst2 {\n        lst\
    \ = lst1\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpr5v48e9b/tmpr5v48e9b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b077d18dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b077ce84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b077ce84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b077ce837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr5v48e9b                        0x000055b57db2685a <unavailable> + 6234

    5    libc.so.6                          0x00002b077d379460 __libc_start_main +
    245

    6    tmpr5v48e9b                        0x000055b57db26239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        if lst2.contains(str) {\n            lst3.append(str)\n        }\n  \
    \  }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpui0f7luq/tmpui0f7luq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebd5979c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebd5670b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebd5670988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebd566f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpui0f7luq                        0x0000556aaee9396a <unavailable> + 6506

    5    libc.so.6                          0x00002aebd5b65460 __libc_start_main +
    245

    6    tmpui0f7luq                        0x0000556aaee93349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n                break\n            }\n        }\n\
    \    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpxpiu809v/tmpxpiu809v.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7497421c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7497118b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7497118988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74971177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxpiu809v                        0x00005585267dc95a <unavailable> + 6490

    5    libc.so.6                          0x00002b749760d460 __libc_start_main +
    245

    6    tmpxpiu809v                        0x00005585267dc339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n                break\n            }\n        }\n\
    \    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpxpiu809v/tmpxpiu809v.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7497421c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7497118b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7497118988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74971177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxpiu809v                        0x00005585267dc95a <unavailable> + 6490

    5    libc.so.6                          0x00002b749760d460 __libc_start_main +
    245

    6    tmpxpiu809v                        0x00005585267dc339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmppupwlr1f.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmppupwlr1f.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    \n    var lst3 = [String]()\n    \n    for str1\
    \ in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    \n    return lst3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpj0r_w137/tmpj0r_w137.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a02171c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a01e68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a01e68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a01e677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0r_w137                        0x000055e990c8395a <unavailable> + 6490

    5    libc.so.6                          0x00002b8a0235d460 __libc_start_main +
    245

    6    tmpj0r_w137                        0x000055e990c83339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst = lst1\n    for _ in lst2 {\n        lst\
    \ = append(lst, \"\")\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpohakf5tp.swift:14:15: error: cannot find 'append' in scope\n  \
    \      lst = append(lst, \"\")\n              ^~~~~~\n"
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for i in 0..<min(lst1.count,\
    \ lst2.count) {\n        if lst1[i] < lst2[i] {\n            lst3.append(lst1[i])\n\
    \        } else {\n            lst3.append(lst2[i])\n        }\n    }\n    return\
    \ lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(total_match(lst1: [] as\
    \ [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpnwi25mio/tmpnwi25mio.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab84eeac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab84be1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab84be1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab84be07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnwi25mio                        0x000055c6f3035aba <unavailable> + 6842

    5    libc.so.6                          0x00002aab850d6460 __libc_start_main +
    245

    6    tmpnwi25mio                        0x000055c6f3035499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpu4co8ief/tmpu4co8ief.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04074a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b040719fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b040719f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b040719e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4co8ief                        0x000055ca33b34c3f <unavailable> + 7231

    5    libc.so.6                          0x00002b0407694460 __libc_start_main +
    245

    6    tmpu4co8ief                        0x000055ca33b34339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n                break\n            }\n\
    \            if str1.characters.count == str2.characters.count {\n           \
    \     lst3.append(str1)\n            }\n        }\n    }\n    return lst3\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpcpxxgca9.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpcpxxgca9.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpcpxxgca9.swift:19:21: error: 'characters'\
    \ is unavailable: Please use String directly\n            if str1.characters.count\
    \ == str2.characters.count {\n                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpcpxxgca9.swift:19:46: error: 'characters'\
    \ is unavailable: Please use String directly\n            if str1.characters.count\
    \ == str2.characters.count {\n                                             ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n                break\n            }\n        }\n\
    \    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpxpiu809v/tmpxpiu809v.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7497421c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7497118b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7497118988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74971177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxpiu809v                        0x00005585267dc95a <unavailable> + 6490

    5    libc.so.6                          0x00002b749760d460 __libc_start_main +
    245

    6    tmpxpiu809v                        0x00005585267dc339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst = lst1\n    for x in lst2 {\n        if\
    \ lst.contains(x) {\n            lst.remove(x)\n        }\n    }\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp1kf0np32.swift:15:17: error: no exact matches in call to instance\
    \ method 'remove'\n            lst.remove(x)\n                ^\n/tmp/tmp1kf0np32.swift:15:17:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \            lst.remove(x)\n                ^\n/tmp/tmp1kf0np32.swift:15:17: note:\
    \ candidate expects value of type 'Array<String>.Index' (aka 'Int') for parameter\
    \ #1 (got 'String')\n            lst.remove(x)\n                ^\n"
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpu4co8ief/tmpu4co8ief.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04074a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b040719fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b040719f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b040719e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4co8ief                        0x000055ca33b34c3f <unavailable> + 7231

    5    libc.so.6                          0x00002b0407694460 __libc_start_main +
    245

    6    tmpu4co8ief                        0x000055ca33b34339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for i in 0..<lst1.count\
    \ {\n        for j in 0..<lst2.count {\n            if lst1[i] == lst2[j] {\n\
    \                lst3.append(lst1[i])\n                break\n            }\n\
    \        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp4sajpg_b/tmp4sajpg_b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f96cf6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f969edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f969ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f969ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4sajpg_b                        0x0000558a5b9a8a2a <unavailable> + 6698

    5    libc.so.6                          0x00002b5f96ee2460 __libc_start_main +
    245

    6    tmp4sajpg_b                        0x0000558a5b9a8409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    \n    var lst3 = [String]()\n    \n    for i in\
    \ 0..<lst1.count {\n        if lst1[i] < lst2[i] {\n            lst3.append(lst1[i])\n\
    \        } else {\n            lst3.append(lst2[i])\n        }\n    }\n    \n\
    \    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpmq8j1inh/tmpmq8j1inh.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5f111cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5f0e13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5f0e13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5f0e127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmq8j1inh                        0x00005570894b7a2a <unavailable> + 6698

    5    libc.so.6                          0x00002ab5f1308460 __libc_start_main +
    245

    6    tmpmq8j1inh                        0x00005570894b7409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var result = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp1esx516q.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp1esx516q.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n            } else {\n                lst3.append(str2)\n\
    \            }\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7j06it6i/tmp7j06it6i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6ec061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ebd58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ebd58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ebd577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j06it6i                        0x000056005d51095a <unavailable> + 6490

    5    libc.so.6                          0x00002ac6ec24d460 __libc_start_main +
    245

    6    tmp7j06it6i                        0x000056005d510339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str in lst1 {\n\
    \        for str2 in lst2 {\n            if str == str2 {\n                lst3.append(str)\n\
    \                break\n            }\n        }\n    }\n    return lst3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeomcz_a8/tmpeomcz_a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d04cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d049bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d049bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d049be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeomcz_a8                        0x000055fbbfc5c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b6d04eb4460 __libc_start_main +
    245

    6    tmpeomcz_a8                        0x000055fbbfc5c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n                break\n            }\n        }\n\
    \    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpxpiu809v/tmpxpiu809v.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7497421c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7497118b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7497118988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74971177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxpiu809v                        0x00005585267dc95a <unavailable> + 6490

    5    libc.so.6                          0x00002b749760d460 __libc_start_main +
    245

    6    tmpxpiu809v                        0x00005585267dc339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.count < str2.count {\n      \
    \          lst3.append(str1)\n                break\n            }\n        }\n\
    \    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpxpiu809v/tmpxpiu809v.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7497421c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7497118b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7497118988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74971177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxpiu809v                        0x00005585267dc95a <unavailable> + 6490

    5    libc.so.6                          0x00002b749760d460 __libc_start_main +
    245

    6    tmpxpiu809v                        0x00005585267dc339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var lst3 = [String]()\n    for str1 in lst1 {\n\
    \        for str2 in lst2 {\n            if str1.characters.count < str2.characters.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfn20ztgt.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfn20ztgt.swift:15:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820759
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    \n    var lst3 = [String]()\n    \n    for str1\
    \ in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                lst3.append(str1)\n            } else {\n               \
    \ lst3.append(str2)\n            }\n        }\n    }\n    \n    return lst3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpj0r_w137/tmpj0r_w137.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a02171c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a01e68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a01e68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a01e677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0r_w137                        0x000055e990c8395a <unavailable> + 6490

    5    libc.so.6                          0x00002b8a0235d460 __libc_start_main +
    245

    6    tmpj0r_w137                        0x000055e990c83339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820760
