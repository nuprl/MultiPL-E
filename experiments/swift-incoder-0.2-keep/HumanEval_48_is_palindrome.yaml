name: HumanEval_48_is_palindrome
language: swift
prompt: "\n/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
  /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
  /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfunc is_palindrome(text: String)\
  \ -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_palindrome(text: \"\") == true)\nassert(is_palindrome(text:\
  \ \"aba\") == true)\nassert(is_palindrome(text: \"aaaaa\") == true)\nassert(is_palindrome(text:\
  \ \"zbcd\") == false)\nassert(is_palindrome(text: \"xywyx\") == true)\nassert(is_palindrome(text:\
  \ \"xywyz\") == false)\nassert(is_palindrome(text: \"xywzx\") == false)"
completions: ["    if text == \"\" {\n        return true\n    }\n    var left = 0\n\
    \    var right = text.count - 1\n    var middle = text.count / 2\n    var middle2\
    \ = text.count / 2\n    var middle3 = text.count / 2\n    var middle4 = text.count\
    \ / 2\n    var middle5 = text.count / 2\n    var middle6 = text.count / 2\n  \
    \  var middle7 = text.count / 2\n    var middle8 = text.count / 2\n    var middle9\
    \ = text.count / 2\n    var middle10 = text.count / 2\n    var middle11 = text.count\
    \ / 2\n    var middle12 = text.count / 2\n    var middle13 = text.count / 2\n\
    \    var middle14 = text.count / 2\n    var middle15 = text.count / 2\n    var\
    \ middle16 = text.count / 2\n    var middle17 = text.count / 2\n    var middle18\
    \ = text.count / 2\n    var middle19 = text.count / 2\n    var middle20 = text.count\
    \ / 2\n    var middle21 = text.count / 2\n    var middle22 = text.count / 2\n\
    \    var middle23 = text.count / 2\n    var middle24 = text.count / 2\n    var\
    \ middle25 = text.count / 2\n    var middle26 = text.count / 2\n    var middle27\
    \ = text.count / 2\n    var middle28 = text.count / 2\n    var middle29 = text.count\
    \ / 2\n    var middle30 = text.count / 2\n    var middle31 = text.count / 2\n\
    \    var middle32 = text.count / 2\n    var middle33 = text.count / 2\n    var\
    \ middle34 = text.count / 2\n    var middle35 = text.count / 2\n    var middle36\
    \ = text.count / 2\n    var middle37 = text.count / 2\n    var middle38 = text.count\
    \ / 2\n    var middle39 = text.count / 2\n    var middle40 = text.count / 2\n\
    \    var middle41 = text.count / 2\n    var middle42 = text.count / 2\n    var\
    \ middle43 = text.count / 2\n    var middle44 = text.count / 2\n    var middle45\
    \ = text.count / 2\n    var middle46 = text.count / 2\n    var middle47 = text.count\
    \ / 2\n    var middle48 = text.count / 2\n    var middle49 = text.count / 2\n\
    \    var middle50 = text.count / 2\n    var middle51 = text.count / 2\n    var\
    \ middle52 = text.count / 2\n    var middle53 = text.count / 2\n    var middle54\
    \ = text.count / 2\n    var middle55 = text.count / 2\n    var middle56 = text.count\
    \ / 2", "    let textLength = text.characters.count\n    if textLength <= 1 {\n\
    \        return true\n    }\n    let firstChar = text.characters.first!\n    let\
    \ lastChar = text.characters.last!\n    if firstChar == lastChar {\n        return\
    \ is_palindrome(text.substringToIndex(text.startIndex.advancedBy(1)))\n    }\n\
    \    return false", "    var left = 0\n    var right = text.count - 1\n    var\
    \ middle = text.count / 2\n    while left < right {\n        if text[left] !=\
    \ text[right] {\n            return false\n        }\n        left += 1\n    \
    \    right -= 1\n    }\n    return true", "    if text == \"\" {\n        return\
    \ true\n    }\n\n    var i = 0\n    var j = text.count - 1\n\n    while i < j\
    \ {\n        if text[i] != text[j] {\n            return false\n        }\n\n\
    \        i += 1\n        j -= 1\n    }\n\n    return true", "    if text == \"\
    \" {\n        return true\n    }\n    var reversedString = String()\n    for index\
    \ in 0..<text.count {\n        reversedString.append(text[index])\n    }\n   \
    \ return text == reversedString", "    if text == \"\" {\n        return true\n\
    \    }\n    var reversed = \"\"\n    for index in 0..<text.count {\n        reversed\
    \ = reversed! + String(text[index])\n    }\n    return text == reversed", "  \
    \  var reversed = String()\n    var index = 0\n    while index < text.count {\n\
    \        reversed.append(text.characters[index])\n        index += 1\n    }\n\
    \    return text == reversed", "    var reversed = String()\n    var length =\
    \ text.characters.count\n    for _ in 0..<length / 2 {\n        reversed.append(text.characters.last!)\n\
    \    }\n    return text == reversed", "    if text == \"\" {\n        return true\n\
    \    }\n    var reversed = String()\n    var i = 0\n    var j = text.count - 1\n\
    \    for char in text {\n        reversed.append(char)\n    }\n    for char in\
    \ reversed {\n        if char != text[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return true", "    let length = text.characters.count\n\
    \    if length < 1 {\n        return true\n    }\n    let reversedString = String()\n\
    \    for i in 0..<length {\n        reversedString.append(text.characters.reversed().first!)\n\
    \    }\n    return text == reversedString", "    if text == \"\" {\n        return\
    \ true\n    }\n    var reversed = \"\"\n    for char in text {\n        reversed\
    \ = reversed + String(char)\n    }\n    return text == reversed", "    if text\
    \ == \"\" {\n        return true\n    }\n    var reversed = \"\"\n    var i =\
    \ 0\n    for c in text {\n        reversed = reversed + String(c)\n        i +=\
    \ 1\n    }\n    return text == reversed", "    let length = text.count\n    if\
    \ length == 0 {\n        return true\n    }\n    if length == 1 {\n        return\
    \ text == text.reversed()\n    }\n    let mid = length / 2\n    return is_palindrome(text.prefix(mid))\
    \ && is_palindrome(text.suffix(mid))", "    var reversedText = String()\n    for\
    \ char in text {\n        reversedText.append(char)\n    }\n    return text ==\
    \ reversedText", "    if text == \"\" {\n        return true\n    }\n\n    var\
    \ left = 0\n    var right = text.count - 1\n\n    while left < right {\n     \
    \   if text[left] != text[right] {\n            return false\n        }\n\n  \
    \      left += 1\n        right -= 1\n    }\n\n    return true", "    let reversed\
    \ = text.characters.reversed()\n    return text == reversed", "    let length\
    \ = text.characters.count\n    if length < 1 {\n        return true\n    }\n \
    \   var reversed = String()\n    for index in 0..<length {\n        reversed.append(text.characters.reversed().first!)\n\
    \    }\n    return text == reversed", "    let length = text.characters.count\n\
    \    if length < 1 {\n        return true\n    }\n    if length == 1 {\n     \
    \   return text == String(text.characters.first!)\n    }\n    if length == 2 {\n\
    \        return text == String(text.characters.first!) + String(text.characters.last!)\n\
    \    }\n    if length == 3 {\n        return text == String(text.characters.first!)\
    \ + String(text.characters.last!) + String(text.characters.last!)\n    }\n   \
    \ if length == 4 {\n        return text == String(text.characters.first!) + String(text.characters.last!)\
    \ + String(text.characters.last!) + String(text.characters.last!)\n    }\n   \
    \ if length == 5 {\n        return text == String(text.characters.first!) + String(text.characters.last!)\
    \ + String(text.characters.last!) + String(text.characters.last!) + String(text.characters.last!)\n\
    \    }\n    if length == 6 {\n        return text == String(text.characters.first!)\
    \ + String(text.characters.last!) + String(text.characters.last!) + String(text.characters.last!)\
    \ + String(text.characters.last!) + String(text.characters.last!)\n    }\n   \
    \ if length == 7 {\n        return text == String(text.characters.first!) + String(text.characters.last!)\
    \ + String(text.characters.last!) + String(text.characters.last!) + String(text.characters.last!)\
    \ + String(text.characters.last!) + String(text.characters.last!)\n    }\n   \
    \ if length == 8 {\n        return text == String(text.characters.first!) + String(text.characters.last!)\
    \ + String(text.characters.last!) + String(text.characters.last!) + String(text.characters.last!)\
    \ + String(text.characters.last!) + String(text.characters.last!) + String(text.characters.last!)\n\
    \    }\n    if length == 9 {\n        return text == String(text.characters.first!)\
    \ + String(text.characters.last!) + String(text.characters.last!) + String(text.characters.last!)\
    \ + String(text.characters.last!) + String(text.characters.last!) + String(text.characters.last!)\
    \ + String(text.characters.last!) + String(text.characters.last!)\n    }\n   \
    \ if length == 10 {\n        return text == String(text.characters.first!) + String(text.characters.last!)\
    \ + String(text.characters.last!) + String(text.characters.last!) + String(text.characters.last!)\
    \ + String(text.characters.last!) + String(text.characters.last!) + String(text.characters.last!)\
    \ + String(text.characters.last!) + String(text.characters.last!)\n    }\n   \
    \ if length == 11 {\n        return text == String(text.characters.first!) + String(text.characters.last!)\
    \ + String(text.characters.last!) + String(text.characters.last!) + String(text.characters.last!)\
    \ + String(text.characters.last!) + String(text.characters.last!) + String(text.characters.last!)\
    \ + ", "    if text == \"\" {\n        return true\n    }\n\n    var left = 0\n\
    \    var right = text.count - 1\n\n    while left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n\n        left += 1\n\
    \        right -= 1\n    }\n\n    return true", "    let text = text.characters.reversed()\n\
    \    return text == text.reversed()"]
stop_tokens:
- "\n}"
