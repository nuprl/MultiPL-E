name: HumanEval_10_make_palindrome
language: swift
prompt: "\n/// Find the shortest palindrome that begins with a supplied string.\n\
  /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
  \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
  \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome('')\n\
  /// ''\n/// >>> make_palindrome('cat')\n/// 'catac'\n/// >>> make_palindrome('cata')\n\
  /// 'catac'\nfunc make_palindrome(string: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(make_palindrome(string: \"\") == \"\")\n\
  assert(make_palindrome(string: \"x\") == \"x\")\nassert(make_palindrome(string:\
  \ \"xyz\") == \"xyzyx\")\nassert(make_palindrome(string: \"xyx\") == \"xyx\")\n\
  assert(make_palindrome(string: \"jerry\") == \"jerryrrej\")"
completions: ["    var stringToReturn = string\n    var longestPalindrome = string\n\
    \    var longestPalindromeLength = 0\n    for stringToCheck in string.characters\
    \ {\n        if stringToCheck == stringToReturn[longestPalindromeLength] {\n \
    \           longestPalindromeLength += 1\n        } else {\n            longestPalindromeLength\
    \ = 0\n        }\n        if longestPalindromeLength > longestPalindrome.characters.count\
    \ {\n            longestPalindrome = stringToReturn\n            longestPalindromeLength\
    \ = stringToReturn.characters.count\n        }\n    }\n    for stringToCheck in\
    \ string.characters {\n        if stringToCheck != stringToReturn[longestPalindromeLength]\
    \ {\n            stringToReturn = stringToReturn + stringToReturn[longestPalindromeLength]\n\
    \        }\n    }\n    return stringToReturn", "    var result = \"\"\n    var\
    \ longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    for i :=\
    \ 0; i < len(string); i++ {\n        if string[i] == string[len(string)-i-1] {\n\
    \            result += string[i]\n            longestPalindromeLength += 1\n \
    \           if longestPalindromeLength > longestPalindrome {\n               \
    \ longestPalindrome = longestPalindromeLength\n                longestPalindrome\
    \ = string[len(string)-i-1]\n            }\n        } else {\n            result\
    \ += string[i]\n        }\n    }\n    return result + longestPalindrome", "  \
    \  var result = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromePostfixLength = 0\n    var longestPalindromePostfix\
    \ = 0\n    var longestPalindromePostfixReverse = 0\n    var longestPalindromePostfixReverseLength\
    \ = 0\n    var longestPalindromePostfixReversePrefix = 0\n    var longestPalindromePostfixReverseSuffix\
    \ = 0\n    var longestPalindromePostfixReversePostfix = 0\n    var longestPalindromePostfixReversePostfixLength\
    \ = 0\n    var longestPalindromePostfixReversePostfixReverse = 0\n    var longestPalindromePostfixReversePostfixReverseLength\
    \ = 0\n    var longestPalindromePostfixReversePostfixReversePrefix = 0\n    var\
    \ longestPalindromePostfixReversePostfixReverseSuffix = 0\n    var longestPalindromePostfixReversePostfixReversePostfix\
    \ = 0\n    var longestPalindromePostfixReversePostfixReversePostfixLength = 0\n\
    \    var longestPalindromePostfixReversePostfixReversePostfixReverse = 0\n   \
    \ var longestPalindromePostfixReversePostfixReversePostfixReverseLength = 0\n\
    \    var longestPalindromePostfixReversePostfixReversePostfixReversePrefix = 0\n\
    \    var longestPalindromePostfixReversePostfixReversePostfixSuffix = 0\n    var\
    \ longestPalindromePostfixReversePostfixReversePostfixPostfix = 0\n    var longestPalindromePostfixReversePostfixReversePostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixReversePostfixReversePostfixReversePrefix\
    \ = 0\n    var longestPalindromePostfixReversePostfixReversePostfixSuffix = 0\n\
    \    var longestPalindromePostfixReversePostfixReversePostfixPostfix = 0\n   \
    \ var longestPalindromePostfixReversePostfixReversePostfixPostfixLength = 0\n\
    \    var longestPalindromePostfixReversePostfixReversePostfixReversePrefix = 0\n\
    \    var longestPalindromePostfixReversePostfixReversePostfixSuffix = 0\n    var\
    \ longestPalindromePostfixReversePostfixReversePostfixPostfix = 0\n    var longestPalindromePostfixReversePostfixReversePostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixReversePostfixReversePostfixReversePrefix\
    \ = 0\n    var longestPalindromePostfixReversePostfixReversePostfix", "    var\
    \ result = \"\"\n    var start = 0\n    var end = string.count\n    var longest\
    \ = 0\n    var longestStart = 0\n    var longestEnd = 0\n    var longestLength\
    \ = 0\n    var longestPalindrome = \"\"\n    var longestPalindromeStart = 0\n\
    \    var longestPalindromeEnd = 0\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromePalindrome = \"\"\n    var longestPalindromePalindromeStart\
    \ = 0\n    var longestPalindromePalindromeEnd = 0\n    var longestPalindromePalindromeLength\
    \ = 0\n    var longestPalindromePalindromePalindrome = \"\"\n    var longestPalindromePalindromePalindromeStart\
    \ = 0\n    var longestPalindromePalindromePalindromeEnd = 0\n    var longestPalindromePalindromePalindromeLength\
    \ = 0\n    var longestPalindromePalindromePalindromePalindrome = \"\"\n    var\
    \ longestPalindromePalindromePalindromePalindromeStart = 0\n    var longestPalindromePalindromePalindromePalindromeEnd\
    \ = 0\n    var longestPalindromePalindromePalindromePalindromeLength = 0\n   \
    \ var longestPalindromePalindromePalindromePalindromePalindrome = \"\"\n    var\
    \ longestPalindromePalindromePalindromePalindromeStart = 0\n    var longestPalindromePalindromePalindromePalindromeEnd\
    \ = 0\n    var longestPalindromePalindromePalindromePalindromeLength = 0\n   \
    \ var longestPalindromePalindromePalindromePalindromePalindrome = \"\"\n    var\
    \ longestPalindromePalindromePalindromePalindromeStart = 0\n    var longestPalindromePalindromePalindromePalindromeEnd\
    \ = 0\n    var longestPalindromePalindromePalindromePalindromeLength = 0\n   \
    \ var longestPalindromePalindromePalindromePalindromePalindrome = \"\"\n    var\
    \ longestPalindromePalindromePalindromePalindromeStart = 0\n    var longestPalindromePalindromePalindromePalindromeEnd\
    \ = 0\n    var longestPalin", "    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = string.length\n    for start in 0..<longestPalindromeLength {\n        var\
    \ longestPalindromeStart = start\n        var longestPalindromeEnd = start\n \
    \       var longestPalindromeSuffix = string[longestPalindromeStart..<longestPalindromeEnd]\n\
    \        var longestPalindromeSuffixReversed = string[longestPalindromeEnd..<longestPalindromeStart]\n\
    \        for end in 0..<longestPalindromeLength {\n            if end >= start\
    \ {\n                if longestPalindromeSuffix == longestPalindromeSuffixReversed\
    \ {\n                    longestPalindromeEnd = end\n                    longestPalindromeSuffixReversed\
    \ = string[longestPalindromeEnd..<longestPalindromeStart]\n                }\n\
    \            }\n        }\n        longestPalindrome = string[longestPalindromeStart..<longestPalindromeEnd]\
    \ + longestPalindromeSuffixReversed\n    }\n    return longestPalindrome", " \
    \   var result = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    for length in string.characters\
    \ {\n        if length > longestPalindromeLength {\n            longestPalindrome\
    \ = string\n            longestPalindromeLength = length\n            longestPalindromePrefixLength\
    \ = 0\n        }\n        if length > longestPalindromePrefixLength {\n      \
    \      longestPalindromePrefixLength = length\n        }\n    }\n    for length\
    \ in string.characters {\n        if length > longestPalindromeLength {\n    \
    \        longestPalindrome = string\n            longestPalindromeLength = length\n\
    \            longestPalindromePrefixLength = 0\n        }\n        if length >\
    \ longestPalindromePrefixLength {\n            longestPalindromePrefixLength =\
    \ length\n        }\n    }\n    for length in string.characters {\n        if\
    \ length > longestPalindromeLength {\n            longestPalindrome = string\n\
    \            longestPalindromeLength = length\n            longestPalindromePrefixLength\
    \ = 0\n        }\n        if length > longestPalindromePrefixLength {\n      \
    \      longestPalindromePrefixLength = length\n        }\n    }\n    for length\
    \ in string.characters {\n        if length > longestPalindromeLength {\n    \
    \        longestPalindrome = string\n            longestPalindromeLength = length\n\
    \            longestPalindromePrefixLength = 0\n        }\n        if length >\
    \ longestPalindromePrefixLength {\n            longestPalindromePrefixLength =\
    \ length\n        }\n    }\n    for length in string.characters {\n        if\
    \ length > longestPalindromeLength {\n            longestPalindrome = string\n\
    \            longestPalindromeLength = length\n            longestPalindromePrefixLength\
    \ = 0\n        }\n        if length > longestPalindromePrefixLength {\n      \
    \      longestPalindromePrefixLength = length\n        }\n    }\n    for length\
    \ in string.characters {\n        if length > longestPalindromeLength {\n    \
    \        longestPalindrome = string\n            longestPalindromeLength = length\n\
    \            longestPalindromePrefixLength = 0\n        }\n        if length >\
    \ longestPalindromePrefixLength {\n            longestPalindromePrefixLength =\
    \ length\n        }\n    }\n    for length in string.characters {\n        if\
    \ length > longestPalindromeLength {\n            longestPalindrome = string\n\
    \            longestPalindromeLength = length\n            longestPalindromePrefixLength\
    \ = 0\n        }\n        if ", "\tlet reverse = string.reverse()\n\tlet prefix\
    \ = string.prefix(string.reverse())\n\treturn prefix + reverse", "\tlet reverse\
    \ = string.rev()\n\tlet prefix = string.prefix(string.reverse())\n\treturn prefix\
    \ + reverse", "    if string == \"\" {\n        return \"\"\n    }\n\n    var\
    \ longestPalindrome = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix:\
    \ String = \"\"\n    var longestPalindromeSuffix: String = \"\"\n\n    for char\
    \ in string {\n        if char == char.lowercased() {\n            longestPalindromeLength\
    \ += 1\n            longestPalindromePrefix = char\n        } else {\n       \
    \     longestPalindromeSuffix += char\n        }\n    }\n\n    if longestPalindromeLength\
    \ > longestPalindromeSuffix.count {\n        return \"\"\n    }\n\n    var reversedLongestPalindrome\
    \ = longestPalindromeSuffix\n    for char in reversedLongestPalindrome {\n   \
    \     reversedLongestPalindrome = reversedLongestPalindrome.replacingOccurrences(of:\
    \ char, with: \"\")\n    }\n\n    return longestPalindromePrefix + reversedLongestPalindrome",
  "\tlet reversed = string.reversed()\n\tlet prefix = reversed.prefix(string)\n\t\
    let suffix = reversed.suffix(string)\n\treturn prefix + suffix", "\tlet reverse\
    \ = string.reversed()\n\tlet prefix = string.prefix(string.reversed())\n\treturn\
    \ prefix + reverse", "\tlet reversed = string.reversed()\n\tlet prefix = reversed.prefix(string)\n\
    \tlet suffix = reversed.suffix(string)\n\treturn prefix + suffix", "    if string\
    \ == \"\" {\n        return \"\"\n    }\n    var reversed = string\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] != string[len(string)-i-1] {\n            reversed\
    \ = reversed[:len(reversed)-i] + string[len(string)-i-1] + reversed[i:]\n    \
    \        longestPalindromeLength = len(longestPalindrome)\n            longestPalindrome\
    \ = string[:len(string)-i-1] + string[len(string)-i-1]\n        }\n    }\n   \
    \ return reversed + longestPalindrome", "    if string == \"\" {\n        return\
    \ \"\"\n    }\n\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n\n    for i := 0; i < len(string); i++ {\n        var palindrome = string\n\
    \        var palindromeLength = 1\n\n        for j := 0; j < i; j++ {\n      \
    \      if palindrome[j] != string[j] {\n                break\n            }\n\
    \            palindromeLength++\n        }\n\n        if palindromeLength > longestPalindromeLength\
    \ {\n            longestPalindrome = palindrome\n            longestPalindromeLength\
    \ = palindromeLength\n        }\n    }\n\n    return longestPalindrome + string[longestPalindromeLength..]",
  "\tlet reverse = string.reversed()\n\tlet prefix = string.prefix(string.reversed())\n\
    \treturn prefix + reverse", "\tlet reverse = string.reversed()\n\tlet prefix =\
    \ string.prefix(string.reversed())\n\treturn prefix + reverse", "    var result\
    \ = \"\"\n    var longestPalindrome = \"\"\n    for letter in string {\n     \
    \   if letter == letter {\n            result += letter\n        } else {\n  \
    \          result += letter + longestPalindrome\n        }\n        if result.isPalindrome()\
    \ {\n            longestPalindrome = result\n            result = \"\"\n     \
    \   }\n    }\n    if longestPalindrome == \"\" {\n        return string\n    }\n\
    \    return longestPalindrome + result", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    for char in string {\n    \
    \    if char == char.lowercased() {\n            result += char\n        } else\
    \ {\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.length {\n                longestPalindrome = result\n \
    \           }\n            result = \"\"\n        }\n    }\n    longestPalindromeLength\
    \ += 1\n    if longestPalindromeLength > longestPalindrome.length {\n        longestPalindrome\
    \ = result\n    }\n    return longestPalindrome", "\tlet reverse = string.reversed()\n\
    \tlet prefix = reverse.prefix(string)\n\tlet suffix = reverse.suffix(string)\n\
    \treturn prefix + suffix", "    var string = string\n    var reversedString =\
    \ string\n    var longestPalindromeLength = 0\n    var longestPalindrome = string\n\
    \    var longestPalindromeIndex = -1\n    var longestPalindromePrefix = \"\"\n\
    \    var longestPalindromeSuffix = \"\"\n    for index in 0..<string.count {\n\
    \        let character = string[index]\n        let reversedCharacter = reversedString[index]\n\
    \        if character == reversedCharacter {\n            longestPalindromeLength\
    \ += 1\n            if longestPalindromeLength > longestPalindromeIndex {\n  \
    \              longestPalindromeIndex = longestPalindromeLength\n            \
    \    longestPalindromePrefix = string\n                longestPalindromeSuffix\
    \ = reversedString\n            }\n        } else {\n            longestPalindromeLength\
    \ = 0\n        }\n    }\n    return longestPalindromePrefix + reversedString(longestPalindromeIndex..<string.count)\
    \ + longestPalindromeSuffix", "\tlet maxLength: Int = string.characters.count\n\
    \tlet maxIndex = string.characters.reversed().index(string.characters.startIndex,\
    \ offsetBy: maxLength)\n\tlet prefix = string.substringToIndex(maxIndex)\n\tlet\
    \ suffix = string.substringFromIndex(maxIndex)\n\treturn prefix + suffix", " \
    \   var result = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    for index in 0..<string.count {\n        let currentChar = string[index]\n\
    \        let currentPalindrome = currentChar + currentChar.reversed()\n      \
    \  if currentPalindrome == longestPalindrome {\n            longestPalindromeLength\
    \ += 1\n        } else {\n            if longestPalindromeLength > 0 {\n     \
    \           result = result + String(longestPalindrome[longestPalindromeLength..<string.count])\n\
    \            }\n            longestPalindrome = currentPalindrome\n          \
    \  longestPalindromeLength = 1\n        }\n    }\n    if longestPalindromeLength\
    \ > 0 {\n        result = result + String(longestPalindrome[longestPalindromeLength..<string.count])\n\
    \    }\n    return result", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLen = 0\n    for i := 0; i < len(string); i++\
    \ {\n        if string[i] != string[len(string)-(i+1)] {\n            longestPalindromeLen\
    \ += 1\n            if longestPalindromeLen > len(longestPalindrome) {\n     \
    \           longestPalindrome = string\n            }\n        }\n    }\n    for\
    \ i := 0; i < len(string); i++ {\n        if string[i] != string[len(string)-(i+1)]\
    \ {\n            result += string[len(string)-(i+1)]\n        }\n    }\n    result\
    \ += longestPalindrome\n    return result", "\tlet reverse = string.reversed()\n\
    \tlet prefixLength = string.characters.count - reverse.characters.count\n\treturn\
    \ string.characters.prefix(prefixLength) + reverse", "\tlet stringLength = string.characters.count\n\
    \tlet longestPalindrome = make_palindrome_helper(string)\n\tlet longestPalindromeLength\
    \ = longestPalindrome.characters.count\n\tlet longestPalindromePrefix = longestPalindrome.substringToIndex(longestPalindromeLength\
    \ - stringLength)\n\tlet longestPalindromeSuffix = longestPalindrome.substringFromIndex(longestPalindromeLength\
    \ - stringLength)\n\treturn longestPalindromePrefix + longestPalindromeSuffix",
  "\tlet reverse = string.reversed()\n\tlet prefixLength = string.characters.count\
    \ - reverse.characters.count\n\treturn string + reverse[prefixLength..<string.characters.count]",
  "    let reverse = string.reversed()\n    let prefix = string.prefix(string.reversed())\n\
    \    return prefix + reverse", "    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefix: String = \"\"\n    var longestPalindromeSuffix:\
    \ String = \"\"\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromePrefixReversed: String = \"\"\n    var longestPalindromeSuffixReversed:\
    \ String = \"\"\n    var longestPalindromePrefixReversedLength = 0\n    var longestPalindromeSuffixReversedLength\
    \ = 0\n    var longestPalindromePrefixReversedReversed: String = \"\"\n    var\
    \ longestPalindromeSuffixReversedReversed: String = \"\"\n    var longestPalindromePrefixReversedReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedReversedLength = 0\n    var longestPalindromePrefixReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromeSuffixReversedReversedReversed: String\
    \ = \"\"\n    var longestPalindromePrefixReversedReversedReversedLength = 0\n\
    \    var longestPalindromeSuffixReversedReversedReversedLength = 0\n    var longestPalindromePrefixReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromeSuffixReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromePrefixReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedReversedReversedReversedLength =\
    \ 0\n    var longestPalindromePrefixReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromeSuffixReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromePrefixReversedReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromePrefixReversedReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromeSuffixReversedReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromePrefixReversedReversedReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedReversedReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromePrefixReversedReversedReversedReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromeSuffixReversedReversedReversedReversedReversedReversed",
  "    var stringToPalindrome = string\n    var longestPalindrome = \"\"\n    var\
    \ longestPalindromeLength = 0\n    var longestPalindromeIndex = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndexReverse\
    \ = 0\n    var longestPalindromeSuffixLengthReverse = 0\n    var longestPalindromeSuffixIndexReverseReverse\
    \ = 0\n    var longestPalindromeSuffixLengthReverseReverse = 0\n    var longestPalindromeSuffixIndexReverseReverseReverse\
    \ = 0\n    var longestPalindromeSuffixLengthReverseReverseReverse = 0\n    var\
    \ longestPalindromeSuffixIndexReverseReverseReverseReverse = 0\n    var longestPalindromeSuffixLengthReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeSuffixIndexReverseReverseReverseReverse = 0\n\
    \    var longestPalindromeSuffixLengthReverseReverseReverseReverse = 0\n    var\
    \ longestPalindromeSuffixIndexReverseReverseReverseReverse = 0\n    var longestPalindromeSuffixLengthReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeSuffixIndexReverseReverseReverseReverse = 0\n\
    \    var longestPalindromeSuffixLengthReverseReverseReverseReverse = 0\n    var\
    \ longestPalindromeSuffixIndexReverseReverseReverseReverse = 0\n    var longestPalindromeSuffixLengthReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeSuffixIndexReverseReverseReverseReverse = 0\n\
    \    var longestPalindromeSuffixLengthReverseReverseReverseReverse = 0\n    var\
    \ longestPalindromeSuffixIndexReverseReverseReverseReverse = 0\n    var longestPalindromeSuffixLengthReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeSuffixIndexReverseReverseReverseReverse = 0\n\
    \    var longestPalindromeSuffixLengthReverseReverseReverseReverse = 0\n    var\
    \ longestPalindromeSuffixIndexReverseReverseReverseReverse = 0\n    var longestPalindromeSuffixLengthReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeSuffixIndexReverseReverseReverseReverse = 0\n\
    \    var longestPalindromeSuffixLengthReverseReverseReverseReverse = 0\n    var\
    \ longestPalindromeSuffixIndexReverseReverseReverseReverse = 0\n    var longestPalindromeSuffixLengthReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeSuffixIndexReverseReverseReverseReverse = 0\n\
    \    var longestPalindromeSuffixLengthReverseReverseReverseReverse = 0\n    var\
    \ longestPalindromeSuffixIndexReverseReverseReverseReverse = 0\n    var longestPalindromeSuffixLengthReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeSuffixIndexReverseReverseReverseReverse = 0\n\
    \    var longestPalindrome", "\tlet maxLen = string.characters.count\n\tlet maxLenPalindrome\
    \ = maxLen / 2\n\tlet maxLenPalindromePadded = maxLen + maxLenPalindrome\n\tlet\
    \ maxLenPalindromePaddedPadded = maxLenPalindromePadded + maxLenPalindromePadded\n\
    \tlet maxLenPalindromePaddedPaddedPadded = maxLenPalindromePaddedPadded + maxLenPalindromePaddedPadded\n\
    \tlet maxLenPalindromePaddedPaddedPaddedPadded = maxLenPalindromePaddedPaddedPadded\
    \ + maxLenPalindromePaddedPaddedPadded\n\tlet maxLenPalindromePaddedPaddedPaddedPaddedPadded\
    \ = maxLenPalindromePaddedPaddedPaddedPadded + maxLenPalindromePaddedPaddedPaddedPaddedPadded\n\
    \tlet maxLenPalindromePaddedPaddedPaddedPaddedPaddedPadded = maxLenPalindromePaddedPaddedPaddedPaddedPadded\
    \ + maxLenPalindromePaddedPaddedPaddedPaddedPaddedPaddedPadded\n\tlet maxLenPalindromePaddedPaddedPaddedPaddedPaddedPaddedPadded\
    \ = maxLenPalindromePaddedPaddedPaddedPaddedPaddedPaddedPadded + maxLenPalindromePaddedPaddedPaddedPaddedPaddedPaddedPaddedPaddedPadded\n\
    \tlet maxLenPalindromePaddedPaddedPaddedPaddedPaddedPaddedPaddedPaddedPadded =\
    \ maxLenPalindromePaddedPaddedPaddedPaddedPaddedPaddedPaddedPaddedPadded + maxLenPalindromePaddedPaddedPaddedPaddedPaddedPaddedPaddedPaddedPaddedPadded\n\
    \tlet maxLenPalindromePaddedPaddedPaddedPaddedPaddedPaddedPaddedPaddedPaddedPadded\
    \ = maxLenPalindromePaddedPaddedPaddedPaddedPaddedPaddedPaddedPaddedPaddedPaddedPadded\
    \ + maxLenPalindromePaddedPaddedPaddedPaddedPaddedPaddedPaddedPaddedPaddedPaddedPaddedPadded\n\
    \tlet maxLenPalindromePadded", "\tlet reversedString = reverseString(string)\n\
    \tlet prefixString = string.prefix(string.reversed())\n\treturn prefixString +\
    \ reversedString", "    if string == \"\" {\n        return \"\"\n    }\n    var\
    \ longestPalindrome = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix\
    \ = \"\"\n    for i := 0; i < len(string); i++ {\n        var palindrome = string\n\
    \        var palindromeLength = 0\n        var palindromePrefix = \"\"\n     \
    \   for j := 0; j < len(string); j++ {\n            if string[j] != string[i]\
    \ {\n                palindrome = palindrome[..<j]\n                palindromeLength\
    \ = palindromeLength + 1\n                palindromePrefix = palindromePrefix[..<j]\n\
    \            }\n        }\n        if palindromeLength > longestPalindromeLength\
    \ {\n            longestPalindrome = palindrome\n            longestPalindromeLength\
    \ = palindromeLength\n            longestPalindromePrefix = palindromePrefix\n\
    \        }\n    }\n    return longestPalindromePrefix + longestPalindrome[longestPalindromeLength..<len(string)].reversed()",
  "    var result = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = string.length\n    var longestPalindromeIndex = string.length\n    for index\
    \ in 0..<string.count {\n        let char = string[index]\n        let reversedChar\
    \ = String(char.reversed())\n        if char == reversedChar {\n            longestPalindromeIndex\
    \ = index\n            longestPalindrome = string\n            longestPalindromeLength\
    \ = string.length\n            break\n        }\n    }\n    if longestPalindromeIndex\
    \ == string.length {\n        return string\n    }\n    if longestPalindromeLength\
    \ > longestPalindromeIndex {\n        let prefix = string.prefix(longestPalindromeIndex)\n\
    \        let suffix = string.suffix(longestPalindromeIndex)\n        result =\
    \ prefix + reversedChar + suffix\n    }\n    return result", "\tlet maxLength:\
    \ Int = string.count\n\tlet reversedString = string.reversed()\n\tlet prefixLength:\
    \ Int = reversedString.count\n\tlet prefixString = reversedString.prefix(prefixLength)\n\
    \tlet suffixString = reversedString.suffix(prefixLength)\n\tlet palindrome = prefixString\
    \ + suffixString\n\treturn palindrome", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    for char in string {\n        if char == char.lowercased() {\n \
    \           result += char\n        }\n    }\n    for char in string {\n     \
    \   if char == char.lowercased() {\n            longestPalindrome += char\n  \
    \      }\n    }\n    if longestPalindrome == \"\" {\n        return result\n \
    \   }\n    if longestPalindrome == result {\n        return result\n    }\n  \
    \  if longestPalindrome == result.reverse() {\n        return result\n    }\n\
    \    if longestPalindrome.reverse() == result {\n        return result\n    }\n\
    \    if longestPalindrome.reverse() == result.reverse() {\n        return result\n\
    \    }\n    return \"\"", "\tlet reversedString = string.reversed()\n\tlet prefixString\
    \ = reversedString.prefix(string)\n\tlet suffixString = reversedString.suffix(string)\n\
    \treturn prefixString + suffixString", "    if string == \"\" {\n        return\
    \ \"\"\n    }\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = string.length\n    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix\
    \ = \"\"\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseLength = 0\n    var longestPalindromeSuffixReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReversePrefix\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseSuffix = 0\n    var longestPalindromeSuffixReverseReverseSuffixLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseSuffixReverse = \"\"\n   \
    \ var longestPalindromeSuffixReverseReverseSuffixReverseLength = 0\n    var longestPalindromeSuffixReverseReverseSuffixReversePrefix\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseSuffixReverseSuffix = 0\n\
    \    var longestPalindromeSuffixReverseReverseSuffixReverseSuffixLength = 0\n\
    \    var longestPalindromeSuffixReverseReverseSuffixReverseSuffixReverse = \"\"\
    \n    var longestPalindromeSuffixReverseReverseSuffixReverseSuffixReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseSuffixReverseSuffixReverseReversePrefix\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseSuffixReverseSuffixReverseSuffix\
    \ = 0\n    var longestPalindromeSuffixReverseReverseSuffixReverseSuffixReverseSuffixLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseSuffixReverseSuffixReverseSuffixReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseSuffixReverseSuffixReverseSuffixReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseSuffixReverseSuffixReverseSuffixReverseSuffixReversePrefix\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffix\
    \ = 0\n    var longestPalindromeSuffixReverseReverseSuffixReverseSuffixReverseSuffixReverseSuffixLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseSuffixReverseSuffixReverseSuffixReverseSuffixReversePrefix\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffix\
    \ = 0\n    var longestPalindromeSuffixReverseReverseSuffixReverseSuffixReverseSuffixReverseSuffixLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverse\
    \ = \"\"\n    var longest", "\tlet reversed = string.reversed()\n\tlet prefix\
    \ = reversed.prefix(string)\n\tlet suffix = reversed.suffix(string)\n\treturn\
    \ prefix + suffix", "\tlet reversed = string.reversed()\n\tlet prefix = reversed.prefix(string)\n\
    \tlet suffix = reversed.suffix(string)\n\treturn prefix + suffix", "    var result\
    \ = \"\"\n    var longest = 0\n    for i := 0; i < len(string); i++ {\n      \
    \  if string[i] != string[longest] {\n            longest = i\n        }\n   \
    \ }\n    for i := 0; i < len(string); i++ {\n        if string[i] != string[longest]\
    \ {\n            result += string[i]\n        }\n    }\n    result += \"\\(string[longest])\"\
    \n    return result", "    if string == \"\" {\n        return \"\"\n    }\n \
    \   var longestPalindrome = string\n    var longestPalindromeLength = string.length\n\
    \    var longestPalindromeIndex = longestPalindrome.length - 1\n    for index\
    \ in 0..<longestPalindromeIndex {\n        let char = longestPalindrome[index]\n\
    \        if char == char.lowercased() {\n            longestPalindromeLength -=\
    \ 1\n        } else {\n            break\n        }\n    }\n    var longestPalindromePrefix\
    \ = string\n    for index in 0..<longestPalindromeIndex {\n        let char =\
    \ longestPalindrome[index]\n        if char == char.lowercased() {\n         \
    \   longestPalindromePrefix = longestPalindromePrefix.appending(\"a\")\n     \
    \   } else {\n            break\n        }\n    }\n    var longestPalindromeSuffix\
    \ = string\n    for index in 0..<longestPalindromeIndex {\n        let char =\
    \ longestPalindrome[index]\n        if char == char.lowercased() {\n         \
    \   longestPalindromeSuffix = longestPalindromeSuffix.appending(\"a\")\n     \
    \   } else {\n            break\n        }\n    }\n    longestPalindrome = longestPalindromePrefix.appending(longestPalindromeSuffix)\n\
    \    if longestPalindromeLength < string.length {\n        longestPalindrome =\
    \ longestPalindrome.appending(string[longestPalindromeLength..<string.length])\n\
    \    }\n    return longestPalindrome", "    var longestPalindrome = string\n \
    \   var longestPalindromeLength = longestPalindrome.characters.count\n    var\
    \ longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\n   \
    \ var longestPalindromeSuffixReverse = \"\"\n    var longestPalindromeSuffixReverseLength\
    \ = longestPalindromeSuffixReverse.characters.count\n    for character in string\
    \ {\n        if character == longestPalindrome[longestPalindromeLength - 1] {\n\
    \            longestPalindromeLength--\n        } else {\n            longestPalindromeLength++\n\
    \        }\n    }\n    for character in string {\n        if character == longestPalindrome[longestPalindromeLength]\
    \ {\n            longestPalindromeLength++\n        } else {\n            longestPalindromeLength--\n\
    \        }\n    }\n    for character in string {\n        if character == longestPalindrome[longestPalindromeLength]\
    \ {\n            longestPalindromeLength++\n        } else {\n            longestPalindromeLength--\n\
    \        }\n    }\n    for character in string {\n        if character == longestPalindrome[longestPalindromeLength]\
    \ {\n            longestPalindromeLength++\n        } else {\n            longestPalindromeLength--\n\
    \        }\n    }\n    for character in string {\n        if character == longestPalindrome[longestPalindromeLength]\
    \ {\n            longestPalindromeLength++\n        } else {\n            longestPalindromeLength--\n\
    \        }\n    }\n    for character in string {\n        if character == longestPalindrome[longestPalindromeLength]\
    \ {\n            longestPalindromeLength++\n        } else {\n            longestPalindromeLength--\n\
    \        }\n    }\n    for character in string {\n        if character == longestPalindrome[longestPalindromeLength]\
    \ {\n            longestPalindromeLength++\n        } else {\n            longestPalindromeLength--\n\
    \        }\n    }\n    for character in string {\n        if character == longestPalindrome[longestPalindromeLength]\
    \ {\n            longestPalindromeLength++\n        } else {\n            longestPalindromeLength--\n\
    \        }\n    }\n    for character in string {\n        if character == longestPalindrome[longestPalindromeLength]\
    \ {\n            longestPalindromeLength++\n        } else {\n            longestPalindromeLength--\n\
    \        }\n    }\n    for character in string {\n        if character == longestPalindrome",
  "\tlet reversed = string.reversed()\n\tlet prefix = reversed.prefix(string)\n\t\
    return prefix + reversed", "    var result = \"\"\n    var longestPalindrome =\
    \ \"\"\n    for char in string {\n        if char == char.lowercased() {\n   \
    \         result += char\n        }\n    }\n    for char in string {\n       \
    \ if char == char.lowercased() {\n            result += char\n        }\n    }\n\
    \    for char in string {\n        if char == char.lowercased() {\n          \
    \  result += char\n        }\n    }\n    for char in string {\n        if char\
    \ == char.lowercased() {\n            result += char\n        }\n    }\n    for\
    \ char in string {\n        if char == char.lowercased() {\n            result\
    \ += char\n        }\n    }\n    for char in string {\n        if char == char.lowercased()\
    \ {\n            result += char\n        }\n    }\n    for char in string {\n\
    \        if char == char.lowercased() {\n            result += char\n        }\n\
    \    }\n    for char in string {\n        if char == char.lowercased() {\n   \
    \         result += char\n        }\n    }\n    for char in string {\n       \
    \ if char == char.lowercased() {\n            result += char\n        }\n    }\n\
    \    for char in string {\n        if char == char.lowercased() {\n          \
    \  result += char\n        }\n    }\n    for char in string {\n        if char\
    \ == char.lowercased() {\n            result += char\n        }\n    }\n    for\
    \ char in string {\n        if char == char.lowercased() {\n            result\
    \ += char\n        }\n    }\n    for char in string {\n        if char == char.lowercased()\
    \ {\n            result += char\n        }\n    }\n    for char in string {\n\
    \        if char == char.lowercased() {\n            result += char\n        }\n\
    \    }\n    for char in string {\n        if char == char.lowercased() {\n   \
    \         result += char\n        }\n    }\n    for char in string {\n       \
    \ if char == char.lowercased() {\n            result += char\n        }\n    }\n\
    \    for char in string {\n        if char == char.lowercased() {\n          \
    \  result += char\n        }\n    }\n    for char in string {\n        if char\
    \ == char.lowercased() {\n            result += char\n        }\n    }\n    for\
    \ char in string {\n        if char == char.lowercased() {\n            result\
    \ += char\n        }\n    }\n    for char in string {\n        if char == char.lowercased()\
    \ {\n            result += char\n        }\n    }\n    for char in string {\n\
    \        if char == char.lowercased() {\n            result += char\n        }\n\
    \    }\n    for char in string {\n        if char == char.lowercased() {\n   \
    \         result += char\n        }\n    }\n    for char in string {\n       \
    \ if char == char.lowercased() {\n            result += ", "    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    for length in 0..<string.count\
    \ {\n        let substring = string[..<length]\n        let reversedSubstring\
    \ = reverseString(substring)\n        if longestPalindromeLength < reversedSubstring.count\
    \ {\n            longestPalindrome = substring\n            longestPalindromeLength\
    \ = reversedSubstring.count\n        }\n    }\n    return longestPalindrome",
  "\tlet reverse = string.reverse()\n\tlet prefix = string.prefix(string.reverse())\n\
    \treturn prefix + reverse", "    if string == \"\" {\n        return \"\"\n  \
    \  }\n    var longestPalindrome = string\n    var longestPalindromeLength = string.length\n\
    \    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\
    \n    for i := 0; i < longestPalindromeLength; i++ {\n        var currentChar\
    \ = string[i]\n        var currentCharIsPalindrome = true\n        for j := 0;\
    \ j < longestPalindromeLength; j++ {\n            if currentChar == string[j]\
    \ {\n                currentCharIsPalindrome = false\n                break\n\
    \            }\n        }\n        if currentCharIsPalindrome {\n            longestPalindrome\
    \ = longestPalindrome[longestPalindromeLength - longestPalindromeLength + i:]\
    \ + string[longestPalindromeLength - longestPalindromeLength + i:]\n         \
    \   longestPalindromeLength = longestPalindrome.length\n            longestPalindromePrefix\
    \ = string[:longestPalindromeLength - longestPalindromeLength + i]\n         \
    \   longestPalindromeSuffix = string[longestPalindromeLength - longestPalindromeLength\
    \ + i:]\n        }\n    }\n    return longestPalindromePrefix + longestPalindrome\
    \ + longestPalindromeSuffix", "\tlet reversed = string.reversed()\n\tlet prefixLength\
    \ = string.characters.count - reversed.characters.count\n\tlet postfix = string.characters.suffix(from:\
    \ prefixLength)\n\treturn string + String(reversed) + postfix", "\tlet reversedString\
    \ = reverseString(string)\n\tlet longestPalindrome = longestPalindromeFromReversedString(reversedString)\n\
    \treturn string + longestPalindrome", "    let maxLen = string.characters.count\n\
    \    let maxIndex = string.characters.reversed().index(string.characters.first!)\n\
    \    let prefix = string.substringToIndex(maxIndex)\n    let suffix = string.substringFromIndex(maxIndex)\n\
    \    let reversedSuffix = suffix.characters.reversed()\n    let reversedPrefix\
    \ = prefix.characters.reversed()\n    let reversedSuffix = reversedSuffix.prefix(string.reversed())\n\
    \    let reversedPrefix = reversedPrefix.suffix(string.reversed())\n    return\
    \ prefix + reversedSuffix + reversedPrefix", "\tlet maxLength: Int = string.characters.count\n\
    \tlet reversedString = string.reversed()\n\tlet prefixLength = string.characters.count\
    \ - maxLength\n\tlet prefixString = string[prefixLength..<string.characters.count]\n\
    \treturn reversedString + prefixString", "    if string == \"\" {\n        return\
    \ \"\"\n    }\n    var longestPalindrome = string\n    var longestPalindromeLen\
    \ = 0\n    var longestPalindromePostfixLen = 0\n    var longestPalindromePostfix\
    \ = 0\n    var longestPalindromePostfixReverse = 0\n    var longestPalindromePostfixReverseLen\
    \ = 0\n    for postfix := 0; postfix < len(string); postfix++ {\n        var postFixReverse\
    \ = string[postfix]\n        var postFixReverseLen = 0\n        var postFixReverseReverse\
    \ = 0\n        for i := 0; i < len(string); i++ {\n            if i == postfix\
    \ {\n                continue\n            }\n            var currentChar = string[i]\n\
    \            var currentCharLen = string[i].length\n            var currentCharReverse\
    \ = string[i].unicodeScalars.reverse()\n            var currentCharReverseLen\
    \ = currentCharReverse.length\n            if currentCharLen > longestPalindromeLen\
    \ {\n                longestPalindromeLen = currentCharLen\n                longestPalindromePostfixLen\
    \ = i\n                longestPalindromePostfix = postfix\n                longestPalindromePostfixReverse\
    \ = postFixReverse\n                longestPalindromePostfixReverseLen = postFixReverseLen\n\
    \            }\n            if currentCharLen > longestPalindromePostfixLen {\n\
    \                longestPalindromePostfixLen = currentCharLen\n              \
    \  longestPalindromePostfix = i\n                longestPalindromePostfixReverse\
    \ = postFixReverse\n                longestPalindromePostfixReverseLen = postFixReverseLen\n\
    \            }\n            if currentCharLen > longestPalindromePostfixReverseLen\
    \ {\n                longestPalindromePostfixReverseLen = currentCharLen\n   \
    \             longestPalindromePostfixReverse = currentCharReverse\n         \
    \   }\n            if currentCharReverse != postFixReverse {\n               \
    \ break\n            }\n        }\n    }\n    if longestPalindromeLen > longestPalindromePostfixLen\
    \ {\n        return string\n    }\n    if longestPalindromeLen > longestPalindromePostfixReverseLen\
    \ {\n        return string\n    }\n    if longestPalindromeLen > longestPalindromePostfixLen\
    \ {\n        return string\n    }\n    if longestPalindromeLen > longestPalindromePostfixLen\
    \ {\n        return string\n    }\n    return longestPalindrome", "    var result\
    \ = \"\"\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = longestPalindrome.characters.count\n    var longestPalindromeIndex = 0\n \
    \   var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\
    \n    var longestPalindromeSuffixIndex = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromeSuffixChars = \"\"\n    var longestPalindromeSuffixCharsIndex\
    \ = 0\n    var longestPalindromeSuffixCharsLength = 0\n    var longestPalindromeSuffixCharsReverse\
    \ = \"\"\n    var longestPalindromeSuffixCharsReverseIndex = 0\n    var longestPalindromeSuffixCharsReverseLength\
    \ = 0\n    var longestPalindromeSuffixCharsReverseReverse = \"\"\n    var longestPalindromeSuffixCharsReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixCharsReverseReverseLength = 0\n    var longestPalindromeSuffixCharsReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixCharsReverseReverseReverseIndex = 0\n\
    \    var longestPalindromeSuffixCharsReverseReverseReverseLength = 0\n    var\
    \ longestPalindromeSuffixCharsReverseReverseReverseReverse = \"\"\n    var longestPalindromeSuffixCharsReverseReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixCharsReverseReverseReverseLength = 0\n \
    \   var longestPalindromeSuffixCharsReverseReverseReverseReverse = \"\"\n    var\
    \ longestPalindromeSuffixCharsReverseReverseReverseIndex = 0\n    var longestPalindromeSuffixCharsReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixCharsReverseReverseReverseReverse = \"\"\
    \n    var longestPalindromeSuffixCharsReverseReverseReverseIndex = 0\n    var\
    \ longestPalindromeSuffixCharsReverseReverseReverseLength = 0\n    var longestPalindromeSuffixCharsReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixCharsReverseReverseReverseIndex = 0\n\
    \    var longestPalindromeSuffixCharsReverseReverseReverseLength = 0\n    var\
    \ longestPalindromeSuffixCharsReverseReverseReverseReverse = \"\"\n    var longestPalindromeSuffixCharsReverseReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixCharsReverseReverseReverseLength = 0\n \
    \   var longestPalindromeSuffixCharsReverseReverseReverseReverse = \"\"\n    var\
    \ longestPalindromeSuffixCharsReverseReverseReverseIndex = 0\n    var longestPalindromeSuffixCharsReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffix", "    if string == \"\" {\n        return\
    \ \"\"\n    }\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    for i := 0; i < len(string); i++ {\n        if string[i] == string[len(string)-i-1]\
    \ {\n            longestPalindromeLength++\n        } else {\n            longestPalindromeLength\
    \ = 0\n        }\n        if longestPalindromeLength > longestPalindromeLength\
    \ {\n            longestPalindrome = string[:i]\n            longestPalindromeLength\
    \ = longestPalindromeLength\n        }\n    }\n    return longestPalindrome +\
    \ string[len(longestPalindrome):]", "    var longestPalindrome = string\n    var\
    \ longestPalindromeLength = 0\n    var longestPalindromePrefix: String = \"\"\n\
    \    var longestPalindromeSuffix: String = \"\"\n\n    for character in string\
    \ {\n        if character == character {\n            longestPalindromeLength\
    \ += 1\n        } else {\n            if longestPalindromeLength > longestPalindromePrefix.characters.count\
    \ {\n                longestPalindromePrefix = String(character)\n           \
    \     longestPalindromeLength = 1\n            } else {\n                longestPalindromeSuffix\
    \ += String(character)\n            }\n        }\n    }\n\n    if longestPalindromeLength\
    \ > longestPalindromeSuffix.characters.count {\n        longestPalindrome = longestPalindromePrefix\
    \ + String(reverseString(longestPalindromeSuffix))\n    }\n\n    return longestPalindrome",
  "    var string = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromeSuffixIndex = 0\n    var longestPalindromePrefixIndex\
    \ = 0\n    var longestPalindromeSuffixChar = \"\"\n    var longestPalindromePrefixChar\
    \ = \"\"\n    var longestPalindromeChar = \"\"\n    var longestPalindromeIndex\
    \ = 0\n    var longestPalindromeCharIndex = 0\n    var longestPalindromeCharLength\
    \ = 0\n    var longestPalindromePrefixCharLength = 0\n    var longestPalindromePrefixIndex\
    \ = 0\n    var longestPalindromePrefixChar = \"\"\n    var longestPalindromePrefixCharIndex\
    \ = 0\n    var longestPalindromeSuffixCharIndex = 0\n    var longestPalindromeSuffixChar\
    \ = \"\"\n    var longestPalindromeSuffixCharIndex = 0\n    var longestPalindromePrefixCharIndex\
    \ = 0\n    var longestPalindromePrefixChar = \"\"\n    var longestPalindromePrefixCharIndex\
    \ = 0\n    var longestPalindromeCharLength = 0\n    var longestPalindromeChar\
    \ = \"\"\n    var longestPalindromeCharIndex = 0\n    var longestPalindromeChar\
    \ = \"\"\n    var longestPalindromeIndex = 0\n    var longestPalindromeCharIndex\
    \ = 0\n    var longestPalindromeCharLength = 0\n    var longestPalindromePrefixCharLength\
    \ = 0\n    var longestPalindromePrefixIndex = 0\n    var longestPalindromePrefixChar\
    \ = \"\"\n    var longestPalindromePrefixCharIndex = 0\n    var longestPalindromeSuffixCharIndex\
    \ = 0\n    var longestPalindromeSuffixChar = \"\"\n    var longestPalindromeSuffixCharIndex\
    \ = 0\n    var longestPalindromePrefixCharIndex = 0\n    var longestPalindromePrefixChar\
    \ = \"\"\n    var longestPalindromePrefixCharIndex = 0\n    var longestPalindromeCharLength\
    \ = 0\n    var longestPalindromeChar = \"\"\n    var longestPalindromeCharIndex\
    \ = 0\n    var longestPalindromeChar = \"\"\n    var longestPalindromeIndex =\
    \ 0\n    var longestPalindromeCharIndex = 0\n    var longestPalindromeCharLength\
    \ = 0\n    var longestPalindromePrefixCharLength = 0\n    var longestPalindromePrefixIndex\
    \ = 0\n    var longestPalindromePrefixChar = \"\"\n    var longestPalindromePrefixCharIndex\
    \ = 0\n    var longestPalindro", "\tlet reverse = string.reverse()\n\tlet prefix\
    \ = string.prefix(string.reverse())\n\treturn prefix + reverse", "    var result\
    \ = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = string.length\n    for _ in 0..<longestPalindromeLength {\n        let index\
    \ = longestPalindrome.index(longestPalindrome.startIndex, offsetBy: longestPalindromeLength)\n\
    \        let reversedString = longestPalindrome.replacingCharacters(in: longestPalindrome.startIndex..<index,\
    \ with: longestPalindrome[index...])\n        if reversedString == longestPalindrome\
    \ {\n            longestPalindrome = longestPalindrome.replacingCharacters(in:\
    \ longestPalindrome.startIndex..<longestPalindrome.endIndex, with: longestPalindrome[index...])\n\
    \            longestPalindromeLength = longestPalindrome.length\n        } else\
    \ {\n            longestPalindrome = longestPalindrome.replacingCharacters(in:\
    \ longestPalindrome.startIndex..<longestPalindrome.endIndex, with: longestPalindrome[index...])\n\
    \            longestPalindromeLength = longestPalindrome.length\n        }\n \
    \   }\n    result = longestPalindrome\n    return result", "    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = string.length\n    var longestPalindromePrefix\
    \ = \"\"\n    var longestPalindromeSuffix = \"\"\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixReverse\
    \ = \"\"\n    var longestPalindromePrefixReverse = \"\"\n    var longestPalindromePrefixReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseLength = 0\n\n    for stringIndex\
    \ in 0..<string.length - 1 {\n        let stringChar = string.characters[stringIndex]\n\
    \        let stringCharReverse = string.characters[stringIndex.reversed()]\n\n\
    \        if stringChar == stringCharReverse {\n            longestPalindromeLength\
    \ += 1\n            if longestPalindromeLength > longestPalindromePrefixLength\
    \ {\n                longestPalindromePrefix = string\n                longestPalindromePrefixLength\
    \ = longestPalindromeLength\n            }\n        } else {\n            longestPalindromeLength\
    \ -= 1\n            if longestPalindromeLength < longestPalindromeSuffixLength\
    \ {\n                longestPalindromeSuffix = string\n                longestPalindromeSuffixLength\
    \ = longestPalindromeLength\n            }\n        }\n    }\n\n    if longestPalindromeLength\
    \ > longestPalindromeSuffixLength {\n        longestPalindromeSuffixReverse =\
    \ string.reversed()\n        longestPalindromeSuffixReverseLength = longestPalindromeSuffixReverse.length\n\
    \    }\n\n    if longestPalindromeLength > longestPalindromePrefixLength {\n \
    \       longestPalindromePrefixReverse = string.reversed()\n        longestPalindromePrefixReverseLength\
    \ = longestPalindromePrefixReverse.length\n    }\n\n    return longestPalindromePrefix\
    \ + longestPalindromeSuffix + longestPalindromePrefixReverse + longestPalindromeSuffixReverse",
  "    var longestPalindrome = string\n    var longestPalindromeLength = string.length\n\
    \    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\
    \n    var longestPalindromePrefixReverse = \"\"\n    var longestPalindromeSuffixReverse\
    \ = \"\"\n\n    for index in 0..<string.length {\n        let character = string[index]\n\
    \        let isPalindrome = character == character\n        if isPalindrome {\n\
    \            let reversedCharacter = String(character).reversed()\n          \
    \  if longestPalindromeLength < reversedCharacter.length {\n                longestPalindrome\
    \ = string\n                longestPalindromeLength = reversedCharacter.length\n\
    \                longestPalindromePrefix = String(character)\n               \
    \ longestPalindromeSuffix = String(reversedCharacter)\n                longestPalindromePrefixReverse\
    \ = String(reversedCharacter)\n                longestPalindromeSuffixReverse\
    \ = String(character)\n            }\n        }\n    }\n\n    return longestPalindrome",
  "    var result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for i := 0; i < len(string); i++ {\n        var currentChar = string[i]\n\
    \        var currentPalindrome = \"\"\n        var currentPalindromeLength = 0\n\
    \        for j := 0; j < len(string); j++ {\n            if j == i {\n       \
    \         continue\n            }\n            var currentChar = string[j]\n \
    \           if currentChar == currentPalindrome[currentPalindromeLength] {\n \
    \               currentPalindromeLength += 1\n            } else {\n         \
    \       currentPalindromeLength = 0\n                currentPalindrome = currentChar\
    \ + currentPalindrome\n                currentPalindromeLength = 1\n         \
    \   }\n        }\n        if currentPalindromeLength > longestPalindromeLength\
    \ {\n            longestPalindrome = currentPalindrome\n            longestPalindromeLength\
    \ = currentPalindromeLength\n        }\n    }\n    for i := 0; i < len(string);\
    \ i++ {\n        var currentChar = string[i]\n        var currentPalindrome =\
    \ \"\"\n        var currentPalindromeLength = 0\n        for j := 0; j < len(string);\
    \ j++ {\n            if j == i {\n                continue\n            }\n  \
    \          var currentChar = string[j]\n            if currentChar == currentPalindrome[currentPalindromeLength]\
    \ {\n                currentPalindromeLength += 1\n            } else {\n    \
    \            currentPalindromeLength = 0\n                currentPalindrome =\
    \ currentChar + currentPalindrome\n                currentPalindromeLength = 1\n\
    \            }\n        }\n        if currentPalindromeLength == longestPalindromeLength\
    \ {\n            currentPalindrome += string[len(longestPalindrome):]\n      \
    \      result += currentPalindrome\n        }\n    }\n    return result", "  \
    \  var stringToReverse = \"\"\n    var longestPalindrome = \"\"\n    for character\
    \ in string {\n        stringToReverse = stringToReverse + String(character)\n\
    \    }\n    for character in stringToReverse {\n        if character != stringToReverse[stringToReverse.index(of:\
    \ character)!] {\n            longestPalindrome = longestPalindrome + String(character)\n\
    \        }\n    }\n    return longestPalindrome", "    var result = \"\"\n   \
    \ var longestPalindrome = \"\"\n    for character in string {\n        if character\
    \ == character {\n            result += character\n        } else {\n        \
    \    longestPalindrome += character\n        }\n    }\n    for character in string\
    \ {\n        if character == character {\n            result += character\n  \
    \      } else {\n            result += longestPalindrome\n        }\n    }\n \
    \   return result", "\tlet maxLen = string.characters.count\n\tlet maxIndex =\
    \ string.characters.reverse().index(string.characters.startIndex, offsetBy: maxLen)\n\
    \treturn string.characters.reverse()[maxIndex..<string.characters.count].reversed()",
  "    var result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for i := 0; i < len(string); i++ {\n        var currentChar = string[i]\n\
    \        var currentPalindrome = \"\"\n        var currentPalindromeLength = 0\n\
    \        for j := 0; j < len(string); j++ {\n            if j == i {\n       \
    \         continue\n            }\n            var currentChar = string[j]\n \
    \           if currentChar == currentPalindrome[currentPalindromeLength] {\n \
    \               currentPalindromeLength += 1\n            } else {\n         \
    \       currentPalindromeLength = 0\n                currentPalindrome = currentChar\
    \ + currentPalindrome\n                currentPalindromeLength = 1\n         \
    \   }\n            if currentPalindromeLength > longestPalindromeLength {\n  \
    \              longestPalindrome = currentPalindrome\n                longestPalindromeLength\
    \ = currentPalindromeLength\n            }\n        }\n        result = currentChar\
    \ + result + currentPalindrome\n    }\n    return result", "    var result = \"\
    \"\n    var longestPalindrome = \"\"\n    var longestPalindromeLen = 0\n    for\
    \ i := 0; i < len(string); i++ {\n        longestPalindromeLen += string[i]\n\
    \        if longestPalindromeLen > len(longestPalindrome) {\n            longestPalindrome\
    \ = string[i..<i]\n            longestPalindromeLen = len(longestPalindrome)\n\
    \        }\n    }\n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ != string[len(string)-(i+1)] {\n            result += string[i]\n        }\n\
    \    }\n    return result + longestPalindrome", "    var result = string\n   \
    \ var longestPalindrome = string\n    var longestPalindromeLen = 0\n    var longestPalindromePrefixLen\
    \ = 0\n    var longestPalindromeSuffixLen = 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] != string[len(string)-1-i] {\n            break\n\
    \        }\n        longestPalindromeLen += 1\n    }\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] != string[len(string)-1-i] {\n            break\n\
    \        }\n        longestPalindromeSuffixLen += 1\n    }\n    for i := 0; i\
    \ < len(string); i++ {\n        if string[i] != string[len(string)-1-i] {\n  \
    \          break\n        }\n        longestPalindromePrefixLen += 1\n    }\n\
    \    if longestPalindromeLen > longestPalindromeSuffixLen {\n        result =\
    \ string[longestPalindromePrefixLen:] + string[:longestPalindromeSuffixLen]\n\
    \    }\n    return result", "    var reversed = \"\"\n    for c in string {\n\
    \        reversed = c + reversed\n    }\n    return reversed", "\tlet reverse\
    \ = string.reverse()\n\tlet prefix = string.prefix(string.reverse())\n\treturn\
    \ prefix + reverse", "    var longestPalindrome = string\n    var longestPalindromeLen\
    \ = 0\n    var longestPalindromePref = string\n    for i := 0; i < len(string);\
    \ i++ {\n        var palindrome = string\n        var palindromeLen = 0\n    \
    \    var palindromePref = string\n        for j := 0; j < len(string); j++ {\n\
    \            if string[j] != string[i] {\n                palindrome = string[:j]\
    \ + string[j+1:]\n                palindromeLen = j\n                palindromePref\
    \ = string[:i]\n                break\n            }\n        }\n        if palindromeLen\
    \ > longestPalindromeLen {\n            longestPalindrome = palindrome\n     \
    \       longestPalindromeLen = palindromeLen\n            longestPalindromePref\
    \ = palindromePref\n        }\n    }\n    return longestPalindromePref", "\tlet\
    \ reversedString = string.reversed()\n\tlet longestPalindrome = longestPalindromeFrom(string,\
    \ reversedString)\n\treturn reversedString + longestPalindrome", "\tlet reversed\
    \ = string.reversed()\n\tlet prefix = reversed.prefix(string)\n\treturn prefix\
    \ + reversed", "\tlet reversed = string.reversed()\n\tlet prefixLength = string.characters.count\
    \ - reversed.characters.count\n\treturn string.characters.prefix(prefixLength).append(reversed).reverse()",
  "\tlet maxLength: Int = string.characters.count\n\tlet maxLengthPalindrome: Int\
    \ = maxLength / 2\n\tlet maxLengthPalindromeString: String = String(maxLengthPalindrome)\n\
    \tlet maxLengthPalindromeStringReversed: String = String(maxLengthPalindrome -\
    \ 1)\n\tlet maxLengthPalindromeStringReversedString: String = String(maxLengthPalindromeStringReversed)\n\
    \tlet maxLengthPalindromeStringReversedStringReversed: String = String(maxLengthPalindromeStringReversed.reverse())\n\
    \tlet maxLengthPalindromeStringReversedStringReversedString: String = String(maxLengthPalindromeStringReversedStringReversed.reverse())\n\
    \tlet maxLengthPalindromeStringReversedStringReversedStringReversed: String =\
    \ String(maxLengthPalindromeStringReversedStringReversed.reverse())\n\tlet maxLengthPalindromeStringReversedStringReversedStringReversedString:\
    \ String = String(maxLengthPalindromeStringReversedStringReversedStringReversed.reverse())\n\
    \tlet maxLengthPalindromeStringReversedStringReversedStringReversedStringReversed:\
    \ String = String(maxLengthPalindromeStringReversedStringReversedStringReversedString.reverse())\n\
    \tlet maxLengthPalindromeStringReversedStringReversedStringReversedStringReversedString:\
    \ String = String(maxLengthPalindromeStringReversedStringReversedStringReversedStringReversed.reverse())\n\
    \tlet maxLengthPalindromeStringReversedStringReversedStringReversedStringReversedStringReversed:\
    \ String = String(maxLengthPalindromeStringReversedStringReversedStringReversedStringReversedStringReversed.reverse())\n\
    \tlet maxLengthPalindromeStringReversedStringReversedStringReversedStringReversedStringReversedString:\
    \ String = String(maxLengthPalindromeStringReversedStringReversedStringReversedStringReversedStringReversedString.reverse())\n\
    \tlet maxLengthPalindromeStringReversedStringReversedStringReversedStringReversedStringReversedString:\
    \ String = String(maxLengthPalindromeStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedString.reverse())\n\
    \tlet maxLengthPalindromeStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed:\
    \ String = String(maxLengthPalindromeStringReversedStringReversedStringReverse",
  "\tlet reversed = string.reversed()\n\tlet prefix = reversed.prefix(string)\n\t\
    let suffix = reversed.suffix(string)\n\treturn prefix + suffix", "\tlet maxLen\
    \ = string.characters.count\n\tlet maxIndex = string.characters.reversed().index(string.characters.startIndex,\
    \ offsetBy: maxLen)\n\treturn string.characters.reversed()[maxIndex..<string.characters.count].reversed()",
  "    var string = string\n    var reversedString = string\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = longestPalindrome.length\n    var\
    \ longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\n   \
    \ var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromePrefixReversed = \"\"\n    var longestPalindromeSuffixReversed\
    \ = \"\"\n    var longestPalindromePrefixReversedLength = 0\n    var longestPalindromeSuffixReversedLength\
    \ = 0\n    var longestPalindromePrefixReversedReversed = \"\"\n    var longestPalindromeSuffixReversedReversed\
    \ = \"\"\n    var longestPalindromePrefixReversedReversedLength = 0\n    var longestPalindromeSuffixReversedReversedLength\
    \ = 0\n    var longestPalindromePrefixReversedReversedReversed = \"\"\n    var\
    \ longestPalindromeSuffixReversedReversedReversed = \"\"\n    var longestPalindromePrefixReversedReversedReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedReversedReversedLength = 0\n   \
    \ var longestPalindromePrefixReversedReversedReversedReversed = \"\"\n    var\
    \ longestPalindromeSuffixReversedReversedReversedReversed = \"\"\n    var longestPalindromePrefixReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedReversedReversedReversedLength =\
    \ 0\n    var longestPalindromePrefixReversedReversedReversedReversedReversed =\
    \ \"\"\n    var longestPalindromeSuffixReversedReversedReversedReversedReversed\
    \ = \"\"\n    var longestPalindromePrefixReversedReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromePrefixReversedReversedReversedReversedReversedReversed\
    \ = \"\"\n    var longestPalindromeSuffixReversedReversedReversedReversedReversedReversed\
    \ = \"\"\n    var longestPalindromePrefixReversedReversedReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedReversedReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromePrefixReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = \"\"\n    var longestPalindromeSuffixReversedReversedReversedReversedReversedReverse",
  "    var stringToReturn = string\n    var longestPalindromeLength = 0\n    for stringIndex\
    \ in 0..<string.count {\n        let stringToCheck = stringToReturn[stringIndex]\n\
    \        let stringToCheckLength = stringToCheck.characters.count\n        if\
    \ stringToCheckLength > longestPalindromeLength {\n            longestPalindromeLength\
    \ = stringToCheckLength\n        }\n        if stringToCheckLength == longestPalindromeLength\
    \ {\n            if stringToCheck.characters.count == 1 {\n                stringToReturn\
    \ = stringToReturn.stringByReplacingOccurrencesOfString(stringToCheck, withString:\
    \ stringToCheck.characters.reversed())\n            } else {\n               \
    \ stringToReturn = stringToReturn.stringByReplacingOccurrencesOfString(stringToCheck,\
    \ withString: stringToCheck.characters.reversed())\n            }\n        }\n\
    \    }\n    return stringToReturn", "\tlet maxLength: Int = string.count\n\tlet\
    \ reversedString = string.reversed()\n\tlet prefixString = reversedString.prefix(string)\n\
    \tlet suffixString = reversedString.suffix(string)\n\tlet prefixLength = prefixString.count\n\
    \tlet suffixLength = suffixString.count\n\tlet longestPalindrome = prefixString.appending(suffixString)\n\
    \tlet longestPalindromeLength = longestPalindrome.count\n\tlet longestPalindromeLength\
    \ = longestPalindromeLength > maxLength ? maxLength : longestPalindromeLength\n\
    \tlet longestPalindromeLength = longestPalindromeLength < 1 ? 1 : longestPalindromeLength\n\
    \tlet longestPalindromeLength = longestPalindromeLength > 1 ? 1 : longestPalindromeLength\n\
    \tlet longestPalindromeLength = longestPalindromeLength < 2 ? 2 : longestPalindromeLength\n\
    \tlet longestPalindromeLength = longestPalindromeLength > 3 ? 3 : longestPalindromeLength\n\
    \tlet longestPalindromeLength = longestPalindromeLength < 4 ? 4 : longestPalindromeLength\n\
    \tlet longestPalindromeLength = longestPalindromeLength > 5 ? 5 : longestPalindromeLength\n\
    \tlet longestPalindromeLength = longestPalindromeLength < 6 ? 6 : longestPalindromeLength\n\
    \tlet longestPalindromeLength = longestPalindromeLength > 7 ? 7 : longestPalindromeLength\n\
    \tlet longestPalindromeLength = longestPalindromeLength < 8 ? 8 : longestPalindromeLength\n\
    \tlet longestPalindromeLength = longestPalindromeLength > 9 ? 9 : longestPalindromeLength\n\
    \tlet longestPalindromeLength = longestPalindromeLength < 10 ? 10 : longestPalindromeLength\n\
    \tlet longestPalindromeLength = longestPalindromeLength > 11 ? 11 : longestPalindromeLength\n\
    \tlet longestPalindromeLength = longestPalindromeLength < 12 ? 12 : longestPalindromeLength\n\
    \tlet longestPalindromeLength = longestPalindromeLength > 13 ? 13 : longestPalindromeLength\n\
    \tlet longestPalindromeLength = longestPalindromeLength < 14 ? 14 : longestPalindromeLength\n\
    \tlet longestPalindromeLength = longestPalindrome", "    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix\
    \ = \"\"\n    var longestPalindromeSuffix = \"\"\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromeSuffixReverse = \"\"\n    var longestPalindromeSuffixReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var ", " \
    \   var longestPalindrome = string\n    var longestPalindromeLength = string.characters.count\n\
    \    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\
    \n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    for character in string.characters {\n        if character == longestPalindrome[longestPalindromeLength]\
    \ {\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindromeLengthLength {\n                longestPalindromePrefixLength\
    \ = longestPalindromeLength\n                longestPalindromePrefix = String(character)\n\
    \            }\n        } else {\n            longestPalindromeLength = 0\n  \
    \          longestPalindromePrefix = \"\"\n            longestPalindromeSuffix\
    \ = \"\"\n            longestPalindromePrefixLength = 0\n            longestPalindromeSuffixLength\
    \ = 0\n        }\n    }\n    for character in string.characters {\n        if\
    \ character == longestPalindrome[longestPalindromeLength] {\n            longestPalindromeSuffix\
    \ += String(character)\n            longestPalindromeSuffixLength += 1\n     \
    \   } else {\n            if longestPalindromeSuffixLength > longestPalindromeSuffixLength\
    \ {\n                longestPalindromeSuffix = String(character)\n           \
    \ }\n        }\n    }\n    if longestPalindromeSuffixLength > longestPalindromePrefixLength\
    \ {\n        longestPalindrome = longestPalindromePrefix + String(reverseString(longestPalindromeSuffix))\n\
    \    }\n    return longestPalindrome", "    var result = \"\"\n    var longest\
    \ = 0\n    for c in string {\n        if c == string[longest] {\n            longest++\n\
    \        } else {\n            result = result + string[longest..<longest+longest]\n\
    \            longest = 1\n        }\n    }\n    result = result + string[longest..<longest+longest]\n\
    \    return result", "    var longestPalindrome = string\n    var longestPalindromeLen\
    \ = 0\n    for i := 0; i < len(string); i++ {\n        var palindrome = string\n\
    \        var palindromeLen = 0\n        for j := 0; j < i; j++ {\n           \
    \ if string[j] != string[i] {\n                palindrome = string[j : i]\n  \
    \              palindromeLen = i - j\n                break\n            }\n \
    \       }\n        if palindromeLen > longestPalindromeLen {\n            longestPalindrome\
    \ = palindrome\n            longestPalindromeLen = palindromeLen\n        }\n\
    \    }\n    return longestPalindrome + string[longestPalindromeLen..]", "    var\
    \ result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeStart = 0\n    var longestPalindromeEnd = 0\n\
    \    var longestPalindromePaddedStart = 0\n    var longestPalindromePaddedEnd\
    \ = 0\n\n    for i := 0; i < len(string); i++ {\n        if string[i] == string[len(string)-1-i]\
    \ {\n            longestPalindromePaddedEnd += string[i]\n            longestPalindromePaddedStart\
    \ += string[i]\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindromeEnd {\n                longestPalindromeEnd = longestPalindromeLength\n\
    \                longestPalindromeStart = longestPalindromePaddedStart\n     \
    \           longestPalindromePaddedStart = 0\n                longestPalindromePaddedEnd\
    \ = 0\n                longestPalindromeLength = 0\n            }\n        } else\
    \ {\n            longestPalindromePaddedEnd += string[i]\n            longestPalindromePaddedStart\
    \ += string[i]\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindromeEnd {\n                longestPalindromeEnd = longestPalindromeLength\n\
    \                longestPalindromeStart = longestPalindromePaddedStart\n     \
    \           longestPalindromePaddedStart = 0\n                longestPalindromePaddedEnd\
    \ = 0\n                longestPalindromeLength = 0\n            }\n        }\n\
    \    }\n\n    if longestPalindromeLength > longestPalindromeEnd {\n        longestPalindromeEnd\
    \ = longestPalindromeLength\n        longestPalindromeStart = longestPalindromePaddedStart\n\
    \        longestPalindromePaddedStart = 0\n        longestPalindromePaddedEnd\
    \ = 0\n        longestPalindromeLength = 0\n    }\n\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == string[len(string)-1-i] {\n            result\
    \ += string[i]\n        } else {\n            result += string[i]\n        }\n\
    \    }\n\n    longestPalindromeEnd = longestPalindromeLength\n    longestPalindromeStart\
    \ = longestPalindromePaddedStart\n    longestPalindromePaddedStart = 0\n    longestPalindromePaddedEnd\
    \ = 0\n    longestPalindromeLength = 0\n\n    return result", "    var result\
    \ = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix\
    \ = \"\"\n    for char in string {\n        if char == char.lowercased() {\n \
    \           longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindromeLength {\n                longestPalindrome = string\n  \
    \              longestPalindromeLength = longestPalindromeLength\n           \
    \     longestPalindromePrefix = \"\"\n                longestPalindromeSuffix\
    \ = \"\"\n            }\n        } else {\n            longestPalindromeSuffix\
    \ += char\n        }\n    }\n    for char in string {\n        if char == char.lowercased()\
    \ {\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindromeLength {\n                longestPalindrome = string\n  \
    \              longestPalindromeLength = longestPalindromeLength\n           \
    \     longestPalindromePrefix = string\n                longestPalindromeSuffix\
    \ = \"\"\n            }\n        } else {\n            longestPalindromeSuffix\
    \ += char\n        }\n    }\n    if longestPalindromeLength > longestPalindromeLength\
    \ {\n        longestPalindrome = string\n        longestPalindromeLength = longestPalindromeLength\n\
    \        longestPalindromePrefix = string\n        longestPalindromeSuffix = \"\
    \"\n    }\n    if longestPalindromeLength == 1 {\n        return string\n    }\n\
    \    if longestPalindromeLength > 1 {\n        longestPalindrome = longestPalindromePrefix\
    \ + string[longestPalindromeLength..<longestPalindromeLength-1] + longestPalindromeSuffix\n\
    \    }\n    if longestPalindromeLength > 2 {\n        longestPalindrome = longestPalindromePrefix\
    \ + string[longestPalindromeLength..<longestPalindromeLength-2] + longestPalindromeSuffix\n\
    \    }\n    if longestPalindromeLength > 3 {\n        longestPalindrome = longestPalindromePrefix\
    \ + string[longestPalindromeLength..<longestPalindromeLength-3] + longestPalindromeSuffix\n\
    \    }\n    if longestPalindromeLength > 4 {\n        longestPalindrome = longestPalindromePrefix\
    \ + string[longestPalindromeLength..<longestPalindromeLength", "    var result\
    \ = \"\"\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = longestPalindrome.characters.count\n    var longestPalindromeIndex = longestPalindrome.startIndex\n\
    \    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffixIndex\
    \ = longestPalindromeIndex\n    var longestPalindromeSuffixLength = 0\n    var\
    \ longestPalindromeSuffixStartIndex = longestPalindromeIndex\n    var longestPalindromeSuffixEndIndex\
    \ = longestPalindromeIndex\n    var longestPalindromeSuffixChars = \"\"\n    var\
    \ longestPalindromeSuffixCharsIndex = longestPalindromeSuffixIndex\n    var longestPalindromeSuffixCharsLength\
    \ = 0\n    var longestPalindromeSuffixCharsStartIndex = longestPalindromeSuffixIndex\n\
    \    var longestPalindromeSuffixCharsEndIndex = longestPalindromeSuffixIndex\n\
    \    var longestPalindromeSuffixCharsChars = \"\"\n    var longestPalindromeSuffixCharsCharsIndex\
    \ = longestPalindromeSuffixIndex\n    var longestPalindromeSuffixCharsCharsLength\
    \ = 0\n    var longestPalindromeSuffixCharsCharsStartIndex = longestPalindromeSuffixIndex\n\
    \    var longestPalindromeSuffixCharsCharsEndIndex = longestPalindromeSuffixIndex\n\
    \    var longestPalindromeSuffixCharsCharsChars = \"\"\n    var longestPalindromeSuffixCharsCharsIndex\
    \ = longestPalindromeSuffixIndex\n    var longestPalindromeSuffixCharsCharsLength\
    \ = 0\n    var longestPalindromeSuffixCharsCharsStartIndex = longestPalindromeSuffixIndex\n\
    \    var longestPalindromeSuffixCharsCharsEndIndex = longestPalindromeSuffixIndex\n\
    \    var longestPalindromeSuffixCharsCharsChars = \"\"\n    var longestPalindromeSuffixCharsCharsIndex\
    \ = longestPalindromeSuffixIndex\n    var longestPalindromeSuffixCharsCharsLength\
    \ = 0\n    var longestPalindromeSuffixCharsCharsStartIndex = longestPalindromeSuffixIndex\n\
    \    var longestPalindromeSuffixCharsCharsEndIndex = longestPalindromeSuffixIndex\n\
    \    var longestPalindromeSuffixCharsCharsChars = \"\"\n    var longestPalindromeSuffixCharsCharsIndex\
    \ = longestPalindromeSuffixIndex\n    var longestPalindromeSuffixCharsCharsLength\
    \ = 0\n    var longestP", "    if string == \"\" {\n        return \"\"\n    }\n\
    \    var reverse = \"\"\n    var longest = 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] != string[longest] {\n            longest = i\n\
    \        }\n    }\n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ != string[longest] {\n            reverse = reverse + string[i]\n        }\n\
    \    }\n    return reverse + string[longest]", "    var result = string\n    var\
    \ longestPalindrome = string\n    var longestPalindromeLength = string.length\n\
    \    for _ in 0..<longestPalindromeLength {\n        let index = longestPalindrome.index(longestPalindrome.startIndex,\
    \ offsetBy: 1)\n        let prefix = longestPalindrome[index...longestPalindrome.endIndex]\n\
    \        let reversedPrefix = prefix.reversed()\n        if reversedPrefix ==\
    \ prefix {\n            longestPalindrome = longestPalindrome[index...longestPalindrome.endIndex]\n\
    \            longestPalindromeLength = longestPalindrome.length\n        } else\
    \ {\n            longestPalindrome = longestPalindrome[index...longestPalindrome.endIndex]\n\
    \            longestPalindromeLength = longestPalindrome.length\n        }\n \
    \   }\n    result = result + longestPalindrome\n    return result", "    var string\
    \ = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromeSuffixIndex = 0\n    var longestPalindromePrefixIndex\
    \ = 0\n    var longestPalindromeSuffixChar = string[longestPalindromeSuffixIndex]\n\
    \    var longestPalindromePrefixChar = string[longestPalindromePrefixIndex]\n\
    \    var longestPalindromePrefixCharReversed = string[longestPalindromePrefixIndex.reversed()]\n\
    \    var longestPalindromeSuffixCharReversed = string[longestPalindromeSuffixIndex.reversed()]\n\
    \    var longestPalindromePrefixCharReversedReversed = string[longestPalindromePrefixIndex.reversed().reversed()]\n\
    \    var longestPalindromeSuffixCharReversedReversedReversed = string[longestPalindromeSuffixIndex.reversed().reversed().reversed()]\n\
    \    var longestPalindromePrefixCharReversedReversedReversedReversed = string[longestPalindromePrefixIndex.reversed().reversed().reversed().reversed()]\n\
    \    var longestPalindromeSuffixCharReversedReversedReversedReversedReversed =\
    \ string[longestPalindromeSuffixIndex.reversed().reversed().reversed().reversed().reversed()]\n\
    \    var longestPalindromePrefixCharReversedReversedReversedReversedReversedReversed\
    \ = string[longestPalindromePrefixIndex.reversed().reversed().reversed().reversed().reversed().reversed()]\n\
    \    var longestPalindromeSuffixCharReversedReversedReversedReversedReversedReversedReversed\
    \ = string[longestPalindromeSuffixIndex.reversed().reversed().reversed().reversed().reversed().reversed().reversed()]\n\
    \    var longestPalindromePrefixCharReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = string[longestPalindromePrefixIndex.reversed().reversed().reversed().reversed().reversed().reversed().reversed().reversed()]\n\
    \    var longestPalindromeSuffixCharReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = string[longestPalindromeSuffixIndex.reversed().reversed().reversed().reversed().reversed().reversed().reversed().reversed()]\n\
    \    var longestPalindromePrefix", "    if string == \"\" {\n        return \"\
    \"\n    }\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = longestPalindrome.characters.count\n    var longestPalindromePrefix = \"\"\
    \n    var longestPalindromeSuffix = \"\"\n    var longestPalindromePostfix = \"\
    \"\n    var longestPalindromePostfixLength = 0\n    for character in string {\n\
    \        if character == longestPalindrome[longestPalindromeLength-1] {\n    \
    \        longestPalindromeLength--\n        } else {\n            longestPalindromeLength++\n\
    \        }\n        if longestPalindromeLength > 0 {\n            longestPalindromePrefix\
    \ = longestPalindromePrefix+character\n            longestPalindromeSuffix = longestPalindromeSuffix+character\n\
    \            longestPalindromePostfix = longestPalindromePostfix+character\n \
    \           longestPalindromePostfixLength = longestPalindromePostfixLength+1\n\
    \        }\n    }\n    if longestPalindromeLength == 0 {\n        return string\n\
    \    }\n    if longestPalindromeLength > 0 {\n        longestPalindrome = longestPalindromePrefix+longestPalindromeSuffix+longestPalindromePostfix\n\
    \    }\n    if longestPalindromeLength > 1 {\n        longestPalindrome = longestPalindromePrefix+longestPalindromeSuffix\n\
    \    }\n    if longestPalindromeLength > 2 {\n        longestPalindrome = longestPalindromePrefix+longestPalindromeSuffix\n\
    \    }\n    if longestPalindromeLength > 3 {\n        longestPalindrome = longestPalindromePrefix+longestPalindromeSuffix\n\
    \    }\n    if longestPalindromeLength > 4 {\n        longestPalindrome = longestPalindromePrefix+longestPalindromeSuffix\n\
    \    }\n    if longestPalindromeLength > 5 {\n        longestPalindrome = longestPalindromePrefix+longestPalindromeSuffix\n\
    \    }\n    if longestPalindromeLength > 6 {\n        longestPalindrome = longestPalindromePrefix+longestPalindromeSuffix\n\
    \    }\n    if longestPalindromeLength > 7 {\n        longestPalindrome = longestPalindromePrefix+longestPalindromeSuffix\n\
    \    }\n    if longestPalindromeLength > 8 {\n        longest", "    let maxLen\
    \ = string.characters.count\n    let maxIndex = string.characters.reversed().index(string.characters.startIndex,\
    \ offsetBy: maxLen)\n    let maxPalindrome = String(string.characters.suffix(from:\
    \ maxIndex))\n    let maxPalindromeIndex = string.characters.index(maxPalindrome,\
    \ offsetBy: -maxLen)\n    return String(string.characters.suffix(from: maxPalindromeIndex))",
  "    var result = \"\"\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    for _ in 0..<string.count {\n        let index = string.index(longestPalindrome,\
    \ offsetBy: longestPalindromeLength)\n        let reversedString = string.reversed()\n\
    \        let reversedIndex = reversedString.index(longestPalindrome, offsetBy:\
    \ longestPalindromeLength)\n        let suffix = string[index..<reversedIndex]\n\
    \        let prefix = string[reversedIndex..<string.endIndex]\n        let palindrome\
    \ = prefix + suffix\n        if palindrome == longestPalindrome {\n          \
    \  longestPalindromeLength += 1\n        } else {\n            longestPalindromeLength\
    \ = 0\n            longestPalindrome = palindrome\n        }\n        result +=\
    \ longestPalindrome\n    }\n    return result", "\tlet reversed = string.reversed()\n\
    \tlet prefixLength = string.characters.count - reversed.characters.count\n\treturn\
    \ string.characters.prefix(prefixLength) + reversed", "\tlet reverse = string.reverse()\n\
    \tlet prefix = string.prefix(string.reverse())\n\treturn prefix + reverse", " \
    \   var reversed = string\n    var longestPalindrome = string\n    for _ in 0..<string.count\
    \ {\n        let index = string.index(longestPalindrome.endIndex, offsetBy: -1)\n\
    \        let prefix = string[index..<longestPalindrome.startIndex]\n        let\
    \ suffix = string[longestPalindrome.endIndex..<string.endIndex]\n        let reversedSuffix\
    \ = suffix.reversed()\n        let reversedPrefix = prefix.reversed()\n      \
    \  if reversedSuffix == reversedPrefix {\n            longestPalindrome = longestPalindrome[..<longestPalindrome.index(longestPalindrome.startIndex,\
    \ offsetBy: -1)]\n        } else {\n            break\n        }\n    }\n    return\
    \ longestPalindrome", "    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromePrefixReverse = \"\"\n    var longestPalindromeSuffixReverse\
    \ = \"\"\n\n    for char in string {\n        if char == char.lowercased() {\n\
    \            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindromePrefixLength {\n                longestPalindromePrefixLength\
    \ = longestPalindromeLength\n                longestPalindromePrefixReverse =\
    \ string[longestPalindromePrefixLength..<longestPalindromeLength]\n          \
    \  }\n        } else {\n            longestPalindromeLength -= 1\n           \
    \ if longestPalindromeLength > longestPalindromeSuffixLength {\n             \
    \   longestPalindromeSuffixLength = longestPalindromeLength\n                longestPalindromeSuffixReverse\
    \ = string[longestPalindromeSuffixLength..<longestPalindromeLength]\n        \
    \    }\n        }\n    }\n\n    if longestPalindromeLength > 0 {\n        longestPalindrome\
    \ = string\n    }\n\n    if longestPalindromeLength > longestPalindromePrefixLength\
    \ {\n        longestPalindrome = longestPalindromePrefixReverse + string[longestPalindromePrefixLength..<longestPalindromeLength]\n\
    \    }\n\n    if longestPalindromeLength > longestPalindromeSuffixLength {\n \
    \       longestPalindrome = longestPalindromeSuffixReverse + string[longestPalindromeSuffixLength..<longestPalindromeLength]\n\
    \    }\n\n    return longestPalindrome", "    var result = \"\"\n    var longest\
    \ = 0\n    for i := 0; i < len(string); i++ {\n        if string[i] == string[longest]\
    \ {\n            longest++\n        } else {\n            if longest > 0 {\n \
    \               result = string[longest-1...longest] + result\n            }\n\
    \            longest = 0\n        }\n    }\n    if longest > 0 {\n        result\
    \ = string[longest-1...longest] + result\n    }\n    return result", "    var\
    \ longestPalindrome = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix:\
    \ String = \"\"\n    var longestPalindromeSuffix: String = \"\"\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromePrefixReversed:\
    \ String = \"\"\n    var longestPalindromeSuffixReversed: String = \"\"\n    var\
    \ longestPalindromePrefixReversedLength = 0\n    var longestPalindromeSuffixReversedLength\
    \ = 0\n    var longestPalindromePrefixReversedReversed: String = \"\"\n    var\
    \ longestPalindromeSuffixReversedReversed: String = \"\"\n    var longestPalindromePrefixReversedReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedReversedLength = 0\n    var longestPalindromePrefixReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromeSuffixReversedReversedReversed: String\
    \ = \"\"\n    var longestPalindromePrefixReversedReversedReversedLength = 0\n\
    \    var longestPalindromeSuffixReversedReversedReversedLength = 0\n    var longestPalindromePrefixReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromeSuffixReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromePrefixReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedReversedReversedReversedLength =\
    \ 0\n    var longestPalindromePrefixReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromeSuffixReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromePrefixReversedReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromePrefixReversedReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromeSuffixReversedReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromePrefixReversedReversedReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedReversedReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromePrefixReversedReversedReversedReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromeSuffixReversedReversedReversedReversedReversedReversed",
  "    if string == \"\" {\n        return \"\"\n    }\n    var reversedString = \"\
    \"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n  \
    \  for i := 0; i < len(string); i++ {\n        longestPalindromeLength = 0\n \
    \       for j := 0; j < len(string); j++ {\n            if string[i] != string[j]\
    \ {\n                break\n            }\n            longestPalindromeLength\
    \ += 1\n        }\n        if longestPalindromeLength > longestPalindromeLength\
    \ {\n            longestPalindrome = string\n            longestPalindromeLength\
    \ = longestPalindromeLength\n        }\n        reversedString += string[longestPalindromeLength..<len(string)].reversed()\n\
    \    }\n    return reversedString + longestPalindrome", "    var result = string\n\
    \    var longestPalindrome = string\n    var longestPalindromeLength = string.length\n\
    \    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\
    \n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n\n    for character in string {\n        if character == character {\n\
    \            longestPalindromeLength += 1\n        } else {\n            if longestPalindromeLength\
    \ > longestPalindromePrefixLength {\n                longestPalindromePrefix =\
    \ string[longestPalindromePrefixLength..<longestPalindromeLength]\n          \
    \      longestPalindromePrefixLength = longestPalindromeLength\n            }\n\
    \            if longestPalindromeLength > longestPalindromeSuffixLength {\n  \
    \              longestPalindromeSuffix = string[longestPalindromeSuffixLength..<longestPalindromeLength]\n\
    \                longestPalindromeSuffixLength = longestPalindromeLength\n   \
    \         }\n            longestPalindromeLength += 1\n        }\n    }\n\n  \
    \  if longestPalindromeLength > longestPalindromePrefixLength {\n        longestPalindrome\
    \ = string[longestPalindromePrefixLength..<longestPalindromeLength]\n        longestPalindromeLength\
    \ = longestPalindromePrefixLength\n    }\n    if longestPalindromeLength > longestPalindromeSuffixLength\
    \ {\n        longestPalindrome = string[longestPalindromeSuffixLength..<longestPalindromeLength]\n\
    \        longestPalindromeLength = longestPalindromeSuffixLength\n    }\n\n  \
    \  if longestPalindromeLength > 0 {\n        let reversedString = string.reversed()\n\
    \        let reversedStringLength = reversedString.length\n        let reversedStringPrefix\
    \ = reversedString[reversedStringLength..<reversedStringLength]\n        let reversedStringSuffix\
    \ = reversedString[reversedStringLength..<reversedStringLength]\n        result\
    \ = reversedStringPrefix + longestPalindrome + reversedStringSuffix\n    }\n\n\
    \    return result", "    var stringToPalindrome = string\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromePrefixString\
    \ = \"\"\n    var longestPalindromeSuffixString = \"\"\n    var longestPalindromePrefixStringLength\
    \ = 0\n    var longestPalindromeSuffixStringLength = 0\n    var longestPalindromePrefixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverse = \"\"\n    var longestPalindromePrefixStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseLength = 0\n    var longestPalindromePrefixStringReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverse = \"\"\n    var\
    \ longestPalindromePrefixStringReverseReverseLength = 0\n    var longestPalindromeSuffixStringReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixStringReverseReverseReverse = \"\"\n   \
    \ var longestPalindromeSuffixStringReverseReverseReverse = \"\"\n    var longestPalindromePrefixStringReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseReverseLength = 0\n\
    \    var longestPalindromePrefixStringReverseReverseReverseReverse = \"\"\n  \
    \  var longestPalindromeSuffixStringReverseReverseReverseReverse = \"\"\n    var\
    \ longestPalindromePrefixStringReverseReverseReverseReverseLength = 0\n    var\
    \ longestPalindromeSuffixStringReverseReverseReverseLength = 0\n    var longestPalindromePrefixStringReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverse =\
    \ \"\"\n    var longestPalindromePrefixStringReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseReverseLength = 0\n\
    \    var longestPalindromePrefixStringReverseReverseReverseReverseReverse = \"\
    \"\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverse =\
    \ \"\"\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindro", "    if string == \"\" {\n        return \"\
    \"\n    }\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    for i := 0; i < len(string); i++ {\n        var currentPalindrome =\
    \ string\n        var currentPalindromeLength = 0\n        for j := 0; j < len(string);\
    \ j++ {\n            if string[j] != string[i] {\n                break\n    \
    \        }\n            currentPalindromeLength += 1\n            currentPalindrome\
    \ = string[currentPalindromeLength ..< len(string)]\n        }\n        if currentPalindromeLength\
    \ > longestPalindromeLength {\n            longestPalindrome = currentPalindrome\n\
    \            longestPalindromeLength = currentPalindromeLength\n        }\n  \
    \  }\n    return longestPalindrome + string[longestPalindromeLength ..< len(string)].reversed()",
  "    var string = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix\
    \ = \"\"\n    var longestPalindromePostfix = \"\"\n    var longestPalindromePostfixLength\
    \ = 0\n    var longestPalindromePostfixPrefix = \"\"\n    var longestPalindromePostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfix = \"\"\n    var longestPalindromePostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPrefix = \"\"\n    var longestPalindromePostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfix = \"\"\n    var longestPalindromePostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPrefix = \"\"\n    var longestPalindromePostfixPostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfix = \"\"\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfixLength = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixSuffix = \"\"\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfix = \"\"\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfixPostfixLength = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix =\
    \ \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix =\
    \ \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalin", "    var string = string\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLen = 0\n    var longestPalindromePrefix\
    \ = \"\"\n    var longestPalindromeSuffix = \"\"\n    var longestPalindromeSuffixLen\
    \ = 0\n    var longestPalindromeSuffixSuffix = \"\"\n    var longestPalindromeSuffixSuffixLen\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffix = \"\"\n    var longestPalindromeSuffixSuffixSuffixLen\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffix = \"\"\n    var longestPalindromeSuffixSuffixSuffixSuffixLen\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffix = \"\"\n    var\
    \ longestPalindromeSuffixSuffixSuffixSuffixSuffixLen = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = \"\"\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixLen = 0\n\
    \    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffix = \"\"\n\
    \    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen = 0\n\
    \    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = \"\
    \"\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = \"\"\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = \"\"\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = \"\"\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = \"\"\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = \"\"\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ = 0\n    var longestPalindrome", "\tlet reversedString = reverseString(string)\n\
    \tlet longestPalindrome = longestPalindromeFromReversedString(reversedString)\n\
    \treturn reversedString + longestPalindrome", "    var result = string\n    var\
    \ longestPalindrome = string\n    var longestPalindromeLength = 0\n    for index\
    \ in 0..<string.count {\n        let currentChar = string[index]\n        let\
    \ currentPalindrome = currentChar + currentChar\n        if currentPalindrome\
    \ == string.reversed().prefix(longestPalindromeLength) {\n            longestPalindrome\
    \ = currentPalindrome\n            longestPalindromeLength = longestPalindrome.count\n\
    \        }\n    }\n    if longestPalindromeLength > 0 {\n        result = result\
    \ + longestPalindrome\n    }\n    return result", "    var longestPalindrome =\
    \ \"\"\n    var longestPalindromeLength = 0\n    for i := 0; i < len(string);\
    \ i++ {\n        var currentChar = string[i]\n        var currentPalindrome =\
    \ \"\"\n        var currentPalindromeLength = 0\n        for j := 0; j < len(string);\
    \ j++ {\n            if j == i {\n                continue\n            }\n  \
    \          var currentChar = string[j]\n            if currentChar == currentPalindrome[currentPalindromeLength]\
    \ {\n                currentPalindromeLength += 1\n            } else {\n    \
    \            currentPalindromeLength = 0\n                currentPalindrome +=\
    \ currentChar\n            }\n            if currentPalindromeLength > longestPalindromeLength\
    \ {\n                longestPalindrome = currentPalindrome\n                longestPalindromeLength\
    \ = currentPalindromeLength\n            }\n        }\n    }\n    return longestPalindrome\
    \ + string[longestPalindromeLength..]", "\tlet reverse = string.rev()\n\tlet prefix\
    \ = string.prefix(string.reverse())\n\treturn prefix + reverse", "    var result\
    \ = \"\"\n    var longestPalindrome = \"\"\n    for letter in string {\n     \
    \   if letter == letter {\n            result += letter\n        } else {\n  \
    \          longestPalindrome += letter\n        }\n    }\n    for letter in string\
    \ {\n        if letter == letter {\n            result += letter\n        } else\
    \ {\n            result += longestPalindrome\n        }\n    }\n    return result",
  "\tlet reverse = string.reversed()\n\tlet prefix = string.prefix(string.reversed())\n\
    \treturn prefix + reverse", "\tlet reversedString = reverseString(string)\n\t\
    let longestPalindrome = longestPalindrome(reversedString)\n\treturn reverseString(longestPalindrome)",
  "\tlet reversedString = reverseString(string)\n\tlet longestPalindrome = longestPalindromeInString(string)\n\
    \treturn reversedString + longestPalindrome", "    var result = \"\"\n    var\
    \ longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeIndex\
    \ = 0\n    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix\
    \ = \"\"\n    var longestPalindromeSuffixIndex = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromeSuffixReverse = \"\"\n\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == string[len(string)-1-i ] {\n            result\
    \ += string[i]\n        } else {\n            longestPalindrome = string\n   \
    \         longestPalindromeLength = i\n            longestPalindromeIndex = i\n\
    \            longestPalindromePrefix = string[0:i]\n            longestPalindromeSuffix\
    \ = string[i+1:]\n            longestPalindromeSuffixIndex = i\n            longestPalindromeSuffixLength\
    \ = i\n            longestPalindromeSuffixReverse = string[i+1:len(string)-1-i]\n\
    \            break\n        }\n    }\n\n    if longestPalindromeLength == 0 {\n\
    \        return \"\"\n    }\n\n    for i := 0; i < len(longestPalindrome); i++\
    \ {\n        if longestPalindrome[i] == longestPalindrome[len(longestPalindrome)-1-i\
    \ ] {\n            result += longestPalindrome[i]\n        } else {\n        \
    \    longestPalindrome = longestPalindromePrefix\n            longestPalindromeLength\
    \ = i\n            longestPalindromeIndex = i\n            longestPalindromePrefix\
    \ = longestPalindrome[0:i]\n            longestPalindromeSuffix = longestPalindrome[i+1:]\n\
    \            longestPalindromeSuffixIndex = i\n            longestPalindromeSuffixLength\
    \ = i\n            longestPalindromeSuffixReverse = longestPalindrome[i+1:len(longestPalindrome)-1-i]\n\
    \            break\n        }\n    }\n\n    if longestPalindromeLength == 0 {\n\
    \        return \"\"\n    }\n\n    for i := 0; i < len(longestPalindrome); i++\
    \ {\n        if longestPalindrome[i] == longestPalindrome[len(longestPalindrome)-1-i\
    \ ] {\n            result += longestPalindrome[i]\n        } else {\n        \
    \    longestPalindrome = longestPalindromeSuffix\n            longestPalindromeLength\
    \ = i\n            longestPalindromeIndex = i\n            longestPalindromePrefix\
    \ = longestPalindrome[0:i]\n            longestPalindromeSuffix = longestPalindrome[i+1:]\n\
    \            longest", "    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = longestPalindrome.characters.count\n    var longestPalindromePrefix = \"\"\
    \n    var longestPalindromeSuffix = \"\"\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromePrefixReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverse = \"\"\n\n    for character in\
    \ string {\n        if character == longestPalindrome[longestPalindromeLength]\
    \ {\n            longestPalindromeLength += 1\n        } else {\n            longestPalindromeLength\
    \ = 0\n        }\n        if longestPalindromeLength > longestPalindromePrefixLength\
    \ {\n            longestPalindromePrefix = character\n            longestPalindromePrefixLength\
    \ = longestPalindromeLength\n        }\n        if longestPalindromeLength > longestPalindromeSuffixLength\
    \ {\n            longestPalindromeSuffix = character\n            longestPalindromeSuffixLength\
    \ = longestPalindromeLength\n        }\n    }\n\n    if longestPalindromeLength\
    \ > longestPalindromeSuffixLength {\n        longestPalindromeSuffixReverse =\
    \ longestPalindromeSuffix\n        longestPalindromeSuffixReverse.reverse()\n\
    \        longestPalindromeSuffix = longestPalindromeSuffixReverse + longestPalindromeSuffix\n\
    \    }\n\n    if longestPalindromeLength > longestPalindromePrefixLength {\n \
    \       longestPalindromePrefixReverse = longestPalindromePrefix\n        longestPalindromePrefixReverse.reverse()\n\
    \        longestPalindromePrefix = longestPalindromePrefixReverse + longestPalindromePrefix\n\
    \    }\n\n    longestPalindrome = longestPalindromePrefix + longestPalindromeSuffix\n\
    \n    return longestPalindrome", "    var longestPalindrome = string\n    var\
    \ longestPalindromeLength = 0\n    var longestPalindromePrefix: String = \"\"\n\
    \    var longestPalindromeSuffix: String = \"\"\n\n    for character in string\
    \ {\n        if character == longestPalindrome[longestPalindromeLength] {\n  \
    \          longestPalindromeLength += 1\n        } else {\n            if longestPalindromeLength\
    \ > 0 {\n                longestPalindromeSuffix += String(longestPalindrome[longestPalindromeLength\
    \ - 1])\n            }\n            longestPalindromeLength = 1\n            longestPalindromePrefix\
    \ = String(character)\n        }\n    }\n    if longestPalindromeLength > 0 {\n\
    \        longestPalindromeSuffix += String(longestPalindrome[longestPalindromeLength\
    \ - 1])\n    }\n    return longestPalindromePrefix + longestPalindromeSuffix",
  "\tlet reversed = string.reversed()\n\tlet prefix = reversed.prefix(string)\n\t\
    let suffix = reversed.suffix(string)\n\treturn prefix + suffix", "\tlet reversed\
    \ = string.reversed()\n\tlet prefixLength = string.characters.count - reversed.characters.count\n\
    \treturn string + reversed", "\tlet reverse = string.reversed()\n\tlet prefix\
    \ = string.prefix(string.reversed())\n\treturn prefix + reverse", "    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = longestPalindrome.characters.count\n\
    \    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\
    \n    for character in string.characters {\n        if character == longestPalindrome[longestPalindromeLength-1]\
    \ {\n            longestPalindromeLength--\n        } else {\n            longestPalindromePrefix\
    \ += String(character)\n        }\n    }\n    for character in string.characters\
    \ {\n        if character == longestPalindrome[longestPalindromeLength] {\n  \
    \          longestPalindromeLength++\n        } else {\n            longestPalindromeSuffix\
    \ += String(character)\n        }\n    }\n    longestPalindrome = longestPalindromePrefix\
    \ + String(longestPalindrome[longestPalindromeLength..<longestPalindrome.characters.count])\n\
    \    longestPalindrome = longestPalindromeSuffix + String(longestPalindrome[longestPalindromeLength..<longestPalindrome.characters.count])\n\
    \    return longestPalindrome", "    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    for _ in 0..<string.count {\n        let reversed = string.reversed()\n\
    \        if longestPalindromeLength < reversed.count {\n            longestPalindrome\
    \ = reversed\n            longestPalindromeLength = reversed.count\n        }\n\
    \    }\n    return longestPalindrome", "    var result = \"\"\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    for i := 0; i < len(string);\
    \ i++ {\n        var currentChar = string[i]\n        var nextChar = string[i\
    \ + 1]\n        if currentChar == nextChar {\n            result += currentChar\n\
    \            longestPalindromeLength += 1\n        } else {\n            if longestPalindromeLength\
    \ > 0 {\n                result += string[longestPalindromeLength - longestPalindromeLength\
    \ : longestPalindromeLength]\n            }\n            longestPalindromeLength\
    \ = 0\n            result += currentChar\n        }\n    }\n    if longestPalindromeLength\
    \ > 0 {\n        result += string[longestPalindromeLength - longestPalindromeLength\
    \ : longestPalindromeLength]\n    }\n    return result", "    var result = \"\"\
    \n    var longestPalindrome = \"\"\n    for character in string {\n        if\
    \ character == character {\n            result += character\n            continue\n\
    \        }\n        if longestPalindrome == \"\" {\n            longestPalindrome\
    \ = character\n            continue\n        }\n        if character == longestPalindrome\
    \ {\n            result += character\n            continue\n        }\n      \
    \  if character == longestPalindrome[longestPalindrome.index(longestPalindrome.startIndex,\
    \ offsetBy: -1)..<longestPalindrome.index(longestPalindrome.endIndex, offsetBy:\
    \ -1)] {\n            result += character\n            continue\n        }\n \
    \       if character == longestPalindrome[longestPalindrome.index(longestPalindrome.startIndex,\
    \ offsetBy: -1)..<longestPalindrome.index(longestPalindrome.endIndex, offsetBy:\
    \ -1)].reversed() {\n            result += character\n            continue\n \
    \       }\n        if character == longestPalindrome[longestPalindrome.index(longestPalindrome.startIndex,\
    \ offsetBy: -1)..<longestPalindrome.index(longestPalindrome.endIndex, offsetBy:\
    \ -1)].reversed() {\n            result += character\n            continue\n \
    \       }\n        if character == longestPalindrome[longestPalindrome.index(longestPalindrome.startIndex,\
    \ offsetBy: -1)..<longestPalindrome.index(longestPalindrome.endIndex, offsetBy:\
    \ -1)].reversed() {\n            result += character\n            continue\n \
    \       }\n        if character == longestPalindrome[longestPalindrome.index(longestPalindrome.startIndex,\
    \ offsetBy: -1)..<longestPalindrome.index(longestPalindrome.endIndex, offsetBy:\
    \ -1)].reversed() {\n            result += character\n            continue\n \
    \       }\n        if character == longestPalindrome[longestPalindrome.index(longestPalindrome.startIndex,\
    \ offsetBy: -1)..<longestPalindrome.index(longestPalindrome.endIndex, offsetBy:\
    \ -1)].reversed() {\n            result += character\n            continue\n \
    \       }\n        if character == longestPalindrome[longestPalindrome.index(longestPalindrome.startIndex,\
    \ offsetBy: -1)..<longestPalindrome.index(longestPalindrome.endIndex, offsetBy:\
    \ -1)].reversed() {\n            result += character\n            continue\n \
    \       }\n        if character == longestPalindrome[longestPalindrome.index(longestPalindrome.startIndex,\
    \ offsetBy: -1)..<longestPalindrome.index(longestPalindrome.endIndex, offset",
  "\tlet reversed = string.reversed()\n\tlet prefix = reversed.prefix(string)\n\t\
    let suffix = reversed.suffix(string)\n\treturn prefix + suffix", "\tlet reversed\
    \ = string.reversed()\n\tlet prefix = reversed.prefix(string)\n\treturn prefix\
    \ + reversed", "    if string == \"\" {\n        return \"\"\n    }\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength\
    \ = 0\n    for i := 0; i < len(string); i++ {\n        var palindrome = string\n\
    \        var palindromeLength = 0\n        var palindromePrefixLength = 0\n  \
    \      for j := 0; j < len(string); j++ {\n            if string[j] != string[i]\
    \ {\n                palindrome = string[:j] + string[j+1:]\n                palindromeLength\
    \ += 1\n                palindromePrefixLength += 1\n            }\n        }\n\
    \        if palindromeLength > longestPalindromeLength {\n            longestPalindrome\
    \ = palindrome\n            longestPalindromeLength = palindromeLength\n     \
    \       longestPalindromePrefixLength = palindromePrefixLength\n        }\n  \
    \  }\n    return longestPalindrome + string(string[longestPalindromePrefixLength:].reverse())",
  "\tlet reverse = string.reversed()\n\tlet prefixLength = string.characters.count\
    \ - reverse.characters.count\n\tlet postfix = string.characters.suffix(from: prefixLength)\n\
    \treturn string + reverse + postfix", "\tlet reverse = string.reverse()\n\tlet\
    \ prefix = reverse.prefix(string)\n\treturn prefix + reverse", "    var result\
    \ = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    for _ in 0..<string.count {\n        let index = string.index(longestPalindrome[longestPalindromeLength..<string.count],\
    \ options: .BackwardsSearch)\n        let reversed = string.reversed\n       \
    \ let palindrome = reversed[index..<reversed.index(index, offsetBy: longestPalindromeLength)]\n\
    \        if palindrome == longestPalindrome {\n            longestPalindromeLength\
    \ += 1\n        } else {\n            longestPalindromeLength = 0\n        }\n\
    \        result = result + longestPalindrome[longestPalindromeLength..<longestPalindrome.count]\
    \ + palindrome\n    }\n    return result", "\tlet reversed = string.reversed()\n\
    \tlet prefix = reversed.prefix(string)\n\treturn prefix + reversed", "    var\
    \ longestPalindrome = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix:\
    \ String = \"\"\n    var longestPalindromeSuffix: String = \"\"\n    for character\
    \ in string {\n        if character == character {\n            longestPalindromeLength\
    \ += 1\n        } else {\n            if longestPalindromeLength > longestPalindromeLength\
    \ {\n                longestPalindrome = longestPalindromePrefix\n           \
    \     longestPalindromeLength = longestPalindromeLength\n                longestPalindromePrefix\
    \ = \"\"\n                longestPalindromeSuffix = \"\"\n            }\n    \
    \        longestPalindromeLength = 1\n            longestPalindromePrefix = String(character)\n\
    \            longestPalindromeSuffix = String(character)\n        }\n    }\n \
    \   if longestPalindromeLength > longestPalindromeLength {\n        longestPalindrome\
    \ = longestPalindromePrefix\n        longestPalindromeLength = longestPalindromeLength\n\
    \        longestPalindromePrefix = \"\"\n        longestPalindromeSuffix = \"\"\
    \n    }\n    return longestPalindrome", "\tlet reverse = string.reversed()\n\t\
    let prefix = string.prefix(string.reversed())\n\treturn prefix + reverse", " \
    \   var longestPalindrome = string\n    var longestPalindromeLength = string.length\n\
    \    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\
    \n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromePrefixReverse = \"\"\n    var longestPalindromeSuffixReverse\
    \ = \"\"\n    for _ in 0..<longestPalindromeLength {\n        let currentChar\
    \ = string[longestPalindromeLength - 1]\n        let currentCharLength = string[longestPalindromeLength\
    \ - 1 - longestPalindromeLength]\n        if currentChar == currentChar.reversed()\
    \ {\n            longestPalindromeSuffix += currentChar\n            longestPalindromeSuffixLength\
    \ += 1\n        } else {\n            longestPalindromePrefix += currentChar\n\
    \            longestPalindromePrefixLength += 1\n        }\n        if longestPalindromeLength\
    \ > longestPalindromePrefixLength {\n            longestPalindrome = longestPalindromePrefix\
    \ + longestPalindromeSuffix\n            longestPalindromeLength = longestPalindromePrefixLength\
    \ + longestPalindromeSuffixLength\n            longestPalindromePrefix = \"\"\n\
    \            longestPalindromeSuffix = \"\"\n            longestPalindromePrefixLength\
    \ = 0\n            longestPalindromeSuffixLength = 0\n            longestPalindromePrefixReverse\
    \ = \"\"\n            longestPalindromeSuffixReverse = \"\"\n        }\n    }\n\
    \    return longestPalindrome", "\tlet reversedString = reverseString(string)\n\
    \tlet prefixString = reversedString.prefix(string)\n\treturn prefixString + reversedString",
  "    if string == \"\" {\n        return \"\"\n    }\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    for i := 0; i < len(string);\
    \ i++ {\n        var palindrome = string\n        for j := i; j < len(string);\
    \ j++ {\n            palindrome = append(palindrome, string[j])\n        }\n \
    \       if palindrome == longestPalindrome {\n            longestPalindromeLength++\n\
    \        } else {\n            if longestPalindromeLength > 0 {\n            \
    \    longestPalindrome = longestPalindrome[0:longestPalindromeLength]\n      \
    \      }\n            longestPalindrome = palindrome\n            longestPalindromeLength\
    \ = 1\n        }\n    }\n    if longestPalindromeLength > 0 {\n        longestPalindrome\
    \ = longestPalindrome[0:longestPalindromeLength]\n    }\n    return longestPalindrome",
  "    var string = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeIndex = 0\n    var longestPalindromeSuffix = \"\
    \"\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixReverse = \"\"\n    var longestPalindromeSuffixReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseIndex = 0\n    for stringIndex in\
    \ 0..<string.count {\n        let stringChar = string.characters[stringIndex]\n\
    \        let stringCharReverse = string.characters.reversed().first!\n       \
    \ let stringCharReverseIndex = string.characters.reversed().first!.index(stringCharReverse,\
    \ offsetBy: 1)\n        let stringCharReverseReverse = string.characters.reversed().first!.index(stringCharReverseReverse,\
    \ offsetBy: 1)\n        if stringChar == stringCharReverse {\n            longestPalindromeLength\
    \ += 1\n            if longestPalindromeLength > longestPalindromeSuffixLength\
    \ {\n                longestPalindromeSuffixLength = longestPalindromeLength\n\
    \                longestPalindromeSuffix = string\n                longestPalindromeSuffixIndex\
    \ = stringIndex\n            }\n            if stringIndex == stringCharReverseIndex\
    \ {\n                longestPalindromeSuffixLength += 1\n                if longestPalindromeSuffixLength\
    \ > longestPalindromeSuffixReverseLength {\n                    longestPalindromeSuffixReverseLength\
    \ = longestPalindromeSuffixLength\n                    longestPalindromeSuffixReverse\
    \ = stringCharReverse\n                    longestPalindromeSuffixReverseIndex\
    \ = stringCharReverseIndex\n                }\n            }\n        } else {\n\
    \            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindromeSuffixLength {\n                longestPalindromeSuffixLength\
    \ = longestPalindromeLength\n                longestPalindromeSuffix = string\n\
    \                longestPalindromeSuffixIndex = stringIndex\n            }\n \
    \           if stringIndex == stringCharReverseIndex {\n                longestPalindromeSuffixLength\
    \ += 1\n                if longestPalindromeSuffixLength > longestPalindromeSuffixReverseLength\
    \ {\n                    longestPalindromeSuffixReverseLength = longestPalindromeSuffixLength\n\
    \                    longestPalindromeSuffixReverse = stringCharReverse\n    \
    \                longestPalindromeSuffixReverseIndex = stringCharReverseIndex\n\
    \                }\n            }\n        }\n    }\n    if longestPalindromeSuffixLength\
    \ == 0 {\n        return string\n    }\n    if longestP", "\tlet reversed = string.reversed()\n\
    \tlet prefix = reversed.prefix(string)\n\treturn prefix + reversed", "    var\
    \ result = \"\"\n    var longestPalindrome = \"\"\n    for c in string {\n   \
    \     if isPalindrome(c) {\n            longestPalindrome = longestPalindrome\
    \ + c\n        } else {\n            result = result + longestPalindrome\n   \
    \         longestPalindrome = c\n        }\n    }\n    result = result + longestPalindrome\n\
    \    return result", "    var result = string\n    var longestPalindrome = string\n\
    \    var longestPalindromeLength = string.length\n    var longestPalindromeIndex\
    \ = string.length\n    for index in 0..<string.length {\n        let char = string[index]\n\
    \        if char == char.reversed() {\n            longestPalindrome = string[index...longestPalindromeIndex]\n\
    \            longestPalindromeLength = longestPalindromeIndex\n            longestPalindromeIndex\
    \ = index\n        }\n    }\n    if longestPalindromeLength == string.length {\n\
    \        return string\n    }\n    if longestPalindromeLength > string.length\
    \ {\n        return \"\"\n    }\n    if longestPalindromeLength < string.length\
    \ {\n        result = string[longestPalindromeIndex...longestPalindromeLength]\n\
    \    }\n    return result", "\tlet reverse = string.reversed()\n\tlet prefix =\
    \ string.prefix(string.reversed())\n\treturn prefix + reverse", "    let maxLength\
    \ = (string.characters.count / 2) + 1\n    var reversedString = \"\"\n    var\
    \ longestPalindrome = \"\"\n    for index in 0..<string.characters.count {\n \
    \       let character = string[index]\n        let reversedCharacter = reversedString[reversedString.characters.count\
    \ - index - 1]\n        if character == reversedCharacter {\n            reversedString\
    \ += character\n        } else {\n            if longestPalindrome.characters.count\
    \ < maxLength {\n                longestPalindrome += character\n            }\n\
    \            reversedString = character\n        }\n    }\n    return longestPalindrome",
  "\tlet reversed = string.reversed()\n\tlet prefix = reversed.prefix(string)\n\t\
    let suffix = reversed.suffix(string)\n\treturn prefix + suffix", "    let reversed\
    \ = string.reversed()\n    let prefix = string.prefix(string.reversed())\n   \
    \ return prefix + reversed", "    var result = string\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    for start in 0..<string.count\
    \ {\n        var end = start\n        for _ in 0..<(string.count - start) {\n\
    \            end += 1\n            if let currentPalindrome = string[start..<end]\
    \ {\n                if currentPalindrome == currentPalindrome.reversed() {\n\
    \                    longestPalindrome = string[start..<end]\n               \
    \     longestPalindromeLength = end - start\n                    break\n     \
    \           }\n            }\n        }\n    }\n    if longestPalindromeLength\
    \ > 0 {\n        result = result + string[longestPalindromeLength..<string.count]\n\
    \    }\n    return result", "\tlet reversed = string.reversed()\n\tlet prefixLength\
    \ = string.characters.count - reversed.characters.count\n\tlet postfix = string.substringFromIndex(prefixLength)\n\
    \treturn string + reversed + postfix", "    var result = \"\"\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] != string[len(string)-1-i] {\n            longestPalindromeLength\
    \ = 0\n            longestPalindrome = string\n            break\n        }\n\
    \        longestPalindromeLength += 1\n    }\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] != string[len(string)-1-i] {\n            result\
    \ += string[i]\n        }\n    }\n    result += string[len(string)-1-longestPalindromeLength]\n\
    \    return result", "    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefix: String = string\n    var longestPalindromeSuffix:\
    \ String = string\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromePrefixReverse: String = string\n    var longestPalindromeSuffixReverse:\
    \ String = string\n    var longestPalindromePrefixReverseLength = 0\n    var longestPalindromeSuffixReverseLength\
    \ = 0\n    for _ in 0..<string.characters.count {\n        let currentChar = string.characters[string.startIndex]\n\
    \        if currentChar == longestPalindrome[longestPalindromeLength] {\n    \
    \        longestPalindromeLength += 1\n        } else {\n            longestPalindromeLength\
    \ = 0\n        }\n        if longestPalindromeLength > longestPalindromePrefixLength\
    \ {\n            longestPalindromePrefixReverse = longestPalindromePrefix\n  \
    \          longestPalindromePrefixReverseLength = longestPalindromePrefixLength\n\
    \            longestPalindromePrefix = string\n            longestPalindromePrefixLength\
    \ = 0\n            longestPalindromePrefixReverse = string\n            longestPalindromePrefixReverseLength\
    \ = 0\n        }\n        if longestPalindromeLength > longestPalindromeSuffixLength\
    \ {\n            longestPalindromeSuffixReverse = longestPalindromeSuffix\n  \
    \          longestPalindromeSuffixReverseLength = longestPalindromeSuffixLength\n\
    \            longestPalindromeSuffix = string\n            longestPalindromeSuffixLength\
    \ = 0\n            longestPalindromeSuffixReverse = string\n            longestPalindromeSuffixReverseLength\
    \ = 0\n        }\n    }\n    if longestPalindromeLength > longestPalindromePrefixLength\
    \ {\n        longestPalindromePrefixReverse = longestPalindromePrefix\n      \
    \  longestPalindromePrefixReverseLength = longestPalindromePrefixLength\n    \
    \    longestPalindromePrefix = string\n        longestPalindromePrefixLength =\
    \ 0\n        longestPalindromePrefixReverse = string\n        longestPalindromePrefixReverseLength\
    \ = 0\n    }\n    if longestPalindromeLength > longestPalindromeSuffixLength {\n\
    \        longestPalindromeSuffixReverse = longestPalindromeSuffix\n        longestPalindromeSuffixReverseLength\
    \ = longestPalindromeSuffixLength\n        longestPalindromeSuffix = string\n\
    \        ", "    if string == \"\" {\n        return \"\"\n    }\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength\
    \ = 0\n    for i := 0; i < len(string); i++ {\n        var currentChar = string[i]\n\
    \        var currentCharLength = i + 1\n        var currentPalindromeLength =\
    \ longestPalindromeLength\n        var currentPalindromePrefixLength = longestPalindromePrefixLength\n\
    \        for j := 0; j < i; j++ {\n            if string[j] != currentChar {\n\
    \                break\n            }\n            currentCharLength++\n     \
    \   }\n        for j := i; j < len(string); j++ {\n            if string[j] !=\
    \ currentChar {\n                break\n            }\n            currentPalindromeLength++\n\
    \        }\n        for j := 0; j < i; j++ {\n            if string[j] != currentChar\
    \ {\n                break\n            }\n            currentPalindromePrefixLength++\n\
    \        }\n        if currentPalindromeLength > longestPalindromeLength {\n \
    \           longestPalindrome = string[:i]\n            longestPalindromeLength\
    \ = currentPalindromeLength\n            longestPalindromePrefixLength = currentPalindromePrefixLength\n\
    \        }\n    }\n    return longestPalindrome + string[longestPalindromePrefixLength..]",
  "    if string == \"\" {\n        return \"\"\n    }\n\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength\
    \ = 0\n\n    for i := 0; i < len(string); i++ {\n        if string[i] == string[len(string)-i-1]\
    \ {\n            longestPalindromeLength++\n            if longestPalindromeLength\
    \ > longestPalindromePrefixLength {\n                longestPalindromePrefixLength\
    \ = longestPalindromeLength\n                longestPalindrome = string[:i] +\
    \ string[(i+1):]\n            }\n        } else {\n            longestPalindromeLength\
    \ = 0\n        }\n    }\n\n    return longestPalindrome", "    let longestPalindrome\
    \ = longestPalindrome(string)\n    if longestPalindrome == nil {\n        return\
    \ string\n    }\n    let reversedString = reverseString(string, longestPalindrome!.suffix!)\n\
    \    return reversedString + longestPalindrome!.suffix!", "    var string = string\n\
    \    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\n   \
    \ var longestPalindromePostfix = \"\"\n    var longestPalindromePostfixLength\
    \ = 0\n    var longestPalindromePostfixPrefix = \"\"\n    var longestPalindromePostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfix = \"\"\n    var longestPalindromePostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPrefix = \"\"\n    var longestPalindromePostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfix = \"\"\n    var longestPalindromePostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPrefix = \"\"\n    var longestPalindromePostfixPostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfix = \"\"\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfixLength = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixSuffix = \"\"\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfix = \"\"\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfixPostfixLength = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix =\
    \ \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix =\
    \ \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindro", "    if string == \"\" {\n        return \"\
    \"\n    }\n    var reversed = string\n    var longestPalindrome = string\n   \
    \ for start in 0..<string.count {\n        var prefix = string[start..<string.count]\n\
    \        var suffix = string[start..<string.count].reversed()\n        if prefix\
    \ != suffix {\n            longestPalindrome = longestPalindrome[start..<longestPalindrome.count]\
    \ + suffix\n        }\n    }\n    return longestPalindrome", "    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromePrefixIndex = 0\n    var longestPalindromeSuffixChar\
    \ = string[longestPalindromeSuffixIndex]\n    var longestPalindromePrefixChar\
    \ = string[longestPalindromePrefixIndex]\n    for longestPalindromeSuffixIndex\
    \ < string.count {\n        longestPalindromeSuffixChar = string[longestPalindromeSuffixIndex]\n\
    \        longestPalindromeSuffixLength += 1\n        if longestPalindromeSuffixChar\
    \ == longestPalindromeSuffixChar.reversed() {\n            longestPalindromeSuffixLength\
    \ -= 1\n            if longestPalindromeSuffixLength > longestPalindromeLength\
    \ {\n                longestPalindromeLength = longestPalindromeSuffixLength\n\
    \                longestPalindromeSuffixIndex = longestPalindromeSuffixIndex +\
    \ 1\n            }\n        } else {\n            break\n        }\n    }\n  \
    \  for longestPalindromePrefixIndex < string.count {\n        longestPalindromePrefixChar\
    \ = string[longestPalindromePrefixIndex]\n        longestPalindromePrefixLength\
    \ += 1\n        if longestPalindromePrefixChar == longestPalindromePrefixChar.reversed()\
    \ {\n            longestPalindromePrefixLength -= 1\n            if longestPalindromePrefixLength\
    \ > longestPalindromeLength {\n                longestPalindromeLength = longestPalindromePrefixLength\n\
    \                longestPalindromePrefixIndex = longestPalindromePrefixIndex +\
    \ 1\n            }\n        } else {\n            break\n        }\n    }\n  \
    \  if longestPalindromeLength == 0 {\n        return \"\"\n    }\n    longestPalindrome\
    \ = string\n    for longestPalindromeSuffixIndex < string.count {\n        longestPalindromeSuffixChar\
    \ = string[longestPalindromeSuffixIndex]\n        longestPalindromeSuffixLength\
    \ += 1\n        if longestPalindromeSuffixChar == longestPalindromeSuffixChar.reversed()\
    \ {\n            longestPalindromeSuffixLength -= 1\n            if longestPalindromeSuffixLength\
    \ > longestPalindromeLength {\n                longestPalindromeLength = longestPalindromeSuffixLength\n\
    \                longestPalindromeSuffixIndex = longestPalindromeSuffixIndex +\
    \ 1\n            }\n        } else {\n            break\n        }\n    }", " \
    \   if string == \"\" {\n        return \"\"\n    }\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength\
    \ = 0\n    for i := 0; i < len(string); i++ {\n        if string[i] != string[len(string)-1-i]\
    \ {\n            break\n        }\n        longestPalindromeLength++\n       \
    \ longestPalindromePrefixLength++\n    }\n    if longestPalindromeLength == 0\
    \ {\n        return \"\"\n    }\n    longestPalindrome = string[:longestPalindromePrefixLength]\n\
    \    for i := 0; i < longestPalindromeLength/2; i++ {\n        longestPalindrome\
    \ += string[len(string)-1-i]\n    }\n    return longestPalindrome", "    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    for length in 0..<string.count\
    \ {\n        let prefix = string.prefix(upTo: length)\n        let suffix = string.suffix(from:\
    \ length)\n        let palindrome = prefix + suffix\n        if palindrome ==\
    \ longestPalindrome {\n            longestPalindromeLength += length\n       \
    \ } else {\n            longestPalindrome = palindrome\n            longestPalindromeLength\
    \ = length\n        }\n    }\n    return longestPalindrome", "    if string ==\
    \ \"\" {\n        return \"\"\n    }\n    var reversed = \"\"\n    var longest\
    \ = 0\n    for c in string {\n        if c == string[longest] {\n            longest++\n\
    \        } else {\n            if longest > 0 {\n                reversed = reversed\
    \ + string[longest]\n            }\n            longest = 1\n        }\n    }\n\
    \    if longest > 0 {\n        reversed = reversed + string[longest]\n    }\n\
    \    return reversed", "\tlet reverse = string.reversed()\n\tlet longestPalindrome\
    \ = longestPalindromeFrom(string, reverse)\n\treturn string + longestPalindrome",
  "\tlet length = string.characters.count\n\tlet reverse = string.characters.reverse()\n\
    \tlet prefix = reverse.prefix(length)\n\tlet suffix = reverse.suffix(length)\n\
    \treturn prefix + suffix", "    var reversedString = string\n    var longestPalindrome\
    \ = string\n    for _ in 0..<string.count {\n        let reversedSubstringReversed\
    \ = reversedString.reversed()\n        let longestPalindromeSubstringReversed\
    \ = longestPalindrome.reversed()\n        if longestPalindromeSubstringReversed\
    \ == reversedSubstringReversed {\n            longestPalindrome = longestPalindrome.reversed()\n\
    \        } else {\n            break\n        }\n    }\n    return longestPalindrome",
  "    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    for\
    \ i := 0; i < len(string); i++ {\n        var palindrome = string\n        var\
    \ palindromeLength = 1\n        for j := 0; j < i; j++ {\n            if string[j]\
    \ != string[i] {\n                palindrome += string[j]\n                palindromeLength\
    \ += 1\n            }\n        }\n        if palindromeLength > longestPalindromeLength\
    \ {\n            longestPalindrome = palindrome\n            longestPalindromeLength\
    \ = palindromeLength\n        }\n    }\n    return longestPalindrome + string(string.reverse())",
  "\tlet maxIndex = string.characters.reversed().index(of: string.characters.first!)\n\
    \treturn string.characters.reversed()[maxIndex...].joined(separator: \"\")", "\t\
    let reversed = string.reversed()\n\tlet prefix = reversed.prefix(string)\n\tlet\
    \ suffix = reversed.suffix(string)\n\treturn prefix + suffix", "    var string\
    \ = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix\
    \ = \"\"\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromePrefixReverse = \"\"\n    var longestPalindromeSuffixReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseLength = 0\n    var longestPalindromeSuffixReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseReverseLength = 0\n   \
    \ var longestPalindromeSuffixReverseReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseReverseReverse = \"\"\n\
    \    var longestPalindromePrefixReverseReverseReverseReverseLength = 0\n    var\
    \ longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseReverseReverseReverse =\
    \ \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromePrefixReverseReverseReverseReverseReverse = \"\"\n \
    \   var longestPalindromeSuffixReverseReverseReverseReverseReverse = \"\"\n  \
    \  var longestPalindromePrefixReverseReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromeSuffixReverseReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromePrefixReverseReverseReverseReverseReverseReverse = \"\
    \"\n    var longestPalindromeSuffixReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromePrefixReverseReverseReverseReverseReverse = \"\"\n \
    \   var longestPalindromeSuffixReverseReverseReverseReverseReverse = \"\"\n  \
    \  var longestPalindromePrefixReverseReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n    var\
    \ longestPalindromePrefixReverseReverseReverseReverseReverseReverse = \"\"\n \
    \   var longestPalindromeSuffixReverseReverseReverseReverseReverseReverse", " \
    \   var longestPalindrome = string\n    var longestPalindromeLen = 0\n    var\
    \ longestPalindromeReverse = \"\"\n    for i := 0; i < len(string); i++ {\n  \
    \      var palindrome = string\n        var palindromeLen = 0\n        var palindromeReverse\
    \ = \"\"\n        for j := 0; j < len(string); j++ {\n            if string[j]\
    \ != string[i] {\n                palindrome = string[:j] + string[j+1:]\n   \
    \             palindromeLen = j\n                palindromeReverse = string[:i]\
    \ + string[i+1:]\n                break\n            }\n        }\n        if\
    \ palindromeLen > longestPalindromeLen {\n            longestPalindrome = palindrome\n\
    \            longestPalindromeLen = palindromeLen\n            longestPalindromeReverse\
    \ = palindromeReverse\n        }\n    }\n    return longestPalindromeReverse +\
    \ longestPalindrome", "\tlet stringLength = string.characters.count\n\tlet longestPalindromeLength\
    \ = findLongestPalindrome(string)\n\tlet longestPalindrome = string.substringToIndex(longestPalindromeLength)\n\
    \tlet longestPalindromeReversed = longestPalindrome.characters.reversed()\n\t\
    return longestPalindromeReversed + longestPalindrome", "    if string == \"\"\
    \ {\n        return \"\"\n    }\n\n    var longestPalindrome = \"\"\n    var longestPalindromeLen\
    \ = 0\n    var longestPalindromeIndex = 0\n    var longestPalindromeIndexLen =\
    \ 0\n\n    for i := 0; i < len(string); i++ {\n        if string[i] != string[len(string)-(i+1)]\
    \ {\n            longestPalindromeIndexLen = 0\n            longestPalindromeIndex\
    \ = 0\n        } else {\n            longestPalindromeIndexLen += 1\n        \
    \    if longestPalindromeIndexLen > longestPalindromeLen {\n                longestPalindromeLen\
    \ = longestPalindromeIndexLen\n                longestPalindromeIndex = i\n  \
    \          }\n        }\n    }\n\n    longestPalindromeIndexLen += 1\n    if longestPalindromeIndexLen\
    \ > longestPalindromeLen {\n        longestPalindromeLen = longestPalindromeIndexLen\n\
    \        longestPalindromeIndex = i\n    }\n\n    var palindrome = string\n  \
    \  for i := longestPalindromeIndex; i >= 0; i-- {\n        palindrome = string[i+longestPalindromeLen+longestPalindromeIndexLen]\
    \ + palindrome\n    }\n\n    return palindrome", "\tlet reverse = string.reversed()\n\
    \tlet prefix = reverse.prefix(string)\n\treturn prefix + reverse", "\tlet reversedString\
    \ = reverseString(string)\n\tlet longestPalindrome = longestPalindromePrefix(reversedString)\n\
    \treturn reversedString + longestPalindrome", "\tlet length = string.characters.count\n\
    \tlet longestPalindrome = longestPalindrome(string, length)\n\tlet reversedString\
    \ = reverseString(string, longestPalindrome)\n\treturn reversedString + longestPalindrome",
  "\tlet reversed = string.reversed()\n\tlet prefix = reversed.prefix(string)\n\t\
    return prefix + reversed", "    var result = \"\"\n    var longest = 0\n    for\
    \ i := 0; i < len(string); i++ {\n        longest += string[i]\n    }\n    for\
    \ i := 0; i < len(string); i++ {\n        result += string[i]\n        if i ==\
    \ 0 {\n            continue\n        }\n        if string[i] != string[longest]\
    \ {\n            break\n        }\n        longest--\n    }\n    return result",
  "    var result = string\n    var longestPalindrome = string\n    for _ in 0..<string.characters.count\
    \ {\n        let start = string.startIndex\n        let end = string.endIndex\n\
    \        let reversedString = string.reversed\n        let prefixString = string.substringFromIndex(start)\n\
    \        let suffixString = string.substringToIndex(end)\n        let prefixReversedString\
    \ = reversedString.substringFromIndex(start)\n        let suffixReversedString\
    \ = reversedString.substringToIndex(end)\n        if prefixString == suffixString\
    \ {\n            if prefixReversedString == suffixReversedString {\n         \
    \       longestPalindrome = string\n            } else {\n                longestPalindrome\
    \ = longestPalindrome+reversedString\n            }\n        } else {\n      \
    \      longestPalindrome = longestPalindrome+reversedString\n        }\n    }\n\
    \    return result", "    if string == \"\" {\n        return \"\"\n    }\n  \
    \  var longestPalindrome = string\n    var longestPalindromeLength = longestPalindrome.characters.count\n\
    \    var longestPalindromeIndex = longestPalindrome.startIndex\n    for index\
    \ in 0..<longestPalindromeLength {\n        var currentChar = longestPalindrome[index]\n\
    \        var nextChar = longestPalindrome[index + 1]\n        if currentChar ==\
    \ nextChar {\n            longestPalindromeIndex += 1\n        } else {\n    \
    \        break\n        }\n    }\n    var reversedString = longestPalindrome[longestPalindromeIndex..<longestPalindrome.endIndex]\n\
    \    longestPalindrome = longestPalindrome[longestPalindromeIndex..<longestPalindrome.endIndex]\n\
    \    longestPalindromeLength += longestPalindrome.characters.count\n    for index\
    \ in 0..<longestPalindromeLength {\n        var currentChar = longestPalindrome[index]\n\
    \        var nextChar = longestPalindrome[index + 1]\n        if currentChar ==\
    \ nextChar {\n            longestPalindromeIndex += 1\n        } else {\n    \
    \        break\n        }\n    }\n    return longestPalindrome + reversedString",
  "    if string == \"\" {\n        return \"\"\n    }\n    var reversedString = string\n\
    \    var longestPalindrome = string\n    var longestPalindromeLength = 0\n   \
    \ var longestPalindromeIndex = 0\n    for index in 0..<string.count {\n      \
    \  let currentChar = string[index]\n        if currentChar == currentChar.reversed()\
    \ {\n            reversedString = reversedString.dropLast()\n            longestPalindromeLength\
    \ = longestPalindromeLength + 1\n            if longestPalindromeLength > longestPalindromeIndex\
    \ {\n                longestPalindromeIndex = longestPalindromeLength\n      \
    \          longestPalindrome = string\n            }\n        } else {\n     \
    \       reversedString = reversedString + currentChar\n        }\n    }\n    return\
    \ longestPalindrome", "\tlet maxLen = string.characters.count\n\tlet maxLenPalindrome\
    \ = maxLen / 2\n\tlet maxLenPalindromePadded = maxLenPalindrome + maxLenPalindrome\
    \ % 2\n\tlet maxLenPalindromePaddedString = String(maxLenPalindromePadded)\n\t\
    let maxLenPalindromePaddedStringPadded = maxLenPalindromePaddedString + maxLenPalindromePaddedString\n\
    \tlet maxLenPalindromePaddedStringPaddedReversed = maxLenPalindromePaddedStringPadded\
    \ + maxLenPalindromePaddedStringPadded\n\tlet maxLenPalindromePaddedStringPaddedReversedString\
    \ = String(maxLenPalindromePaddedStringPaddedReversed)\n\tlet maxLenPalindromePaddedStringPaddedReversedStringPadded\
    \ = maxLenPalindromePaddedStringPaddedReversedString + maxLenPalindromePaddedStringPaddedReversedString\n\
    \tlet maxLenPalindromePaddedStringPaddedReversedStringPaddedReversed = maxLenPalindromePaddedStringPaddedReversedStringPadded\
    \ + maxLenPalindromePaddedStringPaddedReversedStringPadded\n\tlet maxLenPalindromePaddedStringPaddedReversedStringPaddedReversedString\
    \ = String(maxLenPalindromePaddedStringPaddedReversedStringPaddedReversed)\n\t\
    let maxLenPalindromePaddedStringPaddedReversedStringPaddedReversedStringPadded\
    \ = maxLenPalindromePaddedStringPaddedReversedStringPaddedReversedString + maxLenPalindromePaddedStringPaddedReversedStringPaddedReversedStringPadded\n\
    \tlet maxLenPalindromePaddedStringPaddedReversedStringPaddedReversedStringPaddedReversed\
    \ = maxLenPalindromePaddedStringPaddedReversedStringPaddedReversedString + maxLenPalindromePaddedStringPaddedReversedStringPaddedReversedStringPaddedReversed\n\
    \tlet maxLenPalindromePaddedStringPaddedReversedStringPaddedReversedStringPaddedReversedStringPadded\
    \ = maxLenPalindromePaddedStringPaddedReversedStringPaddedReversedStringPaddedReversed\
    \ + maxLenPalindro", "    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefix: String = \"\"\n    var longestPalindromeSuffix:\
    \ String = \"\"\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n\n    for character in string {\n        if character == longestPalindrome[longestPalindromeLength]\
    \ {\n            longestPalindromeLength += 1\n        } else {\n            if\
    \ longestPalindromeLength > 0 {\n                longestPalindrome = longestPalindromePrefix\
    \ + longestPalindrome[longestPalindromeLength..<longestPalindromeLength-1] + longestPalindromeSuffix\n\
    \                longestPalindromePrefix = \"\"\n                longestPalindromeSuffix\
    \ = \"\"\n                longestPalindromeLength = 0\n            }\n       \
    \     longestPalindromePrefix = longestPalindromePrefix + character\n        \
    \    longestPalindromeLength += 1\n        }\n    }\n    if longestPalindromeLength\
    \ > 0 {\n        longestPalindrome = longestPalindromePrefix + longestPalindrome[longestPalindromeLength..<longestPalindromeLength-1]\
    \ + longestPalindromeSuffix\n    }\n    return longestPalindrome", "\tlet length\
    \ = string.characters.count\n\tlet reverse = string.characters.reverse()\n\tlet\
    \ prefix = reverse.prefix(length)\n\tlet suffix = reverse.suffix(length)\n\treturn\
    \ prefix + suffix", "    var result = \"\"\n    var longestPalindrome = \"\"\n\
    \    var longestPalindromeLength = 0\n    for i := 0; i < len(string); i++ {\n\
    \        if string[i] != string[len(string)-1-i] {\n            longestPalindromeLength\
    \ = 0\n            longestPalindrome = \"\"\n        }\n        if string[i] ==\
    \ string[len(string)-1-i] {\n            longestPalindromeLength += 1\n      \
    \      longestPalindrome += string[i]\n        }\n    }\n    if longestPalindromeLength\
    \ > 1 {\n        result = longestPalindrome\n    }\n    return result", "    var\
    \ longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    for i :=\
    \ 0; i < len(string); i++ {\n        longestPalindromeLength = 0\n        for\
    \ j := 0; j < len(string); j++ {\n            if string[i] == string[j] {\n  \
    \              longestPalindromeLength += 1\n            }\n        }\n      \
    \  if longestPalindromeLength > longestPalindromeLength {\n            longestPalindrome\
    \ = string\n            longestPalindromeLength = longestPalindromeLength\n  \
    \      }\n    }\n    return longestPalindrome", "    let maxLen = string.characters.count\n\
    \    let maxIndex = string.characters.reversed().index(string.characters.startIndex,\
    \ offsetBy: maxLen)\n    let prefix = string.substring(to: maxIndex)\n    let\
    \ suffix = string.substring(from: maxIndex)\n    return prefix + suffix", "  \
    \  var string = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndexAfterReverse = 0\n    var longestPalindromeEndIndexAfterReverse\
    \ = 0\n    var longestPalindromeStartIndexBeforeReverse = 0\n    var longestPalindromeEndIndexBeforeReverse\
    \ = 0\n    var longestPalindromeStartIndexAfterReverseAfterReverse = 0\n    var\
    \ longestPalindromeEndIndexAfterReverseAfterReverse = 0\n    var longestPalindromeStartIndexBeforeReverseBeforeReverse\
    \ = 0\n    var longestPalindromeEndIndexBeforeReverseBeforeReverse = 0\n    var\
    \ longestPalindromeStartIndexAfterReverseAfterReverseBeforeReverse = 0\n    var\
    \ longestPalindromeEndIndexAfterReverseAfterReverseBeforeReverse = 0\n    var\
    \ longestPalindromeStartIndexBeforeReverseBeforeReverseAfterReverse = 0\n    var\
    \ longestPalindromeEndIndexBeforeReverseBeforeReverseAfterReverse = 0\n    var\
    \ longestPalindromeStartIndexAfterReverseAfterReverseBeforeReverse = 0\n    var\
    \ longestPalindromeEndIndexAfterReverseAfterReverseBeforeReverse = 0\n    var\
    \ longestPalindromeStartIndexBeforeReverseBeforeReverseAfterReverse = 0\n    var\
    \ longestPalindromeEndIndexBeforeReverseBeforeReverseAfterReverse = 0\n    var\
    \ longestPalindromeStartIndexAfterReverseAfterReverseBeforeReverse = 0\n    var\
    \ longestPalindromeEndIndexAfterReverseAfterReverseBeforeReverse = 0\n    var\
    \ longestPalindromeStartIndexBeforeReverseBeforeReverseAfterReverse = 0\n    var\
    \ longestPalindromeEndIndexBeforeReverseBeforeReverseAfterReverse = 0\n    var\
    \ longestPalindromeStartIndexAfterReverseAfterReverseBeforeReverse = 0\n    var\
    \ longestPalindromeEndIndexAfterReverseAfterReverseBeforeReverse = 0\n    var\
    \ longestPalindromeStartIndexBeforeReverseBeforeReverseAfterReverse = 0\n    var\
    \ longestPalindromeEndIndexBeforeReverseBeforeReverseAfterReverse = 0\n    var\
    \ longestPalindromeStartIndexAfterReverseAfterReverseBeforeReverse = 0\n    var\
    \ longestPalindromeEndIndexAfterReverseAfterReverseBeforeReverse = 0\n    var\
    \ longestPalindromeStartIndexBeforeReverseBeforeReverseAfterReverse = 0\n    var\
    \ longestPalindromeEndIndexBeforeReverseBeforeReverseAfterReverse = 0\n    var\
    \ longestPalindromeStartIndexAfterReverseAfterReverseBeforeReverse = 0\n    var\
    \ longestPalindromeEndIndexAfterReverseAfterReverseBeforeReverse = 0\n    var\
    \ longestPalindromeStartIndexBeforeReverseBeforeReverseAfterReverse = 0", "  \
    \  var result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLen\
    \ = 0\n    for c in string {\n        if longestPalindromeLen < longestPalindrome.count\
    \ {\n            longestPalindrome = longestPalindrome + String(c)\n         \
    \   longestPalindromeLen = longestPalindrome.count\n        }\n        if longestPalindromeLen\
    \ > longestPalindrome.count {\n            longestPalindrome = longestPalindrome\
    \ + String(c)\n            longestPalindromeLen = longestPalindrome.count\n  \
    \      }\n    }\n    for c in longestPalindrome {\n        result = result + String(c)\n\
    \    }\n    return result", "\tlet maxLength: Int = string.characters.count\n\t\
    let reversedString = string.reversed()\n\tlet prefixLength = string.characters.count\
    \ - maxLength\n\tlet prefixString = string[prefixLength..<string.characters.count]\n\
    \tlet suffixString = string[..<prefixLength]\n\tlet palindromeString = prefixString\
    \ + reversedString + suffixString\n\treturn palindromeString", "    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = string.length\n    var longestPalindromePrefix\
    \ = \"\"\n    var longestPalindromeSuffix = \"\"\n    var longestPalindromePostfix\
    \ = \"\"\n    var longestPalindromePostfixLength = 0\n    var longestPalindromePostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixSuffix = \"\"\n    var longestPalindromePostfixPostfix\
    \ = \"\"\n    var longestPalindromePostfixPostfixLength = 0\n    var longestPalindromePostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixSuffix = \"\"\n    var longestPalindromePostfixPostfixPostfix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixLength = 0\n    var longestPalindromePostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixSuffix = \"\"\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfix = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPrefix = \"\"\n  \
    \  var longestPalindromePostfixPostfixPostfixPostfixSuffix = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixLength =\
    \ 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix = \"\"\
    \n    var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix = \"\"\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix = \"\"\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength = 0\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPrefix = \"\
    \"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePost", "\tlet reverse = string.reversed()\n\
    \tlet prefix = reverse.prefix(string)\n\tlet suffix = reverse.suffix(string)\n\
    \treturn prefix + suffix", "\tlet reversed = string.reversed()\n\tlet prefixLength\
    \ = (string.characters.count - reversed.characters.count) / 2\n\tlet prefix =\
    \ string.characters.suffix(from: prefixLength)\n\tlet suffix = reversed.characters.prefix(from:\
    \ prefixLength)\n\treturn prefix + suffix", "\tlet reversed = string.reversed()\n\
    \tlet prefixLength = string.characters.count - reversed.characters.count\n\treturn\
    \ string.characters.prefix(prefixLength) + reversed", "    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix:\
    \ String = \"\"\n    for character in string {\n        if character == longestPalindrome[longestPalindromeLength]\
    \ {\n            longestPalindromeLength += 1\n        } else {\n            longestPalindromeLength\
    \ = 0\n            longestPalindromePrefix = character\n        }\n    }\n   \
    \ var longestPalindromeSuffix = string\n    for character in string {\n      \
    \  if character == longestPalindrome[longestPalindromeLength] {\n            longestPalindromeSuffix\
    \ = longestPalindromeSuffix.substringToIndex(longestPalindromeSuffix.startIndex.successor())\n\
    \        } else {\n            break\n        }\n    }\n    return longestPalindromePrefix\
    \ + longestPalindromeSuffix + longestPalindrome[longestPalindromeLength..<longestPalindromeSuffix.endIndex].reversed()",
  "\tlet reversed = string.reversed()\n\tlet prefix = reversed.prefix(string)\n\t\
    let suffix = reversed.suffix(string)\n\treturn prefix + suffix", "    if string\
    \ == \"\" {\n        return \"\"\n    }\n    var longestPalindrome = string\n\
    \    var longestPalindromeLength = string.length\n    var longestPalindromePrefix\
    \ = \"\"\n    var longestPalindromeSuffix = \"\"\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    for i := 0; i < longestPalindromeLength;\
    \ i++ {\n        if longestPalindrome[i] == string[longestPalindromeLength - i\
    \ - 1] {\n            longestPalindromeSuffixLength++\n        } else {\n    \
    \        longestPalindromePrefixLength++\n        }\n    }\n    for i := 0; i\
    \ < longestPalindromePrefixLength; i++ {\n        longestPalindromeSuffix += string[longestPalindromeLength\
    \ - i - 1]\n    }\n    for i := 0; i < longestPalindromeSuffixLength; i++ {\n\
    \        longestPalindromeSuffix += string[longestPalindromeLength - i - 1]\n\
    \    }\n    longestPalindrome = longestPalindromePrefix + longestPalindromeSuffix[longestPalindromeSuffixLength..<longestPalindromeLength]\n\
    \    return longestPalindrome", "    let reverse = string.reversed()\n    let\
    \ prefix = string.prefix(string.reversed())\n    return prefix + reverse", "\t\
    let stringToPalindrome = string\n\tlet reversedString = stringToPalindrome.rev()\n\
    \tlet longestPalindrome = longestPalindromeFrom(stringToPalindrome, reversedString)\n\
    \treturn stringToPalindrome.append(longestPalindrome)", "    var result = string\n\
    \    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    for\
    \ i := 0; i < len(string); i++ {\n        var currentChar = string[i]\n      \
    \  var currentPalindrome = \"\"\n        var currentPalindromeLength = 0\n   \
    \     for j := 0; j < len(result); j++ {\n            if currentChar == result[j]\
    \ {\n                currentPalindrome += currentChar\n                currentPalindromeLength\
    \ += 1\n            } else {\n                break\n            }\n        }\n\
    \        if currentPalindromeLength > longestPalindromeLength {\n            longestPalindrome\
    \ = currentPalindrome\n            longestPalindromeLength = currentPalindromeLength\n\
    \        }\n    }\n    for i := 0; i < len(string); i++ {\n        var currentChar\
    \ = string[i]\n        var currentPalindrome = \"\"\n        var currentPalindromeLength\
    \ = 0\n        for j := 0; j < len(result); j++ {\n            if currentChar\
    \ == result[j] {\n                currentPalindrome += currentChar\n         \
    \       currentPalindromeLength += 1\n            } else {\n                break\n\
    \            }\n        }\n        if currentPalindromeLength > longestPalindromeLength\
    \ {\n            longestPalindrome = currentPalindrome\n            longestPalindromeLength\
    \ = currentPalindromeLength\n        }\n    }\n    for i := 0; i < len(string);\
    \ i++ {\n        var currentChar = string[i]\n        var currentPalindrome =\
    \ \"\"\n        var currentPalindromeLength = 0\n        for j := 0; j < len(result);\
    \ j++ {\n            if currentChar == result[j] {\n                currentPalindrome\
    \ += currentChar\n                currentPalindromeLength += 1\n            }\
    \ else {\n                break\n            }\n        }\n        if currentPalindromeLength\
    \ > longestPalindromeLength {\n            longestPalindrome = currentPalindrome\n\
    \            longestPalindromeLength = currentPalindromeLength\n        }\n  \
    \  }\n    for i := 0; i < len(string); i++ {\n        var currentChar = string[i]\n\
    \        var currentPalindrome = \"\"\n        var currentPalindromeLength = 0\n\
    \        for j := 0; j < len(result); j++ {\n            if currentChar == result[j]\
    \ {\n                currentPalindrome += currentChar\n                currentPalindromeLength\
    \ += 1\n            } else {\n                break\n            }\n        }\n\
    \        if currentPalindromeLength > longestPalindromeLength {\n            longestPalindrome",
  "    var result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for character in string {\n        if character == character {\n  \
    \          result += character\n            continue\n        }\n        if longestPalindromeLength\
    \ < len(character) {\n            longestPalindrome = character\n            longestPalindromeLength\
    \ = len(character)\n        }\n    }\n    for character in string {\n        if\
    \ character == character {\n            result += character\n            continue\n\
    \        }\n        if longestPalindromeLength < len(character) {\n          \
    \  longestPalindrome = character\n            longestPalindromeLength = len(character)\n\
    \        }\n    }\n    for character in string {\n        if character == character\
    \ {\n            result += character\n            continue\n        }\n      \
    \  if longestPalindromeLength < len(character) {\n            longestPalindrome\
    \ = character\n            longestPalindromeLength = len(character)\n        }\n\
    \    }\n    for character in string {\n        if character == character {\n \
    \           result += character\n            continue\n        }\n        if longestPalindromeLength\
    \ < len(character) {\n            longestPalindrome = character\n            longestPalindromeLength\
    \ = len(character)\n        }\n    }\n    for character in string {\n        if\
    \ character == character {\n            result += character\n            continue\n\
    \        }\n        if longestPalindromeLength < len(character) {\n          \
    \  longestPalindrome = character\n            longestPalindromeLength = len(character)\n\
    \        }\n    }\n    for character in string {\n        if character == character\
    \ {\n            result += character\n            continue\n        }\n      \
    \  if longestPalindromeLength < len(character) {\n            longestPalindrome\
    \ = character\n            longestPalindromeLength = len(character)\n        }\n\
    \    }\n    for character in string {\n        if character == character {\n \
    \           result += character\n            continue\n        }\n        if longestPalindromeLength\
    \ < len(character) {\n            longestPalindrome = character\n            longestPalindromeLength\
    \ = len(character)\n        }\n    }\n    for character in string {\n        if\
    \ character == character {\n            result += character\n            continue\n\
    \        }\n        if longestPalindromeLength < len(character) {\n          \
    \  longestPalindrome = character\n            longestPalindromeLength = len(character)\n\
    \        }\n    }\n    for character in string {\n        if character == character\
    \ {\n            result += character\n            continue\n        }\n      \
    \  if longestPalindromeLength < len(character) {\n            longestPalindrome\
    \ = character\n            longest", "    var result = string\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeIndex\
    \ = 0\n    for index in 0..<string.characters.count {\n        let character =\
    \ string.characters[index]\n        let reversedCharacter = reverseString(character)\n\
    \        if character == reversedCharacter {\n            if longestPalindromeLength\
    \ < index {\n                longestPalindrome = string\n                longestPalindromeLength\
    \ = index\n                longestPalindromeIndex = index\n            }\n   \
    \     } else {\n            if longestPalindromeLength > index {\n           \
    \     let newLongestPalindrome = string\n                newLongestPalindrome.append(reversedCharacter)\n\
    \                longestPalindrome = newLongestPalindrome\n                longestPalindromeLength\
    \ = index\n                longestPalindromeIndex = index\n            }\n   \
    \     }\n    }\n    if longestPalindromeLength == 0 {\n        return \"\"\n \
    \   }\n    if longestPalindromeLength > 0 {\n        result = string\n       \
    \ result.append(reverseString(string.characters[longestPalindromeIndex]))\n  \
    \  }\n    return result", "    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n\n    for character in string {\n        if character == character {\n\
    \            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindromeSuffixLength {\n                longestPalindromeSuffixLength\
    \ = longestPalindromeLength\n            }\n        } else {\n            longestPalindromeLength\
    \ = 0\n            longestPalindromePrefixLength = 0\n            longestPalindromeSuffixLength\
    \ = 0\n        }\n    }\n\n    for character in string {\n        if character\
    \ == character {\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindromePrefixLength {\n                longestPalindromePrefixLength\
    \ = longestPalindromeLength\n            }\n        } else {\n            longestPalindromeLength\
    \ = 0\n            longestPalindromePrefixLength = 0\n            longestPalindromeSuffixLength\
    \ = 0\n        }\n    }\n\n    if longestPalindromeLength > longestPalindromeSuffixLength\
    \ {\n        longestPalindrome = string\n    } else {\n        longestPalindrome\
    \ = string + string[longestPalindromeSuffixLength..<longestPalindromePrefixLength].reversed()\n\
    \    }\n\n    return longestPalindrome", "\tlet maxPalindrome = findLongestPalindrome(string)\n\
    \tlet reversedString = reverseString(string, maxPalindrome)\n\treturn reversedString\
    \ + maxPalindrome", "    var result = string\n    var longestPalindrome = string\n\
    \    var longestPalindromeLength = 0\n    for character in string {\n        if\
    \ character == character {\n            longestPalindromeLength += 1\n       \
    \     if longestPalindromeLength > longestPalindrome.count {\n               \
    \ longestPalindrome = string\n                longestPalindromeLength = longestPalindrome.count\n\
    \            }\n        } else {\n            longestPalindromeLength = 0\n  \
    \      }\n    }\n    for character in string {\n        if character == character\
    \ {\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.count {\n                longestPalindrome = string\n  \
    \              longestPalindromeLength = longestPalindrome.count\n           \
    \ }\n        } else {\n            longestPalindromeLength = 0\n        }\n  \
    \  }\n    for character in string {\n        if character == character {\n   \
    \         longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.count {\n                longestPalindrome = string\n  \
    \              longestPalindromeLength = longestPalindrome.count\n           \
    \ }\n        } else {\n            longestPalindromeLength = 0\n        }\n  \
    \  }\n    for character in string {\n        if character == character {\n   \
    \         longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.count {\n                longestPalindrome = string\n  \
    \              longestPalindromeLength = longestPalindrome.count\n           \
    \ }\n        } else {\n            longestPalindromeLength = 0\n        }\n  \
    \  }\n    for character in string {\n        if character == character {\n   \
    \         longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.count {\n                longestPalindrome = string\n  \
    \              longestPalindromeLength = longestPalindrome.count\n           \
    \ }\n        } else {\n            longestPalindromeLength = 0\n        }\n  \
    \  }\n    for character in string {\n        if character == character {\n   \
    \         longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.count {\n                longestPalindrome = string\n  \
    \              longestPalindromeLength = longestPalindrome.count\n           \
    \ }\n        } else {\n            longestPalindromeLength = 0\n        }\n  \
    \  }\n    for character in string {\n        if character == character {\n   \
    \         longestPalindromeLength += 1\n            if longestPalindromeLength",
  "    var result = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    for length in string.characters\
    \ {\n        if length > longestPalindromeLength {\n            longestPalindrome\
    \ = string\n            longestPalindromeLength = length\n            longestPalindromePrefixLength\
    \ = 0\n        }\n        if length > longestPalindromePrefixLength {\n      \
    \      longestPalindromePrefixLength = length\n        }\n    }\n    for length\
    \ in string.characters {\n        if length > longestPalindromeLength {\n    \
    \        longestPalindrome = string\n            longestPalindromeLength = length\n\
    \            longestPalindromePrefixLength = 0\n        }\n        if length >\
    \ longestPalindromePrefixLength {\n            longestPalindromePrefixLength =\
    \ length\n        }\n    }\n    for length in string.characters {\n        if\
    \ length > longestPalindromeLength {\n            longestPalindrome = string\n\
    \            longestPalindromeLength = length\n            longestPalindromePrefixLength\
    \ = 0\n        }\n        if length > longestPalindromePrefixLength {\n      \
    \      longestPalindromePrefixLength = length\n        }\n    }\n    for length\
    \ in string.characters {\n        if length > longestPalindromeLength {\n    \
    \        longestPalindrome = string\n            longestPalindromeLength = length\n\
    \            longestPalindromePrefixLength = 0\n        }\n        if length >\
    \ longestPalindromePrefixLength {\n            longestPalindromePrefixLength =\
    \ length\n        }\n    }\n    for length in string.characters {\n        if\
    \ length > longestPalindromeLength {\n            longestPalindrome = string\n\
    \            longestPalindromeLength = length\n            longestPalindromePrefixLength\
    \ = 0\n        }\n        if length > longestPalindromePrefixLength {\n      \
    \      longestPalindromePrefixLength = length\n        }\n    }\n    for length\
    \ in string.characters {\n        if length > longestPalindromeLength {\n    \
    \        longestPalindrome = string\n            longestPalindromeLength = length\n\
    \            longestPalindromePrefixLength = 0\n        }\n        if length >\
    \ longestPalindromePrefixLength {\n            longestPalindromePrefixLength =\
    \ length\n        }\n    }\n    for length in string.characters {\n        if\
    \ length > longestPalindromeLength {\n            longestPalindrome = string\n\
    \            longestPalindromeLength = length\n            longestPalindromePrefixLength\
    \ = 0\n        }\n        if ", "    if string == \"\" {\n        return \"\"\n\
    \    }\n    var reversedString = string\n    var longestPalindromicPostfix = 0\n\
    \    for i := 0; i < len(string); i++ {\n        if string[i] == string[len(string)\
    \ - 1 - i] {\n            longestPalindromicPostfix += i\n        }\n    }\n \
    \   for i := longestPalindromicPostfix; i > 0; i-- {\n        reversedString =\
    \ reversedString[longestPalindromicPostfix-i-1..<longestPalindromicPostfix]\n\
    \    }\n    return reversedString + string", "    if string == \"\" {\n      \
    \  return \"\"\n    }\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = string.length\n    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix\
    \ = \"\"\n    for index in 0..<string.length - 1 {\n        let currentChar =\
    \ string[index]\n        let currentCharIsPalindrome = currentChar == string[longestPalindromeLength\
    \ - index]\n        if currentCharIsPalindrome {\n            longestPalindromeLength\
    \ = longestPalindromeLength - 1\n            longestPalindromePrefix = string[index..<longestPalindromeLength]\n\
    \            longestPalindromeSuffix = string[longestPalindromeLength..<string.length]\n\
    \        } else {\n            break\n        }\n    }\n    longestPalindrome\
    \ = longestPalindromePrefix + longestPalindromeSuffix + longestPalindrome\n  \
    \  return longestPalindrome"]
stop_tokens:
- "\n}"
