name: HumanEval_10_make_palindrome
language: swift
prompt: "\n/// Find the shortest palindrome that begins with a supplied string.\n\
  /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
  \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
  \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome('')\n\
  /// ''\n/// >>> make_palindrome('cat')\n/// 'catac'\n/// >>> make_palindrome('cata')\n\
  /// 'catac'\nfunc make_palindrome(string: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(make_palindrome(string: \"\") == \"\")\n\
  assert(make_palindrome(string: \"x\") == \"x\")\nassert(make_palindrome(string:\
  \ \"xyz\") == \"xyzyx\")\nassert(make_palindrome(string: \"xyx\") == \"xyx\")\n\
  assert(make_palindrome(string: \"jerry\") == \"jerryrrej\")"
completions: ["    var stringToReturn = string\n    var longestPalindrome = string\n\
    \    var longestPalindromeLength = 0\n    for stringToCheck in string.characters\
    \ {\n        if stringToCheck == stringToReturn[longestPalindromeLength] {\n \
    \           longestPalindromeLength += 1\n        } else {\n            longestPalindromeLength\
    \ = 0\n        }\n        if longestPalindromeLength > longestPalindrome.characters.count\
    \ {\n            longestPalindrome = stringToReturn\n            longestPalindromeLength\
    \ = stringToReturn.characters.count\n        }\n    }\n    for stringToCheck in\
    \ string.characters {\n        if stringToCheck != stringToReturn[longestPalindromeLength]\
    \ {\n            stringToReturn = stringToReturn + stringToReturn[longestPalindromeLength]\n\
    \        }\n    }\n    return stringToReturn", "    var result = \"\"\n    var\
    \ longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    for i :=\
    \ 0; i < len(string); i++ {\n        if string[i] == string[len(string)-i-1] {\n\
    \            result += string[i]\n            longestPalindromeLength += 1\n \
    \           if longestPalindromeLength > longestPalindrome {\n               \
    \ longestPalindrome = longestPalindromeLength\n                longestPalindrome\
    \ = string[len(string)-i-1]\n            }\n        } else {\n            result\
    \ += string[i]\n        }\n    }\n    return result + longestPalindrome", "  \
    \  var result = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromePostfixLength = 0\n    var longestPalindromePostfix\
    \ = 0\n    var longestPalindromePostfixReverse = 0\n    var longestPalindromePostfixReverseLength\
    \ = 0\n    var longestPalindromePostfixReversePrefix = 0\n    var longestPalindromePostfixReverseSuffix\
    \ = 0\n    var longestPalindromePostfixReversePostfix = 0\n    var longestPalindromePostfixReversePostfixLength\
    \ = 0\n    var longestPalindromePostfixReversePostfixReverse = 0\n    var longestPalindromePostfixReversePostfixReverseLength\
    \ = 0\n    var longestPalindromePostfixReversePostfixReversePrefix = 0\n    var\
    \ longestPalindromePostfixReversePostfixReverseSuffix = 0\n    var longestPalindromePostfixReversePostfixReversePostfix\
    \ = 0\n    var longestPalindromePostfixReversePostfixReversePostfixLength = 0\n\
    \    var longestPalindromePostfixReversePostfixReversePostfixReverse = 0\n   \
    \ var longestPalindromePostfixReversePostfixReversePostfixReverseLength = 0\n\
    \    var longestPalindromePostfixReversePostfixReversePostfixReversePrefix = 0\n\
    \    var longestPalindromePostfixReversePostfixReversePostfixSuffix = 0\n    var\
    \ longestPalindromePostfixReversePostfixReversePostfixPostfix = 0\n    var longestPalindromePostfixReversePostfixReversePostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixReversePostfixReversePostfixReversePrefix\
    \ = 0\n    var longestPalindromePostfixReversePostfixReversePostfixSuffix = 0\n\
    \    var longestPalindromePostfixReversePostfixReversePostfixPostfix = 0\n   \
    \ var longestPalindromePostfixReversePostfixReversePostfixPostfixLength = 0\n\
    \    var longestPalindromePostfixReversePostfixReversePostfixReversePrefix = 0\n\
    \    var longestPalindromePostfixReversePostfixReversePostfixSuffix = 0\n    var\
    \ longestPalindromePostfixReversePostfixReversePostfixPostfix = 0\n    var longestPalindromePostfixReversePostfixReversePostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixReversePostfixReversePostfixReversePrefix\
    \ = 0\n    var longestPalindromePostfixReversePostfixReversePostfix", "    var\
    \ result = \"\"\n    var start = 0\n    var end = string.count\n    var longest\
    \ = 0\n    var longestStart = 0\n    var longestEnd = 0\n    var longestLength\
    \ = 0\n    var longestPalindrome = \"\"\n    var longestPalindromeStart = 0\n\
    \    var longestPalindromeEnd = 0\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromePalindrome = \"\"\n    var longestPalindromePalindromeStart\
    \ = 0\n    var longestPalindromePalindromeEnd = 0\n    var longestPalindromePalindromeLength\
    \ = 0\n    var longestPalindromePalindromePalindrome = \"\"\n    var longestPalindromePalindromePalindromeStart\
    \ = 0\n    var longestPalindromePalindromePalindromeEnd = 0\n    var longestPalindromePalindromePalindromeLength\
    \ = 0\n    var longestPalindromePalindromePalindromePalindrome = \"\"\n    var\
    \ longestPalindromePalindromePalindromePalindromeStart = 0\n    var longestPalindromePalindromePalindromePalindromeEnd\
    \ = 0\n    var longestPalindromePalindromePalindromePalindromeLength = 0\n   \
    \ var longestPalindromePalindromePalindromePalindromePalindrome = \"\"\n    var\
    \ longestPalindromePalindromePalindromePalindromeStart = 0\n    var longestPalindromePalindromePalindromePalindromeEnd\
    \ = 0\n    var longestPalindromePalindromePalindromePalindromeLength = 0\n   \
    \ var longestPalindromePalindromePalindromePalindromePalindrome = \"\"\n    var\
    \ longestPalindromePalindromePalindromePalindromeStart = 0\n    var longestPalindromePalindromePalindromePalindromeEnd\
    \ = 0\n    var longestPalindromePalindromePalindromePalindromeLength = 0\n   \
    \ var longestPalindromePalindromePalindromePalindromePalindrome = \"\"\n    var\
    \ longestPalindromePalindromePalindromePalindromeStart = 0\n    var longestPalindromePalindromePalindromePalindromeEnd\
    \ = 0\n    var longestPalin", "    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = string.length\n    for start in 0..<longestPalindromeLength {\n        var\
    \ longestPalindromeStart = start\n        var longestPalindromeEnd = start\n \
    \       var longestPalindromeSuffix = string[longestPalindromeStart..<longestPalindromeEnd]\n\
    \        var longestPalindromeSuffixReversed = string[longestPalindromeEnd..<longestPalindromeStart]\n\
    \        for end in 0..<longestPalindromeLength {\n            if end >= start\
    \ {\n                if longestPalindromeSuffix == longestPalindromeSuffixReversed\
    \ {\n                    longestPalindromeEnd = end\n                    longestPalindromeSuffixReversed\
    \ = string[longestPalindromeEnd..<longestPalindromeStart]\n                }\n\
    \            }\n        }\n        longestPalindrome = string[longestPalindromeStart..<longestPalindromeEnd]\
    \ + longestPalindromeSuffixReversed\n    }\n    return longestPalindrome", " \
    \   var result = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    for length in string.characters\
    \ {\n        if length > longestPalindromeLength {\n            longestPalindrome\
    \ = string\n            longestPalindromeLength = length\n            longestPalindromePrefixLength\
    \ = 0\n        }\n        if length > longestPalindromePrefixLength {\n      \
    \      longestPalindromePrefixLength = length\n        }\n    }\n    for length\
    \ in string.characters {\n        if length > longestPalindromeLength {\n    \
    \        longestPalindrome = string\n            longestPalindromeLength = length\n\
    \            longestPalindromePrefixLength = 0\n        }\n        if length >\
    \ longestPalindromePrefixLength {\n            longestPalindromePrefixLength =\
    \ length\n        }\n    }\n    for length in string.characters {\n        if\
    \ length > longestPalindromeLength {\n            longestPalindrome = string\n\
    \            longestPalindromeLength = length\n            longestPalindromePrefixLength\
    \ = 0\n        }\n        if length > longestPalindromePrefixLength {\n      \
    \      longestPalindromePrefixLength = length\n        }\n    }\n    for length\
    \ in string.characters {\n        if length > longestPalindromeLength {\n    \
    \        longestPalindrome = string\n            longestPalindromeLength = length\n\
    \            longestPalindromePrefixLength = 0\n        }\n        if length >\
    \ longestPalindromePrefixLength {\n            longestPalindromePrefixLength =\
    \ length\n        }\n    }\n    for length in string.characters {\n        if\
    \ length > longestPalindromeLength {\n            longestPalindrome = string\n\
    \            longestPalindromeLength = length\n            longestPalindromePrefixLength\
    \ = 0\n        }\n        if length > longestPalindromePrefixLength {\n      \
    \      longestPalindromePrefixLength = length\n        }\n    }\n    for length\
    \ in string.characters {\n        if length > longestPalindromeLength {\n    \
    \        longestPalindrome = string\n            longestPalindromeLength = length\n\
    \            longestPalindromePrefixLength = 0\n        }\n        if length >\
    \ longestPalindromePrefixLength {\n            longestPalindromePrefixLength =\
    \ length\n        }\n    }\n    for length in string.characters {\n        if\
    \ length > longestPalindromeLength {\n            longestPalindrome = string\n\
    \            longestPalindromeLength = length\n            longestPalindromePrefixLength\
    \ = 0\n        }\n        if ", "\tlet reverse = string.reverse()\n\tlet prefix\
    \ = string.prefix(string.reverse())\n\treturn prefix + reverse", "\tlet reverse\
    \ = string.rev()\n\tlet prefix = string.prefix(string.reverse())\n\treturn prefix\
    \ + reverse", "    if string == \"\" {\n        return \"\"\n    }\n\n    var\
    \ longestPalindrome = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix:\
    \ String = \"\"\n    var longestPalindromeSuffix: String = \"\"\n\n    for char\
    \ in string {\n        if char == char.lowercased() {\n            longestPalindromeLength\
    \ += 1\n            longestPalindromePrefix = char\n        } else {\n       \
    \     longestPalindromeSuffix += char\n        }\n    }\n\n    if longestPalindromeLength\
    \ > longestPalindromeSuffix.count {\n        return \"\"\n    }\n\n    var reversedLongestPalindrome\
    \ = longestPalindromeSuffix\n    for char in reversedLongestPalindrome {\n   \
    \     reversedLongestPalindrome = reversedLongestPalindrome.replacingOccurrences(of:\
    \ char, with: \"\")\n    }\n\n    return longestPalindromePrefix + reversedLongestPalindrome",
  "\tlet reversed = string.reversed()\n\tlet prefix = reversed.prefix(string)\n\t\
    let suffix = reversed.suffix(string)\n\treturn prefix + suffix", "\tlet reverse\
    \ = string.reversed()\n\tlet prefix = string.prefix(string.reversed())\n\treturn\
    \ prefix + reverse", "\tlet reversed = string.reversed()\n\tlet prefix = reversed.prefix(string)\n\
    \tlet suffix = reversed.suffix(string)\n\treturn prefix + suffix", "    if string\
    \ == \"\" {\n        return \"\"\n    }\n    var reversed = string\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] != string[len(string)-i-1] {\n            reversed\
    \ = reversed[:len(reversed)-i] + string[len(string)-i-1] + reversed[i:]\n    \
    \        longestPalindromeLength = len(longestPalindrome)\n            longestPalindrome\
    \ = string[:len(string)-i-1] + string[len(string)-i-1]\n        }\n    }\n   \
    \ return reversed + longestPalindrome", "    if string == \"\" {\n        return\
    \ \"\"\n    }\n\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n\n    for i := 0; i < len(string); i++ {\n        var palindrome = string\n\
    \        var palindromeLength = 1\n\n        for j := 0; j < i; j++ {\n      \
    \      if palindrome[j] != string[j] {\n                break\n            }\n\
    \            palindromeLength++\n        }\n\n        if palindromeLength > longestPalindromeLength\
    \ {\n            longestPalindrome = palindrome\n            longestPalindromeLength\
    \ = palindromeLength\n        }\n    }\n\n    return longestPalindrome + string[longestPalindromeLength..]",
  "\tlet reverse = string.reversed()\n\tlet prefix = string.prefix(string.reversed())\n\
    \treturn prefix + reverse", "\tlet reverse = string.reversed()\n\tlet prefix =\
    \ string.prefix(string.reversed())\n\treturn prefix + reverse", "    var result\
    \ = \"\"\n    var longestPalindrome = \"\"\n    for letter in string {\n     \
    \   if letter == letter {\n            result += letter\n        } else {\n  \
    \          result += letter + longestPalindrome\n        }\n        if result.isPalindrome()\
    \ {\n            longestPalindrome = result\n            result = \"\"\n     \
    \   }\n    }\n    if longestPalindrome == \"\" {\n        return string\n    }\n\
    \    return longestPalindrome + result", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    for char in string {\n    \
    \    if char == char.lowercased() {\n            result += char\n        } else\
    \ {\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.length {\n                longestPalindrome = result\n \
    \           }\n            result = \"\"\n        }\n    }\n    longestPalindromeLength\
    \ += 1\n    if longestPalindromeLength > longestPalindrome.length {\n        longestPalindrome\
    \ = result\n    }\n    return longestPalindrome", "\tlet reverse = string.reversed()\n\
    \tlet prefix = reverse.prefix(string)\n\tlet suffix = reverse.suffix(string)\n\
    \treturn prefix + suffix", "    var string = string\n    var reversedString =\
    \ string\n    var longestPalindromeLength = 0\n    var longestPalindrome = string\n\
    \    var longestPalindromeIndex = -1\n    var longestPalindromePrefix = \"\"\n\
    \    var longestPalindromeSuffix = \"\"\n    for index in 0..<string.count {\n\
    \        let character = string[index]\n        let reversedCharacter = reversedString[index]\n\
    \        if character == reversedCharacter {\n            longestPalindromeLength\
    \ += 1\n            if longestPalindromeLength > longestPalindromeIndex {\n  \
    \              longestPalindromeIndex = longestPalindromeLength\n            \
    \    longestPalindromePrefix = string\n                longestPalindromeSuffix\
    \ = reversedString\n            }\n        } else {\n            longestPalindromeLength\
    \ = 0\n        }\n    }\n    return longestPalindromePrefix + reversedString(longestPalindromeIndex..<string.count)\
    \ + longestPalindromeSuffix"]
stop_tokens:
- "\n}"
