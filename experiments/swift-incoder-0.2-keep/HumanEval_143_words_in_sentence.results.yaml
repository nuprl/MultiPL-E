language: swift
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        result = result + String(prime)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpkb5aegsn.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkb5aegsn.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n/tmp/tmpkb5aegsn.swift:21:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            primes.append(letter)\n\
    \                          ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for letter in sentence.characters {\n\
    \        if isPrime(Int(letter)) {\n            result += String(letter)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmphtb7_lnx.swift:18:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmphtb7_lnx.swift:19:12: error: cannot find 'isPrime' in scope\n   \
    \     if isPrime(Int(letter)) {\n           ^~~~~~~\n/tmp/tmphtb7_lnx.swift:19:20:\
    \ error: no exact matches in call to initializer \n        if isPrime(Int(letter))\
    \ {\n                   ^\n/tmp/tmphtb7_lnx.swift:19:20: note: found candidate\
    \ with type '(Float16) -> Int'\n        if isPrime(Int(letter)) {\n          \
    \         ^\n/tmp/tmphtb7_lnx.swift:19:20: note: found candidate with type '(Float)\
    \ -> Int'\n        if isPrime(Int(letter)) {\n                   ^\n/tmp/tmphtb7_lnx.swift:19:20:\
    \ note: found candidate with type '(Double) -> Int'\n        if isPrime(Int(letter))\
    \ {\n                   ^\n/tmp/tmphtb7_lnx.swift:19:20: note: found candidate\
    \ with type '(Float80) -> Int'\n        if isPrime(Int(letter)) {\n          \
    \         ^\n/tmp/tmphtb7_lnx.swift:19:20: note: found candidate with type '(Builtin.Int64)\
    \ -> Int'\n        if isPrime(Int(letter)) {\n                   ^\n/tmp/tmphtb7_lnx.swift:19:20:\
    \ note: found candidate with type '(Builtin.Word) -> Int'\n        if isPrime(Int(letter))\
    \ {\n                   ^\n/tmp/tmphtb7_lnx.swift:19:20: note: found candidate\
    \ with type '(String) -> Int?'\n        if isPrime(Int(letter)) {\n          \
    \         ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        if prime > 1 {\n       \
    \     for letter in sentence.characters {\n                if prime == letter\
    \ {\n                    result += String(letter)\n                }\n       \
    \     }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp_1s88hco.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp_1s88hco.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n/tmp/tmp_1s88hco.swift:21:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            primes.append(letter)\n\
    \                          ^\n/tmp/tmp_1s88hco.swift:26:36: error: 'characters'\
    \ is unavailable: Please use String directly\n            for letter in sentence.characters\
    \ {\n                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_1s88hco.swift:27:26: error: binary operator '==' cannot\
    \ be applied to operands of type 'Int' and 'Character'\n                if prime\
    \ == letter {\n                   ~~~~~ ^  ~~~~~~\n/tmp/tmp_1s88hco.swift:27:26:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (Int, Int)\n                if prime == letter {\n \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: Exception
  stderr: 'tmp_qxfdpjo/tmp_qxfdpjo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d2e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5cfd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5cfd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5cfd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qxfdpjo                        0x000055799a901307 <unavailable> + 4871

    5    libc.so.6                          0x00002afc5d4cc460 __libc_start_main +
    245

    6    tmp_qxfdpjo                        0x000055799a900f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: Exception
  stderr: 'tmp_qxfdpjo/tmp_qxfdpjo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d2e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5cfd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5cfd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5cfd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qxfdpjo                        0x000055799a901307 <unavailable> + 4871

    5    libc.so.6                          0x00002afc5d4cc460 __libc_start_main +
    245

    6    tmp_qxfdpjo                        0x000055799a900f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence.componentsSeparatedByString(\" \")\n      \
    \  .filter({ (word) -> Bool in\n            return isPrime(word.characters.count)\n\
    \        })\n        .sorted()\n        .joinWithSeparator(\" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\"\
    ) == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") ==\
    \ \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
    \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I\
    \ am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go\
    \ for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") ==\
    \ \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpshw7s1ra.swift:19:20: error: cannot find 'isPrime' in scope\n \
    \           return isPrime(word.characters.count)\n                   ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    guard let sentence = sentence.lowercased() else {\n       \
    \ return \"\"\n    }\n    var result = \"\"\n    var primeNumbers = [1]\n    for\
    \ character in sentence.characters {\n        if primeNumbers.contains(character)\
    \ {\n            primeNumbers.append(primeNumbers.last! * character)\n       \
    \ } else {\n            result += String(character)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmplmp96zbo.swift:17:11: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n    guard let sentence = sentence.lowercased()\
    \ else {\n          ^              ~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplmp96zbo.swift:22:31:\
    \ error: 'characters' is unavailable: Please use String directly\n    for character\
    \ in sentence.characters {\n                              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmplmp96zbo.swift:23:34: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n        if primeNumbers.contains(character)\
    \ {\n                                 ^\n/tmp/tmplmp96zbo.swift:24:54: error:\
    \ cannot convert value of type 'Character' to expected argument type 'Int'\n \
    \           primeNumbers.append(primeNumbers.last! * character)\n            \
    \                                         ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: Exception
  stderr: 'tmp_qxfdpjo/tmp_qxfdpjo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d2e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5cfd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5cfd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5cfd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qxfdpjo                        0x000055799a901307 <unavailable> + 4871

    5    libc.so.6                          0x00002afc5d4cc460 __libc_start_main +
    245

    6    tmp_qxfdpjo                        0x000055799a900f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: Exception
  stderr: 'tmp_qxfdpjo/tmp_qxfdpjo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d2e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5cfd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5cfd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5cfd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qxfdpjo                        0x000055799a901307 <unavailable> + 4871

    5    libc.so.6                          0x00002afc5d4cc460 __libc_start_main +
    245

    6    tmp_qxfdpjo                        0x000055799a900f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: Exception
  stderr: 'tmp_qxfdpjo/tmp_qxfdpjo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d2e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5cfd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5cfd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5cfd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qxfdpjo                        0x000055799a901307 <unavailable> + 4871

    5    libc.so.6                          0x00002afc5d4cc460 __libc_start_main +
    245

    6    tmp_qxfdpjo                        0x000055799a900f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for letter in sentence.characters {\n\
    \        if isPrime(letter) {\n            result += letter\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpwobpndzn.swift:18:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpwobpndzn.swift:19:12: error: cannot find 'isPrime' in scope\n   \
    \     if isPrime(letter) {\n           ^~~~~~~\n/tmp/tmpwobpndzn.swift:20:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.components(separatedBy: \" \")\n    var\
    \ result = \"\"\n    for word in words {\n        let primes = primes(word: word)\n\
    \        for prime in primes {\n            if prime == word.count {\n       \
    \         result += \" \" + word\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp4p_8lqu8.swift:17:26: error: value of type 'String' has no member\
    \ 'components'\n    let words = sentence.components(separatedBy: \" \")\n    \
    \            ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp4p_8lqu8.swift:20:22: error: use of\
    \ local variable 'primes' before its declaration\n        let primes = primes(word:\
    \ word)\n                     ^\n/tmp/tmp4p_8lqu8.swift:20:13: note: 'primes'\
    \ declared here\n        let primes = primes(word: word)\n            ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: Exception
  stderr: 'tmp_qxfdpjo/tmp_qxfdpjo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d2e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5cfd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5cfd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5cfd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qxfdpjo                        0x000055799a901307 <unavailable> + 4871

    5    libc.so.6                          0x00002afc5d4cc460 __libc_start_main +
    245

    6    tmp_qxfdpjo                        0x000055799a900f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for letter in sentence.characters {\n\
    \        if isPrime(Int(letter)) {\n            result += letter\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpkj3s18ar.swift:18:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkj3s18ar.swift:19:12: error: cannot find 'isPrime' in scope\n   \
    \     if isPrime(Int(letter)) {\n           ^~~~~~~\n/tmp/tmpkj3s18ar.swift:19:20:\
    \ error: no exact matches in call to initializer \n        if isPrime(Int(letter))\
    \ {\n                   ^\n/tmp/tmpkj3s18ar.swift:19:20: note: found candidate\
    \ with type '(Float16) -> Int'\n        if isPrime(Int(letter)) {\n          \
    \         ^\n/tmp/tmpkj3s18ar.swift:19:20: note: found candidate with type '(Float)\
    \ -> Int'\n        if isPrime(Int(letter)) {\n                   ^\n/tmp/tmpkj3s18ar.swift:19:20:\
    \ note: found candidate with type '(Double) -> Int'\n        if isPrime(Int(letter))\
    \ {\n                   ^\n/tmp/tmpkj3s18ar.swift:19:20: note: found candidate\
    \ with type '(Float80) -> Int'\n        if isPrime(Int(letter)) {\n          \
    \         ^\n/tmp/tmpkj3s18ar.swift:19:20: note: found candidate with type '(Builtin.Int64)\
    \ -> Int'\n        if isPrime(Int(letter)) {\n                   ^\n/tmp/tmpkj3s18ar.swift:19:20:\
    \ note: found candidate with type '(Builtin.Word) -> Int'\n        if isPrime(Int(letter))\
    \ {\n                   ^\n/tmp/tmpkj3s18ar.swift:19:20: note: found candidate\
    \ with type '(String) -> Int?'\n        if isPrime(Int(letter)) {\n          \
    \         ^\n/tmp/tmpkj3s18ar.swift:20:23: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n            result += letter\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var primeIndex\
    \ = 0\n    var currentWord = \"\"\n    for word in sentence.split(\" \") {\n \
    \       if primeIndex == primes.count {\n            primes.append(1)\n      \
    \      primeIndex = 0\n        }\n        if primes[primeIndex] == 1 {\n     \
    \       currentWord = currentWord + word + \" \" // append current word\n    \
    \        primes[primeIndex] = 2 // mark current word as prime\n            primeIndex++\n\
    \        } else {\n            primes[primeIndex] = 1 // mark current word as\
    \ non-prime\n        }\n    }\n    result = currentWord\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\"\
    ) == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") ==\
    \ \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
    \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I\
    \ am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go\
    \ for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") ==\
    \ \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpjhk7hc7f.swift:21:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    guard let sentence = sentence.trimmingCharacters(in: .whitespaces)\
    \ else {\n        return \"\"\n    }\n    var result = \"\"\n    for word in sentence.components(separatedBy:\
    \ \" \") {\n        if isPrime(word: word) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmppc7_asbu.swift:17:35: error: value of type 'String' has no member\
    \ 'trimmingCharacters'\n    guard let sentence = sentence.trimmingCharacters(in:\
    \ .whitespaces) else {\n                         ~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmppc7_asbu.swift:17:59: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    guard let sentence = sentence.trimmingCharacters(in:\
    \ .whitespaces) else {\n                                                     \
    \    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    guard let sentence = sentence.lowercased(), let words = sentence.components(separatedBy:\
    \ \" \") else {\n        return \"\"\n    }\n    var result = \"\"\n    for word\
    \ in words {\n        if isPrime(word: word) {\n            result += \" \" +\
    \ word\n        }\n    }\n    return result.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\"\
    ) == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") ==\
    \ \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
    \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I\
    \ am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go\
    \ for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") ==\
    \ \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpz1gqb4nv.swift:17:70: error: value of type 'String' has no member\
    \ 'components'\n    guard let sentence = sentence.lowercased(), let words = sentence.components(separatedBy:\
    \ \" \") else {\n                                                            ~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpz1gqb4nv.swift:17:11: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n    guard let sentence = sentence.lowercased(),\
    \ let words = sentence.components(separatedBy: \" \") else {\n          ^    \
    \          ~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpz1gqb4nv.swift:26:19: error: value of\
    \ type 'String' has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpz1gqb4nv.swift:26:43:\
    \ error: cannot infer contextual base in reference to member 'whitespacesAndNewlines'\n\
    \    return result.trimmingCharacters(in: .whitespacesAndNewlines)\n         \
    \                                ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        } else {\n            result += String(letter)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpi8kqxnwc.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpi8kqxnwc.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n/tmp/tmpi8kqxnwc.swift:21:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            primes.append(letter)\n\
    \                          ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        result = result + String(prime)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpkb5aegsn.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkb5aegsn.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n/tmp/tmpkb5aegsn.swift:21:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            primes.append(letter)\n\
    \                          ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: Exception
  stderr: 'tmp_qxfdpjo/tmp_qxfdpjo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d2e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5cfd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5cfd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5cfd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qxfdpjo                        0x000055799a901307 <unavailable> + 4871

    5    libc.so.6                          0x00002afc5d4cc460 __libc_start_main +
    245

    6    tmp_qxfdpjo                        0x000055799a900f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: Exception
  stderr: 'tmp_qxfdpjo/tmp_qxfdpjo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d2e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5cfd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5cfd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5cfd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qxfdpjo                        0x000055799a901307 <unavailable> + 4871

    5    libc.so.6                          0x00002afc5d4cc460 __libc_start_main +
    245

    6    tmp_qxfdpjo                        0x000055799a900f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.components(separatedBy: \" \")\n    var\
    \ result = \"\"\n    for word in words {\n        let length = word.characters.count\n\
    \        if length == 1 {\n            result += word\n        } else {\n    \
    \        for _ in 1...length {\n                result += word\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmplaxbwkag.swift:17:26: error: value of type 'String' has no member\
    \ 'components'\n    let words = sentence.components(separatedBy: \" \")\n    \
    \            ~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var primeIndex\
    \ = 0\n    for char in sentence {\n        if char == \" \" {\n            primeIndex\
    \ += 1\n            primes.append(primes[primeIndex])\n        }\n    }\n    for\
    \ char in sentence {\n        if char == \" \" {\n            primeIndex += 1\n\
    \            primes.append(primes[primeIndex])\n        }\n    }\n    for char\
    \ in sentence {\n        if char == \" \" {\n            primeIndex += 1\n   \
    \         primes.append(primes[primeIndex])\n        }\n    }\n    for char in\
    \ sentence {\n        if char == \" \" {\n            primeIndex += 1\n      \
    \      primes.append(primes[primeIndex])\n        }\n    }\n    for char in sentence\
    \ {\n        if char == \" \" {\n            primeIndex += 1\n            primes.append(primes[primeIndex])\n\
    \        }\n    }\n    for char in sentence {\n        if char == \" \" {\n  \
    \          primeIndex += 1\n            primes.append(primes[primeIndex])\n  \
    \      }\n    }\n    for char in sentence {\n        if char == \" \" {\n    \
    \        primeIndex += 1\n            primes.append(primes[primeIndex])\n    \
    \    }\n    }\n    for char in sentence {\n        if char == \" \" {\n      \
    \      primeIndex += 1\n            primes.append(primes[primeIndex])\n      \
    \  }\n    }\n    for char in sentence {\n        if char == \" \" {\n        \
    \    primeIndex += 1\n            primes.append(primes[primeIndex])\n        }\n\
    \    }\n    for char in sentence {\n        if char == \" \" {\n            primeIndex\
    \ += 1\n            primes.append(primes[primeIndex])\n        }\n    }\n    for\
    \ char in sentence {\n        if char == \" \" {\n            primeIndex += 1\n\
    \            primes.append(primes[primeIndex])\n        }\n    }\n    for char\
    \ in sentence {\n        if char == \" \" {\n            primeIndex += 1\n   \
    \         primes.append(primes[primeIndex])\n        }\n    }\n    for char in\
    \ sentence {\n        if char == \" \" {\n            primeIndex += 1\n      \
    \      primes.append(primes[primeIndex])\n        }\n    }\n    for char in sentence\
    \ {\n        if char == \" \" {\n            primeIndex += 1\n            primes.append(primes[primeIndex])\n\
    \        }\n    }\n    for char in sentence {\n        if char == \" \" {\n  \
    \          primeIndex += 1\n            primes.append(primes[primeIndex])\n  \
    \      }\n    }\n    for char in sentence {\n        if char == \" \" {\n    \
    \        primeIndex += 1\n            primes.append(primes[primeIndex])\n    \
    \    }\n    }\n    for char in sentence {\n        if char == \" \" {\n      \
    \      primeIndex += 1\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpseya0kdu.swift:141:55: error: expected '}' at end of brace statement\n\
    assert(words_in_sentence(sentence: \"here is\") == \"is\")\n                 \
    \                                     ^\n/tmp/tmpseya0kdu.swift:116:26: note:\
    \ to match this opening '{'\n    for char in sentence {\n                    \
    \     ^\n/tmp/tmpseya0kdu.swift:141:55: error: expected '}' at end of brace statement\n\
    assert(words_in_sentence(sentence: \"here is\") == \"is\")\n                 \
    \                                     ^\n/tmp/tmpseya0kdu.swift:16:52: note: to\
    \ match this opening '{'\nfunc words_in_sentence(sentence: String) -> String {\n\
    \                                                   ^\n/tmp/tmpseya0kdu.swift:123:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpseya0kdu.swift:17:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = \"\"\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence.components(separatedBy: \" \")\n        .filter{$0.characters.count\
    \ > 0}\n        .filter{$0.characters.count <= 100}\n        .filter{$0.characters.count\
    \ >= 2}\n        .sorted()\n        .joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpy3wa7kuc.swift:17:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return sentence.components(separatedBy: \" \")\n      \
    \     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for word in sentence.split(\"\
    \ \") {\n        if primes.contains(word.characters.count) {\n            result\
    \ += \" \" + word\n        }\n        primes.append(word.characters.count)\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp19_jh15z.swift:19:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for char in sentence.characters\
    \ {\n        if primes.contains(char.count) {\n            primes.append(char.count)\n\
    \        }\n    }\n    for prime in primes {\n        if prime > result.characters.count\
    \ {\n            result = result + String(char)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpla9rki_c.swift:19:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in sentence.characters {\n               \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpla9rki_c.swift:20:33: error: value of type 'Character' has no member 'count'\n\
    \        if primes.contains(char.count) {\n                           ~~~~ ^~~~~\n\
    /tmp/tmpla9rki_c.swift:21:32: error: value of type 'Character' has no member 'count'\n\
    \            primes.append(char.count)\n                          ~~~~ ^~~~~\n\
    /tmp/tmpla9rki_c.swift:25:27: error: 'characters' is unavailable: Please use String\
    \ directly\n        if prime > result.characters.count {\n                   \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpla9rki_c.swift:26:38:\
    \ error: cannot find 'char' in scope\n            result = result + String(char)\n\
    \                                     ^~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.components(separatedBy: \" \")\n    var\
    \ result = \"\"\n    for word in words {\n        if isPrime(word: word) {\n \
    \           result += \" \" + word\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\"\
    ) == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") ==\
    \ \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
    \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I\
    \ am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go\
    \ for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") ==\
    \ \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpr0xf0ezz.swift:17:26: error: value of type 'String' has no member\
    \ 'components'\n    let words = sentence.components(separatedBy: \" \")\n    \
    \            ~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        result = result + String(prime)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpkb5aegsn.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkb5aegsn.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n/tmp/tmpkb5aegsn.swift:21:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            primes.append(letter)\n\
    \                          ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        result = result + String(prime)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpkb5aegsn.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkb5aegsn.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n/tmp/tmpkb5aegsn.swift:21:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            primes.append(letter)\n\
    \                          ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for char in sentence.characters\
    \ {\n        if primes.contains(char.unicodeScalars.count) {\n            primes.append(char.unicodeScalars.count)\n\
    \        }\n    }\n    for prime in primes {\n        if prime > 1 {\n       \
    \     for char in sentence.characters {\n                if char.unicodeScalars.count\
    \ == prime {\n                    result += String(char)\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_in_sentence(sentence: \"This is a test\") == \"is\"\
    )\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpi_ghu9lq.swift:19:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in sentence.characters {\n               \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpi_ghu9lq.swift:26:34: error: 'characters' is unavailable: Please use String\
    \ directly\n            for char in sentence.characters {\n                  \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence.components(separatedBy: \" \")\n        .filter{$0.characters.count\
    \ > 0}\n        .filter{$0.characters.count < 100}\n        .filter{$0.characters.isPrime}\n\
    \        .sorted()\n        .joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_in_sentence(sentence: \"This is a test\") == \"is\"\
    )\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpzqpxdcid.swift:17:21: error: value of type 'String' has no member\
    \ 'components'\n    return sentence.components(separatedBy: \" \")\n         \
    \  ~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824594
- exit_code: -4
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: Exception
  stderr: 'tmp_qxfdpjo/tmp_qxfdpjo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d2e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5cfd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5cfd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5cfd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qxfdpjo                        0x000055799a901307 <unavailable> + 4871

    5    libc.so.6                          0x00002afc5d4cc460 __libc_start_main +
    245

    6    tmp_qxfdpjo                        0x000055799a900f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var primeIndex\
    \ = 0\n    for letter in sentence.characters {\n        if primes[primeIndex]\
    \ == 0 {\n            primeIndex += 1\n        }\n        if primes[primeIndex]\
    \ == 1 {\n            primeIndex += 1\n        }\n        if letter == \" \" {\n\
    \            primeIndex += 1\n        }\n        if primes[primeIndex] == 2 {\n\
    \            primeIndex += 1\n        }\n        if letter == \" \" {\n      \
    \      primeIndex += 1\n        }\n        if primes[primeIndex] == 3 {\n    \
    \        primeIndex += 1\n        }\n        if letter == \" \" {\n          \
    \  primeIndex += 1\n        }\n        if primes[primeIndex] == 4 {\n        \
    \    primeIndex += 1\n        }\n        if letter == \" \" {\n            primeIndex\
    \ += 1\n        }\n        if primes[primeIndex] == 5 {\n            primeIndex\
    \ += 1\n        }\n        if letter == \" \" {\n            primeIndex += 1\n\
    \        }\n        if primes[primeIndex] == 6 {\n            primeIndex += 1\n\
    \        }\n        if letter == \" \" {\n            primeIndex += 1\n      \
    \  }\n        if primes[primeIndex] == 7 {\n            primeIndex += 1\n    \
    \    }\n        if letter == \" \" {\n            primeIndex += 1\n        }\n\
    \        if primes[primeIndex] == 8 {\n            primeIndex += 1\n        }\n\
    \        if letter == \" \" {\n            primeIndex += 1\n        }\n      \
    \  if primes[primeIndex] == 9 {\n            primeIndex += 1\n        }\n    \
    \    if letter == \" \" {\n            primeIndex += 1\n        }\n        if\
    \ primes[primeIndex] == 10 {\n            primeIndex += 1\n        }\n       \
    \ if letter == \" \" {\n            primeIndex += 1\n        }\n        if primes[primeIndex]\
    \ == 11 {\n            primeIndex += 1\n        }\n        if letter == \" \"\
    \ {\n            primeIndex += 1\n        }\n        if primes[primeIndex] ==\
    \ 12 {\n            primeIndex += 1\n        }\n        if letter == \" \" {\n\
    \            primeIndex += 1\n        }\n        if primes[primeIndex] == 13 {\n\
    \            primeIndex += 1\n        }\n        if letter == \" \" {\n      \
    \      primeIndex += 1\n        }\n        if primes[primeIndex] == 14 {\n   \
    \         primeIndex += 1\n        }\n        if letter == \" \" {\n         \
    \   primeIndex += 1\n        }\n        if primes[primeIndex] == 15 {\n      \
    \      primeIndex += 1\n        }\n        if letter == \" \" {\n            primeIndex\
    \ += 1\n        }\n        if primes[primeIndex] == 16 {\n            primeIndex\
    \ += 1\n        }\n        if letter == \" \" {\n            primeIndex += 1\n\
    \        }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp_y5c9tpp.swift:142:55: error: expected '}' at end of brace statement\n\
    assert(words_in_sentence(sentence: \"here is\") == \"is\")\n                 \
    \                                     ^\n/tmp/tmp_y5c9tpp.swift:16:52: note: to\
    \ match this opening '{'\nfunc words_in_sentence(sentence: String) -> String {\n\
    \                                                   ^\n/tmp/tmp_y5c9tpp.swift:20:28:\
    \ error: 'characters' is unavailable: Please use String directly\n    for letter\
    \ in sentence.characters {\n                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp_y5c9tpp.swift:124:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp_y5c9tpp.swift:17:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = \"\"\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmp_y5c9tpp.swift:18:9: warning: variable 'primes' was never mutated;\
    \ consider changing to 'let' constant\n    var primes = [1]\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence.components(separatedBy: \" \").filter{ $0.characters.count\
    \ > 1 }.sorted().joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpzwrx32gz.swift:17:21: error: value of type 'String' has no member\
    \ 'components'\n    return sentence.components(separatedBy: \" \").filter{ $0.characters.count\
    \ > 1 }.sorted().joined(separator: \" \")\n           ~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: Exception
  stderr: 'tmp_qxfdpjo/tmp_qxfdpjo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d2e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5cfd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5cfd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5cfd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qxfdpjo                        0x000055799a901307 <unavailable> + 4871

    5    libc.so.6                          0x00002afc5d4cc460 __libc_start_main +
    245

    6    tmp_qxfdpjo                        0x000055799a900f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var index = 0\n\
    \    for char in sentence.characters {\n        if primes[index] == 0 {\n    \
    \        primes = primes + [index]\n        }\n        index += 1\n    }\n   \
    \ for prime in primes {\n        result = result + String(sentence.substringWithRange(NSMakeRange(0,\
    \ prime)))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpr_oyinah.swift:20:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in sentence.characters {\n               \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpr_oyinah.swift:27:62: error: cannot find 'NSMakeRange' in scope\n    \
    \    result = result + String(sentence.substringWithRange(NSMakeRange(0, prime)))\n\
    \                                                             ^~~~~~~~~~~\n/tmp/tmpr_oyinah.swift:27:43:\
    \ error: value of type 'String' has no member 'substringWithRange'\n        result\
    \ = result + String(sentence.substringWithRange(NSMakeRange(0, prime)))\n    \
    \                             ~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: Exception
  stderr: 'tmp_qxfdpjo/tmp_qxfdpjo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d2e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5cfd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5cfd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5cfd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qxfdpjo                        0x000055799a901307 <unavailable> + 4871

    5    libc.so.6                          0x00002afc5d4cc460 __libc_start_main +
    245

    6    tmp_qxfdpjo                        0x000055799a900f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrimeNumber(word) {\n            result += \" \" + word\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp5ym4ia1h.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var primeIndex\
    \ = 0\n    for letter in sentence {\n        if primes[primeIndex] == 1 {\n  \
    \          primeIndex += 1\n            if primeIndex == primes.count {\n    \
    \            primes.append(1)\n                primeIndex = 0\n            }\n\
    \        }\n        primes[primeIndex] += 1\n    }\n    for prime in primes {\n\
    \        result = result + String(letters[prime])\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\"\
    ) == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") ==\
    \ \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
    \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I\
    \ am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go\
    \ for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") ==\
    \ \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp0pq_89de.swift:31:34: error: cannot find 'letters' in scope\n \
    \       result = result + String(letters[prime])\n                           \
    \      ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: Exception
  stderr: 'tmp_qxfdpjo/tmp_qxfdpjo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d2e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5cfd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5cfd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5cfd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qxfdpjo                        0x000055799a901307 <unavailable> + 4871

    5    libc.so.6                          0x00002afc5d4cc460 __libc_start_main +
    245

    6    tmp_qxfdpjo                        0x000055799a900f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        result = result + String(prime)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpkb5aegsn.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkb5aegsn.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n/tmp/tmpkb5aegsn.swift:21:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            primes.append(letter)\n\
    \                          ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            result\
    \ += String(letter)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp8uatjxdn.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp8uatjxdn.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        } else {\n            result += String(letter)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpi8kqxnwc.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpi8kqxnwc.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n/tmp/tmpi8kqxnwc.swift:21:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            primes.append(letter)\n\
    \                          ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        if prime > 1 {\n       \
    \     for letter in sentence.characters {\n                if prime == letters.distance(letters.startIndex,\
    \ letters.endIndex, sentence.startIndex, sentence.endIndex, letter) {\n      \
    \              result += String(letter)\n                }\n            }\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpfmz8zku_.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpfmz8zku_.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n/tmp/tmpfmz8zku_.swift:21:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            primes.append(letter)\n\
    \                          ^\n/tmp/tmpfmz8zku_.swift:26:36: error: 'characters'\
    \ is unavailable: Please use String directly\n            for letter in sentence.characters\
    \ {\n                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfmz8zku_.swift:27:29: error: cannot find 'letters'\
    \ in scope\n                if prime == letters.distance(letters.startIndex, letters.endIndex,\
    \ sentence.startIndex, sentence.endIndex, letter) {\n                        \
    \    ^~~~~~~\n/tmp/tmpfmz8zku_.swift:27:46: error: cannot find 'letters' in scope\n\
    \                if prime == letters.distance(letters.startIndex, letters.endIndex,\
    \ sentence.startIndex, sentence.endIndex, letter) {\n                        \
    \                     ^~~~~~~\n/tmp/tmpfmz8zku_.swift:27:66: error: cannot find\
    \ 'letters' in scope\n                if prime == letters.distance(letters.startIndex,\
    \ letters.endIndex, sentence.startIndex, sentence.endIndex, letter) {\n      \
    \                                                           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrimeNumber(word) {\n            result += \" \" + word\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp5ym4ia1h.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var index = 0\n\
    \    for char in sentence {\n        if char == \" \" {\n            primes[index]\
    \ = 0\n            index++\n        } else {\n            primes[index] += 1\n\
    \        }\n    }\n    for prime in primes {\n        if prime == 1 {\n      \
    \      result += String(char)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\"\
    ) == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") ==\
    \ \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
    \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I\
    \ am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go\
    \ for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") ==\
    \ \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9vpg2hcv.swift:23:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n/tmp/tmp9vpg2hcv.swift:30:30:\
    \ error: cannot find 'char' in scope\n            result += String(char)\n   \
    \                          ^~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var primeIndex\
    \ = 0\n    for char in sentence {\n        if char == \" \" {\n            primeIndex\
    \ = 0\n        }\n        if primes[primeIndex] == 0 {\n            primes[primeIndex]\
    \ = 1\n            if char == \"a\" || char == \"e\" || char == \"i\" || char\
    \ == \"o\" || char == \"u\" {\n                result += char\n            }\n\
    \        }\n        primeIndex++\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp71avk_5c.swift:27:27: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n                result += char\n       \
    \                   ^\n/tmp/tmp71avk_5c.swift:30:19: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        primeIndex++\n                \
    \  ^~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        if prime > 1 {\n       \
    \     for letter in sentence.characters {\n                if prime == letters.count\
    \ {\n                    result += letter\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmptxlxz3c_.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmptxlxz3c_.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n/tmp/tmptxlxz3c_.swift:21:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            primes.append(letter)\n\
    \                          ^\n/tmp/tmptxlxz3c_.swift:26:36: error: 'characters'\
    \ is unavailable: Please use String directly\n            for letter in sentence.characters\
    \ {\n                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptxlxz3c_.swift:27:29: error: cannot find 'letters'\
    \ in scope\n                if prime == letters.count {\n                    \
    \        ^~~~~~~\n/tmp/tmptxlxz3c_.swift:28:31: error: cannot convert value of\
    \ type 'Character' to expected argument type 'String'\n                    result\
    \ += letter\n                              ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for letter in sentence.characters {\n\
    \        if isPrime(Int(letter)) {\n            result += letter\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpkj3s18ar.swift:18:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkj3s18ar.swift:19:12: error: cannot find 'isPrime' in scope\n   \
    \     if isPrime(Int(letter)) {\n           ^~~~~~~\n/tmp/tmpkj3s18ar.swift:19:20:\
    \ error: no exact matches in call to initializer \n        if isPrime(Int(letter))\
    \ {\n                   ^\n/tmp/tmpkj3s18ar.swift:19:20: note: found candidate\
    \ with type '(Float16) -> Int'\n        if isPrime(Int(letter)) {\n          \
    \         ^\n/tmp/tmpkj3s18ar.swift:19:20: note: found candidate with type '(Float)\
    \ -> Int'\n        if isPrime(Int(letter)) {\n                   ^\n/tmp/tmpkj3s18ar.swift:19:20:\
    \ note: found candidate with type '(Double) -> Int'\n        if isPrime(Int(letter))\
    \ {\n                   ^\n/tmp/tmpkj3s18ar.swift:19:20: note: found candidate\
    \ with type '(Float80) -> Int'\n        if isPrime(Int(letter)) {\n          \
    \         ^\n/tmp/tmpkj3s18ar.swift:19:20: note: found candidate with type '(Builtin.Int64)\
    \ -> Int'\n        if isPrime(Int(letter)) {\n                   ^\n/tmp/tmpkj3s18ar.swift:19:20:\
    \ note: found candidate with type '(Builtin.Word) -> Int'\n        if isPrime(Int(letter))\
    \ {\n                   ^\n/tmp/tmpkj3s18ar.swift:19:20: note: found candidate\
    \ with type '(String) -> Int?'\n        if isPrime(Int(letter)) {\n          \
    \         ^\n/tmp/tmpkj3s18ar.swift:20:23: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n            result += letter\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.characters.split(separator: \" \")\n \
    \   var result = \"\"\n    for word in words {\n        if isPrimeNumber(word:\
    \ word) {\n            result += \" \" + word\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\"\
    ) == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") ==\
    \ \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
    \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I\
    \ am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go\
    \ for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") ==\
    \ \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpwlxgv7ho.swift:17:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    let words = sentence.characters.split(separator: \"\
    \ \")\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwlxgv7ho.swift:20:12: error: cannot find 'isPrimeNumber'\
    \ in scope\n        if isPrimeNumber(word: word) {\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        result = result + String(prime)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpkb5aegsn.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkb5aegsn.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n/tmp/tmpkb5aegsn.swift:21:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            primes.append(letter)\n\
    \                          ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for letter in sentence.characters {\n\
    \        if isPrime(Int(letter)) {\n            result += String(letter)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmphtb7_lnx.swift:18:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmphtb7_lnx.swift:19:12: error: cannot find 'isPrime' in scope\n   \
    \     if isPrime(Int(letter)) {\n           ^~~~~~~\n/tmp/tmphtb7_lnx.swift:19:20:\
    \ error: no exact matches in call to initializer \n        if isPrime(Int(letter))\
    \ {\n                   ^\n/tmp/tmphtb7_lnx.swift:19:20: note: found candidate\
    \ with type '(Float16) -> Int'\n        if isPrime(Int(letter)) {\n          \
    \         ^\n/tmp/tmphtb7_lnx.swift:19:20: note: found candidate with type '(Float)\
    \ -> Int'\n        if isPrime(Int(letter)) {\n                   ^\n/tmp/tmphtb7_lnx.swift:19:20:\
    \ note: found candidate with type '(Double) -> Int'\n        if isPrime(Int(letter))\
    \ {\n                   ^\n/tmp/tmphtb7_lnx.swift:19:20: note: found candidate\
    \ with type '(Float80) -> Int'\n        if isPrime(Int(letter)) {\n          \
    \         ^\n/tmp/tmphtb7_lnx.swift:19:20: note: found candidate with type '(Builtin.Int64)\
    \ -> Int'\n        if isPrime(Int(letter)) {\n                   ^\n/tmp/tmphtb7_lnx.swift:19:20:\
    \ note: found candidate with type '(Builtin.Word) -> Int'\n        if isPrime(Int(letter))\
    \ {\n                   ^\n/tmp/tmphtb7_lnx.swift:19:20: note: found candidate\
    \ with type '(String) -> Int?'\n        if isPrime(Int(letter)) {\n          \
    \         ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: Exception
  stderr: 'tmp_qxfdpjo/tmp_qxfdpjo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d2e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5cfd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5cfd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5cfd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qxfdpjo                        0x000055799a901307 <unavailable> + 4871

    5    libc.so.6                          0x00002afc5d4cc460 __libc_start_main +
    245

    6    tmp_qxfdpjo                        0x000055799a900f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var index = 0\n\
    \    for letter in sentence.characters {\n        if primes[index] == 1 {\n  \
    \          primes[index] = 2\n            result += String(letter)\n        }\n\
    \        if primes[index] > 1 {\n            primes[index] = primes[index - 1]\
    \ + 1\n        }\n        index++\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpneo9on4e.swift:20:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpneo9on4e.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for char in sentence.characters\
    \ {\n        if primes.contains(char.count) {\n            primes.append(char.count)\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpkcl_ntoc.swift:19:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in sentence.characters {\n               \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpkcl_ntoc.swift:20:33: error: value of type 'Character' has no member 'count'\n\
    \        if primes.contains(char.count) {\n                           ~~~~ ^~~~~\n\
    /tmp/tmpkcl_ntoc.swift:21:32: error: value of type 'Character' has no member 'count'\n\
    \            primes.append(char.count)\n                          ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    guard let sentence = sentence.lowercased(), let words = sentence.components(separatedBy:\
    \ \" \") else {\n        return \"No words\"\n    }\n    var result = \"\"\n \
    \   for word in words {\n        if let word = word.lowercased() {\n         \
    \   if let index = Int(word) {\n                if index.isPrime {\n         \
    \           result += \" \" + word\n                }\n            }\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp08oizia2.swift:17:70: error: value of type 'String' has no member\
    \ 'components'\n    guard let sentence = sentence.lowercased(), let words = sentence.components(separatedBy:\
    \ \" \") else {\n                                                            ~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp08oizia2.swift:17:11: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n    guard let sentence = sentence.lowercased(),\
    \ let words = sentence.components(separatedBy: \" \") else {\n          ^    \
    \          ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var primeIndex\
    \ = 0\n    for char in sentence {\n        if char == \" \" {\n            primeIndex\
    \ += 1\n            if primeIndex == primes.count {\n                primes.append(1)\n\
    \                primeIndex = 0\n            }\n        } else {\n           \
    \ primes[primeIndex] += 1\n        }\n    }\n    for prime in primes {\n     \
    \   if prime == 1 {\n            result += String(char)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpyf_gj7jr.swift:33:30: error: cannot find 'char' in scope\n    \
    \        result += String(char)\n                             ^~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for char in sentence.characters\
    \ {\n        if primes.contains(char.count) {\n            primes.append(char.count)\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpkcl_ntoc.swift:19:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in sentence.characters {\n               \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpkcl_ntoc.swift:20:33: error: value of type 'Character' has no member 'count'\n\
    \        if primes.contains(char.count) {\n                           ~~~~ ^~~~~\n\
    /tmp/tmpkcl_ntoc.swift:21:32: error: value of type 'Character' has no member 'count'\n\
    \            primes.append(char.count)\n                          ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    guard let sentence = sentence.lowercased(), let words = sentence.components(separatedBy:\
    \ \" \") else {\n        return \"\"\n    }\n    var result = \"\"\n    for word\
    \ in words {\n        if let word = word.lowercased() {\n            if let index\
    \ = find(words, word) {\n                let index = index(word, startIndex: index)\n\
    \                if isPrime(index: index) {\n                    result += word\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\"\
    ) == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") ==\
    \ \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
    \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I\
    \ am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go\
    \ for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") ==\
    \ \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp14u96gb4.swift:17:70: error: value of type 'String' has no member\
    \ 'components'\n    guard let sentence = sentence.lowercased(), let words = sentence.components(separatedBy:\
    \ \" \") else {\n                                                            ~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp14u96gb4.swift:17:11: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n    guard let sentence = sentence.lowercased(),\
    \ let words = sentence.components(separatedBy: \" \") else {\n          ^    \
    \          ~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp14u96gb4.swift:23:28: error: cannot\
    \ find 'find' in scope\n            if let index = find(words, word) {\n     \
    \                      ^~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return words_in_sentence(sentence.characters)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\"\
    ) == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") ==\
    \ \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
    \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I\
    \ am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go\
    \ for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") ==\
    \ \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpr4nr0yg_.swift:17:30: error: missing argument label 'sentence:'\
    \ in call\n    return words_in_sentence(sentence.characters)\n               \
    \              ^\n                             sentence: \n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        if prime > result.characters.count\
    \ {\n            result = result + String(prime)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp_vt6p5va.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp_vt6p5va.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n/tmp/tmp_vt6p5va.swift:21:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            primes.append(letter)\n\
    \                          ^\n/tmp/tmp_vt6p5va.swift:25:27: error: 'characters'\
    \ is unavailable: Please use String directly\n        if prime > result.characters.count\
    \ {\n                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for letter in sentence.characters {\n\
    \        if isPrime(letter) {\n            result += letter\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpwobpndzn.swift:18:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpwobpndzn.swift:19:12: error: cannot find 'isPrime' in scope\n   \
    \     if isPrime(letter) {\n           ^~~~~~~\n/tmp/tmpwobpndzn.swift:20:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        result = result + String(prime)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpkb5aegsn.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkb5aegsn.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n/tmp/tmpkb5aegsn.swift:21:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            primes.append(letter)\n\
    \                          ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence.componentsSeparatedByString(\" \")\n      \
    \  .filter({$0.characters.count > 1})\n        .filter({$0.characters.count <\
    \ 100})\n        .filter({$0.characters.filter({$0 != \"a\" && $0 != \"e\" &&\
    \ $0 != \"i\" && $0 != \"o\" && $0 != \"u\"}).count == 0})\n        .filter({$0.characters.filter({$0\
    \ != \"a\" && $0 != \"e\" && $0 != \"i\" && $0 != \"o\" && $0 != \"u\"}).count\
    \ != 0})\n        .filter({$0.characters.filter({$0 != \"a\" && $0 != \"e\" &&\
    \ $0 != \"i\" && $0 != \"o\" && $0 != \"u\"}).count != 0})\n        .map({$0.characters.filter({$0\
    \ != \"a\" && $0 != \"e\" && $0 != \"i\" && $0 != \"o\" && $0 != \"u\"}).count})\n\
    \        .filter({$0.isPrime})\n        .sorted()\n        .joinWithSeparator(\"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpsaywn5gm.swift:17:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return sentence.componentsSeparatedByString(\" \")\n  \
    \         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824653
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence.components(separatedBy: \" \")\n        .filter({\
    \ (word: String) -> Bool in\n            return isPrime(word.length)\n       \
    \ })\n        .sorted()\n        .joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpp7gbwftz.swift:19:20: error: cannot find 'isPrime' in scope\n \
    \           return isPrime(word.length)\n                   ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence.componentsSeparatedByString(\" \")\n      \
    \  .filter({$0.characters.count > 1})\n        .filter({$0.characters.count <\
    \ 100})\n        .filter({$0.characters.isPrimeNumber()})\n        .map({$0.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())})\n\
    \        .joinWithSeparator(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpjwgqbotq.swift:21:50: error: cannot find 'NSCharacterSet' in scope\n\
    \        .map({$0.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())})\n\
    \                                                 ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: Exception
  stderr: 'tmp_qxfdpjo/tmp_qxfdpjo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d2e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5cfd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5cfd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5cfd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qxfdpjo                        0x000055799a901307 <unavailable> + 4871

    5    libc.so.6                          0x00002afc5d4cc460 __libc_start_main +
    245

    6    tmp_qxfdpjo                        0x000055799a900f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    guard let sentence = sentence.lowercased(), let words = sentence.components(separatedBy:\
    \ \" \") else {\n        return \"\"\n    }\n    var result = \"\"\n    for word\
    \ in words {\n        if let word = word.lowercased() {\n            if let index\
    \ = word.characters.index(of: word) {\n                if index != word.characters.endIndex\
    \ {\n                    result = result + String(word.characters.suffixFrom(index))\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\"\
    ) == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") ==\
    \ \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
    \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I\
    \ am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go\
    \ for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") ==\
    \ \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp_p5mspsk.swift:17:70: error: value of type 'String' has no member\
    \ 'components'\n    guard let sentence = sentence.lowercased(), let words = sentence.components(separatedBy:\
    \ \" \") else {\n                                                            ~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp_p5mspsk.swift:17:11: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n    guard let sentence = sentence.lowercased(),\
    \ let words = sentence.components(separatedBy: \" \") else {\n          ^    \
    \          ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for letter in sentence.characters {\n\
    \        if isPrime(letter) {\n            result += letter\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpwobpndzn.swift:18:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpwobpndzn.swift:19:12: error: cannot find 'isPrime' in scope\n   \
    \     if isPrime(letter) {\n           ^~~~~~~\n/tmp/tmpwobpndzn.swift:20:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence.componentsSeparatedByString(\" \")\n      \
    \  .filter({$0.characters.count > 1})\n        .filter({$0.characters.count <\
    \ 100})\n        .filter({$0.characters.count % 2 == 0})\n        .map({$0.characters.first!})\n\
    \        .sorted()\n        .joinWithSeparator(\" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_in_sentence(sentence: \"This is a test\") == \"is\"\
    )\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpmvpeguvb.swift:17:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return sentence.componentsSeparatedByString(\" \")\n  \
    \         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824634
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return words_in_sentence(sentence.characters.map(String.init))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\"\
    ) == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") ==\
    \ \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
    \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I\
    \ am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go\
    \ for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") ==\
    \ \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpb3rzkrdw.swift:17:30: error: missing argument label 'sentence:'\
    \ in call\n    return words_in_sentence(sentence.characters.map(String.init))\n\
    \                             ^\n                             sentence: \n/tmp/tmpb3rzkrdw.swift:17:50:\
    \ error: cannot convert value of type '[String]' to expected argument type 'String'\n\
    \    return words_in_sentence(sentence.characters.map(String.init))\n        \
    \                                         ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        if prime > result.characters.count\
    \ {\n            result = result + String(prime)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp_vt6p5va.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp_vt6p5va.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n/tmp/tmp_vt6p5va.swift:21:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            primes.append(letter)\n\
    \                          ^\n/tmp/tmp_vt6p5va.swift:25:27: error: 'characters'\
    \ is unavailable: Please use String directly\n        if prime > result.characters.count\
    \ {\n                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var primeIndex\
    \ = 0\n    for char in sentence {\n        if char == \" \" {\n            primeIndex\
    \ += 1\n        }\n        if primes[primeIndex] == 0 {\n            primes[primeIndex]\
    \ = 1\n            if primeIndex == primes.count {\n                result +=\
    \ char\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpnp9jaglq.swift:27:27: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n                result += char\n       \
    \                   ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence.components(separatedBy: \" \")\n        .filter\
    \ { $0.characters.count > 1 }\n        .sorted()\n        .map { $0.characters.first\
    \ }\n        .reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpy6eg2mri.swift:17:21: error: value of type 'String' has no member\
    \ 'components'\n    return sentence.components(separatedBy: \" \")\n         \
    \  ~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824592
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var primeIndex\
    \ = 0\n    for char in sentence {\n        if char == \" \" {\n            primeIndex\
    \ += 1\n        }\n        if primes[primeIndex] == 0 {\n            primes[primeIndex]\
    \ = 1\n            if primeIndex == primes.count {\n                result +=\
    \ char\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpnp9jaglq.swift:27:27: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n                result += char\n       \
    \                   ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    guard let sentence = sentence.lowercased(), let words = sentence.components(separatedBy:\
    \ \" \") else {\n        return \"\"\n    }\n    var result = \"\"\n    for word\
    \ in words {\n        if let prime = Int(word), prime > 1 {\n            result\
    \ += \" \" + word\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_in_sentence(sentence: \"This is a test\") == \"is\"\
    )\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmprvfr7oua.swift:17:70: error: value of type 'String' has no member\
    \ 'components'\n    guard let sentence = sentence.lowercased(), let words = sentence.components(separatedBy:\
    \ \" \") else {\n                                                            ~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmprvfr7oua.swift:17:11: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n    guard let sentence = sentence.lowercased(),\
    \ let words = sentence.components(separatedBy: \" \") else {\n          ^    \
    \          ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrimeNumber(word) {\n            result += \" \" + word\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp5ym4ia1h.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence.componentsSeparatedByString(\" \")\n      \
    \  .filter({ (word) -> Bool in\n            return isPrime(Int(word))\n      \
    \  })\n        .map({ (word) -> String in\n            return word\n        })\n\
    \        .joinWithSeparator(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpzl8yhhlz.swift:19:20: error: cannot find 'isPrime' in scope\n \
    \           return isPrime(Int(word))\n                   ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var primeIndex\
    \ = 0\n    for letter in sentence.characters {\n        if primes[primeIndex]\
    \ == 1 {\n            primeIndex++\n            if primeIndex == primes.count\
    \ {\n                primes.append(1)\n                primeIndex = 0\n      \
    \      }\n        }\n        if primes[primeIndex] == 0 {\n            primeIndex++\n\
    \            if primeIndex == primes.count {\n                primes.append(1)\n\
    \                primeIndex = 0\n            }\n        }\n        primes[primeIndex]\
    \ = primes[primeIndex] + 1\n    }\n    for prime in primes {\n        if prime\
    \ == 1 {\n            result = result + String(letter)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpw8ac2j64.swift:20:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpw8ac2j64.swift:22:23: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            primeIndex++\n                      ^~\n/tmp/tmpw8ac2j64.swift:29:23:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  primeIndex++\n                      ^~\n/tmp/tmpw8ac2j64.swift:39:38: error:\
    \ cannot find 'letter' in scope\n            result = result + String(letter)\n\
    \                                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence.components(separatedBy: \" \")\n        .filter({\
    \ (word: String) -> Bool in\n            return word.characters.count > 1\n  \
    \      })\n        .sorted()\n        .map { (word: String) -> String in\n   \
    \         return word\n        }\n        .joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\"\
    ) == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") ==\
    \ \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
    \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I\
    \ am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go\
    \ for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") ==\
    \ \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpgk941gsr.swift:17:21: error: value of type 'String' has no member\
    \ 'components'\n    return sentence.components(separatedBy: \" \")\n         \
    \  ~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.components(separatedBy: \" \")\n    var\
    \ result = \"\"\n    for word in words {\n        let length = word.characters.count\n\
    \        if isPrime(length) == true {\n            result += \" \" + word\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpotenzorj.swift:17:26: error: value of type 'String' has no member\
    \ 'components'\n    let words = sentence.components(separatedBy: \" \")\n    \
    \            ~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var primeIndex\
    \ = 0\n    for letter in sentence.characters {\n        if primes[primeIndex]\
    \ == 1 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(1)\n                primeIndex = 0\n      \
    \      }\n        }\n        primes[primeIndex] += 1\n    }\n    for prime in\
    \ primes {\n        if prime > 1 {\n            result += String(sentence[sentence.startIndex...sentence.startIndex.advancedBy(prime\
    \ - 1)])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpj57uoqi0.swift:20:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpj57uoqi0.swift:32:81: error: value of type 'String.Index' has no\
    \ member 'advancedBy'\n            result += String(sentence[sentence.startIndex...sentence.startIndex.advancedBy(prime\
    \ - 1)])\n                                                            ~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        result = result + String(prime)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpkb5aegsn.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkb5aegsn.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n/tmp/tmpkb5aegsn.swift:21:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            primes.append(letter)\n\
    \                          ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primeNumbers = [Int]()\n    for\
    \ letter in sentence.characters {\n        let index = Int(letter)\n        if\
    \ index == index {\n            primeNumbers.append(index)\n        }\n    }\n\
    \    for number in primeNumbers {\n        if number > 1 {\n            for letter\
    \ in sentence.characters {\n                let index = Int(letter)\n        \
    \        if index == index {\n                    if number % index == 0 {\n \
    \                       result += String(letter)\n                    }\n    \
    \            }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\"\
    ) == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") ==\
    \ \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
    \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I\
    \ am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go\
    \ for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") ==\
    \ \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpe5j3xmn1.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpe5j3xmn1.swift:20:21: error: no exact matches in call to initializer\
    \ \n        let index = Int(letter)\n                    ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23: note: candidate\
    \ expects value of type 'String' for parameter #1 (got 'Character')\n    @inlinable\
    \ public init?(_ description: String)\n                      ^\n/tmp/tmpe5j3xmn1.swift:27:36:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ for letter in sentence.characters {\n                                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpe5j3xmn1.swift:28:29:\
    \ error: no exact matches in call to initializer \n                let index =\
    \ Int(letter)\n                            ^\nSwift.Int:7:12: note: candidate\
    \ expects value of type 'Float16' for "
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: Exception
  stderr: 'tmp_qxfdpjo/tmp_qxfdpjo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d2e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5cfd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5cfd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5cfd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qxfdpjo                        0x000055799a901307 <unavailable> + 4871

    5    libc.so.6                          0x00002afc5d4cc460 __libc_start_main +
    245

    6    tmp_qxfdpjo                        0x000055799a900f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence.componentsSeparatedByString(\" \")\n      \
    \  .filter{$0.characters.count > 1}\n        .filter{$0.characters.count < 100}\n\
    \        .filter{$0.characters.count % 2 == 0}\n        .filter{$0.characters.count\
    \ != 0}\n        .map{$0.characters.count}\n        .sorted()\n        .map{$0.description}\n\
    \        .joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpzxowgr8d.swift:17:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return sentence.componentsSeparatedByString(\" \")\n  \
    \         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824718
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        if prime > sentence.characters.count\
    \ {\n            break\n        }\n        if prime > 1 {\n            result\
    \ += String(prime)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9nf8k0af.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp9nf8k0af.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n/tmp/tmp9nf8k0af.swift:21:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            primes.append(letter)\n\
    \                          ^\n/tmp/tmp9nf8k0af.swift:25:29: error: 'characters'\
    \ is unavailable: Please use String directly\n        if prime > sentence.characters.count\
    \ {\n                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return words_in_sentence_helper(sentence, \"\")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\"\
    ) == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") ==\
    \ \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
    \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I\
    \ am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go\
    \ for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") ==\
    \ \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpxqb3barr.swift:17:12: error: cannot find 'words_in_sentence_helper'\
    \ in scope\n    return words_in_sentence_helper(sentence, \"\")\n           ^~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: Exception
  stderr: 'tmp_qxfdpjo/tmp_qxfdpjo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d2e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5cfd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5cfd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5cfd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qxfdpjo                        0x000055799a901307 <unavailable> + 4871

    5    libc.so.6                          0x00002afc5d4cc460 __libc_start_main +
    245

    6    tmp_qxfdpjo                        0x000055799a900f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var primeIndex\
    \ = 0\n    for char in sentence.characters {\n        if primes[primeIndex] ==\
    \ 1 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(2)\n            }\n        }\n        if primes[primeIndex]\
    \ == 2 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(3)\n            }\n        }\n        if primes[primeIndex]\
    \ == 3 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(5)\n            }\n        }\n        if primes[primeIndex]\
    \ == 5 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(7)\n            }\n        }\n        if primes[primeIndex]\
    \ == 7 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(11)\n            }\n        }\n        if primes[primeIndex]\
    \ == 11 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(13)\n            }\n        }\n        if primes[primeIndex]\
    \ == 13 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(17)\n            }\n        }\n        if primes[primeIndex]\
    \ == 17 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(19)\n            }\n        }\n        if primes[primeIndex]\
    \ == 19 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(23)\n            }\n        }\n        if primes[primeIndex]\
    \ == 23 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(29)\n            }\n        }\n        if primes[primeIndex]\
    \ == 29 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(31)\n            }\n        }\n        if primes[primeIndex]\
    \ == 31 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(37)\n            }\n        }\n        if primes[primeIndex]\
    \ == 37 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(41)\n            }\n        }\n        if primes[primeIndex]\
    \ == 41 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(43)\n            }\n        }\n        if primes[primeIndex]\
    \ == 43 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(47)\n            }\n        }\n        if primes[primeIndex]\
    \ == 47 {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp2l95x6us.swift:133:55: error: expected '}' at end of brace statement\n\
    assert(words_in_sentence(sentence: \"here is\") == \"is\")\n                 \
    \                                     ^\n/tmp/tmp2l95x6us.swift:20:37: note: to\
    \ match this opening '{'\n    for char in sentence.characters {\n            \
    \                        ^\n/tmp/tmp2l95x6us.swift:133:55: error: expected '}'\
    \ at end of brace statement\nassert(words_in_sentence(sentence: \"here is\") ==\
    \ \"is\")\n                                                      ^\n/tmp/tmp2l95x6us.swift:16:52:\
    \ note: to match this opening '{'\nfunc words_in_sentence(sentence: String) ->\
    \ String {\n                                                   ^\n/tmp/tmp2l95x6us.swift:20:26:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in sentence.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp2l95x6us.swift:115:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp2l95x6us.swift:17:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = \"\"\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmp2l95x6us.swift:20:9: warning: immutable value 'char' was never\
    \ used; consider replacing with '_' or removing it\n    for char in sentence.characters\
    \ {\n        ^~~~\n        _\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var primeIndex\
    \ = 0\n    for letter in sentence.characters {\n        if primes[primeIndex]\
    \ == 1 {\n            primeIndex++\n        }\n        if primeIndex == primes.count\
    \ {\n            primes.append(0)\n        }\n        if letter == \" \" {\n \
    \           primes[primeIndex] = 1\n            primeIndex++\n        }\n    }\n\
    \    for letter in sentence.characters {\n        if letter == \" \" {\n     \
    \       result += String(letter)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\"\
    ) == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") ==\
    \ \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
    \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I\
    \ am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go\
    \ for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") ==\
    \ \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp8a62mv7g.swift:20:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp8a62mv7g.swift:22:23: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            primeIndex++\n                      ^~\n/tmp/tmp8a62mv7g.swift:29:23:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  primeIndex++\n                      ^~\n/tmp/tmp8a62mv7g.swift:32:28: error:\
    \ 'characters' is unavailable: Please use String directly\n    for letter in sentence.characters\
    \ {\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.characters.split(separator: \" \")\n \
    \   var result = \"\"\n    for word in words {\n        let count = word.characters.count\n\
    \        if isPrime(count: count) {\n            result += word\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp4g0qqxji.swift:17:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    let words = sentence.characters.split(separator: \"\
    \ \")\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp4g0qqxji.swift:20:26: error: 'characters' is unavailable:\
    \ Please use Substring directly\n        let count = word.characters.count\n \
    \                        ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: Substring { get set }\n\
    \               ^\n/tmp/tmp4g0qqxji.swift:21:12: error: cannot find 'isPrime'\
    \ in scope\n        if isPrime(count: count) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrimeNumber(word) {\n            result += \" \" + word\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp5ym4ia1h.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    guard let sentence = sentence.lowercased(), let words = sentence.components(separatedBy:\
    \ \" \") else {\n        return \"\"\n    }\n    var result = \"\"\n    for word\
    \ in words {\n        if let word = word.lowercased() {\n            if let index\
    \ = find(words) {\n                if index != word.characters.count {\n     \
    \               result = result + word\n                }\n            }\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpb1d_bi27.swift:17:70: error: value of type 'String' has no member\
    \ 'components'\n    guard let sentence = sentence.lowercased(), let words = sentence.components(separatedBy:\
    \ \" \") else {\n                                                            ~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpb1d_bi27.swift:17:11: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n    guard let sentence = sentence.lowercased(),\
    \ let words = sentence.components(separatedBy: \" \") else {\n          ^    \
    \          ~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1d_bi27.swift:23:28: error: cannot\
    \ find 'find' in scope\n            if let index = find(words) {\n           \
    \                ^~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var index = 0\n\
    \    for char in sentence {\n        if char == \" \" {\n            primes[index]\
    \ = 0\n            index++\n        } else {\n            primes[index] += 1\n\
    \        }\n    }\n    for prime in primes {\n        if prime == 0 {\n      \
    \      continue\n        }\n        for index in 0..<prime {\n            result\
    \ += String(sentence[index])\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\"\
    ) == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") ==\
    \ \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
    \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I\
    \ am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go\
    \ for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") ==\
    \ \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp5m4fxyeu.swift:23:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n/tmp/tmp5m4fxyeu.swift:33:30:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            result += String(sentence[index])\n\
    \                             ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: Exception
  stderr: 'tmp_qxfdpjo/tmp_qxfdpjo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d2e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5cfd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5cfd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5cfd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qxfdpjo                        0x000055799a901307 <unavailable> + 4871

    5    libc.so.6                          0x00002afc5d4cc460 __libc_start_main +
    245

    6    tmp_qxfdpjo                        0x000055799a900f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var index = 0\n\
    \    for letter in sentence {\n        if letter == \" \" {\n            primes[index]\
    \ = 0\n            index++\n        } else {\n            primes[index] += 1\n\
    \        }\n    }\n    for prime in primes {\n        if prime == 0 {\n      \
    \      continue\n        }\n        if prime > result.characters.count {\n   \
    \         result = result + String(repeating: \" \", count: prime - 1)\n     \
    \   }\n        if prime < result.characters.count {\n            result = result\
    \ + String(repeating: \" \", count: prime + 1)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\"\
    ) == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") ==\
    \ \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
    \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I\
    \ am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go\
    \ for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") ==\
    \ \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpeta968uk.swift:23:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n/tmp/tmpeta968uk.swift:32:27:\
    \ error: 'characters' is unavailable: Please use String directly\n        if prime\
    \ > result.characters.count {\n                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpeta968uk.swift:35:27: error: 'characters'\
    \ is unavailable: Please use String directly\n        if prime < result.characters.count\
    \ {\n                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    guard let sentence = sentence.lowercased(), let words = sentence.components(separatedBy:\
    \ \" \") else {\n        return \"\"\n    }\n    var result = \"\"\n    for word\
    \ in words {\n        if isPrime(word: word) {\n            result += \" \" +\
    \ word\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpwjwwsoa2.swift:17:70: error: value of type 'String' has no member\
    \ 'components'\n    guard let sentence = sentence.lowercased(), let words = sentence.components(separatedBy:\
    \ \" \") else {\n                                                            ~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpwjwwsoa2.swift:17:11: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n    guard let sentence = sentence.lowercased(),\
    \ let words = sentence.components(separatedBy: \" \") else {\n          ^    \
    \          ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence.componentsSeparatedByString(\" \")\n      \
    \  .map { $0.characters.count }\n        .filter { $0 > 1 }\n        .sorted()\n\
    \        .map { String($0) }\n        .joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpomy9_pmy.swift:17:21: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    return sentence.componentsSeparatedByString(\"\
    \ \")\n           ~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824591
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for char in sentence.characters\
    \ {\n        if primes.contains(char.count) {\n            primes.append(char.count)\n\
    \        }\n    }\n    for prime in primes {\n        if prime > 1 {\n       \
    \     for char in sentence.characters {\n                if char.count == prime\
    \ {\n                    result += String(char)\n                }\n         \
    \   }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpreocjkrz.swift:19:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in sentence.characters {\n               \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpreocjkrz.swift:20:33: error: value of type 'Character' has no member 'count'\n\
    \        if primes.contains(char.count) {\n                           ~~~~ ^~~~~\n\
    /tmp/tmpreocjkrz.swift:21:32: error: value of type 'Character' has no member 'count'\n\
    \            primes.append(char.count)\n                          ~~~~ ^~~~~\n\
    /tmp/tmpreocjkrz.swift:26:34: error: 'characters' is unavailable: Please use String\
    \ directly\n            for char in sentence.characters {\n                  \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpreocjkrz.swift:27:25: error: value of type 'Character' has no member\
    \ 'count'\n                if char.count == prime {\n                   ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence.componentsSeparatedByString(\" \")\n      \
    \  .filter{$0.characters.count > 1}\n        .filter{$0.characters.count < 100}\n\
    \        .filter{$0.characters.count != 0}\n        .filter{$0.characters.count\
    \ != 1}\n        .filter{$0.characters.count != 2}\n        .filter{$0.characters.count\
    \ != 3}\n        .filter{$0.characters.count != 4}\n        .filter{$0.characters.count\
    \ != 5}\n        .filter{$0.characters.count != 6}\n        .filter{$0.characters.count\
    \ != 7}\n        .filter{$0.characters.count != 8}\n        .filter{$0.characters.count\
    \ != 9}\n        .filter{$0.characters.count != 10}\n        .filter{$0.characters.count\
    \ != 11}\n        .filter{$0.characters.count != 12}\n        .filter{$0.characters.count\
    \ != 13}\n        .filter{$0.characters.count != 14}\n        .filter{$0.characters.count\
    \ != 15}\n        .filter{$0.characters.count != 16}\n        .filter{$0.characters.count\
    \ != 17}\n        .filter{$0.characters.count != 18}\n        .filter{$0.characters.count\
    \ != 19}\n        .filter{$0.characters.count != 20}\n        .filter{$0.characters.count\
    \ != 21}\n        .filter{$0.characters.count != 22}\n        .filter{$0.characters.count\
    \ != 23}\n        .filter{$0.characters.count != 24}\n        .filter{$0.characters.count\
    \ != 25}\n        .filter{$0.characters.count != 26}\n        .filter{$0.characters.count\
    \ != 27}\n        .filter{$0.characters.count != 28}\n        .filter{$0.characters.count\
    \ != 29}\n        .filter{$0.characters.count != 30}\n        .filter{$0.characters.count\
    \ != 31}\n        .filter{$0.characters.count != 32}\n        .filter{$0.characters.count\
    \ != 33}\n        .filter{$0.characters.count != 34}\n        .filter{$0.characters.count\
    \ != 35}\n        .filter{$0.characters.count != 36}\n        .filter{$0.characters.count\
    \ != 37}\n        .filter{$0.characters.count != 38}\n        .filter{$0.characters.count\
    \ != 39}\n        .filter{$0.characters.count != 40}\n        .filter{$0.characters.count\
    \ != 41}\n        .filter{$0.characters.count != 42}\n        .filter{$0.characters.count\
    \ != 43}\n        .filter{$0.characters.count != 44}\n        .filter{$0.characters.count\
    \ != 45}\n        .filter{$0.characters.count != 46}\n        .filter{$0.characters.count\
    \ != 47}\n        .filter{$0.characters.count != 48}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_in_sentence(sentence: \"This is a test\") == \"is\"\
    )\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpv8150rqf.swift:17:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return sentence.componentsSeparatedByString(\" \")\n  \
    \         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659825190
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence.componentsSeparatedByString(\" \")\n      \
    \  .filter({ (word) -> Bool in\n            let length = word.characters.count\n\
    \            return length == 2 && length == Int(word.characters.first!)\n   \
    \     })\n        .sorted()\n        .joinWithSeparator(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9wgzgigd.swift:17:21: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    return sentence.componentsSeparatedByString(\"\
    \ \")\n           ~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        result = result + String(prime)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpkb5aegsn.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkb5aegsn.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n/tmp/tmpkb5aegsn.swift:21:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            primes.append(letter)\n\
    \                          ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var primeIndex\
    \ = 0\n    for letter in sentence.characters {\n        if primes[primeIndex]\
    \ == 1 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(0)\n            }\n        }\n        if letter\
    \ == \" \" {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(0)\n            }\n        } else {\n     \
    \       primes[primeIndex] += 1\n        }\n    }\n    for prime in primes {\n\
    \        if prime == 1 {\n            result += String(letter)\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpu8uy0opv.swift:20:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpu8uy0opv.swift:38:30: error: cannot find 'letter' in scope\n    \
    \        result += String(letter)\n                             ^~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return words_in_sentence(sentence.characters.map(String.init))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\"\
    ) == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") ==\
    \ \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
    \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I\
    \ am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go\
    \ for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") ==\
    \ \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpb3rzkrdw.swift:17:30: error: missing argument label 'sentence:'\
    \ in call\n    return words_in_sentence(sentence.characters.map(String.init))\n\
    \                             ^\n                             sentence: \n/tmp/tmpb3rzkrdw.swift:17:50:\
    \ error: cannot convert value of type '[String]' to expected argument type 'String'\n\
    \    return words_in_sentence(sentence.characters.map(String.init))\n        \
    \                                         ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var primeIndex\
    \ = 0\n    var currentPrime = 1\n    for char in sentence {\n        if char ==\
    \ \" \" {\n            primeIndex += 1\n            primes.append(currentPrime)\n\
    \            currentPrime = 1\n        } else {\n            currentPrime += 1\n\
    \        }\n    }\n    for prime in primes {\n        if prime > len(sentence)\
    \ {\n            break\n        }\n        if sentence[prime - 1] == \" \" {\n\
    \            result += sentence[prime - 1]\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\"\
    ) == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") ==\
    \ \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
    \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I\
    \ am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go\
    \ for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") ==\
    \ \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpg5kwc3th.swift:31:20: error: cannot find 'len' in scope\n     \
    \   if prime > len(sentence) {\n                   ^~~\n/tmp/tmpg5kwc3th.swift:34:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if sentence[prime - 1] == \" \" {\n   \
    \        ^~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpg5kwc3th.swift:35:31: error: no exact matches\
    \ in call to subscript \n            result += sentence[prime - 1]\n         \
    \                     ^\nSwift.String:3:12: note: candidate expects value of type\
    \ 'Range<String.Index>' for parameter #1 (got 'Int')\n    public subscript(r:\
    \ Range<String.Index>) -> Substring { get }\n           ^\nSwift.Collection:3:23:\
    \ note: candidate expects value of type '(UnboundedRange_) -> ()' for parameter\
    \ #1 (got 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ())\
    \ -> Self.SubSequence { get }\n                      ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: Exception
  stderr: 'tmp_qxfdpjo/tmp_qxfdpjo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d2e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5cfd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5cfd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5cfd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qxfdpjo                        0x000055799a901307 <unavailable> + 4871

    5    libc.so.6                          0x00002afc5d4cc460 __libc_start_main +
    245

    6    tmp_qxfdpjo                        0x000055799a900f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        if prime > result.characters.count\
    \ {\n            result = result + String(prime)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp_vt6p5va.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp_vt6p5va.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n/tmp/tmp_vt6p5va.swift:21:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            primes.append(letter)\n\
    \                          ^\n/tmp/tmp_vt6p5va.swift:25:27: error: 'characters'\
    \ is unavailable: Please use String directly\n        if prime > result.characters.count\
    \ {\n                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for letter in sentence.characters {\n\
    \        if isPrime(Int(letter)) {\n            result += String(letter)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmphtb7_lnx.swift:18:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmphtb7_lnx.swift:19:12: error: cannot find 'isPrime' in scope\n   \
    \     if isPrime(Int(letter)) {\n           ^~~~~~~\n/tmp/tmphtb7_lnx.swift:19:20:\
    \ error: no exact matches in call to initializer \n        if isPrime(Int(letter))\
    \ {\n                   ^\n/tmp/tmphtb7_lnx.swift:19:20: note: found candidate\
    \ with type '(Float16) -> Int'\n        if isPrime(Int(letter)) {\n          \
    \         ^\n/tmp/tmphtb7_lnx.swift:19:20: note: found candidate with type '(Float)\
    \ -> Int'\n        if isPrime(Int(letter)) {\n                   ^\n/tmp/tmphtb7_lnx.swift:19:20:\
    \ note: found candidate with type '(Double) -> Int'\n        if isPrime(Int(letter))\
    \ {\n                   ^\n/tmp/tmphtb7_lnx.swift:19:20: note: found candidate\
    \ with type '(Float80) -> Int'\n        if isPrime(Int(letter)) {\n          \
    \         ^\n/tmp/tmphtb7_lnx.swift:19:20: note: found candidate with type '(Builtin.Int64)\
    \ -> Int'\n        if isPrime(Int(letter)) {\n                   ^\n/tmp/tmphtb7_lnx.swift:19:20:\
    \ note: found candidate with type '(Builtin.Word) -> Int'\n        if isPrime(Int(letter))\
    \ {\n                   ^\n/tmp/tmphtb7_lnx.swift:19:20: note: found candidate\
    \ with type '(String) -> Int?'\n        if isPrime(Int(letter)) {\n          \
    \         ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        for letter in sentence.characters\
    \ {\n            if prime == letter {\n                result += String(letter)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_in_sentence(sentence: \"This is a test\") == \"is\"\
    )\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp3okhd41l.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3okhd41l.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n/tmp/tmp3okhd41l.swift:21:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            primes.append(letter)\n\
    \                          ^\n/tmp/tmp3okhd41l.swift:25:32: error: 'characters'\
    \ is unavailable: Please use String directly\n        for letter in sentence.characters\
    \ {\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3okhd41l.swift:26:22: error: binary operator '==' cannot\
    \ be applied to operands of type 'Int' and 'Character'\n            if prime ==\
    \ letter {\n               ~~~~~ ^  ~~~~~~\n/tmp/tmp3okhd41l.swift:26:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (Int, Int)\n            if prime == letter {\n                 \
    \    ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    guard let sentenceArray = sentence.components(separatedBy:\
    \ \" \") else {\n        return \"\"\n    }\n    var result = \"\"\n    for word\
    \ in sentenceArray {\n        if isPrimeNumber(word: word) {\n            result\
    \ += \" \" + word\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_in_sentence(sentence: \"This is a test\") == \"is\"\
    )\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp0jdmwd6b.swift:17:40: error: value of type 'String' has no member\
    \ 'components'\n    guard let sentenceArray = sentence.components(separatedBy:\
    \ \" \") else {\n                              ~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var primeIndex\
    \ = 0\n    for letter in sentence.characters {\n        if primes[primeIndex]\
    \ == 1 {\n            primeIndex += 1\n        }\n        primes[primeIndex] =\
    \ primes[primeIndex] + 1\n    }\n    for prime in primes {\n        if prime >\
    \ 1 {\n            for letter in sentence.characters {\n                if prime\
    \ % letter == 0 {\n                    result += String(letter)\n            \
    \    }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp1e5hp4no.swift:20:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp1e5hp4no.swift:28:36: error: 'characters' is unavailable: Please\
    \ use String directly\n            for letter in sentence.characters {\n     \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1e5hp4no.swift:29:28: error: cannot convert value of\
    \ type 'Character' to expected argument type 'Int'\n                if prime %\
    \ letter == 0 {\n                           ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: Exception
  stderr: 'tmp_qxfdpjo/tmp_qxfdpjo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d2e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5cfd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5cfd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5cfd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qxfdpjo                        0x000055799a901307 <unavailable> + 4871

    5    libc.so.6                          0x00002afc5d4cc460 __libc_start_main +
    245

    6    tmp_qxfdpjo                        0x000055799a900f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for letter in sentence.characters {\n\
    \        if isPrime(letter) {\n            result += letter\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpwobpndzn.swift:18:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpwobpndzn.swift:19:12: error: cannot find 'isPrime' in scope\n   \
    \     if isPrime(letter) {\n           ^~~~~~~\n/tmp/tmpwobpndzn.swift:20:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var primeIndex\
    \ = 0\n    for letter in sentence.characters {\n        if primeIndex == primes.count\
    \ {\n            primes.append(1)\n            primeIndex += 1\n        }\n  \
    \      if primes[primeIndex] == 1 {\n            primes[primeIndex] = primes[primeIndex]\
    \ + 1\n            if primes[primeIndex] == 2 {\n                result += String(letter)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_in_sentence(sentence: \"This is a test\") == \"is\"\
    )\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp_grs18t2.swift:20:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        result = result + String(prime)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpkb5aegsn.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkb5aegsn.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n/tmp/tmpkb5aegsn.swift:21:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            primes.append(letter)\n\
    \                          ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            result\
    \ += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_in_sentence(sentence: \"This is a test\") == \"is\"\
    )\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpyvhnih56.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpyvhnih56.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n/tmp/tmpyvhnih56.swift:21:23: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            result\
    \ += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var primeIndex\
    \ = 0\n    for char in sentence.characters {\n        if primes[primeIndex] ==\
    \ 1 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(1)\n                primeIndex += 1\n     \
    \       }\n        }\n        if primes[primeIndex] == 0 {\n            primeIndex\
    \ += 1\n            if primeIndex == primes.count {\n                primes.append(1)\n\
    \                primeIndex += 1\n            }\n        }\n    }\n    for char\
    \ in sentence.characters {\n        if primes[primeIndex] == 1 {\n           \
    \ result += String(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpz4zos2sa.swift:20:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in sentence.characters {\n               \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpz4zos2sa.swift:36:26: error: 'characters' is unavailable: Please use String\
    \ directly\n    for char in sentence.characters {\n                         ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpz4zos2sa.swift:20:9:\
    \ warning: immutable value 'char' was never used; consider replacing with '_'\
    \ or removing it\n    for char in sentence.characters {\n        ^~~~\n      \
    \  _\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var primeIndex\
    \ = 0\n    for letter in sentence.characters {\n        if primes[primeIndex]\
    \ == 1 {\n            primeIndex += 1\n        }\n        if primeIndex == primes.count\
    \ {\n            primes.append(1)\n            primeIndex = 0\n        }\n   \
    \     if letter == \" \" {\n            primes[primeIndex] += 1\n        }\n \
    \   }\n    for prime in primes {\n        if prime == 1 {\n            result\
    \ += String(letter)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp5mfsmnoy.swift:20:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp5mfsmnoy.swift:34:30: error: cannot find 'letter' in scope\n    \
    \        result += String(letter)\n                             ^~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        if prime > result.characters.count\
    \ {\n            result = result + String(prime)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp_vt6p5va.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp_vt6p5va.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n/tmp/tmp_vt6p5va.swift:21:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            primes.append(letter)\n\
    \                          ^\n/tmp/tmp_vt6p5va.swift:25:27: error: 'characters'\
    \ is unavailable: Please use String directly\n        if prime > result.characters.count\
    \ {\n                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        if prime > 1 {\n       \
    \     for letter in sentence.characters {\n                if prime == letters.count\
    \ {\n                    result += letter\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmptxlxz3c_.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmptxlxz3c_.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n/tmp/tmptxlxz3c_.swift:21:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            primes.append(letter)\n\
    \                          ^\n/tmp/tmptxlxz3c_.swift:26:36: error: 'characters'\
    \ is unavailable: Please use String directly\n            for letter in sentence.characters\
    \ {\n                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptxlxz3c_.swift:27:29: error: cannot find 'letters'\
    \ in scope\n                if prime == letters.count {\n                    \
    \        ^~~~~~~\n/tmp/tmptxlxz3c_.swift:28:31: error: cannot convert value of\
    \ type 'Character' to expected argument type 'String'\n                    result\
    \ += letter\n                              ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var primeIndex\
    \ = 0\n    for letter in sentence {\n        if primes[primeIndex] == 0 {\n  \
    \          primeIndex += 1\n        }\n        if primes[primeIndex] == 1 {\n\
    \            primeIndex += 1\n        }\n        if letter == \" \" {\n      \
    \      primeIndex += 1\n        }\n    }\n    for letter in sentence {\n     \
    \   if letter == \" \" {\n            primeIndex += 1\n        }\n        if primes[primeIndex]\
    \ == 0 {\n            primeIndex += 1\n        }\n        if primes[primeIndex]\
    \ == 1 {\n            primeIndex += 1\n        }\n        if letter == \" \" {\n\
    \            primeIndex += 1\n        }\n    }\n    for letter in sentence {\n\
    \        if letter == \" \" {\n            primeIndex += 1\n        }\n      \
    \  if primes[primeIndex] == 0 {\n            primeIndex += 1\n        }\n    \
    \    if primes[primeIndex] == 1 {\n            primeIndex += 1\n        }\n  \
    \      if letter == \" \" {\n            primeIndex += 1\n        }\n    }\n \
    \   for letter in sentence {\n        if letter == \" \" {\n            primeIndex\
    \ += 1\n        }\n        if primes[primeIndex] == 0 {\n            primeIndex\
    \ += 1\n        }\n        if primes[primeIndex] == 1 {\n            primeIndex\
    \ += 1\n        }\n        if letter == \" \" {\n            primeIndex += 1\n\
    \        }\n    }\n    for letter in sentence {\n        if letter == \" \" {\n\
    \            primeIndex += 1\n        }\n        if primes[primeIndex] == 0 {\n\
    \            primeIndex += 1\n        }\n        if primes[primeIndex] == 1 {\n\
    \            primeIndex += 1\n        }\n        if letter == \" \" {\n      \
    \      primeIndex += 1\n        }\n    }\n    for letter in sentence {\n     \
    \   if letter == \" \" {\n            primeIndex += 1\n        }\n        if primes[primeIndex]\
    \ == 0 {\n            primeIndex += 1\n        }\n        if primes[primeIndex]\
    \ == 1 {\n            primeIndex += 1\n        }\n        if letter == \" \" {\n\
    \            primeIndex += 1\n        }\n    }\n    for letter in sentence {\n\
    \        if letter == \" \" {\n            primeIndex += 1\n        }\n      \
    \  if primes[primeIndex] == 0 {\n            primeIndex += 1\n        }\n    \
    \    if primes[primeIndex] == 1 {\n            primeIndex += 1\n        }\n  \
    \      if letter == \" \" {\n            primeIndex += 1\n        }\n    }\n \
    \   for letter in sentence {\n        if letter == \" \" {\n            primeIndex\
    \ += 1\n        }\n        if primes[primeIndex] == 0 {\n            primeIndex\
    \ += 1\n        }\n        if primes[primeIndex] == 1 {\n            primeIndex\
    \ += 1\n        }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpnkqitp2c.swift:147:55: error: expected '}' at end of brace statement\n\
    assert(words_in_sentence(sentence: \"here is\") == \"is\")\n                 \
    \                                     ^\n/tmp/tmpnkqitp2c.swift:16:52: note: to\
    \ match this opening '{'\nfunc words_in_sentence(sentence: String) -> String {\n\
    \                                                   ^\n/tmp/tmpnkqitp2c.swift:129:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpnkqitp2c.swift:17:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = \"\"\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmpnkqitp2c.swift:18:9: warning: variable 'primes' was never mutated;\
    \ consider changing to 'let' constant\n    var primes = [1]\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: Exception
  stderr: 'tmp_qxfdpjo/tmp_qxfdpjo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d2e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5cfd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5cfd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5cfd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qxfdpjo                        0x000055799a901307 <unavailable> + 4871

    5    libc.so.6                          0x00002afc5d4cc460 __libc_start_main +
    245

    6    tmp_qxfdpjo                        0x000055799a900f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var index = 0\n\
    \    for letter in sentence.characters {\n        if primes[index] == 1 {\n  \
    \          primes = primes.filter{$0 % letter != 0}\n        }\n        if primes[index]\
    \ == 0 {\n            result += String(letter)\n        }\n        index += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmppoqkes64.swift:20:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmppoqkes64.swift:22:41: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n            primes = primes.filter{$0 % letter\
    \ != 0}\n                                        ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: Exception
  stderr: 'tmp_qxfdpjo/tmp_qxfdpjo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d2e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5cfd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5cfd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5cfd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qxfdpjo                        0x000055799a901307 <unavailable> + 4871

    5    libc.so.6                          0x00002afc5d4cc460 __libc_start_main +
    245

    6    tmp_qxfdpjo                        0x000055799a900f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    guard let sentence = sentence.lowercased(), let words = sentence.components(separatedBy:\
    \ \" \") else {\n        return \"\"\n    }\n    var result = \"\"\n    for word\
    \ in words {\n        if let word = word.lowercased() {\n            if let index\
    \ = result.index(of: word) {\n                result.remove(at: index)\n     \
    \       } else {\n                result += word\n            }\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpps1m06z9.swift:17:70: error: value of type 'String' has no member\
    \ 'components'\n    guard let sentence = sentence.lowercased(), let words = sentence.components(separatedBy:\
    \ \" \") else {\n                                                            ~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpps1m06z9.swift:17:11: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n    guard let sentence = sentence.lowercased(),\
    \ let words = sentence.components(separatedBy: \" \") else {\n          ^    \
    \          ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        if prime > 1 {\n       \
    \     for letter in sentence.characters {\n                if prime == letter\
    \ {\n                    result += String(letter)\n                }\n       \
    \     }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp_1s88hco.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp_1s88hco.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n/tmp/tmp_1s88hco.swift:21:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            primes.append(letter)\n\
    \                          ^\n/tmp/tmp_1s88hco.swift:26:36: error: 'characters'\
    \ is unavailable: Please use String directly\n            for letter in sentence.characters\
    \ {\n                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_1s88hco.swift:27:26: error: binary operator '==' cannot\
    \ be applied to operands of type 'Int' and 'Character'\n                if prime\
    \ == letter {\n                   ~~~~~ ^  ~~~~~~\n/tmp/tmp_1s88hco.swift:27:26:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (Int, Int)\n                if prime == letter {\n \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for char in sentence\
    \ {\n        if primes.contains(char.count) {\n            primes.append(char.count)\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\"\
    ) == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") ==\
    \ \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
    \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I\
    \ am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go\
    \ for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") ==\
    \ \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpt0lyu23q.swift:20:33: error: value of type 'Character' has no member\
    \ 'count'\n        if primes.contains(char.count) {\n                        \
    \   ~~~~ ^~~~~\n/tmp/tmpt0lyu23q.swift:21:32: error: value of type 'Character'\
    \ has no member 'count'\n            primes.append(char.count)\n             \
    \             ~~~~ ^~~~~\n/tmp/tmpt0lyu23q.swift:23:23: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            result\
    \ += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    var primeIndex\
    \ = 0\n    for char in sentence {\n        if char == \" \" {\n            primeIndex\
    \ += 1\n            primes.append(primes[primeIndex])\n        } else {\n    \
    \        primes[primeIndex] += 1\n        }\n    }\n    for prime in primes {\n\
    \        if prime > 1 {\n            for index in 0..<prime {\n              \
    \  result += String(sentence[index])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpjh8bhh9e.swift:31:34: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                result\
    \ += String(sentence[index])\n                                 ^~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for letter in sentence.characters {\n\
    \        if isPrime(letter) {\n            result += letter\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpwobpndzn.swift:18:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpwobpndzn.swift:19:12: error: cannot find 'isPrime' in scope\n   \
    \     if isPrime(letter) {\n           ^~~~~~~\n/tmp/tmpwobpndzn.swift:20:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    var primes = [1]\n    for letter in\
    \ sentence.characters {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        result = result + String(prime)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpkb5aegsn.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in sentence.characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkb5aegsn.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if primes.contains(letter) {\n    \
    \                       ^\n/tmp/tmpkb5aegsn.swift:21:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            primes.append(letter)\n\
    \                          ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        if isPrime(Int(word)) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kxnl04c.swift:18:26: error: no exact matches in call to instance\
    \ method 'split'\n    for word in sentence.split(\" \") {\n                  \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824590
