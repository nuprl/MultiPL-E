name: HumanEval_36_fizz_buzz
language: swift
prompt: "\n/// Return the number of times the digit 7 appears in integers less than\
  \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
  /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n:\
  \ 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
  \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\n\
  assert(fizz_buzz(n: 100000) == 8026)"
completions: ["    var count = 0\n    for number in 1...n {\n        if number % 11\
    \ == 0 || number % 13 == 0 {\n            count += 1\n        }\n    }\n    return\
    \ count", "    var count = 0\n    for number in 1...n {\n        if number % 11\
    \ == 0 || number % 13 == 0 {\n            count += 1\n        }\n    }\n    return\
    \ count", "    if n % 11 == 0 || n % 13 == 0 {\n        return n\n    }\n    return\
    \ fizz_buzz(n / 10) * 10 + n % 10", "    if n % 11 == 0 || n % 13 == 0 {\n   \
    \     return 0\n    }\n    return 1 + fizz_buzz(n / 11)", "    var count = 0\n\
    \    for num in 1...n {\n        if num % 11 == 0 || num % 13 == 0 {\n       \
    \     count += 1\n        }\n    }\n    return count", "    var count = 0\n  \
    \  for num in 1...n {\n        if num % 11 == 0 || num % 13 == 0 {\n         \
    \   count += 1\n        }\n    }\n    return count", "    var count = 0\n    for\
    \ num in 1...n {\n        if num % 11 == 0 || num % 13 == 0 {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for number\
    \ in 1...n {\n        if number % 11 == 0 || number % 13 == 0 {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for number\
    \ in 1...n {\n        if number % 11 == 0 || number % 13 == 0 {\n            count\
    \ += 1\n        }\n    }\n    return count", "    if n % 11 == 0 || n % 13 ==\
    \ 0 {\n        return n\n    }\n    return fizz_buzz(n - 1) + 1", "    var count\
    \ = 0\n    for n in 1...n {\n        if n % 11 == 0 || n % 13 == 0 {\n       \
    \     count += 1\n        }\n    }\n    return count", "    if n % 11 == 0 ||\
    \ n % 13 == 0 {\n        return 0\n    }\n    return 1 + fizz_buzz(n / 11)", " \
    \   var count = 0\n    for n in 1...n {\n        if n % 11 == 0 || n % 13 == 0\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for num in 1...n {\n        if num % 11 == 0 || num % 13 == 0 {\n \
    \           count += 1\n        }\n    }\n    return count", "    if n % 11 ==\
    \ 0 || n % 13 == 0 {\n        return n\n    }\n    return fizz_buzz(n - 1) + 1",
  "    if n % 11 == 0 || n % 13 == 0 {\n        return n\n    }\n    return fizz_buzz(n\
    \ - 1) + 1", "    if n % 11 == 0 || n % 13 == 0 {\n        return 0\n    }\n \
    \   return 1 + fizz_buzz(n / 11)", "    if n % 11 == 0 || n % 13 == 0 {\n    \
    \    return 0\n    }\n    return 1 + fizz_buzz(n / 11)", "    if n % 11 == 0 ||\
    \ n % 13 == 0 {\n        return n\n    }\n    return fizz_buzz(n - 1) + 1", " \
    \   var count = 0\n    for number in 1...n {\n        if number % 11 == 0 || number\
    \ % 13 == 0 {\n            count += 1\n        }\n    }\n    return count"]
stop_tokens:
- "\n}"
