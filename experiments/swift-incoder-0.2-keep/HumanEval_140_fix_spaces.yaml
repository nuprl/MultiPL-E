name: HumanEval_140_fix_spaces
language: swift
prompt: "\n/// Given a string text, replace all spaces in it with underscores, \n\
  /// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive\
  \ spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n/// fix_spaces(\"\
  Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") == \"_Example_2\"\n\
  /// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text: String)\
  \ -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(fix_spaces(text: \"Example\") == \"Example\"\
  )\nassert(fix_spaces(text: \"Mudasir Hanif \") == \"Mudasir_Hanif_\")\nassert(fix_spaces(text:\
  \ \"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\nassert(fix_spaces(text:\
  \ \"Exa   mple\") == \"Exa-mple\")\nassert(fix_spaces(text: \"   Exa 1 2 2 mple\"\
  ) == \"-Exa_1_2_2_mple\")"
completions: ["    let fixed = text\n    fixed = fixed.replacingOccurrences(of: \"\
    \ \", with: \"_\")\n    fixed = fixed.replacingOccurrences(of: \" \", with: \"\
    -\")\n    return fixed", "    var result = text\n    for c in text.unicodeScalars\
    \ {\n        if c == \" \" {\n            if result.hasPrefix(\" \") {\n     \
    \           result = result.removePrefix(\" \")\n            } else {\n      \
    \          result = result + \"_\"\n            }\n        } else {\n        \
    \    result = result + \"_\"\n        }\n    }\n    return result", "    let regex\
    \ = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options: nil,\
    \ error: nil)\n    let fixedString = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return fixedString", "    var result = text\n    for c in text.unicodeScalars\
    \ {\n        if c == \" \" {\n            result = result.replacingOccurrences(of:\
    \ c, with: \"_\")\n        }\n    }\n    if result.hasSuffix(\" \") {\n      \
    \  result = result.suffix(from: result.index(before: result.endIndex))\n    }\n\
    \    return result", "    let regex = NSRegularExpression(pattern: \"\\\\s+\"\
    , options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"-\")", "    var result = text\n    let spaces = text.countOfString(\"\
    \ \")\n    if spaces > 1 {\n        let lastSpace = text.lastIndex(of: \" \")\n\
    \        if lastSpace != text.startIndex {\n            let firstSpace = text.index(text.startIndex,\
    \ offsetBy: -1)\n            let secondSpace = text.index(text.startIndex, offsetBy:\
    \ -2)\n            if firstSpace != secondSpace {\n                result = result.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"_\")\n            }\n        }\n    }\n    return result",
  "    let spaces = text.countOfString(\" \")\n    if spaces == 0 {\n        return\
    \ text\n    }\n    if spaces == 1 {\n        return text\n    }\n    if spaces\
    \ == 2 {\n        return text\n    }\n    if spaces > 2 {\n        return text\n\
    \    }\n    return text.replacingOccurrences(of: \" \", with: \"_\")", "    var\
    \ result = text\n    let regex = NSRegularExpression(pattern: \"\\\\s+\", options:\
    \ .CaseInsensitive)\n    let matches = regex.matchesInString(text, options: .CaseInsensitive,\
    \ range: NSMakeRange(0, text.characters.count))\n    for match in matches {\n\
    \        let range = match.rangeAtIndex(0)\n        let start = text.substringWithRange(range).characters.count\n\
    \        let end = start + range.length\n        let replacement = text.substringWithRange(NSMakeRange(start,\
    \ end))\n        result = result.stringByReplacingCharactersInRange(range, withString:\
    \ replacement)\n    }\n    if result.characters.count > 2 {\n        let regex\
    \ = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n    \
    \    let matches = regex.matchesInString(result, options: .CaseInsensitive, range:\
    \ NSMakeRange(0, result.characters.count))\n        for match in matches {\n \
    \           let range = match.rangeAtIndex(0)\n            let start = result.substringWithRange(range).characters.count\n\
    \            let end = start + range.length\n            let replacement = result.substringWithRange(NSMakeRange(start,\
    \ end))\n            result = result.stringByReplacingCharactersInRange(range,\
    \ withString: replacement)\n        }\n    }\n    return result", "    var result\
    \ = text\n    for c in text.unicodeScalars {\n        if c.value == 0x20 {\n \
    \           if result.hasPrefix(\" \") {\n                result = result.dropFirst()\n\
    \            }\n            else {\n                result = result.append(\"\
    -\")\n            }\n        }\n        else {\n            result = result.append(\"\
    \ \")\n        }\n    }\n    return result", "    let spaces = text.countOfString(\"\
    \ \")\n    if spaces == 0 {\n        return text\n    }\n    if spaces == 1 {\n\
    \        return text\n    }\n    if spaces == 2 {\n        return text\n    }\n\
    \    if spaces > 2 {\n        return text\n    }\n    let newText = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    return newText", "    let fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\", options: .literal, range: nil)\n    let fixed2 = fixed.replacingOccurrences(of:\
    \ \" \", with: \"-\", options: .literal, range: nil)\n    return fixed2", "  \
    \  let regex = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options:\
    \ nil, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return result.stringByReplacingOccurrencesOfString(\"\\\\s+\", withString:\
    \ \"-\")", "    var result = text\n    \n    if text.hasPrefix(\" \") {\n    \
    \    result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\" \") {\n\
    \        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\" \"\
    ) {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.", "   \
    \ var result = text\n    for c in text.unicodeScalars {\n        if c.value ==\
    \ 0x20 {\n            if result.hasPrefix(\" \") {\n                result = result.remove(at:\
    \ result.startIndex)\n            } else {\n                result = result.append(\"\
    \ \")\n            }\n        } else if c.value == 0xA0 {\n            if result.hasSuffix(\"\
    \ \") {\n                result = result.remove(at: result.endIndex)\n       \
    \     } else {\n                result = result.append(\" \")\n            }\n\
    \        } else {\n            result = result.append(c.value)\n        }\n  \
    \  }\n    if result.hasPrefix(\" \") {\n        result = result.remove(at: result.startIndex)\n\
    \    }\n    if result.hasSuffix(\" \") {\n        result = result.remove(at: result.endIndex)\n\
    \    }\n    return result", "    let regex = NSRegularExpression(pattern: \"\\\
    \\s+\", options: .CaseInsensitive)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.WithTransparentBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return result.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"-\")", "    var result = text\n    for c in text.unicodeScalars\
    \ {\n        if c.value == 0x20 {\n            if result.hasPrefix(\" \") {\n\
    \                result = result.dropFirst()\n            } else {\n         \
    \       result = result + \"_\"\n            }\n        } else {\n           \
    \ result = result + \"_\"\n        }\n    }\n    if result.hasPrefix(\" \") {\n\
    \        result = result.dropFirst()\n    }\n    return result", "    let regex\
    \ = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n    let\
    \ fixed = regex.stringByReplacingMatchesInString(text, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n    let\
    \ fixed2 = regex.stringByReplacingMatchesInString(fixed, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, fixed.characters.count), withTemplate: \"-\")\n    return\
    \ fixed2", "    let regex = try! NSRegularExpression(pattern: \"\\\\s+\", options:\
    \ [])\n    return regex.stringByReplacingMatches(in: text, options: [], range:\
    \ NSMakeRange(0, text.count), withTemplate: \"_\")", "    var result = text\n\
    \    for char in text {\n        if char == ' ' {\n            result = result.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        }\n    }\n    return result", "    var result =\
    \ text\n    for c in text.unicodeScalars {\n        if c.value == 32 {\n     \
    \       if result.hasPrefix(\" \") {\n                result = result.removePrefix(\"\
    \ \")\n            } else {\n                result = \" \" + result\n       \
    \     }\n        } else if c.value == 160 {\n            if result.hasPrefix(\"\
    _\") {\n                result = result.removePrefix(\"_\")\n            } else\
    \ {\n                result = \"_\" + result\n            }\n        } else {\n\
    \            result = result + c.value\n        }\n    }\n    if result.hasPrefix(\"\
    _\") {\n        result = result.removePrefix(\"_\")\n    }\n    return result",
  "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options:\
    \ nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return fixed", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixedText = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixedText", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return result.stringByReplacingOccurrencesOfString(\"\
    -\", withString: \" \")", "    let regex = NSRegularExpression(pattern: \"\\\\\
    s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed", "    var result = text\n    for char\
    \ in text {\n        if char == ' ' {\n            result = result.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        }\n    }\n    if result.hasSuffix(\"_\") {\n  \
    \      result = result.suffix(1)\n    }\n    return result", "    var result =\
    \ text\n    for c in text.unicodeScalars {\n        if c == \" \" {\n        \
    \    let start = text.index(text.startIndex, offsetBy: 0)\n            let end\
    \ = text.index(text.startIndex, offsetBy: text.unicodeScalars.count)\n       \
    \     result = result.replacingCharacters(in: start..<end, with: \"_\")\n    \
    \    }\n    }\n    return result", "    let fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\", options: .regularExpression)\n    return fixed.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)", "    var result = text\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.dropFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = result + text.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result + result.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result + result.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result + result.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result + result.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result + result.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result + result.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result + result.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result + result.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result + result.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result + result.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result + result.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result + result.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    let result = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.characters.count), withTemplate:\
    \ \"_\")\n    if text.hasPrefix(\" \") {\n        return result.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    } else {\n        return result\n\
    \    }", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\\\
    \\s+\", options: nil, error: nil)\n    let fixedText = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixedText", "    let fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\", options: .regularExpression)\n    return fixed.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)", "    let fixed = text\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"\")\n    return fixed", "  \
    \  var result = text\n    for c in text.unicodeScalars {\n        if c.value ==\
    \ 32 {\n            if let start = text.index(text.startIndex, offsetBy: c.value\
    \ - 1) {\n                if let end = text.index(text.startIndex, offsetBy: c.value\
    \ + 1) {\n                    result = result.substring(to: start).append(\"-\"\
    )\n                    result = result.append(\"-\")\n                    result\
    \ = result.substring(from: end)\n                }\n            }\n        }\n\
    \    }\n    return result", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixedText = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions(rawValue: 0), range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixedText", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return fixed", "    let fixed = text.replacingOccurrences(of: \" \"\
    , with: \"_\")\n    return fixed.trimmingCharacters(in: .whitespacesAndNewlines)",
  "    let regex = try! NSRegularExpression(pattern: \"\\\\s+\", options: [])\n  \
    \  return regex.stringByReplacingMatches(in: text, options: [], range: NSMakeRange(0,\
    \ text.characters.count), withTemplate: \"_\")", "    var result = text\n    for\
    \ c in text.unicodeScalars {\n        if c.value == 32 {\n            if result.hasPrefix(\"\
    \ \") {\n                result = result.removePrefix(\" \")\n            } else\
    \ {\n                result = result + \"_\"\n            }\n        } else {\n\
    \            result = result + \"_\"\n        }\n    }\n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removePrefix(\" \")\n    }\n    return result",
  "    let regex = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n\
    \    let fixed = regex.stringByReplacingMatchesInString(text, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n    return\
    \ fixed", "    var result = text\n    for c in text.unicodeScalars {\n       \
    \ if c.value == 0x20 {\n            if let nextIndex = text.index(text.startIndex,\
    \ offsetBy: c.value - 1) {\n                if let nextChar = text[nextIndex]\
    \ {\n                    if nextChar.value == 0x20 {\n                       \
    \ result.remove(at: nextIndex)\n                    }\n                }\n   \
    \         }\n        }\n    }\n    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    let fixed = regex.stringByReplacingMatches(in:\
    \ result, options: [], range: NSMakeRange(0, result.count), withTemplate: \"_\"\
    )\n    if fixed.count > 2 {\n        let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s{2,}\", options: [])\n        fixed = regex.stringByReplacingMatches(in:\
    \ fixed, options: [], range: NSMakeRange(0, fixed.count), withTemplate: \"-\"\
    )\n    }\n    return fixed", "    var result = text\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = String(text.dropFirst())\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = result + \"_\"\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = String(text.dropLast())\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = result + \"-\"\n    }\n    \n    return result", " \
    \   let fixed = text\n        .replacingOccurrences(of: \" \", with: \"_\")\n\
    \        .replacingOccurrences(of: \" \", with: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        .replacingOccurrences(of: \" \", with: \"_\")\n\
    \        .replacingOccurrences(of: \" \", with: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        .replacingOccurrences(of: \" \", with: \"_\")\n\
    \        .replacingOccurrences(of: \" \", with: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        .replacingOccurrences(of: \" \", with: \"_\")\n\
    \        .replacingOccurrences(of: \" \", with: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        .replacingOccurrences(of: \" \", with: \"_\")\n\
    \        .replacingOccurrences(of: \" \", with: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        .replacingOccurrences(of: \" \", with: \"_\")\n\
    \        .replacingOccurrences(of: \" \", with: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with", "    let\
    \ regex = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n\
    \    let fixed = regex.stringByReplacingMatchesInString(text, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n    return\
    \ fixed.stringByReplacingOccurrencesOfString(\" \", withString: \"-\")", "   \
    \ var result = text\n    \n    if text.hasPrefix(\" \") {\n        result = String(text.dropFirst())\n\
    \    }\n    \n    if text.hasSuffix(\" \") {\n        result = result + \"_\"\n\
    \    }\n    \n    if text.hasPrefix(\" \") {\n        let firstSpace = text.index(text.startIndex,\
    \ offsetBy: 1)\n        let lastSpace = text.index(text.endIndex, offsetBy: -1)\n\
    \        \n        if firstSpace == lastSpace {\n            result = result +\
    \ \"_\"\n        } else {\n            result = result + \"-\"\n        }\n  \
    \  }\n    \n    return result", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions(rawValue: 0), range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"-\")", "    var result = text\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.substringToIndex(advance(result, 1))\n    }\n\
    \    \n    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ -1))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.substringToIndex(advance(result,\
    \ 1))\n    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ -1))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.substringToIndex(advance(result,\
    \ 1))\n    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ -1))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.substringToIndex(advance(result,\
    \ 1))\n    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ -1))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.substringToIndex(advance(result,\
    \ 1))\n    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ -1))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.substringToIndex(advance(result,\
    \ 1))\n    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ -1))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.substringToIndex(advance(result,\
    \ 1))\n    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ -1))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.substringToIndex(advance(result,\
    \ 1))\n    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ -1))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.substringToIndex(advance(result,\
    \ 1))\n    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ -1))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.substringToIndex(advance(result,\
    \ 1))\n    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ -1))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.substringToIndex(advance(result,\
    \ 1))\n    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ -1))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.substringToIndex(advance(result,\
    \ 1))\n    }\n    \n", "    let regex = try! NSRegularExpression(pattern: \"\\\
    \\s+\", options: [])\n    let fixed = regex.stringByReplacingMatches(in: text,\
    \ options: [], range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    let fixed2 = regex.stringByReplacingMatches(in: fixed, options: [],\
    \ range: NSMakeRange(0, fixed.characters.count), withTemplate: \"-\")\n    return\
    \ fixed2", "    let regex = NSRegularExpression(pattern: \"\\\\s+\", options:\
    \ .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \  \", withString: \"-\")", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixedString = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return fixedString", "    let spaces = text.components(separatedBy:\
    \ \" \")\n    if spaces.count > 2 {\n        let spaces_count = spaces.count -\
    \ 2\n        let new_spaces = Array(repeating: \" \", count: spaces_count)\n \
    \       let new_text = new_spaces + spaces.suffix(from: spaces.count - 1)\n  \
    \      return new_text\n    } else {\n        return text\n    }", "    let regex\
    \ = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options: nil,\
    \ error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text, options:\
    \ nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n  \
    \  return fixed", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    let fixed = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.characters.count), withTemplate:\
    \ \"_\")\n    return fixed.count>2 ? fixed.replacingOccurrences(of: \" \", with:\
    \ \"-\") : fixed", "    let regex = try! NSRegularExpression(pattern: \"\\\\s+\"\
    , options: [])\n    let fixed = regex.stringByReplacingMatches(in: text, options:\
    \ [], range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n   \
    \ let fixed2 = regex.stringByReplacingMatches(in: fixed, options: [], range: NSMakeRange(0,\
    \ fixed.characters.count), withTemplate: \"-\")\n    return fixed2", "    var\
    \ result = text\n    \n    if text.hasPrefix(\" \") {\n        result = String(text.dropFirst())\n\
    \    }\n    \n    if text.hasSuffix(\" \") {\n        result = result + \"_\"\n\
    \    }\n    \n    if text.hasPrefix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasSuffix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    return result", "    var result = text\n    for c in text.unicodeScalars\
    \ {\n        if c.value == 0x20 {\n            if let start = text.index(text.startIndex,\
    \ offsetBy: c.value - 1) {\n                if let end = text.index(text.startIndex,\
    \ offsetBy: c.value + 1) {\n                    let range = start..<end\n    \
    \                let replacement = \" _\"\n                    result = result.replacingOccurrences(of:\
    \ range, with: replacement)\n                }\n            }\n        }\n   \
    \ }\n    return result", "    var result = text\n    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    let matches = regex.matches(in: text, options:\
    \ [], range: NSMakeRange(0, text.characters.count))\n    for match in matches\
    \ {\n        let start = match.rangeAt(0)\n        let end = match.rangeAt(1)\n\
    \        let replacement = String(text[start..<end])\n        result = result.replacingCharacters(in:\
    \ range, with: replacement)\n    }\n    return result", "    var result = text\n\
    \    for char in text {\n        if char == ' ' {\n            if result.hasPrefix(\"\
    \ \") {\n                result = result.dropFirst()\n            } else {\n \
    \               result = result + \"_\"\n            }\n        } else {\n   \
    \         result = result + char\n        }\n    }\n    return result", "    var\
    \ result = text\n    \n    for char in \" \" {\n        result = result.replacingOccurrences(of:\
    \ char, with: \"_\")\n    }\n    \n    if result.hasSuffix(\"  \") {\n       \
    \ result = result.replacingOccurrences(of: \"  \", with: \"-\")\n    }\n    \n\
    \    return result", "    var result = text\n    for char in text.unicodeScalars\
    \ {\n        if char.value == 0x20 {\n            result.removeSubrange(NSMakeRange(0,\
    \ result.startIndex))\n            result.removeSubrange(NSMakeRange(result.startIndex,\
    \ result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 2, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 3, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 4, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 5, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 6, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 7, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 8, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 9, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 10, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 11, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 12, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 13, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 14, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 15, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 16, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 17, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 18, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 19, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 20, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 21, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 22, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 23, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 24, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 25, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 26, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 27, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 28, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 29, result.length))\n            result.removeSubrange(NSMakeRange(result.startIndex\
    \ + 30, result.length))\n            result.remove", "    var result = text\n\
    \    for c in text.unicodeScalars {\n        if c.value == 0x20 {\n          \
    \  if result.hasPrefix(\" \") {\n                result = result.removePrefix(\"\
    \ \")\n            } else {\n                result = result + \"_\"\n       \
    \     }\n        } else {\n            if result.hasPrefix(\"_\") {\n        \
    \        result = result.removePrefix(\"_\")\n            } else {\n         \
    \       result = result + \"_\"\n            }\n        }\n    }\n    return result",
  "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options:\
    \ nil, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return result.stringByReplacingOccurrencesOfString(\" \", withString:\
    \ \"-\")", "    var result = text\n    \n    if text.hasPrefix(\" \") {\n    \
    \    result = String(text.dropFirst())\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = result + \"_\"\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = result + String(text.dropLast())\n    }\n    \n    if\
    \ result.hasSuffix(\" \") {\n        result = result + \"-\"\n    }\n    \n  \
    \  return result", "    var result = text\n    for char in text {\n        if\
    \ char == ' ' {\n            result = result.replacingOccurrences(of: \" \", with:\
    \ \"_\")\n        }\n    }\n    if result.count > 2 {\n        result = result.replacingOccurrences(of:\
    \ \" \", with: \"-\")\n    }\n    return result", "    var result = text\n   \
    \ \n    if text.count > 2 {\n        var lastSpaceIndex = text.index(text.startIndex,\
    \ offsetBy: 2)\n        var firstSpaceIndex = text.index(text.startIndex, offsetBy:\
    \ 1)\n        \n        if lastSpaceIndex != firstSpaceIndex {\n            result\
    \ = result.replacingOccurrences(of: \" \", with: \"_\")\n        }\n    }\n  \
    \  \n    return result", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return fixed", "    let regex = NSRegularExpression(pattern: \"\\\\\
    s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"-\")", "    var result = text\n    let spaces = NSCharacterSet.whitespaceAndNewlineCharacterSet()\n\
    \    let consecutiveSpaces = NSCharacterSet.whitespaceAndNewlineCharacterSet().invertedSet\n\
    \    \n    while result.rangeOfCharacterFromSet(spaces, options: .BackwardsSearch).location\
    \ == NSNotFound {\n        result = result.replacingOccurrencesOfString(\" \"\
    , withString: \"_\", options: .LiteralSearch, range: nil)\n    }\n    \n    while\
    \ result.rangeOfCharacterFromSet(consecutiveSpaces, options: .BackwardsSearch).location\
    \ == NSNotFound {\n        result = result.replacingOccurrencesOfString(\" \"\
    , withString: \"-\", options: .LiteralSearch, range: nil)\n    }\n    \n    return\
    \ result", "    let regex = NSRegularExpression(pattern: \"\\\\s+\", options:\
    \ .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"-\")", "    var result = text\n    \n    for char in text\
    \ {\n        if char == ' ' {\n            result = result.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        }\n    }\n    \n    if result.hasSuffix(\"_\")\
    \ {\n        result = result.replacingOccurrences(of: \" \", with: \"-\")\n  \
    \  }\n    \n    return result", "    var result = text\n    for c in text.unicodeScalars\
    \ {\n        if c == \" \" {\n            result = result.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        }\n    }\n    return result", "    var result =\
    \ text\n    \n    if !text.isEmpty {\n        let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n        result = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.characters.count), withTemplate:\
    \ \"_\")\n    }\n    \n    if result.hasPrefix(\"_\") {\n        result = result.removeFirst()\n\
    \    }\n    \n    return result", "    var result = text\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.", " \
    \   var result = text\n    let regex = NSRegularExpression(pattern: \"\\\\s+\"\
    , options: .CaseInsensitive)\n    let matches = regex.matchesInString(text, options:\
    \ .MatchingAllCharacters, range: NSMakeRange(0, text.characters.count))\n    for\
    \ match in matches {\n        let range = match.rangeAtIndex(0)\n        let start\
    \ = text.substringWithRange(range).stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())\n\
    \        let end = text.substringWithRange(range).stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet()).stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())\n\
    \        if start != \"\" && end != \"\" {\n            if start.characters.count\
    \ == end.characters.count {\n                let fixed = start.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"_\", options: .LiteralSearch, range: NSMakeRange(0, start.characters.count))\n\
    \                result = result.stringByReplacingCharactersInRange(range, withString:\
    \ fixed)\n            }\n        }\n    }\n    return result", "    var result\
    \ = text\n    \n    if text.count > 2 {\n        var i = 0\n        var j = text.count\
    \ - 1\n        \n        while i < j {\n            if text[i] == ' ' {\n    \
    \            let newText = String(text[i+1..<j])\n                let newText2\
    \ = String(text[i..<i+2])\n                \n                if newText == \"\"\
    \ {\n                    result = String(text[i..<i+2])\n                    i\
    \ = i + 1\n                } else if newText2 == \"\" {\n                    result\
    \ = String(text[i..<i+1])\n                    i = i + 1\n                } else\
    \ {\n                    result = String(text[i..<i+1]) + \"_\" + newText2\n \
    \                   i = i + 1\n                }\n            } else {\n     \
    \           i = i + 1\n            }\n        }\n    }\n    \n    return result",
  "    var result = text\n    \n    if result.hasPrefix(\" \") {\n        result =\
    \ result.substringToIndex(advance(result, 1))\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.substringFromIndex(advance(result, -1))\n   \
    \ }\n    \n    if result.hasPrefix(\" \") {\n        result = result.substringToIndex(advance(result,\
    \ 1))\n    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ -1))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.substringToIndex(advance(result,\
    \ 1))\n    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ -1))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.substringToIndex(advance(result,\
    \ 1))\n    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ -1))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.substringToIndex(advance(result,\
    \ 1))\n    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ -1))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.substringToIndex(advance(result,\
    \ 1))\n    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ -1))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.substringToIndex(advance(result,\
    \ 1))\n    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ -1))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.substringToIndex(advance(result,\
    \ 1))\n    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ -1))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.substringToIndex(advance(result,\
    \ 1))\n    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ -1))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.substringToIndex(advance(result,\
    \ 1))\n    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ -1))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.substringToIndex(advance(result,\
    \ 1))\n    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ -1))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.substringToIndex(advance(result,\
    \ 1))\n    }\n    \n", "    let fixed = text\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"\")\n    return fixed", "  \
    \  let regex = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options:\
    \ nil, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return result.stringByReplacingOccurrencesOfString(\" \", withString:\
    \ \"-\")", "    let fixed = text.replacingOccurrences(of: \" \", with: \"_\",\
    \ options: .regularExpression)\n    return fixed.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)",
  "    let regex = try! NSRegularExpression(pattern: \"\\\\s+\", options: [])\n  \
    \  let fixed = regex.stringByReplacingMatches(in: text, options: [], range: NSMakeRange(0,\
    \ text.characters.count), withTemplate: \"_\")\n    return fixed.count > 2 ? fixed.replacingOccurrences(of:\
    \ \" \", with: \"-\") : fixed", "    var result = text\n    for c in text.unicodeScalars\
    \ {\n        if c.value == 32 {\n            if result.hasPrefix(\" \") {\n  \
    \              result = result.dropFirst()\n            } else {\n           \
    \     result = result + \"_\"\n            }\n        } else {\n            result\
    \ = result + \"_\"\n        }\n    }\n    if result.hasPrefix(\" \") {\n     \
    \   result = result.dropFirst()\n    }\n    return result", "    let fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\", options: .literal, range: nil)\n    return fixed.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)", "    var result = text\n    for c in text.unicodeScalars\
    \ {\n        if c.value == 0x20 {\n            if result.hasPrefix(\" \") {\n\
    \                result = result.dropFirst()\n            } else {\n         \
    \       result = result + \"_\"\n            }\n        } else {\n           \
    \ if result.hasPrefix(\" \") {\n                result = result.dropFirst()\n\
    \            } else {\n                result = result + \"_\"\n            }\n\
    \        }\n    }\n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    return result", "    let fixed = text.replacingOccurrences(of: \"\
    \ \", with: \"_\")\n    let fixed2 = fixed.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    return fixed2.replacingOccurrences(of: \" \", with: \"-\")", "    var result\
    \ = text\n    \n    if text.hasPrefix(\" \") {\n        result = text.removeFirst()\n\
    \    }\n    \n    if text.hasSuffix(\" \") {\n        result = result + \"_\"\n\
    \    }\n    \n    if text.hasPrefix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasSuffix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasPrefix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasSuffix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasPrefix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasSuffix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasPrefix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasSuffix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasPrefix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasSuffix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasPrefix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasSuffix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasPrefix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasSuffix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasPrefix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasSuffix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasPrefix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasSuffix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasPrefix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasSuffix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasPrefix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasSuffix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasPrefix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasSuffix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasPrefix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasSuffix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasPrefix(\" \") {\n        result = result + \"-\"\n\
    \    }\n    \n    if text.hasSuffix(\" \") {\n        result = result + \"-\"",
  "    var result = text\n    for c in text.unicodeScalars {\n        if c.value ==\
    \ 0x20 {\n            if result.hasPrefix(\" \") {\n                result = result.removePrefix(\"\
    \ \")\n            } else {\n                result = result + \"_\"\n       \
    \     }\n        } else {\n            if result.hasPrefix(\"_\") {\n        \
    \        result = result.removePrefix(\"_\")\n            } else {\n         \
    \       result = result + \"_\"\n            }\n        }\n    }\n    return result",
  "    var result = text\n    for c in text.unicodeScalars {\n        if c.value ==\
    \ 0x20 {\n            if result.hasPrefix(\" \") {\n                result = result.removePrefix(\"\
    \ \")\n            } else {\n                result = result + \"_\"\n       \
    \     }\n        } else {\n            result = result + \"_\"\n        }\n  \
    \  }\n    if result.hasPrefix(\" \") {\n        result = result.removePrefix(\"\
    \ \")\n    }\n    return result", "    var result = text\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = result.substringToIndex(advance(result, text.startIndex))\n\
    \    }\n    \n    if text.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ text.endIndex))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result\
    \ = result.substringToIndex(advance(result, result.startIndex))\n    }\n    \n\
    \    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ result.endIndex))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result\
    \ = result.substringToIndex(advance(result, result.startIndex))\n    }\n    \n\
    \    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ result.endIndex))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result\
    \ = result.substringToIndex(advance(result, result.startIndex))\n    }\n    \n\
    \    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ result.endIndex))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result\
    \ = result.substringToIndex(advance(result, result.startIndex))\n    }\n    \n\
    \    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ result.endIndex))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result\
    \ = result.substringToIndex(advance(result, result.startIndex))\n    }\n    \n\
    \    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ result.endIndex))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result\
    \ = result.substringToIndex(advance(result, result.startIndex))\n    }\n    \n\
    \    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ result.endIndex))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result\
    \ = result.substringToIndex(advance(result, result.startIndex))\n    }\n    \n\
    \    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ result.endIndex))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result\
    \ = result.substringToIndex(advance(result, result.startIndex))\n    }\n    \n\
    \    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ result.endIndex))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result\
    \ = result.substringToIndex(advance(result, result.startIndex))\n    }\n    \n\
    \    if result.hasSuffix(\" \") {\n        result = result.substringFromIndex(advance(result,\
    \ result.endIndex))\n    }\n    \n    if result.hasPrefix(\" ", "    var result\
    \ = text\n    \n    if text.hasPrefix(\" \") {\n        result = String(text.dropFirst())\n\
    \    }\n    \n    if text.hasSuffix(\" \") {\n        result = result + String(text.dropLast())\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = String(result.dropFirst())\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + String(result.dropLast())\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = String(result.dropFirst())\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + String(result.dropLast())\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = String(result.dropFirst())\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + String(result.dropLast())\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = String(result.dropFirst())\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + String(result.dropLast())\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = String(result.dropFirst())\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + String(result.dropLast())\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = String(result.dropFirst())\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + String(result.dropLast())\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = String(result.dropFirst())\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + String(result.dropLast())\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = String(result.dropFirst())\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + String(result.dropLast())\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = String(result.dropFirst())\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + String(result.dropLast())\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = String(result.dropFirst())\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + String(result.dropLast())\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = String(result.dropFirst())\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + String(result.dropLast())\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = String(result.dropFirst())\n\
    \    }\n    \n    if result.hasSuffix(\" \") {", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"-\")", "    let regex = NSRegularExpression(pattern: \"\\\\\
    s+\", options: .CaseInsensitive)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    if text.characters.count > 2 {\n        let regex\
    \ = NSRegularExpression(pattern: \"\\\\s{2,}\", options: .CaseInsensitive)\n \
    \       let result = regex.stringByReplacingMatchesInString(result, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, result.characters.count), withTemplate: \"-\")\n    }\n\
    \    return result", "    var result = text\n    let spaces = text.countOfString(\"\
    \ \")\n    if spaces > 1 {\n        let lastSpace = text.index(text.startIndex,\
    \ offsetBy: spaces - 1)\n        let nextSpace = text.index(text.startIndex, offsetBy:\
    \ spaces)\n        result = result.substring(to: lastSpace)\n        result =\
    \ result + \"_\"\n        result = result + result.substring(from: nextSpace)\n\
    \    }\n    return result", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    if result.characters.count > 2 {\n        let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n        let result = regex.stringByReplacingMatchesInString(result,\
    \ options: nil, range: NSMakeRange(0, result.characters.count), withTemplate:\
    \ \"-\")\n    }\n    return result", "    var result = text\n    for char in text\
    \ {\n        if char == ' ' {\n            result = result.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        }\n    }\n    if result.hasSuffix(\"_\") {\n  \
    \      result = result.suffix(1)\n    }\n    return result", "    let spaces =\
    \ text.countOfString(\" \")\n    if spaces > 2 {\n        let spacedText = text.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"_\", options: NSStringCompareOptions.LiteralSearch, range:\
    \ nil)\n        return spacedText.stringByReplacingOccurrencesOfString(\" \",\
    \ withString: \"-\", options: NSStringCompareOptions.LiteralSearch, range: nil)\n\
    \    } else {\n        return text\n    }", "    var result = text\n    for c\
    \ in text.unicodeScalars {\n        if c == \" \" {\n            let start = text.index(text.startIndex,\
    \ offsetBy: 0)\n            let end = text.index(text.startIndex, offsetBy: text.unicodeScalars.count)\n\
    \            let replacement = String(unicodeScalarLiteral: \"_\")\n         \
    \   result.replaceSubrange(start..<end, with: replacement)\n        }\n    }\n\
    \    return result", "    let regex = try! NSRegularExpression(pattern: \"\\\\\
    s+\", options: [])\n    return regex.stringByReplacingMatches(in: text, options:\
    \ [], range: NSMakeRange(0, text.count), withTemplate: \"_\")", "    let regex\
    \ = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options: NSRegularExpressionOptions.CaseInsensitive,\
    \ error: nil)\n    let fixedText = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixedText", "    var result = text\n    \n\
    \    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n    }\n\
    \    \n    if result.hasSuffix(\" \") {\n        result = result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropLast()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropLast()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropLast()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropLast()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropLast()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropLast()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropLast()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.", "    let regex = NSRegularExpression(pattern: \"\
    \\\\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"-\")", "    var result = text\n    for c in text.unicodeScalars\
    \ {\n        if c.value == 0x20 {\n            if result.hasPrefix(\" \") {\n\
    \                result = result.removePrefix(\" \")\n            } else {\n \
    \               result = result.removeLast()\n            }\n        } else {\n\
    \            result = result.removeLast()\n        }\n    }\n    return result",
  "    let fixed = text.replacingOccurrences(of: \" \", with: \"_\")\n    if fixed.hasPrefix(\"\
    \ \") {\n        fixed = fixed.dropFirst()\n    }\n    if fixed.hasSuffix(\" \"\
    ) {\n        fixed = fixed.dropLast()\n    }\n    if fixed.hasPrefix(\"_\") {\n\
    \        fixed = fixed.dropFirst()\n    }\n    if fixed.hasSuffix(\"_\") {\n \
    \       fixed = fixed.dropLast()\n    }\n    return fixed", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixedText = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return fixedText", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: 0, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: 0, range: NSMakeRange(0, text.characters.count), withTemplate: \"_\"\
    )\n    return result.substringToIndex(result.rangeOfString(\"-\"))", "    var\
    \ result = text\n    let regex = NSRegularExpression(pattern: \"\\\\s+\", options:\
    \ .CaseInsensitive)\n    result = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    let regex = NSRegularExpression(pattern: \"\\\\s{2,}\"\
    , options: .CaseInsensitive)\n    result = regex.stringByReplacingMatchesInString(result,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, result.characters.count),\
    \ withTemplate: \"-\")\n    return result", "    var result = text\n    for c\
    \ in text.unicodeScalars {\n        if c == \" \" {\n            let start = text.index(text.startIndex,\
    \ offsetBy: 0)\n            let end = text.index(text.startIndex, offsetBy: text.unicodeScalars.count)\n\
    \            let replacement = String(unicodeScalarLiteral: \"_\")\n         \
    \   result = result.replacingCharacters(in: start..<end, with: replacement)\n\
    \        }\n    }\n    return result", "    var result = text\n    for c in text.unicodeScalars\
    \ {\n        if c.value == 0x20 {\n            if result.hasPrefix(\" \") {\n\
    \                result = result.removePrefix(\" \")\n            } else {\n \
    \               result = result + \"_\"\n            }\n        } else {\n   \
    \         if result.hasPrefix(\"_\") {\n                result = result.removePrefix(\"\
    _\")\n            } else {\n                result = result + \"_\"\n        \
    \    }\n        }\n    }\n    if result.hasPrefix(\"_\") {\n        result = result.removePrefix(\"\
    _\")\n    }\n    return result", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return fixed", "    var result = text\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = String(text.dropFirst())\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = result + String(text.dropLast())\n    }\n    \n    if\
    \ result.hasPrefix(\" \") {\n        result = String(result.dropFirst())\n   \
    \ }\n    \n    if result.hasSuffix(\" \") {\n        result = result + String(result.dropLast())\n\
    \    }\n    \n    if result.hasPrefix(\"  \") {\n        result = String(result.dropFirst())\n\
    \    }\n    \n    if result.hasSuffix(\"  \") {\n        result = result + String(result.dropLast())\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = String(result.dropFirst())\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + String(result.dropLast())\n\
    \    }\n    \n    if result.hasPrefix(\"  \") {\n        result = String(result.dropFirst())\n\
    \    }\n    \n    if result.hasSuffix(\"  \") {\n        result = result + String(result.dropLast())\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = String(result.dropFirst())\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + String(result.dropLast())\n\
    \    }\n    \n    if result.hasPrefix(\"  \") {\n        result = String(result.dropFirst())\n\
    \    }\n    \n    if result.hasSuffix(\"  \") {\n        result = result + String(result.dropLast())\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = String(result.dropFirst())\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + String(result.dropLast())\n\
    \    }\n    \n    if result.hasPrefix(\"  \") {\n        result = String(result.dropFirst())\n\
    \    }\n    \n    if result.hasSuffix(\"  \") {\n        result = result + String(result.dropLast())\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = String(result.dropFirst())\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + String(result.dropLast())\n\
    \    }\n    \n    if result.hasPrefix(\"  \") {\n        result = String(result.dropFirst())\n\
    \    }\n    \n    if result.hasSuffix(\"  \") {\n        result = result + String(result.dropLast())\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = String(result.dropFirst())\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + String(result.dropLast())\n\
    \    }\n    \n    if result.hasPrefix(\"  \") {\n        result = String(result.dropFirst())\n\
    \    }\n    \n    if result.hasSuffix(\"  \") {", "    var result = text\n   \
    \ for c in text.unicodeScalars {\n        if c == \" \" {\n            result\
    \ = result.replacingOccurrences(of: \" \", with: \"_\")\n        }\n    }\n  \
    \  if result.hasSuffix(\" \") {\n        result = result.replacingOccurrences(of:\
    \ \" \", with: \"-\")\n    }\n    return result", "    var result = text\n   \
    \ for c in text.unicodeScalars {\n        if c.value == 0x20 {\n            if\
    \ result.hasPrefix(\" \") {\n                result = result.dropFirst()\n   \
    \         } else {\n                result = result + \"_\"\n            }\n \
    \       } else {\n            result = result + \"_\"\n        }\n    }\n    if\
    \ result.hasPrefix(\" \") {\n        result = result.dropFirst()\n    }\n    return\
    \ result", "    var result = text\n    \n    if text.hasPrefix(\" \") {\n    \
    \    result = String(text.dropFirst())\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = result + \"_\"\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result + \"-\"\n    }\n    \n    return result", " \
    \   var result = text\n    for c in text.unicodeScalars {\n        if c.value\
    \ == 0x20 {\n            if result.hasPrefix(\" \") {\n                result\
    \ = result.remove(at: result.startIndex)\n            } else {\n             \
    \   result = result.append(\" \")\n            }\n        } else if c.value ==\
    \ 0xA0 {\n            if result.hasPrefix(\" \") {\n                result = result.remove(at:\
    \ result.startIndex)\n            } else {\n                result = result.append(\"\
    \ \")\n            }\n        } else {\n            result = result.append(c.value)\n\
    \        }\n    }\n    if result.hasPrefix(\" \") {\n        result = result.remove(at:\
    \ result.startIndex)\n    }\n    return result", "    let spaces = text.unicodeScalars.filter\
    \ { $0.isWhitespace }\n    let spaces_count = spaces.count\n    \n    if spaces_count\
    \ == 0 {\n        return text\n    }\n    \n    if spaces_count == 1 {\n     \
    \   return text\n    }\n    \n    if spaces_count > 2 {\n        let spaces_count\
    \ = spaces.count\n        let spaces_array = Array(spaces)\n        \n       \
    \ var new_text = \"\"\n        \n        for i in 0..<spaces_count {\n       \
    \     if i == 0 {\n                new_text += \"_\"\n            } else {\n \
    \               new_text += \" \"\n            }\n        }\n        \n      \
    \  for i in 0..<spaces_count {\n            if i == spaces_count - 1 {\n     \
    \           new_text += \"-\"\n            } else {\n                new_text\
    \ += \" \"\n            }\n        }\n        \n        return new_text\n    }\n\
    \    \n    return text", "    let fixed = text\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"\")\n    return fixed", "  \
    \  let regex = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options:\
    \ 0, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions(rawValue: 0), range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    let fixedText = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.characters.count), withTemplate:\
    \ \"_\")\n    return fixedText", "    var result = text\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removePrefix(\" \")\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = result + \" \"\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removePrefix(\" \")\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result + \" \"\n    }\n    \n    if result.hasPrefix(\"\
    _\") {\n        result = result.removePrefix(\"_\")\n    }\n    \n    if result.hasSuffix(\"\
    _\") {\n        result = result + \"-\"\n    }\n    \n    return result", "  \
    \  let regex = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options:\
    \ nil, error: nil)\n    let fixedText = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return fixedText", "    var result = text\n    for char in text {\n\
    \        if char == ' ' {\n            result = result.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        }\n    }\n    return result", "    let fixed =\
    \ text\n        .stringByReplacingOccurrencesOfString(\" \", withString: \"_\"\
    )\n        .stringByReplacingOccurrencesOfString(\" \", withString: \"-\")\n \
    \   return fixed", "    let regex = NSRegularExpression(pattern: \"\\\\s+\", options:\
    \ .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions(rawValue: 0), range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed", "    let fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\", options: .literal, range: nil)\n    return fixed.count >\
    \ 2 ? fixed.replacingOccurrences(of: \" \", with: \"-\", options: .literal, range:\
    \ nil) : fixed", "    let regex = NSRegularExpression(pattern: \"\\\\s+\", options:\
    \ .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"-\")", "    var result = text\n    for c in text.unicodeScalars\
    \ {\n        if c.value == 0x20 {\n            if result.hasPrefix(\" \") {\n\
    \                result = result.remove(at: result.startIndex)\n            }\
    \ else {\n                result = result.append(\" \")\n            }\n     \
    \   } else if c.value == 0x2000 {\n            if result.hasPrefix(\" \") {\n\
    \                result = result.remove(at: result.startIndex)\n            }\
    \ else {\n                result = result.append(\" \")\n            }\n     \
    \   } else {\n            if result.hasPrefix(\" \") {\n                result\
    \ = result.remove(at: result.startIndex)\n            }\n        }\n    }\n  \
    \  return result", "    let regex = NSRegularExpression(pattern: \"\\\\s+\", options:\
    \ .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed", "    var result = text\n    \n    if\
    \ text.hasPrefix(\" \") {\n        result = text.removePrefix(\" \")\n    }\n\
    \    \n    if text.hasSuffix(\" \") {\n        result = result + \" \"\n    }\n\
    \    \n    if result.hasSuffix(\" \") {\n        result = result.removeLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.", "    let regex = NSRegularExpression(pattern: \"\
    \\\\s+\", options: .CaseInsensitive)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return result.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"-\")", "    let regex = NSRegularExpression(pattern: \"\\\\\
    s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \  \", withString: \"-\")", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    let fixed = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.count), withTemplate: \"_\")\n\
    \    return fixed.count>2 ? fixed.replacingOccurrences(of: \" \", with: \"-\"\
    ) : fixed", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixedText = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return fixedText", "    let regex = NSRegularExpression(pattern: \"\\\
    \\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"-\")", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return fixed", "    let regex = try! NSRegularExpression(pattern: \"\
    \\\\s+\", options: [])\n    let result = regex.stringByReplacingMatches(in: text,\
    \ options: [], range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    if result.hasPrefix(\"_\") {\n        return result.removeFirst()\n\
    \    }\n    return result", "    let fixed = text.replacingOccurrences(of: \"\
    \ \", with: \"_\")\n    let fixed2 = fixed.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    return fixed2.replacingOccurrences(of: \" \", with: \"-\")", "    var result\
    \ = text\n    for c in text.unicodeScalars {\n        if c.value == 0x20 {\n \
    \           if result.hasPrefix(\" \") {\n                result = result.dropFirst()\n\
    \            } else {\n                result = result.append(\"-\")\n       \
    \     }\n        } else {\n            if result.hasPrefix(\" \") {\n        \
    \        result = result.dropFirst()\n            }\n            result = result.append(\"\
    \ \")\n        }\n    }\n    return result", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    let fixed = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.characters.count), withTemplate:\
    \ \"_\")\n    return fixed.trimmingCharacters(in: .whitespacesAndNewlines)", " \
    \   var result = text\n    for c in text.unicodeScalars {\n        if c.value\
    \ == 0x20 { // space\n            let start = text.index(text.startIndex, offsetBy:\
    \ c.value - 1)\n            let end = text.index(start, offsetBy: 1)\n       \
    \     let replacement = String(UnicodeScalar(c.value - 0x20))\n            result\
    \ = result.replacingCharacters(in: start..<end, with: replacement)\n        }\n\
    \    }\n    return result", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    return regex.stringByReplacingMatches(in: text,\
    \ options: [], range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\\\\\
    s+\", options: nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return fixed", "    let fixed = text.replacingOccurrences(of: \" \"\
    , with: \"_\")\n    return fixed.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)",
  "    var result = text\n    let spaces = text.countOfString(\" \")\n    if spaces\
    \ > 1 {\n        let lastSpace = text.index(text.startIndex, offsetBy: spaces\
    \ - 1)\n        let firstSpace = text.index(text.startIndex, offsetBy: 0)\n  \
    \      let firstSpaceIndex = text.index(text.startIndex, offsetBy: 0)\n      \
    \  let lastSpaceIndex = text.index(text.startIndex, offsetBy: spaces - 1)\n  \
    \      let firstSpaceString = text.substring(from: firstSpace)\n        let lastSpaceString\
    \ = text.substring(from: lastSpace)\n        let firstSpaceStringWithoutSpaces\
    \ = firstSpaceString.replacingOccurrences(of: \" \", with: \"_\")\n        let\
    \ lastSpaceStringWithoutSpaces = lastSpaceString.replacingOccurrences(of: \" \"\
    , with: \"_\")\n        result = firstSpaceStringWithoutSpaces + lastSpaceStringWithoutSpaces\n\
    \    }\n    return result", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    let fixed = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.characters.count), withTemplate:\
    \ \"_\")\n    return fixed.count > 2 ? fixed.replacingOccurrences(of: \" \", with:\
    \ \"-\") : fixed", "    var result = text\n    for c in text.unicodeScalars {\n\
    \        if c.value == 0x20 {\n            if result.hasPrefix(\" \") {\n    \
    \            result = result.removePrefix(\" \")\n            } else {\n     \
    \           result = \" \" + result\n            }\n        }\n    }\n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removePrefix(\" \")\n    }\n    if result.hasSuffix(\"\
    \ \") {\n        result = result + \"-\"\n    }\n    return result", "    let\
    \ fixed = text.replacingOccurrences(of: \" \", with: \"_\")\n    if fixed.count\
    \ > 2 {\n        return fixed.replacingOccurrences(of: \" \", with: \"-\")\n \
    \   }\n    return fixed", "    var result = text\n    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let matches = regex.matchesInString(text,\
    \ options: .MatchAll, range: NSMakeRange(0, text.characters.count))\n    for match\
    \ in matches {\n        let start = match.rangeAtIndex(0)\n        let end = match.rangeAtIndex(1).location\n\
    \        let replacement = text.substringWithRange(start..<end).stringByReplacingOccurrencesOfString(\"\
    \\\\s+\", withString: \"_\")\n        result = result.stringByReplacingCharactersInRange(start,\
    \ withString: replacement)\n    }\n    return result", "    var result = text\n\
    \    for char in text {\n        if char == ' ' {\n            result = result.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        }\n    }\n    if result.hasSuffix(\"_\") {\n  \
    \      result = result.suffix(1)\n    }\n    return result", "    var result =\
    \ text\n    let regex = try! NSRegularExpression(pattern: \"\\\\s+\", options:\
    \ [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location:\
    \ 0, length: text.count))\n    for match in matches {\n        let range = match.range\n\
    \        let start = text.index(text.startIndex, offsetBy: range.location)\n \
    \       let end = text.index(start, offsetBy: range.length)\n        let replacement\
    \ = String(text[start..<end])\n        result = result.replacingOccurrences(of:\
    \ replacement, with: \"_\")\n    }\n    return result", "    var result = text\n\
    \    \n    if text.hasPrefix(\" \") {\n        result = text.dropFirst()\n   \
    \ }\n    \n    if text.hasSuffix(\" \") {\n        result = result + text.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst",
  "    let regex = try! NSRegularExpression(pattern: \"\\\\s+\", options: [])\n  \
    \  return regex.stringByReplacingMatches(in: text, options: [], range: NSMakeRange(0,\
    \ text.characters.count), withTemplate: \"_\")", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    let fixed = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.characters.count), withTemplate:\
    \ \"_\")\n    return fixed.count > 2 ? fixed.replacingOccurrences(of: \" \", with:\
    \ \"-\") : fixed", "    let regex = try! NSRegularExpression(pattern: \"\\\\s+\"\
    , options: [])\n    return regex.stringByReplacingMatches(in: text, options: [],\
    \ range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")", "    let\
    \ fixed = text.replacingOccurrences(of: \" \", with: \"_\", options: .literal,\
    \ range: nil)\n    return fixed.trimmingCharacters(in: .whitespacesAndNewlines)",
  "    var result = text\n    \n    if text.hasPrefix(\" \") {\n        result = String(text.dropFirst())\n\
    \    }\n    \n    if text.hasSuffix(\" \") {\n        result = result + String(text.dropLast())\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.dropFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result + result.dropLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.", " \
    \   var result = text\n    \n    if text.hasPrefix(\" \") {\n        result =\
    \ text.replacingOccurrences(of: \" \", with: \"_\")\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = result.replacingOccurrences(of: \" \", with: \"_\")\n\
    \    }\n    \n    if text.hasPrefix(\" \") {\n        result = result.replacingOccurrences(of:\
    \ \" \", with: \"-\")\n    }\n    \n    return result", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return fixed.stringByReplacingOccurrencesOfString(\" \", withString:\
    \ \"-\")", "    let fixed = text.replacingOccurrences(of: \" \", with: \"_\")\n\
    \    let fixed2 = fixed.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    return fixed2.replacingOccurrences(of: \" \", with: \"-\")", "    let regex\
    \ = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options: nil,\
    \ error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text, options:\
    \ nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n  \
    \  return fixed.stringByReplacingOccurrencesOfString(\" \", withString: \"-\")",
  "    var result = text\n    \n    if !text.isEmpty {\n        let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n        result = regex.stringByReplacingMatches(in:\
    \ result, options: [], range: NSMakeRange(0, result.characters.count), withTemplate:\
    \ \"_\")\n    }\n    \n    if result.hasPrefix(\"_\") {\n        result = result.substring(from:\
    \ 1)\n    }\n    \n    return result", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: NSRegularExpressionOptions.CaseInsensitive, error: nil)\n \
    \   let fixed = regex.stringByReplacingMatchesInString(text, options: NSMatchingOptions.WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n    return\
    \ fixed", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    if result.characters.count > 2 {\n        let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n        result = regex.stringByReplacingMatchesInString(result,\
    \ options: nil, range: NSMakeRange(0, result.characters.count), withTemplate:\
    \ \"-\")\n    }\n    return result", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    let fixed = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.characters.count), withTemplate:\
    \ \"_\")\n    let fixed2 = regex.stringByReplacingMatches(in: fixed, options:\
    \ [], range: NSMakeRange(0, fixed.characters.count), withTemplate: \"-\")\n  \
    \  return fixed2", "    var result = text\n    \n    if text.hasPrefix(\" \")\
    \ {\n        result = String(text.dropFirst())\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = result + \"_\"\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = String(text.dropLast())\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = result + \"-\"\n    }\n    \n    return result", " \
    \   var result = text\n    let regex = NSRegularExpression(pattern: \"\\\\s+\"\
    , options: .CaseInsensitive)\n    let matches = regex.matchesInString(text, options:\
    \ .MatchingWithTransparentBounds, range: NSMakeRange(0, text.characters.count))\n\
    \    for match in matches {\n        let start = match.rangeAtIndex(0)\n     \
    \   let end = match.rangeAtIndex(1).location\n        let replacement = text.substringWithRange(start..<end).stringByReplacingOccurrencesOfString(\"\
    \\\\s+\", withString: \"_\")\n        result = result.stringByReplacingCharactersInRange(start,\
    \ withString: replacement)\n    }\n    return result", "    var result = text\n\
    \    \n    if text.count > 2 {\n        result = result.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"_\")\n    }\n    \n    if result.count > 2 {\n        result\
    \ = result.stringByReplacingOccurrencesOfString(\" \", withString: \"-\")\n  \
    \  }\n    \n    return result", "    let fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    let fixed2 = fixed.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    return fixed2.replacingOccurrences(of: \" \", with: \"-\")", "    var result\
    \ = text\n    let regex = try! NSRegularExpression(pattern: \"\\\\s+\", options:\
    \ [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location:\
    \ 0, length: text.count))\n    for match in matches {\n        let range = match.range\n\
    \        let start = text.index(text.startIndex, offsetBy: range.location)\n \
    \       let end = text.index(text.startIndex, offsetBy: range.length)\n      \
    \  let replacement = String(text[start..<end])\n        result = result.replacingOccurrences(of:\
    \ replacement, with: \"_\")\n    }\n    if result.count > 2 {\n        result\
    \ = result.replacingOccurrences(of: \" \", with: \"-\")\n    }\n    return result",
  "    let spaces = text.unicodeScalars.filter { $0.isWhitespace }\n    let spaceCount\
    \ = spaces.count\n    if spaceCount == 0 {\n        return text\n    }\n    if\
    \ spaceCount == 1 {\n        return text\n    }\n    if spaceCount == 2 {\n  \
    \      return text\n    }\n    if spaceCount > 2 {\n        return text\n    }\n\
    \    let spaceIndex = text.unicodeScalars.index(of: \" \")\n    let firstSpaceIndex\
    \ = text.unicodeScalars.index(of: \" \", range: NSRange(location: spaceIndex,\
    \ length: 1))\n    let secondSpaceIndex = text.unicodeScalars.index(of: \" \"\
    , range: NSRange(location: firstSpaceIndex!, length: 1))\n    let thirdSpaceIndex\
    \ = text.unicodeScalars.index(of: \" \", range: NSRange(location: secondSpaceIndex!,\
    \ length: 1))\n    let fourthSpaceIndex = text.unicodeScalars.index(of: \" \"\
    , range: NSRange(location: thirdSpaceIndex!, length: 1))\n    let fifthSpaceIndex\
    \ = text.unicodeScalars.index(of: \" \", range: NSRange(location: fourthSpaceIndex!,\
    \ length: 1))\n    let sixthSpaceIndex = text.unicodeScalars.index(of: \" \",\
    \ range: NSRange(location: fifthSpaceIndex!, length: 1))\n    let seventhSpaceIndex\
    \ = text.unicodeScalars.index(of: \" \", range: NSRange(location: sixthSpaceIndex!,\
    \ length: 1))\n    let eighthSpaceIndex = text.unicodeScalars.index(of: \" \"\
    , range: NSRange(location: seventhSpaceIndex!, length: 1))\n    let ninthSpaceIndex\
    \ = text.unicodeScalars.index(of: \" \", range: NSRange(location: eighthSpaceIndex!,\
    \ length: 1))\n    let tenthSpaceIndex = text.unicodeScalars.index(of: \" \",\
    \ range: NSRange(location: ninthSpaceIndex!, length: 1))\n    let eleventhSpaceIndex\
    \ = text.unicodeScalars.index(of: \" \", range: NSRange(location: tenthSpaceIndex!,\
    \ length: 1))\n    let twelfthSpaceIndex = text.unicodeScalars.index(of: \" \"\
    , range: NSRange(location: eleventhSpaceIndex!, length: 1))\n    let thirteenthSpaceIndex\
    \ = text.unicodeScalars.index(of: \" \", range: NSRange(location: twelfthSpaceIndex!,\
    \ length: 1))\n    let fourteenthSpaceIndex = text.unicodeScalars.index(of: \"\
    \ \", range: NSRange(location: thirteenthSpaceIndex!, length: 1))\n    let fifteenthSpaceIndex\
    \ = text.unicodeScalars.index(of: \" \", range: NSRange(location: four", "   \
    \ var result = text\n    \n    if text == \"\" {\n        return text\n    }\n\
    \    \n    if text.characters.count > 2 {\n        let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n        result = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.characters.count), withTemplate:\
    \ \"-\")\n    }\n    \n    return result", "    var result = text\n    for c in\
    \ text.unicodeScalars {\n        if c.value == 0x20 {\n            if result.hasPrefix(\"\
    \ \") {\n                result = result.dropFirst()\n            } else {\n \
    \               result = result.append(\"-\")\n            }\n        } else {\n\
    \            result = result.append(\" \")\n        }\n    }\n    return result",
  "    var result = text\n    for char in text {\n        if char == ' ' {\n     \
    \       result = result.replacingOccurrences(of: \" \", with: \"_\")\n       \
    \ }\n    }\n    return result", "    let fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\", options: .regularExpression)\n    return fixed.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: 0, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: 0, range: NSMakeRange(0, text.characters.count), withTemplate: \"_\"\
    )\n    if result.characters.count > 2 {\n        let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: 0, error: nil)\n        let result = regex.stringByReplacingMatchesInString(result,\
    \ options: 0, range: NSMakeRange(0, result.characters.count), withTemplate: \"\
    -\")\n    }\n    return result", "    var result = text\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = result + \"_\"\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        let firstSpaceIndex = text.index(text.startIndex, offsetBy: 1)\n\
    \        let secondSpaceIndex = text.index(text.startIndex, offsetBy: 2)\n   \
    \     \n        if firstSpaceIndex != secondSpaceIndex {\n            result =\
    \ result.removeFirst()\n        }\n    }\n    \n    return result", "    let regex\
    \ = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options: nil,\
    \ error: nil)\n    let result = regex.stringByReplacingMatchesInString(text, options:\
    \ nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n  \
    \  return result.stringByReplacingOccurrencesOfString(\" \", withString: \"-\"\
    )", "    let regex = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n\
    \    let fixed = regex.stringByReplacingMatchesInString(text, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n    return\
    \ fixed.characters.count > 2 ? fixed : text", "    let fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    return fixed.trimmingCharacters(in: .whitespacesAndNewlines)",
  "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options:\
    \ nil, error: nil)\n    let fixedText = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return fixedText", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    return regex.stringByReplacingMatches(in: text,\
    \ options: [], range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")", "    let spaces = text.countOfString(\" \")\n    if spaces > 1 {\n    \
    \    let lastSpaceIndex = text.index(text.startIndex, offsetBy: spaces - 1)\n\
    \        let firstSpaceIndex = text.index(text.startIndex, offsetBy: spaces)\n\
    \        return String(text[firstSpaceIndex..<lastSpaceIndex])\n    } else {\n\
    \        return text\n    }", "    var result = text\n    for c in text.unicodeScalars\
    \ {\n        if c.value == 0x20 {\n            if result.hasPrefix(\" \") {\n\
    \                result = result.dropFirst()\n            } else {\n         \
    \       result = result + \"_\"\n            }\n        } else {\n           \
    \ result = result + \"_\"\n        }\n    }\n    return result", "    var result\
    \ = text\n    \n    if text.hasPrefix(\" \") {\n        result = text.removeFirst()\n\
    \    }\n    \n    if text.hasSuffix(\" \") {\n        result = result.removeLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.removeLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.removeLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.removeLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.removeLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.removeLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.removeLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.removeLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.removeLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.removeLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.removeLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.removeLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.removeLast()\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.removeFirst()\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.removeLast()\n\
    \    }\n    \n    if result.", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    let result = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.characters.count), withTemplate:\
    \ \"_\")\n    if text.hasPrefix(\" \") {\n        return result.hasPrefix(\"_\"\
    ) ? result : \"_\" + result\n    }\n    return result", "    var result = text\n\
    \    for c in text.unicodeScalars {\n        if c.value == 32 {\n            if\
    \ result.hasPrefix(\" \") {\n                result = result.removePrefix(\" \"\
    )\n            } else {\n                result = result + \"_\"\n           \
    \ }\n        } else {\n            if result.hasPrefix(\" \") {\n            \
    \    result = result.removePrefix(\" \")\n            } else {\n             \
    \   result = result + \"_\"\n            }\n        }\n    }\n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removePrefix(\" \")\n    }\n    return result",
  "    let regex = try! NSRegularExpression(pattern: \"\\\\s+\", options: [])\n  \
    \  let fixed = regex.stringByReplacingMatches(in: text, options: [], range: NSMakeRange(0,\
    \ text.characters.count), withTemplate: \"_\")\n    return fixed.count>2 ? fixed.replacingOccurrences(of:\
    \ \" \", with: \"-\") : fixed", "    let fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    let fixed2 = fixed.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    return fixed2.replacingOccurrences(of: \" \", with: \"-\")", "    let regex\
    \ = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options: nil,\
    \ error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text, options:\
    \ nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n  \
    \  if fixed.characters.count > 2 {\n        let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n        let fixed = regex.stringByReplacingMatchesInString(fixed,\
    \ options: nil, range: NSMakeRange(0, fixed.characters.count), withTemplate: \"\
    -\")\n    }\n    return fixed", "    var result = text\n    let spaces = text.countOfString(\"\
    \ \")\n    if spaces > 2 {\n        let spaceRange = NSMakeRange(0, spaces - 2)\n\
    \        let rangeOfSpaces = NSMakeRange(spaces - 2, spaces - 2)\n        result\
    \ = result.stringByReplacingCharactersInRange(spaceRange, withString: \"-\")\n\
    \        result = result.stringByReplacingCharactersInRange(rangeOfSpaces, withString:\
    \ \"\")\n    }\n    return result", "    var result = text\n    for c in text.unicodeScalars\
    \ {\n        if c.value == 0x20 {\n            if result.hasPrefix(\" \") {\n\
    \                result = result.remove(at: result.startIndex)\n            }\n\
    \            if result.hasSuffix(\" \") {\n                result = result.remove(at:\
    \ result.endIndex)\n            }\n            if result.hasPrefix(\"  \") {\n\
    \                result = result.remove(at: result.startIndex)\n            }\n\
    \            if result.hasSuffix(\"  \") {\n                result = result.remove(at:\
    \ result.endIndex)\n            }\n            if result.hasPrefix(\" \") {\n\
    \                result = result.remove(at: result.startIndex)\n            }\n\
    \            if result.hasSuffix(\" \") {\n                result = result.remove(at:\
    \ result.endIndex)\n            }\n            if result.hasPrefix(\"  \") {\n\
    \                result = result.remove(at: result.startIndex)\n            }\n\
    \            if result.hasSuffix(\"  \") {\n                result = result.remove(at:\
    \ result.endIndex)\n            }\n            if result.hasPrefix(\" \") {\n\
    \                result = result.remove(at: result.startIndex)\n            }\n\
    \            if result.hasSuffix(\" \") {\n                result = result.remove(at:\
    \ result.endIndex)\n            }\n            if result.hasPrefix(\"  \") {\n\
    \                result = result.remove(at: result.startIndex)\n            }\n\
    \            if result.hasSuffix(\"  \") {\n                result = result.remove(at:\
    \ result.endIndex)\n            }\n            if result.hasPrefix(\" \") {\n\
    \                result = result.remove(at: result.startIndex)\n            }\n\
    \            if result.hasSuffix(\" \") {\n                result = result.remove(at:\
    \ result.endIndex)\n            }\n            if result.hasPrefix(\"  \") {\n\
    \                result = result.remove(at: result.startIndex)\n            }\n\
    \            if result.hasSuffix(\"  \") {\n                result = result.remove(at:\
    \ result.endIndex)\n            }\n            if result.hasPrefix(\" \") {\n\
    \                result = result.remove(at: result.startIndex)\n            }\n\
    \            if result.hasSuffix(\" \") {\n                result = result.remove(at:\
    \ result.endIndex)\n            }\n            if result.hasPrefix(\"  \") {\n\
    \                result = result.remove(at: result.startIndex)\n            }\n\
    \            if result.hasSuffix(\"  \") {\n                result = result.remove(at:\
    \ result.endIndex)\n            }\n            if result.hasPrefix(\" \") {\n\
    \                result = result.remove(at: result.startIndex)\n            }\n\
    \            if result.hasSuffix(\" \") {\n                result = result.remove(at:\
    \ result.endIndex)\n            }\n            if result.hasPrefix(\"  \") {\n\
    \                result = result.remove(at: result.startIndex)\n            }\n\
    \            if result.hasSuffix(\"  \") {\n                result = result.remove(at:\
    \ result.endIndex)\n            }\n            if result.hasPrefix(\" \") {\n\
    \                result = result.remove(at: result.startIndex)\n            }\n\
    \            if result.hasSuffix(\" \") {\n                result = result.remove(at:\
    \ result.endIndex)\n            }\n", "    var result = text\n    let regex =\
    \ NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n    result\
    \ = regex.stringByReplacingMatchesInString(text, options: nil, range: NSMakeRange(0,\
    \ text.characters.count), withTemplate: \"_\")\n    if text.characters.count >\
    \ 2 && result.characters.count > 2 {\n        let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n        result = regex.stringByReplacingMatchesInString(result,\
    \ options: nil, range: NSMakeRange(0, result.characters.count), withTemplate:\
    \ \"-\")\n    }\n    return result", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    let fixed = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.characters.count), withTemplate:\
    \ \"_\")\n    return fixed.count > 2 ? fixed.replacingOccurrences(of: \" \", with:\
    \ \"-\") : fixed", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed", "    var result = text\n    \n    if\
    \ text.hasPrefix(\" \") {\n        result = String(text.dropFirst())\n    }\n\
    \    \n    if text.hasSuffix(\" \") {\n        result = result + \"_\"\n    }\n\
    \    \n    if text.hasPrefix(\" \") {\n        result = result + \"-\"\n    }\n\
    \    \n    if text.hasSuffix(\" \") {\n        result = result + \"-\"\n    }\n\
    \    \n    return result", "    var result = text\n    \n    // Replace all spaces\
    \ with underscores\n    result = result.replacingOccurrences(of: \" \", with:\
    \ \"_\")\n    \n    // If there are more than 2 consecutive spaces, replace all\
    \ consecutive spaces with -\n    if result.hasPrefix(\" \") {\n        let firstSpaceIndex\
    \ = result.index(of: \" \")!\n        let secondSpaceIndex = result.index(of:\
    \ \" \", after: firstSpaceIndex)\n        \n        if secondSpaceIndex != nil\
    \ {\n            result = result.substring(to: secondSpaceIndex!)\n        }\n\
    \    }\n    \n    return result", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed", "    let fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\", options: .regularExpression)\n    return fixed.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    let fixed = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.characters.count), withTemplate:\
    \ \"_\")\n    let fixed2 = regex.stringByReplacingMatches(in: fixed, options:\
    \ [], range: NSMakeRange(0, fixed.characters.count), withTemplate: \"-\")\n  \
    \  return fixed2", "    let regex = try! NSRegularExpression(pattern: \"\\\\s+\"\
    , options: [])\n    let fixed = regex.stringByReplacingMatches(in: text, options:\
    \ [], range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n   \
    \ return fixed.count > 2 ? fixed.replacingOccurrences(of: \" \", with: \"-\")\
    \ : fixed", "    let fixed = text.replacingOccurrences(of: \" \", with: \"_\"\
    )\n    return fixed.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)"]
stop_tokens:
- "\n}"
