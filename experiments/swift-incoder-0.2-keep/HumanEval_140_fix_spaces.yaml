name: HumanEval_140_fix_spaces
language: swift
prompt: "\n/// Given a string text, replace all spaces in it with underscores, \n\
  /// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive\
  \ spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n/// fix_spaces(\"\
  Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") == \"_Example_2\"\n\
  /// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text: String)\
  \ -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(fix_spaces(text: \"Example\") == \"Example\"\
  )\nassert(fix_spaces(text: \"Mudasir Hanif \") == \"Mudasir_Hanif_\")\nassert(fix_spaces(text:\
  \ \"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\nassert(fix_spaces(text:\
  \ \"Exa   mple\") == \"Exa-mple\")\nassert(fix_spaces(text: \"   Exa 1 2 2 mple\"\
  ) == \"-Exa_1_2_2_mple\")"
completions: ["    let fixed = text\n    fixed = fixed.replacingOccurrences(of: \"\
    \ \", with: \"_\")\n    fixed = fixed.replacingOccurrences(of: \" \", with: \"\
    -\")\n    return fixed", "    var result = text\n    for c in text.unicodeScalars\
    \ {\n        if c == \" \" {\n            if result.hasPrefix(\" \") {\n     \
    \           result = result.removePrefix(\" \")\n            } else {\n      \
    \          result = result + \"_\"\n            }\n        } else {\n        \
    \    result = result + \"_\"\n        }\n    }\n    return result", "    let regex\
    \ = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options: nil,\
    \ error: nil)\n    let fixedString = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return fixedString", "    var result = text\n    for c in text.unicodeScalars\
    \ {\n        if c == \" \" {\n            result = result.replacingOccurrences(of:\
    \ c, with: \"_\")\n        }\n    }\n    if result.hasSuffix(\" \") {\n      \
    \  result = result.suffix(from: result.index(before: result.endIndex))\n    }\n\
    \    return result", "    let regex = NSRegularExpression(pattern: \"\\\\s+\"\
    , options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"-\")", "    var result = text\n    let spaces = text.countOfString(\"\
    \ \")\n    if spaces > 1 {\n        let lastSpace = text.lastIndex(of: \" \")\n\
    \        if lastSpace != text.startIndex {\n            let firstSpace = text.index(text.startIndex,\
    \ offsetBy: -1)\n            let secondSpace = text.index(text.startIndex, offsetBy:\
    \ -2)\n            if firstSpace != secondSpace {\n                result = result.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"_\")\n            }\n        }\n    }\n    return result",
  "    let spaces = text.countOfString(\" \")\n    if spaces == 0 {\n        return\
    \ text\n    }\n    if spaces == 1 {\n        return text\n    }\n    if spaces\
    \ == 2 {\n        return text\n    }\n    if spaces > 2 {\n        return text\n\
    \    }\n    return text.replacingOccurrences(of: \" \", with: \"_\")", "    var\
    \ result = text\n    let regex = NSRegularExpression(pattern: \"\\\\s+\", options:\
    \ .CaseInsensitive)\n    let matches = regex.matchesInString(text, options: .CaseInsensitive,\
    \ range: NSMakeRange(0, text.characters.count))\n    for match in matches {\n\
    \        let range = match.rangeAtIndex(0)\n        let start = text.substringWithRange(range).characters.count\n\
    \        let end = start + range.length\n        let replacement = text.substringWithRange(NSMakeRange(start,\
    \ end))\n        result = result.stringByReplacingCharactersInRange(range, withString:\
    \ replacement)\n    }\n    if result.characters.count > 2 {\n        let regex\
    \ = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n    \
    \    let matches = regex.matchesInString(result, options: .CaseInsensitive, range:\
    \ NSMakeRange(0, result.characters.count))\n        for match in matches {\n \
    \           let range = match.rangeAtIndex(0)\n            let start = result.substringWithRange(range).characters.count\n\
    \            let end = start + range.length\n            let replacement = result.substringWithRange(NSMakeRange(start,\
    \ end))\n            result = result.stringByReplacingCharactersInRange(range,\
    \ withString: replacement)\n        }\n    }\n    return result", "    var result\
    \ = text\n    for c in text.unicodeScalars {\n        if c.value == 0x20 {\n \
    \           if result.hasPrefix(\" \") {\n                result = result.dropFirst()\n\
    \            }\n            else {\n                result = result.append(\"\
    -\")\n            }\n        }\n        else {\n            result = result.append(\"\
    \ \")\n        }\n    }\n    return result", "    let spaces = text.countOfString(\"\
    \ \")\n    if spaces == 0 {\n        return text\n    }\n    if spaces == 1 {\n\
    \        return text\n    }\n    if spaces == 2 {\n        return text\n    }\n\
    \    if spaces > 2 {\n        return text\n    }\n    let newText = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    return newText", "    let fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\", options: .literal, range: nil)\n    let fixed2 = fixed.replacingOccurrences(of:\
    \ \" \", with: \"-\", options: .literal, range: nil)\n    return fixed2", "  \
    \  let regex = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options:\
    \ nil, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return result.stringByReplacingOccurrencesOfString(\"\\\\s+\", withString:\
    \ \"-\")", "    var result = text\n    \n    if text.hasPrefix(\" \") {\n    \
    \    result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\" \") {\n\
    \        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\" \"\
    ) {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if text.", "   \
    \ var result = text\n    for c in text.unicodeScalars {\n        if c.value ==\
    \ 0x20 {\n            if result.hasPrefix(\" \") {\n                result = result.remove(at:\
    \ result.startIndex)\n            } else {\n                result = result.append(\"\
    \ \")\n            }\n        } else if c.value == 0xA0 {\n            if result.hasSuffix(\"\
    \ \") {\n                result = result.remove(at: result.endIndex)\n       \
    \     } else {\n                result = result.append(\" \")\n            }\n\
    \        } else {\n            result = result.append(c.value)\n        }\n  \
    \  }\n    if result.hasPrefix(\" \") {\n        result = result.remove(at: result.startIndex)\n\
    \    }\n    if result.hasSuffix(\" \") {\n        result = result.remove(at: result.endIndex)\n\
    \    }\n    return result", "    let regex = NSRegularExpression(pattern: \"\\\
    \\s+\", options: .CaseInsensitive)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.WithTransparentBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return result.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"-\")", "    var result = text\n    for c in text.unicodeScalars\
    \ {\n        if c.value == 0x20 {\n            if result.hasPrefix(\" \") {\n\
    \                result = result.dropFirst()\n            } else {\n         \
    \       result = result + \"_\"\n            }\n        } else {\n           \
    \ result = result + \"_\"\n        }\n    }\n    if result.hasPrefix(\" \") {\n\
    \        result = result.dropFirst()\n    }\n    return result", "    let regex\
    \ = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n    let\
    \ fixed = regex.stringByReplacingMatchesInString(text, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n    let\
    \ fixed2 = regex.stringByReplacingMatchesInString(fixed, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, fixed.characters.count), withTemplate: \"-\")\n    return\
    \ fixed2", "    let regex = try! NSRegularExpression(pattern: \"\\\\s+\", options:\
    \ [])\n    return regex.stringByReplacingMatches(in: text, options: [], range:\
    \ NSMakeRange(0, text.count), withTemplate: \"_\")", "    var result = text\n\
    \    for char in text {\n        if char == ' ' {\n            result = result.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        }\n    }\n    return result", "    var result =\
    \ text\n    for c in text.unicodeScalars {\n        if c.value == 32 {\n     \
    \       if result.hasPrefix(\" \") {\n                result = result.removePrefix(\"\
    \ \")\n            } else {\n                result = \" \" + result\n       \
    \     }\n        } else if c.value == 160 {\n            if result.hasPrefix(\"\
    _\") {\n                result = result.removePrefix(\"_\")\n            } else\
    \ {\n                result = \"_\" + result\n            }\n        } else {\n\
    \            result = result + c.value\n        }\n    }\n    if result.hasPrefix(\"\
    _\") {\n        result = result.removePrefix(\"_\")\n    }\n    return result"]
stop_tokens:
- "\n}"
