name: HumanEval_7_filter_by_substring
language: swift
prompt: "\n/// Filter an input list of strings only for ones that contain given substring\n\
  /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
  \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings:\
  \ [String], substring: String) -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(filter_by_substring(strings: [] as [String],\
  \ substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\"\
  ) == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
  , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") ==\
  \ [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
  \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
  grunt\", \"prune\"])"
completions: ["    var result = [String]()\n    for string in strings {\n        if\
    \ string.contains(substring) {\n            result.append(string)\n        }\n\
    \    }\n    return result", "    var result = [String]()\n    for s in strings\
    \ {\n        if s.contains(substring) {\n            result.append(s)\n      \
    \  }\n    }\n    return result", "    var filtered = [String]()\n    for string\
    \ in strings {\n        if string.contains(substring) {\n            filtered\
    \ = append(filtered, string)\n        }\n    }\n    return filtered", "    var\
    \ filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", '    return strings.filter({ $0.contains(substring) })', "    var\
    \ filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", '    return strings.filter({ $0.contains(substring) })', "    var\
    \ filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered", "    var result = [String]()\n    for s in strings {\n        if\
    \ s.contains(substring) {\n            result.append(s)\n        }\n    }\n  \
    \  return result", '    return strings.filter({ $0.contains(substring) })', " \
    \   var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", "    var filtered = [String]()\n    for s in strings {\n        if\
    \ s.contains(substring) {\n            filtered = append(filtered, s)\n      \
    \  }\n    }\n    return filtered", "    var filtered = [String]()\n    for s in\
    \ strings {\n        if s.contains(substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered", "    var filtered = [String]()\n\
    \    for s in strings {\n        if s.contains(substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered", '    return filter_by_substrings(strings,
    substring, true)', '    return filter_by_substring(strings.ToSlice(), substring)',
  "    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered[..<filtered.index(s)]\n        }\n    }\n\
    \    return filtered", "    var filtered = [String]()\n    for s in strings {\n\
    \        if s.contains(substring) {\n            filtered = append(filtered, s)\n\
    \        }\n    }\n    return filtered", '    return filter_by_substring(strings.filter({
    $0.contains(substring) }), substring)', "    var filtered = strings\n    for string\
    \ in strings {\n        if string.contains(substring) {\n            filtered\
    \ = filtered.filter({$0 != string})\n        }\n    }\n    return filtered"]
stop_tokens:
- "\n}"
