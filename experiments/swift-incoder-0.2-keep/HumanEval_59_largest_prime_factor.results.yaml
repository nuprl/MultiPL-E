language: swift
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int = 0\n \
    \   var i: Int = 0\n    var j: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n\
    \    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var u: Int =\
    \ 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int\
    \ = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c:\
    \ Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var\
    \ g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n   \
    \ var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n\
    \    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int =\
    \ 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int\
    \ = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z:\
    \ Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var\
    \ d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n   \
    \ var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n\
    \    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int =\
    \ 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int\
    \ = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w:\
    \ Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var\
    \ a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n   \
    \ var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n\
    \    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int =\
    \ 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int\
    \ = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t:\
    \ Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var\
    \ x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n   \
    \ var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp2kwjtzxn.swift:30:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:9:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:31:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:10:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:34:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:13:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:35:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:14:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:37:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:11:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:38:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:12:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:41:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:15:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:42:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:16:9:\
    \ note: 'u' previously declared here\n    var u: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:43:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:17:9:\
    \ note: 'v' previously declared here\n    var v: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:44:9:\
    \ error: invalid redeclaration of 'w'\n    var w: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:18:9:\
    \ note: 'w' previously declared here\n    var w: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:45:9:\
    \ error: invalid redeclaration of 'x'\n    var x: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:19:9:\
    \ note: 'x' previously declared here\n    var x: Int = 0\n  "
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor: Int = 0\n\
    \    var max_factor_index: Int = 0\n    for factor in 2...n {\n        if n %\
    \ factor == 0 {\n            if factor > max_factor {\n                max_factor\
    \ = factor\n                max_factor_index = factor\n            }\n       \
    \ }\n    }\n    return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpzqu2jk_u/tmpzqu2jk_u.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b836e201c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b836def8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b836def8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b836def77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzqu2jk_u                        0x000055b95674c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b836e3ed460 __libc_start_main +
    245

    6    tmpzqu2jk_u                        0x000055b95674bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor: Int = 0\n\
    \    var max_factor_index: Int = 0\n    for i := 2; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            if max_factor < i {\n                max_factor =\
    \ i\n                max_factor_index = i\n            }\n        }\n    }\n \
    \   return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpnh0yh286.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpnh0yh286.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpnh0yh286.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp3x_fg2uq/tmp3x_fg2uq.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1278d1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1278a16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1278a16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1278a157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3x_fg2uq                        0x0000555e6bf1e3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b1278f0b460 __libc_start_main +
    245

    6    tmp3x_fg2uq                        0x0000555e6bf1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int = 0\n \
    \   var i: Int = 0\n    var j: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n\
    \    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var u: Int =\
    \ 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int\
    \ = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c:\
    \ Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var\
    \ g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n   \
    \ var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n\
    \    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int =\
    \ 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int\
    \ = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z:\
    \ Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var\
    \ d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n   \
    \ var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n\
    \    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int =\
    \ 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int\
    \ = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w:\
    \ Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var\
    \ a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n   \
    \ var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n\
    \    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int =\
    \ 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int\
    \ = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t:\
    \ Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var\
    \ x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n   \
    \ var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp2kwjtzxn.swift:30:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:9:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:31:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:10:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:34:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:13:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:35:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:14:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:37:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:11:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:38:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:12:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:41:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:15:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:42:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:16:9:\
    \ note: 'u' previously declared here\n    var u: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:43:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:17:9:\
    \ note: 'v' previously declared here\n    var v: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:44:9:\
    \ error: invalid redeclaration of 'w'\n    var w: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:18:9:\
    \ note: 'w' previously declared here\n    var w: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:45:9:\
    \ error: invalid redeclaration of 'x'\n    var x: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:19:9:\
    \ note: 'x' previously declared here\n    var x: Int = 0\n  "
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    }\n    var max_factor = 0\n    var max_factor_index = 0\n    for i :=\
    \ 2; i <= n / 2; i += 1 {\n        if n % i == 0 {\n            max_factor = i\n\
    \            max_factor_index = i\n        }\n    }\n    return max_factor_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpbw19u38e.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n / 2; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpbw19u38e.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n / 2; i +=\
    \ 1 {\n           ^\n/tmp/tmpbw19u38e.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n / 2; i += 1 {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n \
    \   for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpvao791tx.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpvao791tx.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpvao791tx.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    // Sieve of Eratosthenes\n    var primes = make([]Int, n+1)\n\
    \    var primeFactors = make([]Int, n+1)\n    var primeFactorsLen = 0\n    var\
    \ primeFactorsMax = 0\n    var primeFactorsMaxLen = 0\n    var primeFactorsMaxLen2\
    \ = -1\n\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n\n    for i := 2; i < n; i++ {\n\
    \        if primes[i] == 0 {\n            continue\n        }\n\n        primeFactorsLen\
    \ = 0\n        primeFactorsMax = 0\n        primeFactorsMaxLen = 0\n        primeFactorsMaxLen2\
    \ = -1\n\n        for j := 2; j < i; j++ {\n            if primes[j] == 0 {\n\
    \                continue\n            }\n\n            if primes[j] > primeFactorsMax\
    \ {\n                primeFactorsMax = primes[j]\n                primeFactorsMaxLen\
    \ = j\n            }\n\n            if primes[j] > primeFactorsMaxLen2 {\n   \
    \             primeFactorsMaxLen2 = primes[j] // j\n            }\n\n        \
    \    if primes[j] > primeFactorsLen {\n                primeFactorsLen = primes[j]\
    \ // j\n            }\n        }\n\n        if primeFactorsLen > primeFactorsMaxLen\
    \ {\n            primeFactors = primes[:primeFactorsMaxLen]\n            primeFactorsLen\
    \ = primeFactorsMaxLen\n        }\n\n        if primeFactorsLen > primeFactorsMaxLen2\
    \ {\n            primeFactors = primes[:primeFactorsMaxLen2]\n            primeFactorsLen\
    \ = primeFactorsMaxLen2\n        }\n\n        if primeFactorsLen > 0 {\n     \
    \       primes[i] = (primes[i] * primeFactorsLen) / primeFactorsMax\n        }\n\
    \    }\n\n    return primeFactors[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpm1yq2kxg.swift:13:25: error: expected ',' separator\n    var primes\
    \ = make([]Int, n+1)\n                        ^\n                        ,\n/tmp/tmpm1yq2kxg.swift:14:31:\
    \ error: expected ',' separator\n    var primeFactors = make([]Int, n+1)\n   \
    \                           ^\n                              ,\n/tmp/tmpm1yq2kxg.swift:31:12:\
    \ error: expected type\n    for i := 2; i < n; i++ {\n           ^\n         \
    \   <#type#>\n/tmp/tmpm1yq2kxg.swift:31:12: error: expected 'in' after for-each\
    \ pattern\n    for i := 2; i < n; i++ {\n           ^\n/tmp/tmpm1yq2kxg.swift:31:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 2; i < n;\
    \ i++ {\n           ^\n/tmp/tmpm1yq2kxg.swift:41:16: error: expected type\n  \
    \      for j := 2; j < i; j++ {\n               ^\n                <#type#>\n\
    /tmp/tmpm1yq2kxg.swift:41:16: error: expected 'in' after for-each pattern\n  \
    \      for j := 2; j < i; j++ {\n               ^\n/tmp/tmpm1yq2kxg.swift:41:16:\
    \ error: expected Sequence expression for for-each loop\n        for j := 2; j\
    \ < i; j++ {\n               ^\n/tmp/tmpm1yq2kxg.swift:61:35: error: expected\
    \ expression in list of expressions\n            primeFactors = primes[:primeFactorsMaxLen]\n\
    \                                  ^\n/tmp/tmpm1yq2kxg.swift:66:35: error: expected\
    \ expression in list of expressions\n            primeFactors = primes[:primeFactorsMaxLen2]\n\
    \                                  ^\n/tmp/tmpm1yq2kxg.swift:13:18: error: cannot\
    \ find 'make' in scope\n    var primes = make([]Int, n+1)\n                 ^~~~\n\
    /tmp/tmpm1yq2kxg.swift:14:24: error: cannot find 'make' in scope\n    var primeFactors\
    \ = make([]Int, n+1)\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest = 1\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            largest = factor\n\
    \            break\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpq13980iy/tmpq13980iy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88a21b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88a1eb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88a1eb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88a1eaf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq13980iy                        0x000055b78e742335 <unavailable> + 4917

    5    libc.so.6                          0x00002b88a23a5460 __libc_start_main +
    245

    6    tmpq13980iy                        0x000055b78e741fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    var\
    \ factor = 2\n    while !maxFactorFound {\n        if n % factor == 0 {\n    \
    \        maxFactorFound = true\n            maxFactor = factor\n        }\n  \
    \      factor++\n    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp83n337h6.swift:19:15: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        factor++\n              ^~\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor: Int = 0\n\
    \    var max_factor_index: Int = 0\n    for factor in 2...n {\n        if n %\
    \ factor == 0 {\n            if factor > max_factor {\n                max_factor\
    \ = factor\n                max_factor_index = factor\n            }\n       \
    \ }\n    }\n    return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpzqu2jk_u/tmpzqu2jk_u.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b836e201c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b836def8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b836def8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b836def77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzqu2jk_u                        0x000055b95674c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b836e3ed460 __libc_start_main +
    245

    6    tmpzqu2jk_u                        0x000055b95674bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp3x_fg2uq/tmp3x_fg2uq.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1278d1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1278a16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1278a16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1278a157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3x_fg2uq                        0x0000555e6bf1e3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b1278f0b460 __libc_start_main +
    245

    6    tmp3x_fg2uq                        0x0000555e6bf1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpopls7net/tmpopls7net.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afecde50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afecdb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afecdb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afecdb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopls7net                        0x00005607c48cf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afece03c460 __libc_start_main +
    245

    6    tmpopls7net                        0x00005607c48cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         } else {\n                maxFactorFound = true\n                maxFactor\
    \ = factor\n            }\n        }\n    }\n    if maxFactorFound {\n       \
    \ return maxFactor\n    } else {\n        return n\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpl8hnxojq/tmpl8hnxojq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d3e4a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d3e19db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d3e19d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d3e19c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl8hnxojq                        0x000055f9506623b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b6d3e692460 __libc_start_main +
    245

    6    tmpl8hnxojq                        0x000055f950661fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest = 1\n    var\
    \ largestPrimeFactor = 1\n    for i := 2; i <= n / 2; i += 1 {\n        if n %\
    \ i == 0 {\n            if largestPrimeFactor == 1 {\n                largestPrimeFactor\
    \ = i\n            } else {\n                if largest < largestPrimeFactor {\n\
    \                    largest = largestPrimeFactor\n                }\n       \
    \         largestPrimeFactor = i\n            }\n        }\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpfrv4ajc2.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n / 2; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpfrv4ajc2.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n / 2; i +=\
    \ 1 {\n           ^\n/tmp/tmpfrv4ajc2.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n / 2; i += 1 {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let maxPrimeFactor = Int(sqrt(Double(n)))\n\
    \    var factor = 1\n    for factor <= maxPrimeFactor {\n        if n % factor\
    \ == 0 {\n            break\n        }\n    }\n    return factor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpb7yz8ofo.swift:10:16: error: expected 'in' after for-each pattern\n\
    \    for factor <= maxPrimeFactor {\n               ^\n/tmp/tmpb7yz8ofo.swift:10:16:\
    \ error: unary operator cannot be separated from its operand\n    for factor <=\
    \ maxPrimeFactor {\n               ^ ~\n                 \n/tmp/tmpb7yz8ofo.swift:8:30:\
    \ error: cannot find 'sqrt' in scope\n    let maxPrimeFactor = Int(sqrt(Double(n)))\n\
    \                             ^~~~\n/tmp/tmpb7yz8ofo.swift:10:16: error: '<='\
    \ is not a prefix unary operator\n    for factor <= maxPrimeFactor {\n       \
    \        ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpopls7net/tmpopls7net.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afecde50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afecdb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afecdb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afecdb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopls7net                        0x00005607c48cf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afece03c460 __libc_start_main +
    245

    6    tmpopls7net                        0x00005607c48cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int = 0\n \
    \   var i: Int = 0\n    var j: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n\
    \    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var u: Int =\
    \ 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int\
    \ = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c:\
    \ Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var\
    \ g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n   \
    \ var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n\
    \    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int =\
    \ 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int\
    \ = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z:\
    \ Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var\
    \ d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n   \
    \ var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n\
    \    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int =\
    \ 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int\
    \ = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w:\
    \ Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var\
    \ a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n   \
    \ var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n\
    \    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int =\
    \ 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int\
    \ = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t:\
    \ Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var\
    \ x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n   \
    \ var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp2kwjtzxn.swift:30:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:9:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:31:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:10:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:34:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:13:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:35:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:14:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:37:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:11:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:38:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:12:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:41:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:15:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:42:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:16:9:\
    \ note: 'u' previously declared here\n    var u: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:43:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:17:9:\
    \ note: 'v' previously declared here\n    var v: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:44:9:\
    \ error: invalid redeclaration of 'w'\n    var w: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:18:9:\
    \ note: 'w' previously declared here\n    var w: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:45:9:\
    \ error: invalid redeclaration of 'x'\n    var x: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:19:9:\
    \ note: 'x' previously declared here\n    var x: Int = 0\n  "
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpopls7net/tmpopls7net.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afecde50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afecdb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afecdb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afecdb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopls7net                        0x00005607c48cf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afece03c460 __libc_start_main +
    245

    6    tmpopls7net                        0x00005607c48cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    var\
    \ i = 2\n    while i <= n {\n        if n % i == 0 {\n            if maxFactorFound\
    \ {\n                return maxFactor\n            }\n            maxFactor =\
    \ i\n            maxFactorFound = true\n        }\n        i += 1\n    }\n   \
    \ if maxFactorFound {\n        return maxFactor\n    }\n    return n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp35w3ezn2/tmp35w3ezn2.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6503b35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b650382cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b650382c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b650382b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35w3ezn2                        0x0000560b2a745245 <unavailable> + 4677

    5    libc.so.6                          0x00002b6503d21460 __libc_start_main +
    245

    6    tmp35w3ezn2                        0x0000560b2a744ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest = 1\n    var\
    \ factor = 2\n    while n > 1 {\n        if n % factor == 0 {\n            largest\
    \ = factor\n        }\n        n /= factor\n        factor += 1\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpady92efs.swift:14:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= factor\n        ~ ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n \
    \   for i := 2; i < n; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp5stzhygy.swift:13:12: error: expected type\n    for i := 2; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp5stzhygy.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i < n; i++ {\n\
    \           ^\n/tmp/tmp5stzhygy.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor = 1\n    var max_factor_index = 0\n    var max_factor_value\
    \ = 1\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            factors\
    \ := factors(n)\n            if factors.count > max_factor_index {\n         \
    \       max_factor_index = factors.count\n                max_factor_value = i\n\
    \            }\n        }\n    }\n    return max_factor_value\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmphdcflw_b.swift:14:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmphdcflw_b.swift:14:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmphdcflw_b.swift:14:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n/tmp/tmphdcflw_b.swift:16:20:\
    \ error: consecutive statements on a line must be separated by ';'\n         \
    \   factors := factors(n)\n                   ^\n                   ;\n/tmp/tmphdcflw_b.swift:16:21:\
    \ error: expected expression\n            factors := factors(n)\n            \
    \        ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return 0\n            }\n            maxFactorFound = true\n\
    \            maxFactor = factor\n        }\n    }\n    if maxFactorFound {\n \
    \       return maxFactor\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp4n06mvi0/tmp4n06mvi0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44c25cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44c22c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44c22c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44c22c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4n06mvi0                        0x0000565323226335 <unavailable> + 4917

    5    libc.so.6                          0x00002b44c27bb460 __libc_start_main +
    245

    6    tmp4n06mvi0                        0x0000565323225fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor = 1\n    var max_factor_index = 0\n    for i :=\
    \ 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor < i {\n\
    \                max_factor = i\n                max_factor_index = i\n      \
    \      }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp4mmdpp9z.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp4mmdpp9z.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmp4mmdpp9z.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int = 0\n \
    \   var i: Int = 0\n    var j: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n\
    \    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var u: Int =\
    \ 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int\
    \ = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c:\
    \ Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var\
    \ g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n   \
    \ var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n\
    \    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int =\
    \ 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int\
    \ = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z:\
    \ Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var\
    \ d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n   \
    \ var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n\
    \    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int =\
    \ 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int\
    \ = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w:\
    \ Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var\
    \ a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n   \
    \ var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n\
    \    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int =\
    \ 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int\
    \ = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t:\
    \ Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var\
    \ x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n   \
    \ var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp2kwjtzxn.swift:30:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:9:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:31:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:10:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:34:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:13:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:35:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:14:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:37:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:11:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:38:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:12:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:41:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:15:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:42:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:16:9:\
    \ note: 'u' previously declared here\n    var u: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:43:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:17:9:\
    \ note: 'v' previously declared here\n    var v: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:44:9:\
    \ error: invalid redeclaration of 'w'\n    var w: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:18:9:\
    \ note: 'w' previously declared here\n    var w: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:45:9:\
    \ error: invalid redeclaration of 'x'\n    var x: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:19:9:\
    \ note: 'x' previously declared here\n    var x: Int = 0\n  "
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor: Int = 0\n\
    \    var max_factor_index: Int = 0\n    for i := 2; i <= n/2; i += 1 {\n     \
    \   if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpiimx55cz.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n/2; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpiimx55cz.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n/2; i +=\
    \ 1 {\n           ^\n/tmp/tmpiimx55cz.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n/2; i += 1 {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int = 0\n \
    \   var i: Int = 0\n    var j: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n\
    \    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var u: Int =\
    \ 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int\
    \ = 0\n    var z: Int = 0\n    var w: Int = 0\n    var i: Int = 0\n    var j:\
    \ Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var m: Int = 0\n    var\
    \ n: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n   \
    \ var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n\
    \    var w: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var p: Int =\
    \ 0\n    var q: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int\
    \ = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x:\
    \ Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var w: Int = 0\n    var\
    \ i: Int = 0\n    var j: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n   \
    \ var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n\
    \    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int =\
    \ 0\n    var z: Int = 0\n    var w: Int = 0\n    var i: Int = 0\n    var j: Int\
    \ = 0\n    var p: Int = 0\n    var q: Int = 0\n    var m: Int = 0\n    var n:\
    \ Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var\
    \ w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n   \
    \ var w: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var p: Int = 0\n\
    \    var q: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int =\
    \ 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int\
    \ = 0\n    var y: Int = 0\n    var z: Int = 0\n    var w: Int = 0\n    var i:\
    \ Int = 0\n    var j: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var\
    \ m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n   \
    \ var v: Int = 0\n    var w\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpbqb7atvw.swift:22:9: error: invalid redeclaration of 'w'\n    var\
    \ w: Int = 0\n        ^\n/tmp/tmpbqb7atvw.swift:18:9: note: 'w' previously declared\
    \ here\n    var w: Int = 0\n        ^\n/tmp/tmpbqb7atvw.swift:23:9: error: invalid\
    \ redeclaration of 'i'\n    var i: Int = 0\n        ^\n/tmp/tmpbqb7atvw.swift:9:9:\
    \ note: 'i' previously declared here\n    var i: Int = 0\n        ^\n/tmp/tmpbqb7atvw.swift:24:9:\
    \ error: invalid redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmpbqb7atvw.swift:10:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmpbqb7atvw.swift:25:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmpbqb7atvw.swift:11:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmpbqb7atvw.swift:26:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmpbqb7atvw.swift:12:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmpbqb7atvw.swift:27:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpbqb7atvw.swift:13:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmpbqb7atvw.swift:28:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmpbqb7atvw.swift:14:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmpbqb7atvw.swift:29:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmpbqb7atvw.swift:15:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmpbqb7atvw.swift:30:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmpbqb7atvw.swift:16:9:\
    \ note: 'u' previously declared here\n    var u: Int = 0\n        ^\n/tmp/tmpbqb7atvw.swift:31:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int = 0\n        ^\n/tmp/tmpbqb7atvw.swift:17:9:\
    \ note: 'v' previously declared here\n    var v: Int = 0\n        ^\n/tmp/tmpbqb7atvw.swift:32:9:\
    \ error: invalid redeclaration of 'w'\n    var w: Int = 0\n        ^\n/tmp/tmpbqb7atvw.swift:18:9:\
    \ note: 'w' previously declared here\n    var w: Int = 0\n  "
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor: Int = 0\n\
    \    var max_factor_index: Int = 0\n    for i := 2; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            if max_factor < i {\n                max_factor =\
    \ i\n                max_factor_index = i\n            }\n        }\n    }\n \
    \   return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpnh0yh286.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpnh0yh286.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpnh0yh286.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound = false\n\n  \
    \  for factor in 2..<n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpw9f73q7n/tmpw9f73q7n.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2add3f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2add0ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2add0ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2add0eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw9f73q7n                        0x00005625695823b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b2add5e1460 __libc_start_main +
    245

    6    tmpw9f73q7n                        0x0000562569581fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor: Int = 0\n\
    \    var max_factor_index: Int = 0\n    for i := 2; i <= n/2; i += 1 {\n     \
    \   if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp1j3tbepq.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n/2; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp1j3tbepq.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n/2; i +=\
    \ 1 {\n           ^\n/tmp/tmp1j3tbepq.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n/2; i += 1 {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int = 0\n \
    \   var i: Int = 0\n    var j: Int = 0\n    var limit: Int = n\n\n    while limit\
    \ > 1 {\n        i += 1\n        j += 1\n        limit = limit / 2\n    }\n\n\
    \    for i = 2; i <= limit; i++ {\n        if n % i == 0 {\n            factor\
    \ = i\n            break\n        }\n    }\n\n    return factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpaeobz_qv.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= limit; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor = 1\n    var max_factor_index = 0\n    for i :=\
    \ 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor < i {\n\
    \                max_factor = i\n                max_factor_index = i\n      \
    \      }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp4mmdpp9z.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp4mmdpp9z.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmp4mmdpp9z.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmphf2fksw2/tmphf2fksw2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76f8617c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76f830eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76f830e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76f830d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphf2fksw2                        0x000055bd2bb6c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b76f8803460 __libc_start_main +
    245

    6    tmphf2fksw2                        0x000055bd2bb6bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int = 0\n \
    \   var i: Int = 0\n    var j: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n\
    \    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int =\
    \ 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int\
    \ = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a:\
    \ Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var\
    \ e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n   \
    \ var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n\
    \    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int =\
    \ 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int\
    \ = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y:\
    \ Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var\
    \ c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n   \
    \ var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n\
    \    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int =\
    \ 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int\
    \ = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w:\
    \ Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var\
    \ a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n   \
    \ var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n\
    \    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int =\
    \ 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int\
    \ = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u:\
    \ Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var\
    \ y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n   \
    \ var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n\
    \    var g: Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp9cj9mqh1.swift:32:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:9:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:33:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:10:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:36:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:11:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:37:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:12:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:38:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:13:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:39:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:14:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:40:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:15:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:41:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:16:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:42:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:17:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:43:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:18:9:\
    \ note: 'u' previously declared here\n    var u: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:44:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:19:9:\
    \ note: 'v' previously declared here\n    var v: Int = 0\n  "
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         } else {\n                maxFactorFound = true\n                maxFactor\
    \ = factor\n            }\n        }\n    }\n    if maxFactorFound {\n       \
    \ return maxFactor\n    } else {\n        return n\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpl8hnxojq/tmpl8hnxojq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d3e4a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d3e19db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d3e19d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d3e19c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl8hnxojq                        0x000055f9506623b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b6d3e692460 __libc_start_main +
    245

    6    tmpl8hnxojq                        0x000055f950661fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n \
    \   for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpndwpkpob.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n/2; i++ {\n           ^\n            <#type#>\n/tmp/tmpndwpkpob.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n/2; i++ {\n\
    \           ^\n/tmp/tmpndwpkpob.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n/2; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n \
    \   for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpvao791tx.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpvao791tx.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpvao791tx.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n \
    \   for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpvao791tx.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpvao791tx.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpvao791tx.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor: Int = 0\n\
    \    var max_factor_index: Int = 0\n    for factor in 2...n {\n        if n %\
    \ factor == 0 {\n            if factor > max_factor {\n                max_factor\
    \ = factor\n                max_factor_index = factor\n            }\n       \
    \ }\n    }\n    return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpzqu2jk_u/tmpzqu2jk_u.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b836e201c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b836def8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b836def8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b836def77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzqu2jk_u                        0x000055b95674c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b836e3ed460 __libc_start_main +
    245

    6    tmpzqu2jk_u                        0x000055b95674bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound = false\n    var\
    \ factor = 2\n\n    while !maxFactorFound {\n        if n % factor == 0 {\n  \
    \          maxFactorFound = true\n            maxFactor = factor\n        }\n\
    \        factor++\n    }\n\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpjeol0xbp.swift:21:15: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        factor++\n              ^~\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int = 0\n \
    \   var i: Int = 0\n    var j: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n\
    \    var m: Int = 0\n    var n: Int = 0\n    var m: Int = 0\n    var n: Int =\
    \ 0\n    var m: Int = 0\n    var n: Int = 0\n    var m: Int = 0\n    var n: Int\
    \ = 0\n    var m: Int = 0\n    var n: Int = 0\n    var m: Int = 0\n    var n:\
    \ Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var m: Int = 0\n    var\
    \ n: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var m: Int = 0\n   \
    \ var n: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var m: Int = 0\n\
    \    var n: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var m: Int =\
    \ 0\n    var n: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var m: Int\
    \ = 0\n    var n: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var m:\
    \ Int = 0\n    var n: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var\
    \ m: Int = 0\n    var n: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n   \
    \ var m: Int = 0\n    var n: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n\
    \    var m: Int = 0\n    var n: Int = 0\n    var m: Int = 0\n    var n: Int =\
    \ 0\n    var m: Int = 0\n    var n: Int = 0\n    var m: Int = 0\n    var n: Int\
    \ = 0\n    var m: Int = 0\n    var n: Int = 0\n    var m: Int = 0\n    var n:\
    \ Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var m: Int = 0\n    var\
    \ n: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var m: Int = 0\n   \
    \ var n: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var m: Int = 0\n\
    \    var n: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var m: Int =\
    \ 0\n    var n: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var m: Int\
    \ = 0\n    var n: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var m:\
    \ Int = 0\n    var n: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var\
    \ m: Int = 0\n    var n: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n   \
    \ var m: Int = 0\n    var n: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n\
    \    var m: Int = 0\n    var n: Int = 0\n    var m: Int = 0\n    var n: Int =\
    \ 0\n    var m: Int = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpwnzfvkkc.swift:15:9: error: invalid redeclaration of 'm'\n    var\
    \ m: Int = 0\n        ^\n/tmp/tmpwnzfvkkc.swift:13:9: note: 'm' previously declared\
    \ here\n    var m: Int = 0\n        ^\n/tmp/tmpwnzfvkkc.swift:16:9: error: invalid\
    \ redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmpwnzfvkkc.swift:14:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmpwnzfvkkc.swift:17:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpwnzfvkkc.swift:13:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmpwnzfvkkc.swift:18:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmpwnzfvkkc.swift:14:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmpwnzfvkkc.swift:19:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpwnzfvkkc.swift:13:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmpwnzfvkkc.swift:20:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmpwnzfvkkc.swift:14:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmpwnzfvkkc.swift:21:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpwnzfvkkc.swift:13:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmpwnzfvkkc.swift:22:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmpwnzfvkkc.swift:14:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmpwnzfvkkc.swift:23:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpwnzfvkkc.swift:13:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmpwnzfvkkc.swift:24:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmpwnzfvkkc.swift:14:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmpwnzfvkkc.swift:25:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpwnzfvkkc.swift:13:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n "
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor = 1\n    var max_factor_index = 0\n    for i :=\
    \ 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor < i {\n\
    \                max_factor = i\n                max_factor_index = i\n      \
    \      }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp4mmdpp9z.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp4mmdpp9z.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmp4mmdpp9z.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var max_factor = 1\n    var max_factor_index = 0\n    var max_factor_count\
    \ = 0\n\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            factors\
    \ := factors(i)\n            count := factors.count\n            if count > max_factor_count\
    \ {\n                max_factor_count = count\n                max_factor = i\n\
    \                max_factor_index = factors.index\n            }\n        }\n\
    \    }\n\n    return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpvq0vw1nu.swift:16:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpvq0vw1nu.swift:16:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpvq0vw1nu.swift:16:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n/tmp/tmpvq0vw1nu.swift:18:20:\
    \ error: consecutive statements on a line must be separated by ';'\n         \
    \   factors := factors(i)\n                   ^\n                   ;\n/tmp/tmpvq0vw1nu.swift:18:21:\
    \ error: expected expression\n            factors := factors(i)\n            \
    \        ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest = 1\n    var\
    \ prime = 1\n    var factor = 2\n    for _ in 0..<n {\n        if n % factor ==\
    \ 0 {\n            prime *= factor\n            n /= factor\n        } else {\n\
    \            largest = factor\n            factor++\n        }\n    }\n    if\
    \ n > 1 {\n        largest *= prime\n    }\n    return largest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpxlzruv_c.swift:14:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= factor\n            ~ ^\n\
    /tmp/tmpxlzruv_c.swift:17:19: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n            factor++\n                  ^~\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2..Int(sqrt(Double(n))) {\n        if n % factor == 0 {\n        \
    \    if maxFactorFound {\n                return 0\n            }\n          \
    \  maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n \
    \   if maxFactorFound {\n        return maxFactor\n    }\n    return 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmphxotv17t.swift:13:20: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for factor in 2..Int(sqrt(Double(n))) {\n         \
    \          ^~\n                   ...\n/tmp/tmphxotv17t.swift:13:26: error: cannot\
    \ find 'sqrt' in scope\n    for factor in 2..Int(sqrt(Double(n))) {\n        \
    \                 ^~~~\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            if factor > maxFactor {\n                maxFactor =\
    \ factor\n                maxFactorFound = true\n            }\n        }\n  \
    \  }\n    if maxFactorFound {\n        return maxFactor\n    }\n    return n\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp1bkqmggt/tmp1bkqmggt.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe1e6b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe1e3acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe1e3ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe1e3ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1bkqmggt                        0x00005562075493b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afe1e8a1460 __libc_start_main +
    245

    6    tmp1bkqmggt                        0x0000556207548fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n\
    \    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpp153kdai/tmpp153kdai.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad55369c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad55060b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad55060988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad5505f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp153kdai                        0x00005612d97203b0 <unavailable> + 5040

    5    libc.so.6                          0x00002aad55555460 __libc_start_main +
    245

    6    tmpp153kdai                        0x00005612d971ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors = prime_factors(n)\n\
    \    return factors.reduce(max) { $1 * $2 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpqzawuif4.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpqzawuif4.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $1 * $2 }\n                          ^\nSwift.max:1:24: note: in call to function\
    \ 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors = prime_factors(n)\n\
    \    return factors.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp4sxhn6ji.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmp4sxhn6ji.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor = 1\n    var max_factor_index = 0\n    for i :=\
    \ 2; i < n; i++ {\n        if n % i == 0 {\n            if max_factor < i {\n\
    \                max_factor = i\n                max_factor_index = i\n      \
    \      }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpf2lqy562.swift:13:12: error: expected type\n    for i := 2; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpf2lqy562.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i < n; i++ {\n\
    \           ^\n/tmp/tmpf2lqy562.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor = 1\n  \
    \  var max_factor_index = 0\n    for i := 2; i <= n/max_factor; i++ {\n      \
    \  if n % i == 0 {\n            max_factor_index = i\n            max_factor =\
    \ i\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpe1xkfv1n.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n/max_factor; i++ {\n           ^\n            <#type#>\n/tmp/tmpe1xkfv1n.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n/max_factor;\
    \ i++ {\n           ^\n/tmp/tmpe1xkfv1n.swift:10:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 2; i <= n/max_factor; i++ {\n   \
    \        ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2..<n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpp4chfmjf/tmpp4chfmjf.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2ec5bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2ec2b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2ec2b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2ec2b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp4chfmjf                        0x0000557a275f23b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae2ec7a7460 __libc_start_main +
    245

    6    tmpp4chfmjf                        0x0000557a275f1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    var factor = 2\n    var factorFound = false\n\
    \    while !maxFactorFound && !factorFound {\n        if n % factor == 0 {\n \
    \           maxFactorFound = true\n            maxFactor = factor\n        } else\
    \ {\n            factorFound = true\n            factor += 1\n        }\n    }\n\
    \    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpf6lnjuu4/tmpf6lnjuu4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9a4a08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9a46ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9a46ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9a46fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf6lnjuu4                        0x0000557e943f4245 <unavailable> + 4677

    5    libc.so.6                          0x00002ac9a4bf4460 __libc_start_main +
    245

    6    tmpf6lnjuu4                        0x0000557e943f3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 3\n    }\n    if n % 2 == 0 {\n        return largest_prime_factor(n\
    \ / 2)\n    }\n    var max_factor = 2\n    var max_factor_count = 1\n    var max_factor_index\
    \ = 0\n    for i := 3; i <= n; i++ {\n        if n % i == 0 {\n            if\
    \ max_factor_count < i {\n                max_factor_count = i\n             \
    \   max_factor_index = i\n            }\n        }\n    }\n    return max_factor_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpl6rrv9bc.swift:23:12: error: expected type\n    for i := 3; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpl6rrv9bc.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= n; i++ {\n\
    \           ^\n/tmp/tmpl6rrv9bc.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 3; i <= n; i++ {\n           ^\n/tmp/tmpl6rrv9bc.swift:18:37:\
    \ error: missing argument label 'n:' in call\n        return largest_prime_factor(n\
    \ / 2)\n                                    ^\n                              \
    \      n: \n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int = 0\n \
    \   var i: Int = 0\n    var j: Int = 0\n    var m: Int = 0\n    var p: Int = 0\n\
    \    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int =\
    \ 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int\
    \ = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b:\
    \ Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var\
    \ f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n   \
    \ var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n\
    \    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int =\
    \ 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int\
    \ = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y:\
    \ Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var\
    \ c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n   \
    \ var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n\
    \    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int =\
    \ 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int\
    \ = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v:\
    \ Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var\
    \ z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n   \
    \ var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n\
    \    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int =\
    \ 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int\
    \ = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s:\
    \ Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var\
    \ w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n   \
    \ var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpu3lcwdor.swift:31:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:9:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:32:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:10:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:35:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:11:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:38:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:12:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:39:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:13:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:40:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:14:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:41:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:15:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:42:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:16:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:43:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:17:9:\
    \ note: 'u' previously declared here\n    var u: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:44:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:18:9:\
    \ note: 'v' previously declared here\n    var v: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:45:9:\
    \ error: invalid redeclaration of 'w'\n    var w: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:19:9:\
    \ note: 'w' previously declared here\n    var w: Int = 0\n  "
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var factor: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n\
    \    var p: Int = 0\n    var q: Int = 0\n    var m: Int = 0\n    var n: Int =\
    \ 0\n    var d: Int = 0\n    var e: Int = 0\n    var t: Int = 0\n    var u: Int\
    \ = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y:\
    \ Int = 0\n    var z: Int = 0\n    var w1: Int = 0\n    var w2: Int = 0\n    var\
    \ w3: Int = 0\n    var w4: Int = 0\n    var w5: Int = 0\n    var w6: Int = 0\n\
    \    var w7: Int = 0\n    var w8: Int = 0\n    var w9: Int = 0\n    var w10: Int\
    \ = 0\n    var w11: Int = 0\n    var w12: Int = 0\n    var w13: Int = 0\n    var\
    \ w14: Int = 0\n    var w15: Int = 0\n    var w16: Int = 0\n    var w17: Int =\
    \ 0\n    var w18: Int = 0\n    var w19: Int = 0\n    var w20: Int = 0\n    var\
    \ w21: Int = 0\n    var w22: Int = 0\n    var w23: Int = 0\n    var w24: Int =\
    \ 0\n    var w25: Int = 0\n    var w26: Int = 0\n    var w27: Int = 0\n    var\
    \ w28: Int = 0\n    var w29: Int = 0\n    var w30: Int = 0\n    var w31: Int =\
    \ 0\n    var w32: Int = 0\n    var w33: Int = 0\n    var w34: Int = 0\n    var\
    \ w35: Int = 0\n    var w36: Int = 0\n    var w37: Int = 0\n    var w38: Int =\
    \ 0\n    var w39: Int = 0\n    var w40: Int = 0\n    var w41: Int = 0\n    var\
    \ w42: Int = 0\n    var w43: Int = 0\n    var w44: Int = 0\n    var w45: Int =\
    \ 0\n    var w46: Int = 0\n    var w47: Int = 0\n    var w48: Int = 0\n    var\
    \ w49: Int = 0\n    var w50: Int = 0\n    var w51: Int = 0\n    var w52: Int =\
    \ 0\n    var w53: Int = 0\n    var w54: Int = 0\n    var w55: Int = 0\n    var\
    \ w56: Int = 0\n    var w57: Int = 0\n    var w58: Int = 0\n    var w59: Int =\
    \ 0\n    var w60: Int = 0\n    var w\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpm0dexlp2.swift:87:9: error: type annotation missing in pattern\n\
    \    var w\n        ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int = 0\n \
    \   var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var p: Int = 0\n\
    \    var q: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int =\
    \ 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int\
    \ = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b:\
    \ Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var\
    \ f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n   \
    \ var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n\
    \    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int =\
    \ 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int\
    \ = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y:\
    \ Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var\
    \ c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n   \
    \ var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n\
    \    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int =\
    \ 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int\
    \ = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v:\
    \ Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var\
    \ z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n   \
    \ var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n\
    \    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int =\
    \ 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int\
    \ = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s:\
    \ Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var\
    \ w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n   \
    \ var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpi0pxp9wf.swift:31:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmpi0pxp9wf.swift:9:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmpi0pxp9wf.swift:32:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmpi0pxp9wf.swift:10:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmpi0pxp9wf.swift:33:9:\
    \ error: invalid redeclaration of 'k'\n    var k: Int = 0\n        ^\n/tmp/tmpi0pxp9wf.swift:11:9:\
    \ note: 'k' previously declared here\n    var k: Int = 0\n        ^\n/tmp/tmpi0pxp9wf.swift:35:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpi0pxp9wf.swift:14:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmpi0pxp9wf.swift:36:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmpi0pxp9wf.swift:15:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmpi0pxp9wf.swift:38:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmpi0pxp9wf.swift:12:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmpi0pxp9wf.swift:39:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmpi0pxp9wf.swift:13:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmpi0pxp9wf.swift:42:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmpi0pxp9wf.swift:16:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmpi0pxp9wf.swift:43:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmpi0pxp9wf.swift:17:9:\
    \ note: 'u' previously declared here\n    var u: Int = 0\n        ^\n/tmp/tmpi0pxp9wf.swift:44:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int = 0\n        ^\n/tmp/tmpi0pxp9wf.swift:18:9:\
    \ note: 'v' previously declared here\n    var v: Int = 0\n        ^\n/tmp/tmpi0pxp9wf.swift:45:9:\
    \ error: invalid redeclaration of 'w'\n    var w: Int = 0\n        ^\n/tmp/tmpi0pxp9wf.swift:19:9:\
    \ note: 'w' previously declared here\n    var w: Int = 0\n  "
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor: Int = 0\n\
    \    var max_factor_index: Int = 0\n    for i := 2; i <= n / 2; i += 1 {\n   \
    \     if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpo9_lqwyn.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n / 2; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpo9_lqwyn.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n / 2; i +=\
    \ 1 {\n           ^\n/tmp/tmpo9_lqwyn.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n / 2; i += 1 {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    var i = 2\n    while i < n && !maxFactorFound\
    \ {\n        if n % i == 0 {\n            maxFactorFound = true\n            maxFactor\
    \ = i\n        }\n        i += 1\n    }\n    return maxFactor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp2nbmkj0y/tmp2nbmkj0y.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9eeac29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9eea920b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9eea920988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9eea91f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2nbmkj0y                        0x00005650e354a245 <unavailable> + 4677

    5    libc.so.6                          0x00002b9eeae15460 __libc_start_main +
    245

    6    tmp2nbmkj0y                        0x00005650e3549ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor = 1\n    var max_factor_index = 0\n    for i :=\
    \ 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor < i {\n\
    \                max_factor = i\n                max_factor_index = i\n      \
    \      }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp4mmdpp9z.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp4mmdpp9z.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmp4mmdpp9z.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int = 0\n \
    \   var i: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var m: Int = 0\n\
    \    var n: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var t: Int =\
    \ 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int\
    \ = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m:\
    \ Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var\
    \ m: Int = 0\n    var n: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n   \
    \ var t: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n\
    \    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int =\
    \ 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int\
    \ = 0\n    var m: Int = 0\n    var n: Int = 0\n    var d: Int = 0\n    var e:\
    \ Int = 0\n    var t: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var\
    \ h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n   \
    \ var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n\
    \    var q: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var d: Int =\
    \ 0\n    var e: Int = 0\n    var t: Int = 0\n    var f: Int = 0\n    var g: Int\
    \ = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k:\
    \ Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var\
    \ p: Int = 0\n    var q: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n   \
    \ var d: Int = 0\n    var e: Int = 0\n    var t: Int = 0\n    var f: Int = 0\n\
    \    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int =\
    \ 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int\
    \ = 0\n    var p: Int = 0\n    var q: Int = 0\n    var m: Int = 0\n    var n:\
    \ Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var t: Int = 0\n    var\
    \ f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n   \
    \ var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n\
    \    var n: Int = 0\n    var p: Int\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpxeimugfr.swift:20:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmpxeimugfr.swift:9:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmpxeimugfr.swift:24:9: error: invalid\
    \ redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpxeimugfr.swift:12:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmpxeimugfr.swift:25:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmpxeimugfr.swift:13:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmpxeimugfr.swift:26:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmpxeimugfr.swift:10:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmpxeimugfr.swift:27:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmpxeimugfr.swift:11:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmpxeimugfr.swift:28:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpxeimugfr.swift:12:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmpxeimugfr.swift:29:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmpxeimugfr.swift:13:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmpxeimugfr.swift:30:9:\
    \ error: invalid redeclaration of 'd'\n    var d: Int = 0\n        ^\n/tmp/tmpxeimugfr.swift:14:9:\
    \ note: 'd' previously declared here\n    var d: Int = 0\n        ^\n/tmp/tmpxeimugfr.swift:31:9:\
    \ error: invalid redeclaration of 'e'\n    var e: Int = 0\n        ^\n/tmp/tmpxeimugfr.swift:15:9:\
    \ note: 'e' previously declared here\n    var e: Int = 0\n        ^\n/tmp/tmpxeimugfr.swift:32:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmpxeimugfr.swift:16:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmpxeimugfr.swift:33:9:\
    \ error: invalid redeclaration of 'f'\n    var f: Int = 0\n        ^\n/tmp/tmpxeimugfr.swift:17:9:\
    \ note: 'f' previously declared here\n    var f: Int = 0\n  "
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            if factor > maxFactor {\n                maxFactor =\
    \ factor\n                maxFactorFound = true\n            }\n        }\n  \
    \  }\n    if maxFactorFound {\n        return maxFactor\n    }\n    return n\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp1bkqmggt/tmp1bkqmggt.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe1e6b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe1e3acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe1e3ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe1e3ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1bkqmggt                        0x00005562075493b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afe1e8a1460 __libc_start_main +
    245

    6    tmp1bkqmggt                        0x0000556207548fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest = 1\n    var\
    \ factor = 2\n    while n > 1 {\n        if n % factor == 0 {\n            largest\
    \ = factor\n        }\n        n /= factor\n        factor += 1\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpady92efs.swift:14:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= factor\n        ~ ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n \
    \   for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpvao791tx.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpvao791tx.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpvao791tx.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let maxPrime = Int(sqrt(Double(n)))\n\
    \    var factor = 1\n    for prime in 2...maxPrime {\n        if n % prime ==\
    \ 0 {\n            factor *= prime\n            n /= prime\n        }\n    }\n\
    \    return factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpxlqpc7oz.swift:8:24: error: cannot find 'sqrt' in scope\n    let\
    \ maxPrime = Int(sqrt(Double(n)))\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound = false\n    var\
    \ maxFactorIndex = Int()\n\n    for i := 2; i <= n; i++ {\n        if n % i ==\
    \ 0 {\n            if maxFactorFound {\n                maxFactorIndex = i\n \
    \           }\n            if maxFactorIndex == i {\n                maxFactorFound\
    \ = true\n            }\n            if maxFactorIndex > i {\n               \
    \ maxFactor = i\n            }\n        }\n    }\n\n    if maxFactorFound {\n\
    \        return maxFactor\n    }\n\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp6gvy42ne.swift:16:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp6gvy42ne.swift:16:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmp6gvy42ne.swift:16:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest = 1\n    var\
    \ largestPrimeFactor = 1\n    for i := 2; i <= n / 2; i += 1 {\n        if n %\
    \ i == 0 {\n            largestPrimeFactor = i\n            if largest < largestPrimeFactor\
    \ {\n                largest = largestPrimeFactor\n            }\n        }\n\
    \    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpcyoqzwjo.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n / 2; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpcyoqzwjo.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n / 2; i +=\
    \ 1 {\n           ^\n/tmp/tmpcyoqzwjo.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n / 2; i += 1 {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var factor: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n\
    \    var m: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int =\
    \ 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int\
    \ = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z:\
    \ Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var\
    \ d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n   \
    \ var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n\
    \    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int =\
    \ 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int\
    \ = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w:\
    \ Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var\
    \ a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n   \
    \ var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n\
    \    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int =\
    \ 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int\
    \ = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t:\
    \ Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var\
    \ x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n   \
    \ var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n\
    \    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int =\
    \ 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int\
    \ = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q:\
    \ Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var\
    \ u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n   \
    \ var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n\
    \    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpi8aqzbiq.swift:106:8: error: expected pattern\n    var \n     \
    \  ^\n/tmp/tmpi8aqzbiq.swift:34:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:12:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:35:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:13:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:38:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:14:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:41:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:15:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:42:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:16:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:43:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:17:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:44:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:18:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:45:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:19:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:46:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:20:9:\
    \ note: 'u' previously declared here\n    var u: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:47:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:21:9:\
    \ note: 'v' previously declared here\n    var v: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:48:9:\
    \ error: invalid redeclaration of 'w'\n    var w: Int = 0\n        ^\n/tmp/tmpi8aq"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n \
    \   var i: Int = 0\n    for i = 2; i <= n / 2; i += 1 {\n        if n % i == 0\
    \ {\n            if max_factor < i {\n                max_factor = i\n       \
    \         max_factor_index = i\n            }\n        }\n    }\n    return max_factor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpyzxskwsc.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= n / 2; i += 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor = 0\n  \
    \  var max_factor_index = 0\n    for i := 2; i <= n; i++ {\n        if n % i ==\
    \ 0 {\n            if max_factor < i {\n                max_factor = i\n     \
    \           max_factor_index = i\n            }\n        }\n    }\n    return\
    \ max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpaj00_ro8.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpaj00_ro8.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpaj00_ro8.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp3x_fg2uq/tmp3x_fg2uq.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1278d1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1278a16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1278a16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1278a157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3x_fg2uq                        0x0000555e6bf1e3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b1278f0b460 __libc_start_main +
    245

    6    tmp3x_fg2uq                        0x0000555e6bf1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var max_factor = 1\n    var max_factor_index = 0\n    var max_factor_value\
    \ = 1\n\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            factors\
    \ := factors(i)\n            if factors.count > max_factor.count {\n         \
    \       max_factor = factors\n                max_factor_index = i\n         \
    \       max_factor_value = n\n            }\n        }\n    }\n\n    return max_factor_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp6ymt_1u4.swift:16:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp6ymt_1u4.swift:16:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmp6ymt_1u4.swift:16:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n/tmp/tmp6ymt_1u4.swift:18:20:\
    \ error: consecutive statements on a line must be separated by ';'\n         \
    \   factors := factors(i)\n                   ^\n                   ;\n/tmp/tmp6ymt_1u4.swift:18:21:\
    \ error: expected expression\n            factors := factors(i)\n            \
    \        ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpopls7net/tmpopls7net.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afecde50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afecdb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afecdb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afecdb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopls7net                        0x00005607c48cf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afece03c460 __libc_start_main +
    245

    6    tmpopls7net                        0x00005607c48cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor = 1\n    var max_factor_index = 0\n    for i :=\
    \ 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor < i {\n\
    \                max_factor = i\n                max_factor_index = i\n      \
    \      }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp4mmdpp9z.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp4mmdpp9z.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmp4mmdpp9z.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int = 0\n \
    \   var i: Int = 0\n    var j: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n\
    \    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var w: Int =\
    \ 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int\
    \ = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f:\
    \ Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var\
    \ j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n   \
    \ var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n\
    \    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int =\
    \ 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int\
    \ = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c:\
    \ Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var\
    \ g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n   \
    \ var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n\
    \    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int =\
    \ 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int\
    \ = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z:\
    \ Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var\
    \ d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n   \
    \ var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n\
    \    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int =\
    \ 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int\
    \ = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w:\
    \ Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var\
    \ a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n   \
    \ var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n\
    \    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpxp58_r9o.swift:105:8: error: expected pattern\n    var \n     \
    \  ^\n/tmp/tmpxp58_r9o.swift:27:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmpxp58_r9o.swift:9:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmpxp58_r9o.swift:28:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmpxp58_r9o.swift:10:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmpxp58_r9o.swift:31:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpxp58_r9o.swift:13:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmpxp58_r9o.swift:32:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmpxp58_r9o.swift:14:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmpxp58_r9o.swift:34:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmpxp58_r9o.swift:11:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmpxp58_r9o.swift:35:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmpxp58_r9o.swift:12:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmpxp58_r9o.swift:38:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmpxp58_r9o.swift:15:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmpxp58_r9o.swift:41:9:\
    \ error: invalid redeclaration of 'w'\n    var w: Int = 0\n        ^\n/tmp/tmpxp58_r9o.swift:16:9:\
    \ note: 'w' previously declared here\n    var w: Int = 0\n        ^\n/tmp/tmpxp58_r9o.swift:43:9:\
    \ error: invalid redeclaration of 'y'\n    var y: Int = 0\n        ^\n/tmp/tmpxp58_r9o.swift:17:9:\
    \ note: 'y' previously declared here\n    var y: Int = 0\n        ^\n/tmp/tmpxp58_r9o.swift:44:9:\
    \ error: invalid redeclaration of 'z'\n    var z: Int = 0\n        ^\n/tmp/tmpxp58_r9o.swift:18:9:\
    \ note: 'z' previously declared here\n    var z: Int = 0\n        ^\n/tmp/tmpxp58_r9o.swift:45:9:\
    \ error: invalid redeclaration of 'a'\n    var a: Int = 0\n        ^\n/tmp/tmpxp58_"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    var\
    \ factor = 2\n    while !maxFactorFound {\n        if n % factor == 0 {\n    \
    \        maxFactorFound = true\n            maxFactor = factor\n        }\n  \
    \      factor++\n    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp83n337h6.swift:19:15: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        factor++\n              ^~\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor = 1\n    var max_factor_index = 0\n    for i :=\
    \ 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor < i {\n\
    \                max_factor = i\n                max_factor_index = i\n      \
    \      }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp4mmdpp9z.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp4mmdpp9z.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmp4mmdpp9z.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int = 0\n \
    \   var i: Int = 0\n    var j: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n\
    \    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int =\
    \ 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int\
    \ = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a:\
    \ Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var\
    \ e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n   \
    \ var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n\
    \    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int =\
    \ 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int\
    \ = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y:\
    \ Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var\
    \ c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n   \
    \ var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n\
    \    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int =\
    \ 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int\
    \ = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w:\
    \ Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var\
    \ a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n   \
    \ var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n\
    \    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int =\
    \ 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int\
    \ = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u:\
    \ Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var\
    \ y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n   \
    \ var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n\
    \    var g: Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp9cj9mqh1.swift:32:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:9:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:33:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:10:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:36:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:11:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:37:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:12:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:38:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:13:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:39:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:14:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:40:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:15:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:41:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:16:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:42:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:17:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:43:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:18:9:\
    \ note: 'u' previously declared here\n    var u: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:44:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:19:9:\
    \ note: 'v' previously declared here\n    var v: Int = 0\n  "
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor = 1\n    var max_factor_index = 0\n    for i :=\
    \ 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor < i {\n\
    \                max_factor = i\n                max_factor_index = i\n      \
    \      }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp4mmdpp9z.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp4mmdpp9z.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmp4mmdpp9z.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n \
    \   for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpvao791tx.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpvao791tx.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpvao791tx.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    var primeFactors = [1]\n    var primeFactorsFound\
    \ = false\n    var isPrime = true\n    var isPrimeFound = false\n    var isPrimeFactorFound\
    \ = false\n    var isPrimeFactorFound2 = false\n    var isPrimeFactorFound3 =\
    \ false\n    var isPrimeFactorFound4 = false\n    var isPrimeFactorFound5 = false\n\
    \    var isPrimeFactorFound6 = false\n    var isPrimeFactorFound7 = false\n  \
    \  var isPrimeFactorFound8 = false\n    var isPrimeFactorFound9 = false\n    var\
    \ isPrimeFactorFound10 = false\n    var isPrimeFactorFound11 = false\n    var\
    \ isPrimeFactorFound12 = false\n    var isPrimeFactorFound13 = false\n    var\
    \ isPrimeFactorFound14 = false\n    var isPrimeFactorFound15 = false\n    var\
    \ isPrimeFactorFound16 = false\n    var isPrimeFactorFound17 = false\n    var\
    \ isPrimeFactorFound18 = false\n    var isPrimeFactorFound19 = false\n    var\
    \ isPrimeFactorFound20 = false\n    var isPrimeFactorFound21 = false\n    var\
    \ isPrimeFactorFound22 = false\n    var isPrimeFactorFound23 = false\n    var\
    \ isPrimeFactorFound24 = false\n    var isPrimeFactorFound25 = false\n    var\
    \ isPrimeFactorFound26 = false\n    var isPrimeFactorFound27 = false\n    var\
    \ isPrimeFactorFound28 = false\n    var isPrimeFactorFound29 = false\n    var\
    \ isPrimeFactorFound30 = false\n    var isPrimeFactorFound31 = false\n    var\
    \ isPrimeFactorFound32 = false\n    var isPrimeFactorFound33 = false\n    var\
    \ isPrimeFactorFound34 = false\n    var isPrimeFactorFound35 = false\n    var\
    \ isPrimeFactorFound36 = false\n    var isPrimeFactorFound37 = false\n    var\
    \ isPrimeFactorFound38 = false\n    var isPrimeFactorFound39 = false\n    var\
    \ isPrimeFactorFound40 = false\n    var isPrimeFactorFound41 = false\n    var\
    \ isPrimeFactorFound42 = false\n    var isPrimeFactorFound43 = false\n    var\
    \ isPrimeFactorFound44 = false\n    var isPrimeFactorFound45 = false\n    var\
    \ isPrimeFactorFound46 = false\n    var isPrimeFactorFound47 = false\n    var\
    \ isPrimeFactorFound48 = false\n    var isPrimeFactorFound49 = false\n    var\
    \ isPrimeFactorFound50 = false\n    var isPrimeFactorFound51 = false\n    var\
    \ isPrimeFactorFound52 = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp0iwtt0db.swift:65:31: error: expected initial value after '='\n\
    \    var isPrimeFactorFound52 = \n                              ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    var\
    \ factor = 2\n    while !maxFactorFound {\n        if n % factor == 0 {\n    \
    \        maxFactorFound = true\n            maxFactor = factor\n        }\n  \
    \      factor++\n    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp83n337h6.swift:19:15: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        factor++\n              ^~\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpopls7net/tmpopls7net.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afecde50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afecdb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afecdb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afecdb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopls7net                        0x00005607c48cf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afece03c460 __libc_start_main +
    245

    6    tmpopls7net                        0x00005607c48cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor = 1\n  \
    \  var max_factor_index = 0\n    for i := 2; i <= n; i++ {\n        if n % i ==\
    \ 0 {\n            if max_factor < i {\n                max_factor = i\n     \
    \           max_factor_index = i\n            }\n        }\n    }\n    return\
    \ max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp71r5s2bz.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp71r5s2bz.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmp71r5s2bz.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp6d3zl8io/tmp6d3zl8io.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57fc133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57fbe2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57fbe2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57fbe297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6d3zl8io                        0x000055d8e76e83b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b57fc31f460 __libc_start_main +
    245

    6    tmp6d3zl8io                        0x000055d8e76e7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor = 1\n  \
    \  var max_factor_index = 0\n    for i := 2; i <= n; i++ {\n        if n % i ==\
    \ 0 {\n            if max_factor < i {\n                max_factor = i\n     \
    \           max_factor_index = i\n            }\n        }\n    }\n    return\
    \ max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp71r5s2bz.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp71r5s2bz.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmp71r5s2bz.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpopls7net/tmpopls7net.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afecde50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afecdb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afecdb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afecdb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopls7net                        0x00005607c48cf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afece03c460 __libc_start_main +
    245

    6    tmpopls7net                        0x00005607c48cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound == false {\n                maxFactorFound\
    \ = true\n                maxFactor = factor\n            } else {\n         \
    \       if maxFactor < factor {\n                    maxFactor = factor\n    \
    \            }\n            }\n        }\n    }\n    if maxFactorFound == false\
    \ {\n        maxFactor = 1\n    }\n    return maxFactor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpgmu5v4hi/tmpgmu5v4hi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1aba301c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ab9ff8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ab9ff8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ab9ff77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgmu5v4hi                        0x000055cc84b7e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b1aba4ed460 __libc_start_main +
    245

    6    tmpgmu5v4hi                        0x000055cc84b7dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpopls7net/tmpopls7net.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afecde50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afecdb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afecdb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afecdb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopls7net                        0x00005607c48cf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afece03c460 __libc_start_main +
    245

    6    tmpopls7net                        0x00005607c48cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    var maxFactorFoundInt = Int()\n    var maxFactorFoundIntInt\
    \ = Int()\n    var maxFactorFoundIntIntInt = Int()\n    var maxFactorFoundIntIntIntInt\
    \ = Int()\n    var maxFactorFoundIntIntIntIntInt = Int()\n    var maxFactorFoundIntIntIntIntIntInt\
    \ = Int()\n    var maxFactorFoundIntIntIntIntIntIntInt = Int()\n    var maxFactorFoundIntIntIntIntIntIntIntInt\
    \ = Int()\n    var maxFactorFoundIntIntIntIntIntIntIntIntInt = Int()\n    var\
    \ maxFactorFoundIntIntIntIntIntIntIntIntIntInt = Int()\n    var maxFactorFoundIntIntIntIntIntIntIntIntIntIntInt\
    \ = Int()\n    var maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntInt = Int()\n\
    \    var maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntInt = Int()\n    var\
    \ maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntInt = Int()\n    var maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = Int()\n    var maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = Int()\n    var maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = Int()\n    var maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = Int()\n    var maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = Int()\n    var maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = Int()\n    var maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = Int()\n    var maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = Int()\n    var maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = Int()\n    var maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = Int()\n    var maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = Int()\n    var maxFactorFoundIntIntIntIntIntInt\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpv1_tk_pq.swift:25:9: error: invalid redeclaration of 'maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt'\n\
    \    var maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = Int()\n\
    \        ^\n/tmp/tmpv1_tk_pq.swift:24:9: note: 'maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt'\
    \ previously declared here\n    var maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = Int()\n        ^\n/tmp/tmpv1_tk_pq.swift:27:9: error: invalid redeclaration\
    \ of 'maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt'\n    var\
    \ maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = Int()\n   \
    \     ^\n/tmp/tmpv1_tk_pq.swift:26:9: note: 'maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt'\
    \ previously declared here\n    var maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = Int()\n        ^\n/tmp/tmpv1_tk_pq.swift:28:9: error: invalid redeclaration\
    \ of 'maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt'\n    var\
    \ maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = Int()\n   \
    \     ^\n/tmp/tmpv1_tk_pq.swift:26:9: note: 'maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt'\
    \ previously declared here\n    var maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = Int()\n        ^\n/tmp/tmpv1_tk_pq.swift:30:9: error: invalid redeclaration\
    \ of 'maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt'\n   \
    \ var maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = Int()\n\
    \        ^\n/tmp/tmpv1_tk_pq.swift:29:9: note: 'maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt'\
    \ previously declared here\n    var maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = Int()\n        ^\n/tmp/tmpv1_tk_pq.swift:32:9: error: invalid redeclaration\
    \ of 'maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt'\n\
    \    var maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = Int()\n        ^\n/tmp/tmpv1_tk_pq.swift:31:9: note: 'maxFactorFoundIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt'"
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let max_factor: Int\n \
    \   if n > 1 {\n        max_factor = Int(sqrt(Double(n)))\n    } else {\n    \
    \    max_factor = 1\n    }\n    var factor: Int\n    for factor in 2...max_factor\
    \ {\n        if n % factor == 0 {\n            break\n        }\n    }\n    return\
    \ factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp8k0dhxrr.swift:10:26: error: cannot find 'sqrt' in scope\n    \
    \    max_factor = Int(sqrt(Double(n)))\n                         ^~~~\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var largest = 1\n    var largestPrimeFactor = 2\n    for i :=\
    \ 2; i <= n; i++ {\n        if n % i == 0 {\n            largest = i\n       \
    \     if largest == largestPrimeFactor {\n                largestPrimeFactor++\n\
    \            }\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpnwnl4ihy.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpnwnl4ihy.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpnwnl4ihy.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factors = [1]\n   \
    \ var i = 2\n    var p = 2\n    while i <= n {\n        if n % i == 0 {\n    \
    \        factors.append(i)\n            n /= i\n        }\n        i += 1\n  \
    \  }\n    if n > 1 {\n        factors.append(n)\n    }\n    return factors.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp32zk15ln.swift:14:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= i\n            ~ ^\n/tmp/tmp32zk15ln.swift:21:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound = false\n    var\
    \ maxFactorFoundInt = Int()\n    var maxFactorFoundIntInt = Int()\n\n    for factor\
    \ in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound {\n\
    \                if maxFactorFoundInt < factor {\n                    maxFactorFoundInt\
    \ = factor\n                    maxFactorFoundIntInt = Int()\n               \
    \ }\n            } else {\n                maxFactorFound = true\n           \
    \     maxFactorFoundInt = factor\n                maxFactorFoundIntInt = Int()\n\
    \            }\n        }\n    }\n\n    if maxFactorFound {\n        return maxFactorFoundInt\n\
    \    } else {\n        return maxFactorFoundIntInt\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp4wzsu_1v/tmp4wzsu_1v.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b081d117c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b081ce0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b081ce0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b081ce0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wzsu_1v                        0x0000559a2dafd335 <unavailable> + 4917

    5    libc.so.6                          0x00002b081d303460 __libc_start_main +
    245

    6    tmp4wzsu_1v                        0x0000559a2dafcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    var factor = 2\n    while !maxFactorFound\
    \ {\n        if n % factor == 0 {\n            maxFactorFound = true\n       \
    \     maxFactor = factor\n        }\n        factor++\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpda0kbc7q.swift:16:15: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        factor++\n              ^~\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         } else {\n                maxFactor = factor\n                maxFactorFound\
    \ = true\n            }\n        }\n    }\n    return maxFactor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp_95fhd_k/tmp_95fhd_k.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9560adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af955da4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af955da4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af955da37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_95fhd_k                        0x000055d8b103b3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002af956299460 __libc_start_main +
    245

    6    tmp_95fhd_k                        0x000055d8b103afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n \
    \   for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpvao791tx.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpvao791tx.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpvao791tx.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                break\n           \
    \ } else {\n                maxFactor = factor\n                maxFactorFound\
    \ = true\n            }\n        }\n    }\n    return maxFactor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp9m901bho/tmp9m901bho.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b84363c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b8405ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b8405a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b840597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9m901bho                        0x000055794efb2335 <unavailable> + 4917

    5    libc.so.6                          0x00002b0b8454f460 __libc_start_main +
    245

    6    tmp9m901bho                        0x000055794efb1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpopls7net/tmpopls7net.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afecde50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afecdb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afecdb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afecdb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopls7net                        0x00005607c48cf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afece03c460 __libc_start_main +
    245

    6    tmpopls7net                        0x00005607c48cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    var\
    \ factor = 2\n    while !maxFactorFound {\n        if n % factor == 0 {\n    \
    \        maxFactorFound = true\n            maxFactor = factor\n        }\n  \
    \      factor++\n    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp83n337h6.swift:19:15: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        factor++\n              ^~\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp3x_fg2uq/tmp3x_fg2uq.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1278d1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1278a16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1278a16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1278a157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3x_fg2uq                        0x0000555e6bf1e3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b1278f0b460 __libc_start_main +
    245

    6    tmp3x_fg2uq                        0x0000555e6bf1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor = 1\n    var max_factor_index = 0\n    for i :=\
    \ 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor < i {\n\
    \                max_factor = i\n                max_factor_index = i\n      \
    \      }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp4mmdpp9z.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp4mmdpp9z.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmp4mmdpp9z.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpopls7net/tmpopls7net.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afecde50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afecdb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afecdb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afecdb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopls7net                        0x00005607c48cf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afece03c460 __libc_start_main +
    245

    6    tmpopls7net                        0x00005607c48cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpopls7net/tmpopls7net.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afecde50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afecdb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afecdb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afecdb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopls7net                        0x00005607c48cf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afece03c460 __libc_start_main +
    245

    6    tmpopls7net                        0x00005607c48cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor: Int = 0\n\
    \    var max_factor_index: Int = 0\n    for i := 2; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            if max_factor < i {\n                max_factor =\
    \ i\n                max_factor_index = i\n            }\n        }\n    }\n \
    \   return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpnh0yh286.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpnh0yh286.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpnh0yh286.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors = prime_factors(n)\n\
    \    return factors.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp4sxhn6ji.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmp4sxhn6ji.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor = 1\n    var max_factor_index = 0\n    for i :=\
    \ 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor < i {\n\
    \                max_factor = i\n                max_factor_index = i\n      \
    \      }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp4mmdpp9z.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp4mmdpp9z.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmp4mmdpp9z.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n\
    \n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpf2ytk8jr.swift:15:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpf2ytk8jr.swift:15:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpf2ytk8jr.swift:15:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    var i = 2\n    for factor in 2...n {\n  \
    \      if n % factor == 0 {\n            if maxFactorFound {\n               \
    \ break\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n        i += 1\n    }\n    return maxFactor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpwlbp4ous/tmpwlbp4ous.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b813f200c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b813eef7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b813eef7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b813eef67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwlbp4ous                        0x00005573a9f8f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b813f3ec460 __libc_start_main +
    245

    6    tmpwlbp4ous                        0x00005573a9f8efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n\
    \    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpp153kdai/tmpp153kdai.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad55369c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad55060b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad55060988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad5505f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp153kdai                        0x00005612d97203b0 <unavailable> + 5040

    5    libc.so.6                          0x00002aad55555460 __libc_start_main +
    245

    6    tmpp153kdai                        0x00005612d971ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n \
    \   for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpvao791tx.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpvao791tx.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpvao791tx.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = 2 // start at 2, since 2 is the largest factor\n\
    \    var maxFactorIsPrime = true // start at true, since 2 is the largest factor\n\
    \    for factor in 2..n {\n        if n % factor == 0 {\n            if maxFactorIsPrime\
    \ {\n                // factor is prime\n                maxFactorIsPrime = false\n\
    \            } else {\n                // factor is larger than maxFactor\n  \
    \              maxFactor = factor\n            }\n        }\n    }\n    return\
    \ maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpwt4ms_8a.swift:13:20: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for factor in 2..n {\n                   ^~\n     \
    \              ...\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound == false {\n                maxFactorFound\
    \ = true\n                maxFactor = factor\n            } else {\n         \
    \       if factor > maxFactor {\n                    maxFactorFound = true\n \
    \                   maxFactor = factor\n                }\n            }\n   \
    \     }\n    }\n    if maxFactorFound == false {\n        maxFactor = 1\n    }\n\
    \    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmp72lvkp0m/tmp72lvkp0m.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c78205c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c77efcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c77efc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c77efb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp72lvkp0m                        0x00005643eecb1335 <unavailable> + 4917

    5    libc.so.6                          0x00002b2c783f1460 __libc_start_main +
    245

    6    tmp72lvkp0m                        0x00005643eecb0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp3x_fg2uq/tmp3x_fg2uq.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1278d1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1278a16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1278a16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1278a157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3x_fg2uq                        0x0000555e6bf1e3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b1278f0b460 __libc_start_main +
    245

    6    tmp3x_fg2uq                        0x0000555e6bf1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n\
    \    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpp153kdai/tmpp153kdai.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad55369c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad55060b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad55060988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad5505f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp153kdai                        0x00005612d97203b0 <unavailable> + 5040

    5    libc.so.6                          0x00002aad55555460 __libc_start_main +
    245

    6    tmpp153kdai                        0x00005612d971ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n\
    \    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpp153kdai/tmpp153kdai.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad55369c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad55060b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad55060988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad5505f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp153kdai                        0x00005612d97203b0 <unavailable> + 5040

    5    libc.so.6                          0x00002aad55555460 __libc_start_main +
    245

    6    tmpp153kdai                        0x00005612d971ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int = 0\n \
    \   var i: Int = 0\n    var j: Int = 0\n    var m: Int = 0\n    var p: Int = 0\n\
    \    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int =\
    \ 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int\
    \ = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b:\
    \ Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var\
    \ f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n   \
    \ var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n\
    \    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int =\
    \ 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int\
    \ = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y:\
    \ Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var\
    \ c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n   \
    \ var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n\
    \    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int =\
    \ 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int\
    \ = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v:\
    \ Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var\
    \ z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n   \
    \ var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n\
    \    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int =\
    \ 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int\
    \ = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s:\
    \ Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var\
    \ w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n   \
    \ var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpu3lcwdor.swift:31:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:9:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:32:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:10:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:35:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:11:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:38:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:12:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:39:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:13:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:40:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:14:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:41:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:15:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:42:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:16:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:43:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:17:9:\
    \ note: 'u' previously declared here\n    var u: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:44:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:18:9:\
    \ note: 'v' previously declared here\n    var v: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:45:9:\
    \ error: invalid redeclaration of 'w'\n    var w: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:19:9:\
    \ note: 'w' previously declared here\n    var w: Int = 0\n  "
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpopls7net/tmpopls7net.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afecde50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afecdb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afecdb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afecdb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopls7net                        0x00005607c48cf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afece03c460 __libc_start_main +
    245

    6    tmpopls7net                        0x00005607c48cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor = 1\n  \
    \  var max_factor_index = 0\n    for i := 2; i <= n; i++ {\n        if n % i ==\
    \ 0 {\n            if max_factor < i {\n                max_factor = i\n     \
    \           max_factor_index = i\n            }\n        }\n    }\n    return\
    \ max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp71r5s2bz.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp71r5s2bz.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmp71r5s2bz.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest = 1\n    var\
    \ prime = 1\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n        \
    \    largest = i\n            prime = 1\n        }\n        if prime > largest\
    \ {\n            largest = prime\n        }\n        prime *= i\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpnkjjbg23.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpnkjjbg23.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpnkjjbg23.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n\
    \    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpp153kdai/tmpp153kdai.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad55369c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad55060b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad55060988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad5505f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp153kdai                        0x00005612d97203b0 <unavailable> + 5040

    5    libc.so.6                          0x00002aad55555460 __libc_start_main +
    245

    6    tmpp153kdai                        0x00005612d971ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpopls7net/tmpopls7net.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afecde50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afecdb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afecdb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afecdb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopls7net                        0x00005607c48cf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afece03c460 __libc_start_main +
    245

    6    tmpopls7net                        0x00005607c48cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    var factor = 2\n\n    while !maxFactorFound\
    \ {\n        if n % factor == 0 {\n            maxFactorFound = true\n       \
    \     maxFactor = factor\n        }\n        factor += 1\n    }\n\n    return\
    \ maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpiyx5a_yw/tmpiyx5a_yw.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95f3285c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95f2f7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95f2f7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95f2f7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiyx5a_yw                        0x000055e9b76d1245 <unavailable> + 4677

    5    libc.so.6                          0x00002b95f3471460 __libc_start_main +
    245

    6    tmpiyx5a_yw                        0x000055e9b76d0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    var factor = 2\n    for factor <= n {\n \
    \       if n % factor == 0 {\n            if maxFactorFound == false {\n     \
    \           maxFactorFound = true\n                maxFactor = factor\n      \
    \      } else {\n                if factor > maxFactor {\n                   \
    \ maxFactorFound = true\n                    maxFactor = factor\n            \
    \    }\n            }\n        }\n        factor++\n    }\n    if maxFactorFound\
    \ == false {\n        maxFactorFound = true\n        maxFactor = n\n    }\n  \
    \  return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpryotb6yp.swift:11:16: error: expected 'in' after for-each pattern\n\
    \    for factor <= n {\n               ^\n/tmp/tmpryotb6yp.swift:11:16: error:\
    \ unary operator cannot be separated from its operand\n    for factor <= n {\n\
    \               ^ ~\n                 \n/tmp/tmpryotb6yp.swift:11:16: error: '<='\
    \ is not a prefix unary operator\n    for factor <= n {\n               ^\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int = 0\n \
    \   var i: Int = 0\n    var j: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n\
    \    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var u: Int =\
    \ 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int\
    \ = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c:\
    \ Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var\
    \ g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n   \
    \ var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n\
    \    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int =\
    \ 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int\
    \ = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z:\
    \ Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var\
    \ d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n   \
    \ var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n\
    \    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int =\
    \ 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int\
    \ = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w:\
    \ Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var\
    \ a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n   \
    \ var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n\
    \    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int =\
    \ 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int\
    \ = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t:\
    \ Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var\
    \ x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n   \
    \ var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp2kwjtzxn.swift:30:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:9:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:31:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:10:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:34:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:13:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:35:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:14:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:37:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:11:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:38:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:12:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:41:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:15:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:42:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:16:9:\
    \ note: 'u' previously declared here\n    var u: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:43:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:17:9:\
    \ note: 'v' previously declared here\n    var v: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:44:9:\
    \ error: invalid redeclaration of 'w'\n    var w: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:18:9:\
    \ note: 'w' previously declared here\n    var w: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:45:9:\
    \ error: invalid redeclaration of 'x'\n    var x: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:19:9:\
    \ note: 'x' previously declared here\n    var x: Int = 0\n  "
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int = 0\n \
    \   var i: Int = 0\n    var j: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n\
    \    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int =\
    \ 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int\
    \ = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a:\
    \ Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var\
    \ e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n   \
    \ var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n\
    \    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int =\
    \ 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int\
    \ = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y:\
    \ Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var\
    \ c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n   \
    \ var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n\
    \    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int =\
    \ 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int\
    \ = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w:\
    \ Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var\
    \ a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n   \
    \ var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n\
    \    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int =\
    \ 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int\
    \ = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u:\
    \ Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var\
    \ y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n   \
    \ var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n\
    \    var g: Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp9cj9mqh1.swift:32:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:9:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:33:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:10:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:36:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:11:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:37:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:12:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:38:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:13:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:39:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:14:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:40:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:15:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:41:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:16:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:42:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:17:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:43:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:18:9:\
    \ note: 'u' previously declared here\n    var u: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:44:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:19:9:\
    \ note: 'v' previously declared here\n    var v: Int = 0\n  "
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var largest = 1\n    var largestPrimeFactor = 1\n    for i :=\
    \ 2; i <= n; i++ {\n        if n % i == 0 {\n            largestPrimeFactor =\
    \ i\n            if largest < largestPrimeFactor {\n                largest =\
    \ largestPrimeFactor\n            }\n        }\n    }\n    return largest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpw9yq0qkd.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpw9yq0qkd.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpw9yq0qkd.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpopls7net/tmpopls7net.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afecde50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afecdb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afecdb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afecdb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopls7net                        0x00005607c48cf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afece03c460 __libc_start_main +
    245

    6    tmpopls7net                        0x00005607c48cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors = prime_factors(n)\n\
    \    return factors.reduce(max) { $0 > $1 ? $0 : $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp218q13zs.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmp218q13zs.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n \
    \   for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpndwpkpob.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n/2; i++ {\n           ^\n            <#type#>\n/tmp/tmpndwpkpob.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n/2; i++ {\n\
    \           ^\n/tmp/tmpndwpkpob.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n/2; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor = 1\n  \
    \  var max_factor_index = 0\n    for i := 2; i <= n / 2; i += 1 {\n        if\
    \ n % i == 0 {\n            if max_factor < i {\n                max_factor =\
    \ i\n                max_factor_index = i\n            }\n        }\n    }\n \
    \   return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpfdkh_70q.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n / 2; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpfdkh_70q.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n / 2; i +=\
    \ 1 {\n           ^\n/tmp/tmpfdkh_70q.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n / 2; i += 1 {\n           ^\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpopls7net/tmpopls7net.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afecde50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afecdb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afecdb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afecdb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopls7net                        0x00005607c48cf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afece03c460 __libc_start_main +
    245

    6    tmpopls7net                        0x00005607c48cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpopls7net/tmpopls7net.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afecde50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afecdb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afecdb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afecdb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopls7net                        0x00005607c48cf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afece03c460 __libc_start_main +
    245

    6    tmpopls7net                        0x00005607c48cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor: Int = 0\n\
    \    var max_factor_index: Int = 0\n    for i : Int in 1...n {\n        if n %\
    \ i == 0 {\n            if max_factor < i {\n                max_factor = i\n\
    \                max_factor_index = i\n            }\n        }\n    }\n    return\
    \ max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmp07xh5z7l/tmp07xh5z7l.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac43946c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac4363db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac4363d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac4363c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07xh5z7l                        0x000055a6e2f0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002aac43b32460 __libc_start_main +
    245

    6    tmp07xh5z7l                        0x000055a6e2f0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var largest = 1\n    var largestPrimeFactor = 2\n    for i :=\
    \ 2; i <= n; i++ {\n        if n % i == 0 {\n            if largest < i {\n  \
    \              largest = i\n                largestPrimeFactor = i\n         \
    \   } else {\n                largestPrimeFactor = largest\n                largest\
    \ = i\n            }\n        }\n    }\n    return largestPrimeFactor\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpkb38w7k7.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpkb38w7k7.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpkb38w7k7.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor = 0\n  \
    \  var max_factor_index = 0\n    for i := 2; i <= n / 2; i += 1 {\n        if\
    \ n % i == 0 {\n            if max_factor < i {\n                max_factor =\
    \ i\n                max_factor_index = i\n            }\n        }\n    }\n \
    \   return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp7vn286il.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n / 2; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp7vn286il.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n / 2; i +=\
    \ 1 {\n           ^\n/tmp/tmp7vn286il.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n / 2; i += 1 {\n           ^\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors = prime_factors(n)\n\
    \    return factors.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp4sxhn6ji.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmp4sxhn6ji.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest = 1\n    for\
    \ factor in 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor == 0 {\n    \
    \        largest = factor\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp562m_hdm.swift:9:20: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n     \
    \              ^~\n                   ...\n/tmp/tmp562m_hdm.swift:9:26: error:\
    \ cannot find 'sqrt' in scope\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n\
    \                         ^~~~\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = 2 // start at 2\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp5i3pdn_o/tmp5i3pdn_o.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b582b4fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b582b1f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b582b1f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b582b1f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5i3pdn_o                        0x000055fde85a53b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b582b6e6460 __libc_start_main +
    245

    6    tmp5i3pdn_o                        0x000055fde85a4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            maxFactor = factor\n            maxFactorFound = true\n\
    \        }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmp0j9qoeyd/tmp0j9qoeyd.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0505b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0502a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0502a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0502a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0j9qoeyd                        0x0000563e63cb33b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ba05079e460 __libc_start_main +
    245

    6    tmp0j9qoeyd                        0x0000563e63cb2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor = 0\n  \
    \  var max_factor_index = 0\n    for i := 2; i <= n; i++ {\n        if n % i ==\
    \ 0 {\n            if max_factor < i {\n                max_factor = i\n     \
    \           max_factor_index = i\n            }\n        }\n    }\n    return\
    \ max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpaj00_ro8.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpaj00_ro8.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpaj00_ro8.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpopls7net/tmpopls7net.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afecde50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afecdb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afecdb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afecdb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopls7net                        0x00005607c48cf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afece03c460 __libc_start_main +
    245

    6    tmpopls7net                        0x00005607c48cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            maxFactor = factor\n            maxFactorFound = true\n\
    \        }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n\
    \    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmphghi5nt1/tmphghi5nt1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba118462c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba118159b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba118159988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1181587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphghi5nt1                        0x000055fd6cb253b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ba11864e460 __libc_start_main +
    245

    6    tmphghi5nt1                        0x000055fd6cb24fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         } else {\n                maxFactorFound = true\n                maxFactor\
    \ = factor\n            }\n        }\n    }\n    return maxFactor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpm7mbsxnd/tmpm7mbsxnd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaadc7a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaadc499b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaadc499988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaadc4987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm7mbsxnd                        0x0000559057a663b0 <unavailable> + 5040

    5    libc.so.6                          0x00002aaadc98e460 __libc_start_main +
    245

    6    tmpm7mbsxnd                        0x0000559057a65fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n\
    \    var i: Int\n    var j: Int\n\n    for i = 2; i <= n / 2; i += 1 {\n     \
    \   for j = i; j < n; j += 1 {\n            if n % j == 0 {\n                break\n\
    \            }\n        }\n\n        if j > max_factor {\n            max_factor\
    \ = j\n            max_factor_index = i\n        }\n    }\n\n    return max_factor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpo8v6yhci.swift:17:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= n / 2; i += 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpo8v6yhci.swift:18:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for j = i; j < n; j += 1 {\n        ^   ~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n\
    \n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpf2ytk8jr.swift:15:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpf2ytk8jr.swift:15:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpf2ytk8jr.swift:15:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor: Int = 0\n\
    \    var max_factor_index: Int = 0\n    for i := 2; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            if max_factor < i {\n                max_factor =\
    \ i\n                max_factor_index = i\n            }\n        }\n    }\n \
    \   return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpnh0yh286.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpnh0yh286.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpnh0yh286.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return 0\n            }\n            maxFactorFound = true\n\
    \            maxFactor = factor\n        }\n    }\n    if maxFactorFound {\n \
    \       return maxFactor\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp4n06mvi0/tmp4n06mvi0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44c25cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44c22c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44c22c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44c22c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4n06mvi0                        0x0000565323226335 <unavailable> + 4917

    5    libc.so.6                          0x00002b44c27bb460 __libc_start_main +
    245

    6    tmp4n06mvi0                        0x0000565323225fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n \
    \   for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpvao791tx.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpvao791tx.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpvao791tx.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp3rqqijhh/tmp3rqqijhh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac09723ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac096f31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac096f31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac096f307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3rqqijhh                        0x000055acc68e43b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac097426460 __libc_start_main +
    245

    6    tmp3rqqijhh                        0x000055acc68e3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor = 1\n    var max_factor_index = 0\n    for i :=\
    \ 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor < i {\n\
    \                max_factor = i\n                max_factor_index = i\n      \
    \      }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp4mmdpp9z.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp4mmdpp9z.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmp4mmdpp9z.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 3\n    }\n    if n % 2 == 0 {\n        return largest_prime_factor(n\
    \ / 2)\n    }\n    var maxFactor = largest_prime_factor(n / 2)\n    for factor\
    \ in 2...n {\n        if n % factor == 0 {\n            maxFactor = factor\n \
    \       }\n    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp9u1_1v3w.swift:18:37: error: missing argument label 'n:' in call\n\
    \        return largest_prime_factor(n / 2)\n                                \
    \    ^\n                                    n: \n/tmp/tmp9u1_1v3w.swift:20:42:\
    \ error: missing argument label 'n:' in call\n    var maxFactor = largest_prime_factor(n\
    \ / 2)\n                                         ^\n                         \
    \                n: \n"
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpopls7net/tmpopls7net.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afecde50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afecdb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afecdb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afecdb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopls7net                        0x00005607c48cf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afece03c460 __libc_start_main +
    245

    6    tmpopls7net                        0x00005607c48cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactor = factor\n\
    \            maxFactorFound = true\n        }\n    }\n    if maxFactorFound {\n\
    \        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpdw24fhol/tmpdw24fhol.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18acd0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18aca06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18aca06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18aca057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdw24fhol                        0x000055b1ac0793b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b18acefb460 __libc_start_main +
    245

    6    tmpdw24fhol                        0x000055b1ac078fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int = 0\n \
    \   var i: Int = 0\n    var j: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n\
    \    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var u: Int =\
    \ 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int\
    \ = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c:\
    \ Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var\
    \ g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n   \
    \ var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n\
    \    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int =\
    \ 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int\
    \ = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z:\
    \ Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var\
    \ d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n   \
    \ var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n\
    \    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int =\
    \ 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int\
    \ = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w:\
    \ Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var\
    \ a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n   \
    \ var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n\
    \    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int =\
    \ 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int\
    \ = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t:\
    \ Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var\
    \ x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n   \
    \ var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp2kwjtzxn.swift:30:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:9:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:31:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:10:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:34:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:13:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:35:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:14:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:37:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:11:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:38:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:12:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:41:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:15:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:42:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:16:9:\
    \ note: 'u' previously declared here\n    var u: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:43:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:17:9:\
    \ note: 'v' previously declared here\n    var v: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:44:9:\
    \ error: invalid redeclaration of 'w'\n    var w: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:18:9:\
    \ note: 'w' previously declared here\n    var w: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:45:9:\
    \ error: invalid redeclaration of 'x'\n    var x: Int = 0\n        ^\n/tmp/tmp2kwjtzxn.swift:19:9:\
    \ note: 'x' previously declared here\n    var x: Int = 0\n  "
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpopls7net/tmpopls7net.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afecde50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afecdb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afecdb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afecdb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopls7net                        0x00005607c48cf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afece03c460 __libc_start_main +
    245

    6    tmpopls7net                        0x00005607c48cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n\
    \    var i: Int\n    for i = 2; i <= n / 2; i += 1 {\n        if n % i == 0 {\n\
    \            if max_factor < i {\n                max_factor = i\n           \
    \     max_factor_index = i\n            }\n        }\n    }\n\n    if max_factor\
    \ == 0 {\n        return n\n    }\n\n    return max_factor_index\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp4n93hm_m.swift:15:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= n / 2; i += 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor: Int = 0\n\
    \    var max_factor_index: Int = 0\n    for i := 2; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            if max_factor < i {\n                max_factor =\
    \ i\n                max_factor_index = i\n            }\n        }\n    }\n \
    \   return max_factor_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpyda41tx9.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpyda41tx9.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpyda41tx9.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n \
    \   var i: Int = 0\n    for i = 2; i <= n / 2; i += 1 {\n        if n % i == 0\
    \ {\n            if max_factor < i {\n                max_factor = i\n       \
    \         max_factor_index = i\n            }\n        }\n    }\n    return max_factor_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpa38klk98.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= n / 2; i += 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpopls7net/tmpopls7net.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afecde50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afecdb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afecdb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afecdb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopls7net                        0x00005607c48cf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afece03c460 __libc_start_main +
    245

    6    tmpopls7net                        0x00005607c48cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int = 0\n \
    \   var i: Int = 0\n    var j: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n\
    \    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int =\
    \ 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int\
    \ = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a:\
    \ Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var\
    \ e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n   \
    \ var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n\
    \    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int =\
    \ 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int\
    \ = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x:\
    \ Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var\
    \ b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n   \
    \ var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n\
    \    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int =\
    \ 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int\
    \ = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u:\
    \ Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var\
    \ y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n   \
    \ var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n\
    \    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int =\
    \ 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int\
    \ = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r:\
    \ Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var\
    \ v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n   \
    \ var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp7an_d6jg.swift:32:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmp7an_d6jg.swift:9:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmp7an_d6jg.swift:33:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmp7an_d6jg.swift:10:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmp7an_d6jg.swift:36:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmp7an_d6jg.swift:11:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmp7an_d6jg.swift:37:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmp7an_d6jg.swift:12:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmp7an_d6jg.swift:39:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmp7an_d6jg.swift:13:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmp7an_d6jg.swift:40:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmp7an_d6jg.swift:14:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmp7an_d6jg.swift:41:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmp7an_d6jg.swift:15:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmp7an_d6jg.swift:42:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmp7an_d6jg.swift:16:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n        ^\n/tmp/tmp7an_d6jg.swift:43:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmp7an_d6jg.swift:17:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmp7an_d6jg.swift:44:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmp7an_d6jg.swift:18:9:\
    \ note: 'u' previously declared here\n    var u: Int = 0\n        ^\n/tmp/tmp7an_d6jg.swift:45:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int = 0\n        ^\n/tmp/tmp7an_d6jg.swift:19:9:\
    \ note: 'v' previously declared here\n    var v: Int = 0\n  "
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n\
    \    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpp153kdai/tmpp153kdai.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad55369c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad55060b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad55060988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad5505f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp153kdai                        0x00005612d97203b0 <unavailable> + 5040

    5    libc.so.6                          0x00002aad55555460 __libc_start_main +
    245

    6    tmpp153kdai                        0x00005612d971ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp6d3zl8io/tmp6d3zl8io.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57fc133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57fbe2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57fbe2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57fbe297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6d3zl8io                        0x000055d8e76e83b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b57fc31f460 __libc_start_main +
    245

    6    tmp6d3zl8io                        0x000055d8e76e7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpopls7net/tmpopls7net.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afecde50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afecdb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afecdb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afecdb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopls7net                        0x00005607c48cf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afece03c460 __libc_start_main +
    245

    6    tmpopls7net                        0x00005607c48cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         } else {\n                maxFactorFound = true\n                maxFactor\
    \ = factor\n            }\n        }\n    }\n    if maxFactorFound {\n       \
    \ return maxFactor\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmps23oqlb0/tmps23oqlb0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabcdde1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabcdad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabcdad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabcdad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps23oqlb0                        0x00005596933753b0 <unavailable> + 5040

    5    libc.so.6                          0x00002aabcdfcd460 __libc_start_main +
    245

    6    tmps23oqlb0                        0x0000559693374fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    // Sieve of Eratosthenes for primes up to sqrt(n)\n    var sieve\
    \ = [Int]()\n    var p = 2\n    for i := 2; i <= Int(sqrt(Double(n))); i++ {\n\
    \        if n % i == 0 {\n            sieve = append(sieve, i)\n        }\n  \
    \  }\n\n    // Find the largest prime factor of n\n    var largest_prime_factor\
    \ = sieve[0]\n    for i := 1; i < len(sieve); i++ {\n        if sieve[i] > largest_prime_factor\
    \ {\n            largest_prime_factor = sieve[i]\n        }\n    }\n\n    return\
    \ largest_prime_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp7pghp4ik.swift:15:12: error: expected type\n    for i := 2; i <=\
    \ Int(sqrt(Double(n))); i++ {\n           ^\n            <#type#>\n/tmp/tmp7pghp4ik.swift:15:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= Int(sqrt(Double(n)));\
    \ i++ {\n           ^\n/tmp/tmp7pghp4ik.swift:15:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 2; i <= Int(sqrt(Double(n))); i++\
    \ {\n           ^\n/tmp/tmp7pghp4ik.swift:23:12: error: expected type\n    for\
    \ i := 1; i < len(sieve); i++ {\n           ^\n            <#type#>\n/tmp/tmp7pghp4ik.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(sieve);\
    \ i++ {\n           ^\n/tmp/tmp7pghp4ik.swift:23:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 1; i < len(sieve); i++ {\n      \
    \     ^\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2..n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpj55bi145.swift:13:20: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for factor in 2..n {\n                   ^~\n     \
    \              ...\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n \
    \   for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpndwpkpob.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n/2; i++ {\n           ^\n            <#type#>\n/tmp/tmpndwpkpob.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n/2; i++ {\n\
    \           ^\n/tmp/tmpndwpkpob.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n/2; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int = 0\n \
    \   var i: Int = 0\n    var j: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n\
    \    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var u: Int =\
    \ 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int\
    \ = 0\n    var z: Int = 0\n    var w1: Int = 0\n    var w2: Int = 0\n    var w3:\
    \ Int = 0\n    var w4: Int = 0\n    var w5: Int = 0\n    var w6: Int = 0\n   \
    \ var w7: Int = 0\n    var w8: Int = 0\n    var w9: Int = 0\n    var w10: Int\
    \ = 0\n    var w11: Int = 0\n    var w12: Int = 0\n    var w13: Int = 0\n    var\
    \ w14: Int = 0\n    var w15: Int = 0\n    var w16: Int = 0\n    var w17: Int =\
    \ 0\n    var w18: Int = 0\n    var w19: Int = 0\n    var w20: Int = 0\n    var\
    \ w21: Int = 0\n    var w22: Int = 0\n    var w23: Int = 0\n    var w24: Int =\
    \ 0\n    var w25: Int = 0\n    var w26: Int = 0\n    var w27: Int = 0\n    var\
    \ w28: Int = 0\n    var w29: Int = 0\n    var w30: Int = 0\n    var w31: Int =\
    \ 0\n    var w32: Int = 0\n    var w33: Int = 0\n    var w34: Int = 0\n    var\
    \ w35: Int = 0\n    var w36: Int = 0\n    var w37: Int = 0\n    var w38: Int =\
    \ 0\n    var w39: Int = 0\n    var w40: Int = 0\n    var w41: Int = 0\n    var\
    \ w42: Int = 0\n    var w43: Int = 0\n    var w44: Int = 0\n    var w45: Int =\
    \ 0\n    var w46: Int = 0\n    var w47: Int = 0\n    var w48: Int = 0\n    var\
    \ w49: Int = 0\n    var w50: Int = 0\n    var w51: Int = 0\n    var w52: Int =\
    \ 0\n    var w53: Int = 0\n    var w54: Int = 0\n    var w55: Int = 0\n    var\
    \ w56: Int = 0\n    var w57: Int = 0\n    var w58: Int = 0\n    var w59: Int =\
    \ 0\n    var w60: Int = 0\n    var w61: Int = 0\n    var w62: Int = 0\n    var\
    \ w63: Int = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpu98sn0h4.swift:8:9: warning: variable 'factor' was never used;\
    \ consider replacing with '_' or removing it\n    var factor: Int = 0\n      \
    \  ^~~~~~\n        _\n/tmp/tmpu98sn0h4.swift:9:9: warning: variable 'i' was never\
    \ used; consider replacing with '_' or removing it\n    var i: Int = 0\n     \
    \   ^\n        _\n/tmp/tmpu98sn0h4.swift:10:9: warning: variable 'j' was never\
    \ used; consider replacing with '_' or removing it\n    var j: Int = 0\n     \
    \   ^\n        _\n/tmp/tmpu98sn0h4.swift:11:9: warning: variable 'p' was never\
    \ used; consider replacing with '_' or removing it\n    var p: Int = 0\n     \
    \   ^\n        _\n/tmp/tmpu98sn0h4.swift:12:9: warning: variable 'q' was never\
    \ used; consider replacing with '_' or removing it\n    var q: Int = 0\n     \
    \   ^\n        _\n/tmp/tmpu98sn0h4.swift:13:9: warning: variable 'm' was never\
    \ used; consider replacing with '_' or removing it\n    var m: Int = 0\n     \
    \   ^\n        _\n/tmp/tmpu98sn0h4.swift:14:9: warning: variable 'n' was never\
    \ used; consider replacing with '_' or removing it\n    var n: Int = 0\n     \
    \   ^\n        _\n/tmp/tmpu98sn0h4.swift:15:9: warning: variable 't' was never\
    \ used; consider replacing with '_' or removing it\n    var t: Int = 0\n     \
    \   ^\n        _\n/tmp/tmpu98sn0h4.swift:16:9: warning: variable 'u' was never\
    \ used; consider replacing with '_' or removing it\n    var u: Int = 0\n     \
    \   ^\n        _\n/tmp/tmpu98sn0h4.swift:17:9: warning: variable 'v' was never\
    \ used; consider replacing with '_' or removing it\n    var v: Int = 0\n     \
    \   ^\n        _\n/tmp/tmpu98sn0h4.swift:18:9: warning: variable 'w' was never\
    \ used; consider replacing with '_' or removing it\n    var w: Int = 0\n     \
    \   ^\n        _\n/tmp/tmpu98sn0h4.swift:19:9: warning: variable 'x' was never\
    \ used; consider replacing with '_' or removing it\n    var x: Int = 0\n     \
    \   ^\n        _\n/tmp/tmpu98sn0h4.swift:20:9: warning: variable 'y' was never\
    \ used; consider replacing with '_' or removing it\n    var y: Int = 0\n     \
    \   ^\n        _\n/tmp/tmpu98sn0h4.swift:21:9: warning: variable 'z' was never\
    \ used; consider replacing with '_' or "
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpopls7net/tmpopls7net.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afecde50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afecdb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afecdb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afecdb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopls7net                        0x00005607c48cf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afece03c460 __libc_start_main +
    245

    6    tmpopls7net                        0x00005607c48cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    var divisor = 2\n    while !maxFactorFound\
    \ {\n        if n % divisor == 0 {\n            maxFactorFound = true\n      \
    \      maxFactor = divisor\n        }\n        divisor++\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp4k8emu50.swift:16:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        divisor++\n               ^~\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    var primeFactors = Set<Int>()\n    var primeFactorFound\
    \ = false\n    for factor in 2...n {\n        if primeFactors.contains(factor)\
    \ {\n            primeFactorFound = true\n        }\n        if primeFactorFound\
    \ {\n            if factor > maxFactor {\n                maxFactor = factor\n\
    \            }\n        } else {\n            if factor > maxFactor {\n      \
    \          maxFactor = factor\n                maxFactorFound = true\n       \
    \     }\n        }\n        primeFactors.insert(factor)\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    } else {\n        return 0\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp6cxejswm/tmp6cxejswm.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf310d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf30dccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf30dcc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf30dcb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6cxejswm                        0x0000560323bf9495 <unavailable> + 5269

    5    libc.so.6                          0x00002abf312c1460 __libc_start_main +
    245

    6    tmp6cxejswm                        0x0000560323bf9149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpo5s8_r7z/tmpo5s8_r7z.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add0a83fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add0a536b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add0a536988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add0a5357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo5s8_r7z                        0x000055f75a9ca3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002add0aa2b460 __libc_start_main +
    245

    6    tmpo5s8_r7z                        0x000055f75a9c9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var largest = 1\n    var largestPrimeFactor = 1\n    for i :=\
    \ 2; i <= n; i++ {\n        if n % i == 0 {\n            largest = i\n       \
    \     largestPrimeFactor = i\n        }\n    }\n    return largestPrimeFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp6opy5dk0.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp6opy5dk0.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmp6opy5dk0.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    var\
    \ primeFactors = [1]\n    for factor in 2...n {\n        if primeFactors[factor-1]\
    \ == 0 {\n            primeFactors[factor-1] = 1\n            primeFactors[factor]\
    \ = factor\n            if factor > maxFactor {\n                maxFactor = factor\n\
    \                maxFactorFound = true\n            }\n        }\n    }\n    if\
    \ !maxFactorFound {\n        return n\n    }\n    return maxFactor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab97a412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab97a109561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab97a109286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab97a10913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab97a108bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab979f08e83 <unavailable> + 188035

    6    tmpbgg02_dy                        0x000055bc835378c5 <unavailable> + 6341

    7    tmpbgg02_dy                        0x000055bc83537478 <unavailable> + 5240

    8    libc.so.6                          0x00002ab97a5fe460 __libc_start_main +
    245

    9    tmpbgg02_dy                        0x000055bc83537199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n\
    \    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpp153kdai/tmpp153kdai.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad55369c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad55060b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad55060988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad5505f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp153kdai                        0x00005612d97203b0 <unavailable> + 5040

    5    libc.so.6                          0x00002aad55555460 __libc_start_main +
    245

    6    tmpp153kdai                        0x00005612d971ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpopls7net/tmpopls7net.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afecde50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afecdb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afecdb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afecdb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopls7net                        0x00005607c48cf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afece03c460 __libc_start_main +
    245

    6    tmpopls7net                        0x00005607c48cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest = 1\n    var\
    \ factor = 2\n    var i = 1\n    while i <= n {\n        if n % i == 0 {\n   \
    \         largest = factor\n            factor = 1\n        } else {\n       \
    \     factor++\n        }\n        i += 1\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpmbsxb_rs.swift:16:19: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            factor++\n                  ^~\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor: Int = 0\n\
    \    var max_factor_index: Int = 0\n    for i := 2; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            if max_factor < i {\n                max_factor =\
    \ i\n                max_factor_index = i\n            }\n        }\n    }\n \
    \   return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpnh0yh286.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpnh0yh286.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpnh0yh286.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpopls7net/tmpopls7net.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afecde50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afecdb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afecdb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afecdb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopls7net                        0x00005607c48cf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afece03c460 __libc_start_main +
    245

    6    tmpopls7net                        0x00005607c48cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int = 0\n \
    \   var i: Int = 0\n    var j: Int = 0\n    var m: Int = 0\n    var p: Int = 0\n\
    \    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int =\
    \ 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int\
    \ = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b:\
    \ Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var\
    \ f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n   \
    \ var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n\
    \    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int =\
    \ 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int\
    \ = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y:\
    \ Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var\
    \ c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n   \
    \ var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n\
    \    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int =\
    \ 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int\
    \ = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v:\
    \ Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var\
    \ z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n   \
    \ var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n\
    \    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int =\
    \ 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int\
    \ = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s:\
    \ Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var\
    \ w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n   \
    \ var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpu3lcwdor.swift:31:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:9:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:32:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:10:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:35:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:11:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:38:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:12:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:39:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:13:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:40:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:14:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:41:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:15:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:42:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:16:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:43:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:17:9:\
    \ note: 'u' previously declared here\n    var u: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:44:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:18:9:\
    \ note: 'v' previously declared here\n    var v: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:45:9:\
    \ error: invalid redeclaration of 'w'\n    var w: Int = 0\n        ^\n/tmp/tmpu3lcwdor.swift:19:9:\
    \ note: 'w' previously declared here\n    var w: Int = 0\n  "
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int = 0\n \
    \   var i: Int = 0\n    var j: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n\
    \    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int =\
    \ 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int\
    \ = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a:\
    \ Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var\
    \ e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n   \
    \ var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n\
    \    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int =\
    \ 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int\
    \ = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y:\
    \ Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var\
    \ c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n   \
    \ var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n\
    \    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int =\
    \ 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int\
    \ = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w:\
    \ Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var\
    \ a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n   \
    \ var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n\
    \    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int =\
    \ 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int\
    \ = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u:\
    \ Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var\
    \ y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n   \
    \ var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n\
    \    var g: Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp9cj9mqh1.swift:32:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:9:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:33:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:10:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:36:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:11:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:37:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:12:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:38:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:13:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:39:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:14:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:40:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:15:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:41:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:16:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:42:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:17:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:43:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:18:9:\
    \ note: 'u' previously declared here\n    var u: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:44:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:19:9:\
    \ note: 'v' previously declared here\n    var v: Int = 0\n  "
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 3\n    }\n    if n % 2 == 0 {\n        return largest_prime_factor(n\
    \ / 2)\n    }\n    var max_factor = 2\n    var max_factor_index = 0\n    for i\
    \ := 3; i <= n/2; i++ {\n        if n % i == 0 {\n            if max_factor <\
    \ i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpvc7c07bo.swift:22:12: error: expected type\n    for i := 3; i <=\
    \ n/2; i++ {\n           ^\n            <#type#>\n/tmp/tmpvc7c07bo.swift:22:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= n/2; i++ {\n\
    \           ^\n/tmp/tmpvc7c07bo.swift:22:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 3; i <= n/2; i++ {\n           ^\n/tmp/tmpvc7c07bo.swift:18:37:\
    \ error: missing argument label 'n:' in call\n        return largest_prime_factor(n\
    \ / 2)\n                                    ^\n                              \
    \      n: \n"
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         } else {\n                maxFactorFound = true\n                maxFactor\
    \ = factor\n            }\n        }\n    }\n    return maxFactor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpm7mbsxnd/tmpm7mbsxnd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaadc7a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaadc499b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaadc499988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaadc4987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm7mbsxnd                        0x0000559057a663b0 <unavailable> + 5040

    5    libc.so.6                          0x00002aaadc98e460 __libc_start_main +
    245

    6    tmpm7mbsxnd                        0x0000559057a65fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n\
    \    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpp153kdai/tmpp153kdai.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad55369c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad55060b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad55060988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad5505f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp153kdai                        0x00005612d97203b0 <unavailable> + 5040

    5    libc.so.6                          0x00002aad55555460 __libc_start_main +
    245

    6    tmpp153kdai                        0x00005612d971ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor: Int = 0\n\
    \    var max_factor_index: Int = 0\n    for i := 2; i <= n/2; i += 1 {\n     \
    \   if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpiimx55cz.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n/2; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpiimx55cz.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n/2; i +=\
    \ 1 {\n           ^\n/tmp/tmpiimx55cz.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n/2; i += 1 {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let mut i = 2\n    let\
    \ mut largest = i\n    while i * i <= n {\n        if n % i == 0 {\n         \
    \   largest = i\n        }\n        i += 2\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpmlkddv9o.swift:8:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 2\n\
    \            ^\n/tmp/tmpmlkddv9o.swift:8:13: note: join the identifiers together\n\
    \    let mut i = 2\n        ~~~~^\n        muti\n/tmp/tmpmlkddv9o.swift:8:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 2\n   \
    \     ~~~~^\n        mutI\n/tmp/tmpmlkddv9o.swift:9:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut largest = i\n            ^\n/tmp/tmpmlkddv9o.swift:9:13: note: join\
    \ the identifiers together\n    let mut largest = i\n        ~~~~^~~~~~~\n   \
    \     mutlargest\n/tmp/tmpmlkddv9o.swift:9:13: note: join the identifiers together\
    \ with camel-case\n    let mut largest = i\n        ~~~~^~~~~~~\n        mutLargest\n\
    /tmp/tmpmlkddv9o.swift:9:23: error: cannot find 'i' in scope\n    let mut largest\
    \ = i\n                      ^\n/tmp/tmpmlkddv9o.swift:10:11: error: cannot find\
    \ 'i' in scope\n    while i * i <= n {\n          ^\n/tmp/tmpmlkddv9o.swift:10:15:\
    \ error: cannot find 'i' in scope\n    while i * i <= n {\n              ^\n/tmp/tmpmlkddv9o.swift:10:13:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \    while i * i <= n {\n            ^\n/tmp/tmpmlkddv9o.swift:11:16: error: cannot\
    \ find 'i' in scope\n        if n % i == 0 {\n               ^\n/tmp/tmpmlkddv9o.swift:12:13:\
    \ error: cannot find 'largest' in scope\n            largest = i\n           \
    \ ^~~~~~~\n/tmp/tmpmlkddv9o.swift:12:23: error: cannot find 'i' in scope\n   \
    \         largest = i\n                      ^\n/tmp/tmpmlkddv9o.swift:14:9: error:\
    \ cannot find 'i' in scope\n        i += 2\n        ^\n/tmp/tmpmlkddv9o.swift:16:12:\
    \ error: cannot find 'largest' in scope\n    return largest\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor: Int = 0\n\
    \    var max_factor_index: Int = 0\n    for i : Int in 2..<n {\n        if n %\
    \ i == 0 {\n            if max_factor < i {\n                max_factor = i\n\
    \                max_factor_index = i\n            }\n        }\n    }\n    return\
    \ max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmp82tu8qsd/tmp82tu8qsd.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37bea36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37be72db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37be72d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37be72c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp82tu8qsd                        0x000055cbf08b33b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b37bec22460 __libc_start_main +
    245

    6    tmp82tu8qsd                        0x000055cbf08b2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpopls7net/tmpopls7net.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afecde50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afecdb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afecdb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afecdb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopls7net                        0x00005607c48cf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afece03c460 __libc_start_main +
    245

    6    tmpopls7net                        0x00005607c48cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = 2 // start at 2 because 2 is the largest factor\
    \ of 2\n    var maxFactorFound = false // start at false because 2 is the largest\
    \ factor of 2\n    for factor in 2...n {\n        if n % factor == 0 {\n     \
    \       if !maxFactorFound {\n                maxFactorFound = true\n        \
    \        maxFactor = factor\n            }\n        } else {\n            if maxFactorFound\
    \ {\n                return maxFactor\n            }\n        }\n    }\n    return\
    \ maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpq_skd9r_/tmpq_skd9r_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70e8e24c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70e8b1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70e8b1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70e8b1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq_skd9r_                        0x000056010df6f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b70e9010460 __libc_start_main +
    245

    6    tmpq_skd9r_                        0x000056010df6efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int = 0\n \
    \   var i: Int = 0\n    var j: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n\
    \    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int =\
    \ 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int\
    \ = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a:\
    \ Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var\
    \ e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n   \
    \ var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n\
    \    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int =\
    \ 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int\
    \ = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y:\
    \ Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var\
    \ c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n   \
    \ var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n\
    \    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int =\
    \ 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int\
    \ = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w:\
    \ Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var\
    \ a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n   \
    \ var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n\
    \    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int =\
    \ 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int\
    \ = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u:\
    \ Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var\
    \ y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n   \
    \ var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n\
    \    var g: Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp9cj9mqh1.swift:32:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:9:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:33:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:10:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:36:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:11:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:37:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:12:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:38:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:13:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:39:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:14:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:40:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:15:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:41:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:16:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:42:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:17:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:43:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:18:9:\
    \ note: 'u' previously declared here\n    var u: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:44:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int = 0\n        ^\n/tmp/tmp9cj9mqh1.swift:19:9:\
    \ note: 'v' previously declared here\n    var v: Int = 0\n  "
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var factor: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n\
    \    var m: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int =\
    \ 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int\
    \ = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z:\
    \ Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var\
    \ d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n   \
    \ var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n\
    \    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int =\
    \ 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int\
    \ = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w:\
    \ Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var\
    \ a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n   \
    \ var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n\
    \    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int =\
    \ 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int\
    \ = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t:\
    \ Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var\
    \ x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n   \
    \ var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n\
    \    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int =\
    \ 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int\
    \ = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q:\
    \ Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var\
    \ u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n   \
    \ var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n\
    \    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpi8aqzbiq.swift:106:8: error: expected pattern\n    var \n     \
    \  ^\n/tmp/tmpi8aqzbiq.swift:34:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:12:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:35:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:13:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:38:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:14:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:41:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:15:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:42:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:16:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:43:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:17:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:44:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:18:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:45:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:19:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:46:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:20:9:\
    \ note: 'u' previously declared here\n    var u: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:47:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:21:9:\
    \ note: 'v' previously declared here\n    var v: Int = 0\n        ^\n/tmp/tmpi8aqzbiq.swift:48:9:\
    \ error: invalid redeclaration of 'w'\n    var w: Int = 0\n        ^\n/tmp/tmpi8aq"
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpopls7net/tmpopls7net.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afecde50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afecdb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afecdb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afecdb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopls7net                        0x00005607c48cf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afece03c460 __libc_start_main +
    245

    6    tmpopls7net                        0x00005607c48cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014217
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         } else {\n                maxFactor = factor\n                maxFactorFound\
    \ = true\n            }\n        }\n    }\n    if maxFactorFound {\n        return\
    \ maxFactor\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmps9_makwu/tmps9_makwu.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af219dbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af219ab3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af219ab3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af219ab27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps9_makwu                        0x00005627005633b0 <unavailable> + 5040

    5    libc.so.6                          0x00002af219fa8460 __libc_start_main +
    245

    6    tmps9_makwu                        0x0000562700562fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor = 1\n    var max_factor_index = 0\n    for i :=\
    \ 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor < i {\n\
    \                max_factor = i\n                max_factor_index = i\n      \
    \      }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp4mmdpp9z.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp4mmdpp9z.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmp4mmdpp9z.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor: Int = 0\n\
    \    var max_factor_index: Int = 0\n    for i := 2; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            if max_factor < i {\n                max_factor =\
    \ i\n                max_factor_index = i\n            }\n        }\n    }\n \
    \   return max_factor_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpyda41tx9.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpyda41tx9.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpyda41tx9.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n \
    \   for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpvao791tx.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpvao791tx.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpvao791tx.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors = prime_factors(n)\n\
    \    if factors.count > 0 {\n        return factors.maxElement()!\n    }\n   \
    \ return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpoyq6ayob.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014218
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor: Int = 0\n\
    \    var max_factor_index: Int = 0\n    for i := 2; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            if max_factor < i {\n                max_factor =\
    \ i\n                max_factor_index = i\n            }\n        }\n    }\n \
    \   return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpnh0yh286.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpnh0yh286.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpnh0yh286.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014217
