language: swift
name: HumanEval_5_intersperse
results:
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var lastNumber = 0\n    for number\
    \ in numbers {\n        if number != lastNumber {\n            result.append(number)\n\
    \            result.append(delimeter)\n        }\n        lastNumber = number\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpq2fmwjkx/tmpq2fmwjkx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05ea267c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05e9f5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05e9f5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05e9f5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq2fmwjkx                        0x00005587d651b6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b05ea453460 __libc_start_main +
    245

    6    tmpq2fmwjkx                        0x00005587d651b1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for number\
    \ in numbers {\n        result[index] = number\n        index++\n        if index\
    \ == delimeter {\n            index = 0\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmponyjl44s.swift:12:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce(into: [Int](), { result, number in\n\
    \        result[result.count] = number\n        result.insert(result.count, delimeter)\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(intersperse(numbers: []\
    \ as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6,\
    \ 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmps88d_pgd.swift:10:22: error: missing argument label 'at:' in call\n\
    \        result.insert(result.count, delimeter)\n                     ^\n    \
    \                                at: \n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { $0.append($1).append(delimeter)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(intersperse(numbers: [] as [Int],\
    \ delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter:\
    \ 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter:\
    \ 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpjm1dcy6q.swift:8:47: error: value of tuple type '()' has no member\
    \ 'append'\n    return numbers.reduce([]) { $0.append($1).append(delimeter) }\n\
    \                                ~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { $0.append($1).append(delimeter)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(intersperse(numbers: [] as [Int],\
    \ delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter:\
    \ 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter:\
    \ 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpjm1dcy6q.swift:8:47: error: value of tuple type '()' has no member\
    \ 'append'\n    return numbers.reduce([]) { $0.append($1).append(delimeter) }\n\
    \                                ~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { $0.append($1).append(delimeter)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(intersperse(numbers: [] as [Int],\
    \ delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter:\
    \ 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter:\
    \ 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpjm1dcy6q.swift:8:47: error: value of tuple type '()' has no member\
    \ 'append'\n    return numbers.reduce([]) { $0.append($1).append(delimeter) }\n\
    \                                ~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce(into: [Int](), { $0.append($1).append($2)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(intersperse(numbers: [] as [Int],\
    \ delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter:\
    \ 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter:\
    \ 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbj6x7ynb.swift:8:42: error: contextual closure type '(inout [Int],\
    \ Int) throws -> ()' expects 2 arguments, but 3 were used in closure body\n  \
    \  return numbers.reduce(into: [Int](), { $0.append($1).append($2) })\n      \
    \                                   ^\n/tmp/tmpbj6x7ynb.swift:8:58: error: value\
    \ of tuple type '()' has no member 'append'\n    return numbers.reduce(into: [Int](),\
    \ { $0.append($1).append($2) })\n                                           ~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce(into: [Int](), { $0.append($1).append($2)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(intersperse(numbers: [] as [Int],\
    \ delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter:\
    \ 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter:\
    \ 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbj6x7ynb.swift:8:42: error: contextual closure type '(inout [Int],\
    \ Int) throws -> ()' expects 2 arguments, but 3 were used in closure body\n  \
    \  return numbers.reduce(into: [Int](), { $0.append($1).append($2) })\n      \
    \                                   ^\n/tmp/tmpbj6x7ynb.swift:8:58: error: value\
    \ of tuple type '()' has no member 'append'\n    return numbers.reduce(into: [Int](),\
    \ { $0.append($1).append($2) })\n                                           ~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var numbersInOrder = [Int]()\n    for number in numbers\
    \ {\n        numbersInOrder.append(number)\n    }\n    var result = [Int]()\n\
    \    for number in numbersInOrder {\n        result.append(number)\n        result.append(delimeter)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpeu4m6ahb/tmpeu4m6ahb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e74cd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e749d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e749d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e749cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeu4m6ahb                        0x000055efa8c846ef <unavailable> + 5871

    5    libc.so.6                          0x00002b8e74ec5460 __libc_start_main +
    245

    6    tmpeu4m6ahb                        0x000055efa8c841e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { (result, number) -> [Int] in\n\
    \        var result = result\n        if number != 0 {\n            result = result\
    \ + [number]\n        }\n        if number != 0 {\n            result = result\
    \ + [delimeter]\n        }\n        return result\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7) == []\
    \ as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) == [5, 8,\
    \ 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2) == [2,\
    \ 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpyugnj6mh/tmpyugnj6mh.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d84f69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d84c60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d84c60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d84c5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyugnj6mh                        0x0000560e001c95af <unavailable> + 5551

    5    libc.so.6                          0x00002b1d85155460 __libc_start_main +
    245

    6    tmpyugnj6mh                        0x0000560e001c90a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for number\
    \ in numbers {\n        result[index] = number\n        index++\n        if index\
    \ == delimeter {\n            index = 0\n            result.append(number)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp0jlwc2vd.swift:12:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var lastNumber = 0\n    for number\
    \ in numbers {\n        result.append(number)\n        lastNumber = number\n \
    \   }\n    for number in result {\n        result[result.index(number) + 1] =\
    \ delimeter\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpoijm65on.swift:15:23: error: no exact matches in call to instance\
    \ method 'index'\n        result[result.index(number) + 1] = delimeter\n     \
    \                 ^\nSwift.Array:7:28: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(after:)')\n    @inlinable public func index(after i: Int)\
    \ -> Int\n                           ^\nSwift.Array:9:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public func\
    \ index(before i: Int) -> Int\n                           ^\nSwift.RandomAccessCollection:3:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(after:)')\n\
    \    @inlinable public func index(after i: Self.Index) -> Self.Index\n       \
    \                    ^\nSwift.RandomAccessCollection:4:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public func\
    \ index(before i: Self.Index) -> Self.Index\n                           ^\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var numbersInOrder = numbers\n    var result = [Int]()\n\
    \    for number in numbersInOrder {\n        result.append(number)\n        if\
    \ number != delimeter {\n            result.append(delimeter)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmp1hq_6xg6/tmp1hq_6xg6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b22b0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b22806b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b22806988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b228057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1hq_6xg6                        0x000055c74aa306ef <unavailable> + 5871

    5    libc.so.6                          0x00002b1b22cfb460 __libc_start_main +
    245

    6    tmp1hq_6xg6                        0x000055c74aa301e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce(into: [Int](), { result, number in\n\
    \        result[result.count] = number\n        result.insert(result.count, delimeter)\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(intersperse(numbers: []\
    \ as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6,\
    \ 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmps88d_pgd.swift:10:22: error: missing argument label 'at:' in call\n\
    \        result.insert(result.count, delimeter)\n                     ^\n    \
    \                                at: \n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { $0 + [$1, $2, delimeter] }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpnfe3ptmm.swift:8:31: error: contextual closure type '([Int], Int)\
    \ throws -> [Int]' expects 2 arguments, but 3 were used in closure body\n    return\
    \ numbers.reduce([]) { $0 + [$1, $2, delimeter] }\n                          \
    \    ^\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce(into: [Int](), { $0.append(contentsOf:\
    \ $1.suffix(from: delimeter)) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpsfmfbagf.swift:8:69: error: value of type 'Int' has no member 'suffix'\n\
    \    return numbers.reduce(into: [Int](), { $0.append(contentsOf: $1.suffix(from:\
    \ delimeter)) })\n                                                           \
    \      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for number in\
    \ numbers {\n        result.append(number)\n        if i != numbers.count - 1\
    \ {\n            result.append(delimeter)\n        }\n        i += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var numbers = numbers\n    var delimeter = delimeter\n\
    \    var result = [Int]()\n    for number in numbers {\n        result.append(number)\n\
    \        if number == delimeter {\n            result.append(number)\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpqtclzove/tmpqtclzove.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9fb34ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9fb041b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9fb041988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9fb0407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqtclzove                        0x00005559d2bcd6ef <unavailable> + 5871

    5    libc.so.6                          0x00002af9fb536460 __libc_start_main +
    245

    6    tmpqtclzove                        0x00005559d2bcd1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce(into: [Int](), { result, number in\n\
    \        result[result.count] = number\n        result.insert(result.count, delimeter)\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(intersperse(numbers: []\
    \ as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6,\
    \ 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmps88d_pgd.swift:10:22: error: missing argument label 'at:' in call\n\
    \        result.insert(result.count, delimeter)\n                     ^\n    \
    \                                at: \n"
  stdout: ''
  timestamp: 1659824692
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for number in\
    \ numbers {\n        result.append(number)\n        if i != numbers.count - 1\
    \ {\n            result.append(delimeter)\n        }\n        i += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for number in\
    \ numbers {\n        result.append(number)\n        i += 1\n        if i == delimeter\
    \ {\n            result.append(number)\n            i = 0\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpfcy4gxmn/tmpfcy4gxmn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1c9279c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1c8f70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1c8f70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1c8f6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy4gxmn                        0x00005618962166ef <unavailable> + 5871

    5    libc.so.6                          0x00002ac1c9465460 __libc_start_main +
    245

    6    tmpfcy4gxmn                        0x00005618962161e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var numbers = [Int]()\n    for number in numbers {\n  \
    \      numbers.append(number)\n    }\n    var result = [Int]()\n    for number\
    \ in numbers {\n        result.append(number)\n    }\n    for number in numbers\
    \ {\n        result.append(delimeter)\n        result.append(number)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpy5k44j1f/tmpy5k44j1f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf109eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf106e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf106e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf106e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5k44j1f                        0x000055a2c71066ef <unavailable> + 5871

    5    libc.so.6                          0x00002abf10bd6460 __libc_start_main +
    245

    6    tmpy5k44j1f                        0x000055a2c71061e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { $0.insert($1, $0).append($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(intersperse(numbers: [] as [Int],\
    \ delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter:\
    \ 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter:\
    \ 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp63d614ih.swift:8:36: error: no exact matches in call to instance\
    \ method 'insert'\n    return numbers.reduce([]) { $0.insert($1, $0).append($1)\
    \ }\n                                   ^\n/tmp/tmp63d614ih.swift:8:36: note:\
    \ found candidate with type '(__owned Int, Int) -> ()'\n    return numbers.reduce([])\
    \ { $0.insert($1, $0).append($1) }\n                                   ^\n/tmp/tmp63d614ih.swift:8:51:\
    \ error: value of tuple type '()' has no member 'append'\n    return numbers.reduce([])\
    \ { $0.insert($1, $0).append($1) }\n                                ~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { $0 + [$1, $2, delimeter] }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpnfe3ptmm.swift:8:31: error: contextual closure type '([Int], Int)\
    \ throws -> [Int]' expects 2 arguments, but 3 were used in closure body\n    return\
    \ numbers.reduce([]) { $0 + [$1, $2, delimeter] }\n                          \
    \    ^\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for number in\
    \ numbers {\n        result.append(number)\n        if i != numbers.count - 1\
    \ {\n            result.append(delimeter)\n        }\n        i += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { (result, number) -> [Int] in\n\
    \        var result = result\n        if number != nil {\n            result.append(number)\n\
    \        }\n        if result.last == nil {\n            result.append(nil)\n\
    \        }\n        result.append(delimeter)\n        return result\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmplcl76rig.swift:14:27: error: 'nil' is not compatible with expected\
    \ argument type 'Int'\n            result.append(nil)\n                      \
    \    ^\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var numbers = [Int]()\n    for number in numbers {\n  \
    \      numbers.append(number)\n    }\n    var result = [Int]()\n    for number\
    \ in numbers {\n        result.append(number)\n        result.append(delimeter)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpdbi_26yi/tmpdbi_26yi.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06a754fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06a7246b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06a7246988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06a72457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdbi_26yi                        0x00005559756d86ef <unavailable> + 5871

    5    libc.so.6                          0x00002b06a773b460 __libc_start_main +
    245

    6    tmpdbi_26yi                        0x00005559756d81e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var numbersInOrder = numbers\n    var interspersedNumbers\
    \ = [Int]()\n    for number in numbersInOrder {\n        interspersedNumbers.append(number)\n\
    \        interspersedNumbers.append(delimeter)\n    }\n    return interspersedNumbers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpihnl5eao/tmpihnl5eao.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16ea948c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16ea63fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16ea63f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16ea63e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpihnl5eao                        0x0000558f91a696ef <unavailable> + 5871

    5    libc.so.6                          0x00002b16eab34460 __libc_start_main +
    245

    6    tmpihnl5eao                        0x0000558f91a691e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for number in\
    \ numbers {\n        result.append(number)\n        i += 1\n        if i == delimeter\
    \ {\n            result.append(number)\n            i = 0\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpfcy4gxmn/tmpfcy4gxmn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1c9279c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1c8f70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1c8f70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1c8f6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy4gxmn                        0x00005618962166ef <unavailable> + 5871

    5    libc.so.6                          0x00002ac1c9465460 __libc_start_main +
    245

    6    tmpfcy4gxmn                        0x00005618962161e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for number\
    \ in numbers {\n        result[index] = number\n        index++\n        if index\
    \ == delimeter {\n            index = 0\n            result.append(number)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp0jlwc2vd.swift:12:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for number\
    \ in numbers {\n        result[index] = number\n        index++\n        if index\
    \ == delimeter {\n            index = 0\n            result.append(number)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp0jlwc2vd.swift:12:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { (result, number) -> [Int] in\n\
    \        var result: [Int] = []\n        for number in result {\n            result.append(number)\n\
    \            result.append(delimeter)\n        }\n        result.append(number)\n\
    \        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmp24g8csmb/tmp24g8csmb.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8beda84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8bed77bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8bed77b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8bed77a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp24g8csmb                        0x000055d9ad53e70f <unavailable> + 5903

    5    libc.so.6                          0x00002b8bedc70460 __libc_start_main +
    245

    6    tmp24g8csmb                        0x000055d9ad53e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce(into: [Int](), { $0.append($1).append($2)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(intersperse(numbers: [] as [Int],\
    \ delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter:\
    \ 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter:\
    \ 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbj6x7ynb.swift:8:42: error: contextual closure type '(inout [Int],\
    \ Int) throws -> ()' expects 2 arguments, but 3 were used in closure body\n  \
    \  return numbers.reduce(into: [Int](), { $0.append($1).append($2) })\n      \
    \                                   ^\n/tmp/tmpbj6x7ynb.swift:8:58: error: value\
    \ of tuple type '()' has no member 'append'\n    return numbers.reduce(into: [Int](),\
    \ { $0.append($1).append($2) })\n                                           ~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce(into: [Int](), { result, number in\n\
    \        result[result.count] = number\n        result.insert(result.count, delimeter)\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(intersperse(numbers: []\
    \ as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6,\
    \ 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmps88d_pgd.swift:10:22: error: missing argument label 'at:' in call\n\
    \        result.insert(result.count, delimeter)\n                     ^\n    \
    \                                at: \n"
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce(into: [Int](), { $0.append($1).append($2)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(intersperse(numbers: [] as [Int],\
    \ delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter:\
    \ 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter:\
    \ 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbj6x7ynb.swift:8:42: error: contextual closure type '(inout [Int],\
    \ Int) throws -> ()' expects 2 arguments, but 3 were used in closure body\n  \
    \  return numbers.reduce(into: [Int](), { $0.append($1).append($2) })\n      \
    \                                   ^\n/tmp/tmpbj6x7ynb.swift:8:58: error: value\
    \ of tuple type '()' has no member 'append'\n    return numbers.reduce(into: [Int](),\
    \ { $0.append($1).append($2) })\n                                           ~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { (result, number) -> [Int] in\n\
    \        var result = result\n        if number != 0 {\n            result = result\
    \ + [number]\n        }\n        result = result + [delimeter]\n        return\
    \ result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpr_p_dmgd/tmpr_p_dmgd.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b528b13bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b528ae32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b528ae32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b528ae317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr_p_dmgd                        0x0000558aa11195af <unavailable> + 5551

    5    libc.so.6                          0x00002b528b327460 __libc_start_main +
    245

    6    tmpr_p_dmgd                        0x0000558aa11190a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce(into: []) {\n        if $0.count\
    \ < 2 {\n            $0.append($1)\n        } else {\n            $0.insert($0.endIndex,\
    \ delimeter)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp9ug4x48v.swift:12:22: error: missing argument label 'at:' in call\n\
    \            $0.insert($0.endIndex, delimeter)\n                     ^\n     \
    \                              at: \n"
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce(into: [Int](), { $0.append($1).append($2);\
    \ $0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(intersperse(numbers: []\
    \ as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6,\
    \ 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpap_13end.swift:8:42: error: contextual closure type '(inout [Int],\
    \ Int) throws -> ()' expects 2 arguments, but 3 were used in closure body\n  \
    \  return numbers.reduce(into: [Int](), { $0.append($1).append($2); $0 })\n  \
    \                                       ^\n/tmp/tmpap_13end.swift:8:44: note:\
    \ anonymous closure parameter '$0' is used here\n    return numbers.reduce(into:\
    \ [Int](), { $0.append($1).append($2); $0 })\n                               \
    \            ^\n/tmp/tmpap_13end.swift:8:54: note: anonymous closure parameter\
    \ '$1' is used here\n    return numbers.reduce(into: [Int](), { $0.append($1).append($2);\
    \ $0 })\n                                                     ^\n/tmp/tmpap_13end.swift:8:65:\
    \ note: anonymous closure parameter '$2' is used here\n    return numbers.reduce(into:\
    \ [Int](), { $0.append($1).append($2); $0 })\n                               \
    \                                 ^\n/tmp/tmpap_13end.swift:8:70: note: anonymous\
    \ closure parameter '$0' is used here\n    return numbers.reduce(into: [Int](),\
    \ { $0.append($1).append($2); $0 })\n                                        \
    \                             ^\n/tmp/tmpap_13end.swift:8:58: error: value of\
    \ tuple type '()' has no member 'append'\n    return numbers.reduce(into: [Int](),\
    \ { $0.append($1).append($2); $0 })\n                                        \
    \   ~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { $0 + [$1, delimeter] + $1 }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdm_nu_pj.swift:8:56: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Array<Int>'\n    return numbers.reduce([]) { $0 +\
    \ [$1, delimeter] + $1 }\n                                                   \
    \    ^\n"
  stdout: ''
  timestamp: 1659824693
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { $0.append($1).append(delimeter)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(intersperse(numbers: [] as [Int],\
    \ delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter:\
    \ 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter:\
    \ 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpjm1dcy6q.swift:8:47: error: value of tuple type '()' has no member\
    \ 'append'\n    return numbers.reduce([]) { $0.append($1).append(delimeter) }\n\
    \                                ~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var numbersIndices = numbers.indices\n    var result =\
    \ [Int]()\n    for index in numbersIndices {\n        result.append(numbers[index])\n\
    \        result.append(delimeter)\n        result.append(numbers[index])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpsb73fqvp/tmpsb73fqvp.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8d074ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8d0445b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8d0445988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8d04447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb73fqvp                        0x00005616124ed75f <unavailable> + 5983

    5    libc.so.6                          0x00002ae8d093a460 __libc_start_main +
    245

    6    tmpsb73fqvp                        0x00005616124ed259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var numbersInOrder = numbers\n    for var i = 0; i < numbers.count\
    \ - 1; i++ {\n        numbersInOrder = numbersInOrder.insert(numbersInOrder.startIndex,\
    \ delimeter)\n    }\n    return numbersInOrder\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\n\
    assert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8,\
    \ 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp12ja7i5a.swift:9:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < numbers.count - 1; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var numbersInOrder = numbers\n    for var i = 0; i < numbers.count\
    \ - 1; i++ {\n        numbersInOrder = numbersInOrder.insert(numbersInOrder.startIndex,\
    \ delimeter)\n    }\n    return numbersInOrder\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\n\
    assert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8,\
    \ 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp12ja7i5a.swift:9:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < numbers.count - 1; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var numbersInOrder = numbers\n    for var i = 0; i < numbers.count;\
    \ i++ {\n        numbersInOrder = numbersInOrder.insert(numbersInOrder.startIndex,\
    \ delimeter)\n    }\n    return numbersInOrder\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\n\
    assert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8,\
    \ 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpz7oepifj.swift:9:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < numbers.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { $0.append($1).append(delimeter)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(intersperse(numbers: [] as [Int],\
    \ delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter:\
    \ 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter:\
    \ 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpjm1dcy6q.swift:8:47: error: value of tuple type '()' has no member\
    \ 'append'\n    return numbers.reduce([]) { $0.append($1).append(delimeter) }\n\
    \                                ~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce(into: [Int](), { $0.append($1).append($2)\
    \ })\n        .enumerated().map { i, number in\n            guard i > 0 else {\
    \ return }\n            return number\n        }\n        .reduce(into: [Int](),\
    \ { $0.append($1) })\n        .append(delimeter)\n        .enumerated().map {\
    \ i, number in\n            guard i < numbers.count else { return }\n        \
    \    return number\n        }\n        .reduce(into: [Int](), { $0.append($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(intersperse(numbers: [] as [Int],\
    \ delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter:\
    \ 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter:\
    \ 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp7icc81pd.swift:8:42: error: contextual closure type '(inout [Int],\
    \ Int) throws -> ()' expects 2 arguments, but 3 were used in closure body\n  \
    \  return numbers.reduce(into: [Int](), { $0.append($1).append($2) })\n      \
    \                                   ^\n/tmp/tmp7icc81pd.swift:8:58: error: value\
    \ of tuple type '()' has no member 'append'\n    return numbers.reduce(into: [Int](),\
    \ { $0.append($1).append($2) })\n                                           ~~~~~~~~~~~~~\
    \ ^~~~~~\n/tmp/tmp7icc81pd.swift:10:32: error: cannot convert return expression\
    \ of type '()' to return type 'Int'\n            guard i > 0 else { return }\n\
    \                               ^~~~~~\n/tmp/tmp7icc81pd.swift:14:10: error: cannot\
    \ use mutating member on immutable value: function call returns immutable value\n\
    \        .append(delimeter)\n         ^\n/tmp/tmp7icc81pd.swift:15:10: error:\
    \ value of tuple type '()' has no member 'enumerated'\n        .enumerated().map\
    \ { i, number in\n         ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce(into: [Int](), { $0.append($1).append($2)\
    \ })\n        .enumerated().map { $0.element + delimeter * $0.offset + $0.element\
    \ }\n        .reduce(into: [Int](), { $0.append($1) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as\
    \ [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) == [5, 8, 6,\
    \ 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2) == [2, 2,\
    \ 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpqmifupo0.swift:8:42: error: contextual closure type '(inout [Int],\
    \ Int) throws -> ()' expects 2 arguments, but 3 were used in closure body\n  \
    \  return numbers.reduce(into: [Int](), { $0.append($1).append($2) })\n      \
    \                                   ^\n/tmp/tmpqmifupo0.swift:8:58: error: value\
    \ of tuple type '()' has no member 'append'\n    return numbers.reduce(into: [Int](),\
    \ { $0.append($1).append($2) })\n                                           ~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824717
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for number in\
    \ numbers {\n        result.append(number)\n        if i != numbers.count - 1\
    \ {\n            result.append(delimeter)\n        }\n        i += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { (result, number) -> [Int] in\n\
    \        var result: [Int] = []\n        for i in 0..<numbers.count {\n      \
    \      result.append(number)\n            result.append(delimeter)\n        }\n\
    \        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmp3uyvran9/tmp3uyvran9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad650dd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad650acbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad650acb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad650aca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3uyvran9                        0x000055f73174e77f <unavailable> + 6015

    5    libc.so.6                          0x00002ad650fc0460 __libc_start_main +
    245

    6    tmp3uyvran9                        0x000055f73174e279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var numbersInOrder = numbers\n    for index in stride(from:\
    \ 0, to: numbers.count, by: 1) {\n        numbersInOrder[index] = delimeter\n\
    \    }\n    return numbersInOrder\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpvuori_l8/tmpvuori_l8.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6742f1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6742c16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6742c16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6742c157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvuori_l8                        0x00005611a087978f <unavailable> + 6031

    5    libc.so.6                          0x00002b674310b460 __libc_start_main +
    245

    6    tmpvuori_l8                        0x00005611a0879289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var numbersInOrder = numbers\n    for var i = 0; i < numbers.count;\
    \ i++ {\n        if numbersInOrder.count > 0 {\n            numbersInOrder[numbersInOrder.count\
    \ - 1] = numbersInOrder[numbersInOrder.count - 1] + delimeter\n        }\n   \
    \     numbersInOrder[numbersInOrder.count] = numbers[i]\n    }\n    return numbersInOrder\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpzj37ytvo.swift:9:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < numbers.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var numbersInOrder = numbers\n    for index in 0..<numbers.count\
    \ {\n        let number = numbersInOrder[index]\n        numbersInOrder[index]\
    \ = number\n        numbersInOrder.insert(number, at: index)\n    }\n    return\
    \ numbersInOrder\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpna9tnps0/tmpna9tnps0.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6115c62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6115959b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6115959988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61159587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpna9tnps0                        0x0000556cde8617bf <unavailable> + 6079

    5    libc.so.6                          0x00002b6115e4e460 __libc_start_main +
    245

    6    tmpna9tnps0                        0x0000556cde8612b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659824693
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var numbersInOrder = numbers\n    for var i = 0; i < numbers.count\
    \ - 1; i++ {\n        numbersInOrder = numbersInOrder.insert(numbersInOrder.startIndex,\
    \ delimeter)\n    }\n    return numbersInOrder\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\n\
    assert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8,\
    \ 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp12ja7i5a.swift:9:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < numbers.count - 1; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { (result, number) -> [Int] in\n\
    \        var resultSlice = result\n        if number != 0 {\n            resultSlice\
    \ = resultSlice + [number]\n        }\n        resultSlice = resultSlice + [delimeter]\n\
    \        return resultSlice\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpkyle9el7/tmpkyle9el7.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4590a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac458da0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac458da0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac458d9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkyle9el7                        0x0000564692a2d5af <unavailable> + 5551

    5    libc.so.6                          0x00002ac459295460 __libc_start_main +
    245

    6    tmpkyle9el7                        0x0000564692a2d0a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1659824693
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for number in\
    \ numbers {\n        result.append(number)\n        if i < numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824693
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var numbersInOrder = numbers\n    for var i = 0; i < numbers.count;\
    \ i++ {\n        numbersInOrder = numbersInOrder.insert(i, delimeter)\n    }\n\
    \    return numbersInOrder\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdo5fb57o.swift:9:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < numbers.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var numbersInOrder = numbers\n    for var i = 0; i < numbers.count;\
    \ i++ {\n        numbersInOrder = numbersInOrder.map { $0 + delimeter + $1 }\n\
    \    }\n    return numbersInOrder\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpz1r4kq8g.swift:9:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < numbers.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { (result, number) -> [Int] in\n\
    \        var result = result\n        if number != nil {\n            result.append(number)\n\
    \        }\n        if result.count > 0 {\n            result.append(delimeter)\n\
    \        }\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmp_afexdf8/tmp_afexdf8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63ed9d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63ed6c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63ed6c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63ed6c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_afexdf8                        0x00005555f6b915ff <unavailable> + 5631

    5    libc.so.6                          0x00002b63edbbc460 __libc_start_main +
    245

    6    tmp_afexdf8                        0x00005555f6b910f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659824693
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var lastNumber = 0\n    for number\
    \ in numbers {\n        result.append(number)\n        lastNumber = number\n \
    \   }\n    for number in result {\n        result[result.index(number)] = delimeter\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpwf8bvdib.swift:15:23: error: no exact matches in call to instance\
    \ method 'index'\n        result[result.index(number)] = delimeter\n         \
    \             ^\nSwift.Array:7:28: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(after:)')\n    @inlinable public func index(after i: Int)\
    \ -> Int\n                           ^\nSwift.Array:9:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public func\
    \ index(before i: Int) -> Int\n                           ^\nSwift.RandomAccessCollection:3:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(after:)')\n\
    \    @inlinable public func index(after i: Self.Index) -> Self.Index\n       \
    \                    ^\nSwift.RandomAccessCollection:4:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public func\
    \ index(before i: Self.Index) -> Self.Index\n                           ^\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { $0 + [$1] + [$2] + [$3] + [$4]\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(intersperse(numbers: [] as [Int],\
    \ delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter:\
    \ 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter:\
    \ 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp7_p085w7.swift:8:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return numbers.reduce([]) { $0 + [$1] + [$2] + [$3] + [$4]\
    \ }\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for number in\
    \ numbers {\n        result.append(number)\n        if i != numbers.count - 1\
    \ {\n            result.append(delimeter)\n        }\n        i += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { $0.append($1).append(delimeter)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(intersperse(numbers: [] as [Int],\
    \ delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter:\
    \ 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter:\
    \ 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpjm1dcy6q.swift:8:47: error: value of tuple type '()' has no member\
    \ 'append'\n    return numbers.reduce([]) { $0.append($1).append(delimeter) }\n\
    \                                ~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var numbersInOrder = numbers\n    for index in stride(from:\
    \ 0, to: numbers.count, by: 1) {\n        numbersInOrder[index] = numbersInOrder[index]\
    \ + delimeter\n    }\n    return numbersInOrder\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\n\
    assert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8,\
    \ 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmptpedhl5n/tmptpedhl5n.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b813603ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8135d31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8135d31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8135d307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptpedhl5n                        0x000055d89ea4c7df <unavailable> + 6111

    5    libc.so.6                          0x00002b8136226460 __libc_start_main +
    245

    6    tmptpedhl5n                        0x000055d89ea4c2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824693
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var lastNumber = 0\n    for number\
    \ in numbers {\n        result.append(number)\n        lastNumber = number\n \
    \   }\n    for number in result {\n        result[result.index(number) + 1] =\
    \ delimeter\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpoijm65on.swift:15:23: error: no exact matches in call to instance\
    \ method 'index'\n        result[result.index(number) + 1] = delimeter\n     \
    \                 ^\nSwift.Array:7:28: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(after:)')\n    @inlinable public func index(after i: Int)\
    \ -> Int\n                           ^\nSwift.Array:9:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public func\
    \ index(before i: Int) -> Int\n                           ^\nSwift.RandomAccessCollection:3:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(after:)')\n\
    \    @inlinable public func index(after i: Self.Index) -> Self.Index\n       \
    \                    ^\nSwift.RandomAccessCollection:4:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public func\
    \ index(before i: Self.Index) -> Self.Index\n                           ^\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for number in\
    \ numbers {\n        result.append(number)\n        if i != numbers.count - 1\
    \ {\n            result.append(delimeter)\n        }\n        i += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824692
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for number in\
    \ numbers {\n        result.append(number)\n        if i != numbers.count - 1\
    \ {\n            result.append(delimeter)\n        }\n        i += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { (result, number) -> [Int] in\n\
    \        var result = result\n        if number != nil {\n            result =\
    \ result + [number]\n        }\n        result = result + [delimeter]\n      \
    \  return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmp8toohgja/tmp8toohgja.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2a683cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2a6533b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2a6533988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2a65327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8toohgja                        0x00005561f6a695af <unavailable> + 5551

    5    libc.so.6                          0x00002af2a6a28460 __libc_start_main +
    245

    6    tmp8toohgja                        0x00005561f6a690a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1659824693
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { $0.append($1).append(delimeter)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(intersperse(numbers: [] as [Int],\
    \ delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter:\
    \ 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter:\
    \ 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpjm1dcy6q.swift:8:47: error: value of tuple type '()' has no member\
    \ 'append'\n    return numbers.reduce([]) { $0.append($1).append(delimeter) }\n\
    \                                ~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce(into: [Int](), { result, number in\n\
    \        result.append(number)\n        result.insert(result.count, delimeter)\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(intersperse(numbers: []\
    \ as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6,\
    \ 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpgv3p8km5.swift:10:22: error: missing argument label 'at:' in call\n\
    \        result.insert(result.count, delimeter)\n                     ^\n    \
    \                                at: \n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for number\
    \ in numbers {\n        result[index] = number\n        index++\n        if index\
    \ == delimeter {\n            index = 0\n            result.append(number)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp0jlwc2vd.swift:12:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var numbersInOrder = numbers\n    for var i = 0; i < numbers.count;\
    \ i += 2 {\n        numbersInOrder = numbersInOrder.insert(numbersInOrder.startIndex,\
    \ delimeter)\n    }\n    return numbersInOrder\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\n\
    assert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8,\
    \ 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpsax36caz.swift:9:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < numbers.count; i += 2 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var last = 0\n    for number\
    \ in numbers {\n        result.append(number)\n        last = number\n    }\n\
    \    for number in numbers {\n        result.append(delimeter)\n        result.append(number)\n\
    \        last = number\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as\
    \ [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) == [5, 8, 6,\
    \ 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2) == [2, 2,\
    \ 2, 2, 2])"
  status: Exception
  stderr: 'tmp3eaad5tn/tmp3eaad5tn.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b641bf1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b641bc15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b641bc15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b641bc147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3eaad5tn                        0x00005562fc3bf6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b641c10a460 __libc_start_main +
    245

    6    tmp3eaad5tn                        0x00005562fc3bf1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824693
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for number\
    \ in numbers {\n        result[index] = number\n        index++\n        if index\
    \ == delimeter {\n            index = 0\n            result.append(number)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp0jlwc2vd.swift:12:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for number in\
    \ numbers {\n        result.append(number)\n        if i != numbers.count - 1\
    \ {\n            result.append(delimeter)\n        }\n        i += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for number in\
    \ numbers {\n        result.append(number)\n        i += 1\n        if i == delimeter\
    \ {\n            result.append(number)\n            i = 0\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpfcy4gxmn/tmpfcy4gxmn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1c9279c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1c8f70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1c8f70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1c8f6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy4gxmn                        0x00005618962166ef <unavailable> + 5871

    5    libc.so.6                          0x00002ac1c9465460 __libc_start_main +
    245

    6    tmpfcy4gxmn                        0x00005618962161e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for number\
    \ in numbers {\n        result[index] = number\n        index++\n        if index\
    \ == delimeter {\n            index = 0\n            result.append(number)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp0jlwc2vd.swift:12:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var numbersInOrder = numbers\n    for var i = 0; i < numbers.count\
    \ - 1; i++ {\n        numbersInOrder = numbersInOrder.insert(numbersInOrder[i],\
    \ delimeter)\n    }\n    return numbersInOrder\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\n\
    assert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8,\
    \ 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppq6ru2zr.swift:9:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < numbers.count - 1; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { $0.append($1).append(delimeter)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(intersperse(numbers: [] as [Int],\
    \ delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter:\
    \ 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter:\
    \ 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpjm1dcy6q.swift:8:47: error: value of tuple type '()' has no member\
    \ 'append'\n    return numbers.reduce([]) { $0.append($1).append(delimeter) }\n\
    \                                ~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce(into: [Int](), { $0.append($1).append($2)\
    \ })\n        .prefix(numbers.count).reduce(into: [Int](), { $0.append($1).append($2)\
    \ })\n        .suffix(numbers.count).reduce(into: [Int](), { $0.append($1).append($2)\
    \ })\n        .prefix(numbers.count).suffix(numbers.count).reduce(into: [Int](),\
    \ { $0.append($1).append($2) })\n        .prefix(numbers.count).suffix(numbers.count).reduce(into:\
    \ [Int](), { $0.append($1).append($2) })\n        .prefix(numbers.count).suffix(numbers.count).reduce(into:\
    \ [Int](), { $0.append($1).append($2) })\n        .prefix(numbers.count).suffix(numbers.count).reduce(into:\
    \ [Int](), { $0.append($1).append($2) })\n        .prefix(numbers.count).suffix(numbers.count).reduce(into:\
    \ [Int](), { $0.append($1).append($2) })\n        .prefix(numbers.count).suffix(numbers.count).reduce(into:\
    \ [Int](), { $0.append($1).append($2) })\n        .prefix(numbers.count).suffix(numbers.count).reduce(into:\
    \ [Int](), { $0.append($1).append($2) })\n        .prefix(numbers.count).suffix(numbers.count).reduce(into:\
    \ [Int](), { $0.append($1).append($2) })\n        .prefix(numbers.count).suffix(numbers.count).reduce(into:\
    \ [Int](), { $0.append($1).append($2) })\n        .prefix(numbers.count).suffix(numbers.count).reduce(into:\
    \ [Int](), { $0.append($1).append($2) })\n        .prefix(numbers.count).suffix(numbers.count).reduce(into:\
    \ [Int](), { $0.append($1).append($2) })\n        .prefix(numbers.count).suffix(numbers.count).reduce(into:\
    \ [Int](), { $0.append($1).append($2) })\n        .prefix(numbers.count).suffix(numbers.count).reduce(into:\
    \ [Int](), { $0.append($1).append($2) })\n        .prefix(numbers.count).suffix(numbers.count).reduce(into:\
    \ [Int](), { $0.append($1).append($2) })\n        .prefix(numbers.count).suffix(numbers.count).reduce(into:\
    \ [Int](), { $0.append($1).append($2) })\n        .prefix(numbers.count).suffix(numbers.count).reduce(into:\
    \ [Int](), { $0.append($1).append($2) })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmw0rmnj6.swift:8:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return numbers.reduce(into: [Int](), { $0.append($1).append($2)\
    \ })\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824737
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var numbersInOrder = [Int]()\n    for number in numbers\
    \ {\n        numbersInOrder.append(number)\n    }\n    var result = [Int]()\n\
    \    for number in numbersInOrder {\n        result.append(number)\n        result.append(delimeter)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpeu4m6ahb/tmpeu4m6ahb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e74cd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e749d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e749d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e749cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeu4m6ahb                        0x000055efa8c846ef <unavailable> + 5871

    5    libc.so.6                          0x00002b8e74ec5460 __libc_start_main +
    245

    6    tmpeu4m6ahb                        0x000055efa8c841e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for number in\
    \ numbers {\n        result.append(number)\n        i += 1\n        if i == delimeter\
    \ {\n            result.append(number)\n            i = 0\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpfcy4gxmn/tmpfcy4gxmn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1c9279c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1c8f70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1c8f70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1c8f6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy4gxmn                        0x00005618962166ef <unavailable> + 5871

    5    libc.so.6                          0x00002ac1c9465460 __libc_start_main +
    245

    6    tmpfcy4gxmn                        0x00005618962161e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { $0.insert($0.endIndex, delimeter);\
    \ $0 + [$1] }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpa6xxgm9s.swift:8:42: error: missing argument label 'at:' in call\n\
    \    return numbers.reduce([]) { $0.insert($0.endIndex, delimeter); $0 + [$1]\
    \ }\n                                         ^\n                            \
    \                           at: \n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { (result, number) -> [Int] in\n\
    \        var result = result\n        if number != nil {\n            result.append(number)\n\
    \        }\n        if result.count > 0 {\n            result.append(delimeter)\n\
    \        }\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmp_afexdf8/tmp_afexdf8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63ed9d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63ed6c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63ed6c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63ed6c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_afexdf8                        0x00005555f6b915ff <unavailable> + 5631

    5    libc.so.6                          0x00002b63edbbc460 __libc_start_main +
    245

    6    tmp_afexdf8                        0x00005555f6b910f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659824693
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var numbersInOrder = [Int]()\n    for number in numbers\
    \ {\n        numbersInOrder.append(number)\n    }\n    var result = [Int]()\n\
    \    for number in numbersInOrder {\n        result.append(number)\n        result.append(delimeter)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpeu4m6ahb/tmpeu4m6ahb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e74cd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e749d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e749d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e749cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeu4m6ahb                        0x000055efa8c846ef <unavailable> + 5871

    5    libc.so.6                          0x00002b8e74ec5460 __libc_start_main +
    245

    6    tmpeu4m6ahb                        0x000055efa8c841e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for number in\
    \ numbers {\n        result.append(number)\n        if i != numbers.count - 1\
    \ {\n            result.append(delimeter)\n        }\n        i += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { $0.insert($0.count > 1 ? delimeter\
    \ : 0).append(contentsOf: $1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp4m_pwdwj.swift:8:73: error: value of tuple type '()' has no member\
    \ 'append'\n    return numbers.reduce([]) { $0.insert($0.count > 1 ? delimeter\
    \ : 0).append(contentsOf: $1) }\n                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n/tmp/tmp4m_pwdwj.swift:8:71: error: missing argument for parameter 'at'\
    \ in call\n    return numbers.reduce([]) { $0.insert($0.count > 1 ? delimeter\
    \ : 0).append(contentsOf: $1) }\n                                            \
    \                          ^\n                                               \
    \                       , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)'\
    \ declared here\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1659824693
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { $0 + [$1, $2, delimeter] }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpnfe3ptmm.swift:8:31: error: contextual closure type '([Int], Int)\
    \ throws -> [Int]' expects 2 arguments, but 3 were used in closure body\n    return\
    \ numbers.reduce([]) { $0 + [$1, $2, delimeter] }\n                          \
    \    ^\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for number in\
    \ numbers {\n        result.append(number)\n        i += 1\n        if i == delimeter\
    \ {\n            i = 0\n            result.append(number)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpvt2d74nu/tmpvt2d74nu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d711a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d70e9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d70e9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d70e9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvt2d74nu                        0x0000555da730d6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b7d71390460 __libc_start_main +
    245

    6    tmpvt2d74nu                        0x0000555da730d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824693
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { $0 + [$1, $2, delimeter] }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpnfe3ptmm.swift:8:31: error: contextual closure type '([Int], Int)\
    \ throws -> [Int]' expects 2 arguments, but 3 were used in closure body\n    return\
    \ numbers.reduce([]) { $0 + [$1, $2, delimeter] }\n                          \
    \    ^\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { $0 + [$1, $2, delimeter] }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpnfe3ptmm.swift:8:31: error: contextual closure type '([Int], Int)\
    \ throws -> [Int]' expects 2 arguments, but 3 were used in closure body\n    return\
    \ numbers.reduce([]) { $0 + [$1, $2, delimeter] }\n                          \
    \    ^\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce(into: [Int](), { result, number in\n\
    \        result.append(number)\n        result.insert(result.count, delimeter)\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(intersperse(numbers: []\
    \ as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6,\
    \ 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpgv3p8km5.swift:10:22: error: missing argument label 'at:' in call\n\
    \        result.insert(result.count, delimeter)\n                     ^\n    \
    \                                at: \n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { (result, number) -> [Int] in\n\
    \        var result = result\n        if number != nil {\n            result =\
    \ result + [number]\n        }\n        result = result + [delimeter]\n      \
    \  return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmp8toohgja/tmp8toohgja.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2a683cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2a6533b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2a6533988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2a65327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8toohgja                        0x00005561f6a695af <unavailable> + 5551

    5    libc.so.6                          0x00002af2a6a28460 __libc_start_main +
    245

    6    tmp8toohgja                        0x00005561f6a690a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1659824693
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    return numbers.reduce([]) { (result, number) -> [Int] in\n\
    \        var result = result\n        if number != nil {\n            result =\
    \ result + [number]\n        }\n        result = result + [delimeter]\n      \
    \  return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmp8toohgja/tmp8toohgja.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2a683cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2a6533b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2a6533988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2a65327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8toohgja                        0x00005561f6a695af <unavailable> + 5551

    5    libc.so.6                          0x00002af2a6a28460 __libc_start_main +
    245

    6    tmp8toohgja                        0x00005561f6a690a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1659824693
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for number\
    \ in numbers {\n        result[index] = number\n        index++\n        if index\
    \ == delimeter {\n            index = 0\n            result.append(number)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp0jlwc2vd.swift:12:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for number\
    \ in numbers {\n        result[index] = number\n        index = index + 1\n  \
    \      if index == delimeter {\n            index = 0\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4e2a3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4e2736561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab4e2736286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab4e273613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab4e2735bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab4e25357ec <unavailable> + 186348

    6    tmpg2q7soxa                        0x000055fc49452a10 <unavailable> + 6672

    7    tmpg2q7soxa                        0x000055fc4945263f <unavailable> + 5695

    8    libc.so.6                          0x00002ab4e2c2b460 __libc_start_main +
    245

    9    tmpg2q7soxa                        0x000055fc49452239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824693
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for number in\
    \ numbers {\n        result.append(number)\n        if i != numbers.count - 1\
    \ {\n            result.append(delimeter)\n        }\n        i += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for number in numbers {\n   \
    \     result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpwuiys6i1/tmpwuiys6i1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b6d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b69fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b69fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b69fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiys6i1                        0x000055f97c8be6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b42b6ef2460 __libc_start_main +
    245

    6    tmpwuiys6i1                        0x000055f97c8be1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824692
