name: HumanEval_115_max_fill
language: swift
prompt: "\n/// You are given a rectangular grid of wells. Each row represents a single\
  \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each well\
  \ has a corresponding bucket that can be used to extract water from it, \n/// and\
  \ all buckets have the same capacity.\n/// Your task is to use the buckets to empty\
  \ the wells.\n/// Output the number of times you need to lower the buckets.\n///\
  \ Example 1:\n/// Input: \n/// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n/// bucket_capacity\
  \ : 1\n/// Output: 6\n/// Example 2:\n/// Input: \n/// grid : [[0,0,1,1], [0,0,0,0],\
  \ [1,1,1,1], [0,1,1,1]]\n/// bucket_capacity : 2\n/// Output: 5\n/// Example 3:\n\
  /// Input: \n/// grid : [[0,0,0], [0,0,0]]\n/// bucket_capacity : 5\n/// Output:\
  \ 0\n/// Constraints:\n/// * all wells have the same length\n/// * 1 <= grid.length\
  \ <= 10^2\n/// * 1 <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// *\
  \ 1 <= capacity <= 10\nfunc max_fill(grid: [[Int]], capacity: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(max_fill(grid: [[0, 0, 1, 0], [0, 1, 0,\
  \ 0], [1, 1, 1, 1]], capacity: 1) == 6)\nassert(max_fill(grid: [[0, 0, 1, 1], [0,\
  \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], capacity: 2) == 5)\nassert(max_fill(grid:\
  \ [[0, 0, 0], [0, 0, 0]], capacity: 5) == 0)\nassert(max_fill(grid: [[1, 1, 1, 1],\
  \ [1, 1, 1, 1]], capacity: 2) == 4)\nassert(max_fill(grid: [[1, 1, 1, 1], [1, 1,\
  \ 1, 1]], capacity: 9) == 2)"
completions: ["    \n    var result = 0\n    \n    for row in grid {\n        var\
    \ buckets = [Int](repeating: 0, count: capacity)\n        for well in row {\n\
    \            buckets[well] += 1\n        }\n        \n        for bucket in buckets\
    \ {\n            if bucket > 0 {\n                result += bucket - 1\n     \
    \       }\n        }\n    }\n    \n    return result", "    \n    var result =\
    \ 0\n    \n    for row in 0..<grid.count {\n        for col in 0..<grid[row].count\
    \ {\n            if grid[row][col] == 1 {\n                result += max_fill_helper(grid,\
    \ row, col, capacity)\n            }\n        }\n    }\n    \n    return result",
  "    \n    var result = 0\n    \n    for row in grid {\n        var max = 0\n  \
    \      for cell in row {\n            if cell > max {\n                max = cell\n\
    \            }\n        }\n        result += max - capacity\n    }\n    \n   \
    \ return result", "    \n    var result = 0\n    \n    for row in grid {\n   \
    \     var max = 0\n        for _ in row {\n            max += capacity\n     \
    \   }\n        result += max\n    }\n    \n    return result", "    \n    var\
    \ result = 0\n    \n    for row in 0..<grid.count {\n        for col in 0..<grid[row].count\
    \ {\n            if grid[row][col] == 1 {\n                result += max(capacity\
    \ - grid[row][col], 0)\n            }\n        }\n    }\n    \n    return result",
  "    \n    var count = 0\n    \n    for row in grid {\n        for col in row {\n\
    \            if col == 1 {\n                count += bucket_fill(grid, capacity)\n\
    \            }\n        }\n    }\n    \n    return count", "    \n    var buckets\
    \ = [Int](capacity)\n    \n    for row in grid {\n        for bucket in row {\n\
    \            buckets[bucket] += 1\n        }\n    }\n    \n    var max = 0\n \
    \   \n    for bucket in buckets {\n        if bucket > max {\n            max\
    \ = bucket\n        }\n    }\n    \n    return max", "    var result = 0\n   \
    \ var buckets = [Int](capacity)\n    for row in grid {\n        for col in row\
    \ {\n            if col == 0 {\n                buckets[col] = buckets[col] +\
    \ 1\n            }\n        }\n    }\n    for bucket in buckets {\n        if\
    \ bucket > result {\n            result = bucket\n        }\n    }\n    return\
    \ result", "    \n    var result = 0\n    \n    for row in grid {\n        for\
    \ well in row {\n            if well > 0 {\n                result += well * capacity\n\
    \            }\n        }\n    }\n    \n    return result", "    \n    guard grid.count\
    \ > 0 else { return 0 }\n    \n    var result = 0\n    \n    for row in 0..<grid.count\
    \ {\n        for col in 0..<grid[row].count {\n            if grid[row][col] ==\
    \ 1 {\n                result += max_fill_helper(grid, row, col, capacity)\n \
    \           }\n        }\n    }\n    \n    return result", "    \n    let rowCount\
    \ = grid.count\n    let colCount = grid[0].count\n    \n    var max = 0\n    \n\
    \    for row in 0..<rowCount {\n        for col in 0..<colCount {\n          \
    \  \n            let bucket = grid[row][col]\n            \n            if bucket\
    \ > 0 {\n                \n                let newCapacity = bucket - capacity\n\
    \                \n                if newCapacity > max {\n                  \
    \  max = newCapacity\n                }\n                \n            }\n   \
    \         \n        }\n    }\n    \n    return max", "    if grid.isEmpty {\n\
    \        return 0\n    }\n    var result = 0\n    var buckets = [Int](repeating:\
    \ 0, count: capacity)\n    for row in grid {\n        for bucket in row {\n  \
    \          buckets[bucket] += 1\n        }\n    }\n    for bucket in buckets {\n\
    \        result += bucket\n    }\n    return result", "    var result = 0\n  \
    \  for row in grid {\n        for col in row {\n            if col == 0 {\n  \
    \              result += max(capacity - 1, 0)\n            }\n        }\n    }\n\
    \    return result", "    var result = 0\n    var buckets = make([][]int, capacity)\n\
    \    for row in grid {\n        for col in row {\n            buckets[col%capacity]\
    \ = append(buckets[col%capacity], 0)\n        }\n    }\n    for row in grid {\n\
    \        for col in row {\n            buckets[col%capacity][row%capacity] = buckets[col%capacity][row%capacity]\
    \ + 1\n        }\n    }\n    for bucket in buckets {\n        if bucket.len()\
    \ > result {\n            result = bucket.len()\n        }\n    }\n    return\
    \ result", "    var count = 0\n    var min = 0\n    for row in grid {\n      \
    \  for col in row {\n            if col == 1 {\n                count += 1\n \
    \           } else {\n                min = max(min, count)\n                count\
    \ = 0\n            }\n        }\n    }\n    return min", "    \n    // init result\n\
    \    var result = 0\n    \n    // init bucket array\n    var buckets = [Int](repeating:\
    \ 0, count: capacity)\n    \n    // init bucket index\n    var bucketIndex = 0\n\
    \    \n    // init bucket sum\n    var bucketSum = 0\n    \n    // init bucket\
    \ max\n    var bucketMax = 0\n    \n    // init bucket min\n    var bucketMin\
    \ = Int.max\n    \n    // init bucket index\n    var bucketIndex = 0\n    \n \
    \   // init bucket sum\n    var bucketSum = 0\n    \n    // init bucket max\n\
    \    var bucketMax = 0\n    \n    // init bucket min\n    var bucketMin = Int.max\n\
    \    \n    // init bucket index\n    var bucketIndex = 0\n    \n    // init bucket\
    \ sum\n    var bucketSum = 0\n    \n    // init bucket max\n    var bucketMax\
    \ = 0\n    \n    // init bucket min\n    var bucketMin = Int.max\n    \n    //\
    \ init bucket index\n    var bucketIndex = 0\n    \n    // init bucket sum\n \
    \   var bucketSum = 0\n    \n    // init bucket max\n    var bucketMax = 0\n \
    \   \n    // init bucket min\n    var bucketMin = Int.max\n    \n    // init bucket\
    \ index\n    var bucketIndex = 0\n    \n    // init bucket sum\n    var bucketSum\
    \ = 0\n    \n    // init bucket max\n    var bucketMax = 0\n    \n    // init\
    \ bucket min\n    var bucketMin = Int.max\n    \n    // init bucket index\n  \
    \  var bucketIndex = 0\n    \n    // init bucket sum\n    var bucketSum = 0\n\
    \    \n    // init bucket max\n    var bucketMax = 0\n    \n    // init bucket\
    \ min\n    var bucketMin = Int.max\n    \n    // init bucket index\n    var bucketIndex\
    \ = 0\n    \n    // init bucket sum\n    var bucketSum = 0\n    \n    // init\
    \ bucket max\n    var bucketMax = 0\n    \n    // init bucket min\n    var bucketMin\
    \ = Int.max\n    \n    // init bucket index\n    var bucketIndex = 0\n    \n \
    \   // init bucket sum\n    var bucketSum = 0\n    \n    // init bucket max\n\
    \    var bucketMax = 0\n    \n    // init bucket min\n    var bucketMin = Int.max\n\
    \    \n    // init bucket index\n    var bucketIndex = 0\n    \n    // init bucket\
    \ sum\n    var bucketSum = 0\n    \n    // init bucket max\n    var bucketMax\
    \ = 0\n    \n    // init bucket min\n    var bucketMin = Int.max\n    \n    //\
    \ init bucket index\n    var bucketIndex = 0\n    \n    // init bucket sum\n \
    \   var bucketSum = 0\n", "    \n    let n = grid.count\n    var ans = 0\n   \
    \ \n    for _ in 0..<n {\n        let bucket = Bucket(capacity)\n        \n  \
    \      for _ in 0..<n {\n            bucket.insert(grid[Int(arc4random_uniform(UInt32(n)))]!)\n\
    \        }\n        \n        ans = max(ans, bucket.empty())\n    }\n    \n  \
    \  return ans", "    \n    // init result\n    var result = 0\n    \n    // init\
    \ buckets\n    var buckets = [Int](capacity)\n    \n    // init wells\n    var\
    \ wells = [Int](capacity)\n    \n    // init visited wells\n    var visited =\
    \ [Bool](capacity)\n    \n    // init visited wells\n    var visited2 = [Bool](capacity)\n\
    \    \n    // init visited wells\n    var visited3 = [Bool](capacity)\n    \n\
    \    // init visited wells\n    var visited4 = [Bool](capacity)\n    \n    //\
    \ init visited wells\n    var visited5 = [Bool](capacity)\n    \n    // init visited\
    \ wells\n    var visited6 = [Bool](capacity)\n    \n    // init visited wells\n\
    \    var visited7 = [Bool](capacity)\n    \n    // init visited wells\n    var\
    \ visited8 = [Bool](capacity)\n    \n    // init visited wells\n    var visited9\
    \ = [Bool](capacity)\n    \n    // init visited wells\n    var visited10 = [Bool](capacity)\n\
    \    \n    // init visited wells\n    var visited11 = [Bool](capacity)\n    \n\
    \    // init visited wells\n    var visited12 = [Bool](capacity)\n    \n    //\
    \ init visited wells\n    var visited13 = [Bool](capacity)\n    \n    // init\
    \ visited wells\n    var visited14 = [Bool](capacity)\n    \n    // init visited\
    \ wells\n    var visited15 = [Bool](capacity)\n    \n    // init visited wells\n\
    \    var visited16 = [Bool](capacity)\n    \n    // init visited wells\n    var\
    \ visited17 = [Bool](capacity)\n    \n    // init visited wells\n    var visited18\
    \ = [Bool](capacity)\n    \n    // init visited wells\n    var visited19 = [Bool](capacity)\n\
    \    \n    // init visited wells\n    var visited20 = [Bool](capacity)\n    \n\
    \    // init visited wells\n    var visited21 = [Bool](capacity)\n    \n    //\
    \ init visited wells\n    var visited22 = [Bool](capacity)\n    \n    // init\
    \ visited wells\n    var visited23 = [Bool](capacity)\n    \n    // init visited\
    \ wells\n    var visited24 = [Bool](capacity)", "    \n    // TODO: write your\
    \ code here\n    \n    return 0", "    \n    // init result\n    var result =\
    \ 0\n    \n    // init bucket array\n    var bucket = [Int](repeating: 0, count:\
    \ capacity)\n    \n    // init bucket index\n    var bucketIndex = 0\n    \n \
    \   // init bucket index\n    var bucketIndex2 = 0\n    \n    // init bucket index\n\
    \    var bucketIndex3 = 0\n    \n    // init bucket index\n    var bucketIndex4\
    \ = 0\n    \n    // init bucket index\n    var bucketIndex5 = 0\n    \n    //\
    \ init bucket index\n    var bucketIndex6 = 0\n    \n    // init bucket index\n\
    \    var bucketIndex7 = 0\n    \n    // init bucket index\n    var bucketIndex8\
    \ = 0\n    \n    // init bucket index\n    var bucketIndex9 = 0\n    \n    //\
    \ init bucket index\n    var bucketIndex10 = 0\n    \n    // init bucket index\n\
    \    var bucketIndex11 = 0\n    \n    // init bucket index\n    var bucketIndex12\
    \ = 0\n    \n    // init bucket index\n    var bucketIndex13 = 0\n    \n    //\
    \ init bucket index\n    var bucketIndex14 = 0\n    \n    // init bucket index\n\
    \    var bucketIndex15 = 0\n    \n    // init bucket index\n    var bucketIndex16\
    \ = 0\n    \n    // init bucket index\n    var bucketIndex17 = 0\n    \n    //\
    \ init bucket index\n    var bucketIndex18 = 0\n    \n    // init bucket index\n\
    \    var bucketIndex19 = 0\n    \n    // init bucket index\n    var bucketIndex20\
    \ = 0\n    \n    // init bucket index\n    var bucketIndex21 = 0\n    \n    //\
    \ init bucket index\n    var bucketIndex22 = 0\n    \n    // init bucket index\n\
    \    var bucketIndex23 = 0\n    \n    // init bucket index\n    var bucketIndex24\
    \ = 0\n    \n    // init bucket index\n    var bucketIndex25 = 0\n    \n    //\
    \ init bucket index\n    var bucketIndex26 = 0\n    \n    // init bucket index\n\
    \    var bucketIndex27 = 0\n    \n    // init bucket index\n    var bucketIndex28\
    \ = 0\n    \n    // init bucket index\n    var bucketIndex29 = 0\n    \n    //\
    \ init bucket index\n    var bucketIndex30 = 0\n    \n    // init bucket index\n\
    \    var bucketIndex31 = 0\n    \n    // init bucket index\n    var bucketIndex32\
    \ = 0\n    \n    // init bucket index\n    var bucketIndex33 = 0\n    \n    //\
    \ init bucket index\n    var bucketIndex34 = 0\n    \n    // init bucket index\n\
    \    var bucketIndex35 = 0\n    \n    // init bucket index\n    var bucketIndex36\
    \ = 0\n    \n    // init bucket index\n    var bucketIndex37 = 0\n    \n    // "]
stop_tokens:
- "\n}"
