language: swift
name: HumanEval_126_is_sorted
results:
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] !=\
    \ nil {\n            return false\n        }\n        seen[num] = num\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6aa9b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6aa6aa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae6aa6aa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae6aa6aa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae6aa6a9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae6aa4a9e83 <unavailable> + 188035

    6    tmp6wd_v1dn                        0x0000563739c3c137 <unavailable> + 8503

    7    tmp6wd_v1dn                        0x0000563739c3b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002ae6aab9f460 __libc_start_main +
    245

    9    tmp6wd_v1dn                        0x0000563739c3b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] !=\
    \ nil {\n            return false\n        }\n        seen[num] = num\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6aa9b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6aa6aa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae6aa6aa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae6aa6aa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae6aa6a9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae6aa4a9e83 <unavailable> + 188035

    6    tmp6wd_v1dn                        0x0000563739c3c137 <unavailable> + 8503

    7    tmp6wd_v1dn                        0x0000563739c3b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002ae6aab9f460 __libc_start_main +
    245

    9    tmp6wd_v1dn                        0x0000563739c3b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    var i = 0\n    var j = 0\n    var k\
    \ = lst.count - 1\n    while i < k {\n        if lst[i] > lst[j] {\n         \
    \   return false\n        }\n        i += 1\n        j += 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp3bejo8q2/tmp3bejo8q2.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13bd4d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13bd1c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13bd1c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13bd1c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bejo8q2                        0x00005630712c7467 <unavailable> + 5223

    5    libc.so.6                          0x00002b13bd6be460 __libc_start_main +
    245

    6    tmp3bejo8q2                        0x00005630712c7019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst[0] == lst[1] {\n        return\
    \ is_sorted(lst[1..<lst.count])\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgjm6ivsh.swift:22:26: error: missing argument label 'lst:' in call\n\
    \        return is_sorted(lst[1..<lst.count])\n                         ^\n  \
    \                       lst: \n/tmp/tmpgjm6ivsh.swift:22:29: error: cannot convert\
    \ value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n        return\
    \ is_sorted(lst[1..<lst.count])\n                            ^\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] !=\
    \ nil {\n            return false\n        }\n        seen[num] = num\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6aa9b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6aa6aa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae6aa6aa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae6aa6aa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae6aa6a9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae6aa4a9e83 <unavailable> + 188035

    6    tmp6wd_v1dn                        0x0000563739c3c137 <unavailable> + 8503

    7    tmp6wd_v1dn                        0x0000563739c3b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002ae6aab9f460 __libc_start_main +
    245

    9    tmp6wd_v1dn                        0x0000563739c3b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last: Int = 0\n    for x in lst {\n        if x == last {\n\
    \            return false\n        }\n        last = x\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp5hiat5qx/tmp5hiat5qx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ee608bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ee5d82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ee5d82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ee5d817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hiat5qx                        0x000055a7c59e15f6 <unavailable> + 5622

    5    libc.so.6                          0x00002b7ee6277460 __libc_start_main +
    245

    6    tmp5hiat5qx                        0x000055a7c59e10d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var prev = 0\n    for cur in lst {\n        if cur == prev {\n \
    \           return false\n        }\n        prev = cur\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpu0l36hbh/tmpu0l36hbh.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ef7320c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ef7017b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ef7017988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ef70167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu0l36hbh                        0x0000555aadebf5f6 <unavailable> + 5622

    5    libc.so.6                          0x00002b2ef750c460 __libc_start_main +
    245

    6    tmpu0l36hbh                        0x0000555aadebf0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    var last: Int\
    \ = 0\n    for x in lst {\n        if x == last {\n            return false\n\
    \        }\n        last = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1sv1e385/tmp1sv1e385.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b677d115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b677ce0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b677ce0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b677ce0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1sv1e385                        0x000055da10a2b646 <unavailable> + 5702

    5    libc.so.6                          0x00002b677d301460 __libc_start_main +
    245

    6    tmp1sv1e385                        0x000055da10a2b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x - 1] !=\
    \ nil {\n            return false\n        }\n        seen[x] = x\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f5f162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f5ee59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f5ee59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f5ee5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f5ee58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0f5ec58e83 <unavailable> + 188035

    6    tmpdqfss4mh                        0x0000560e1ea1e153 <unavailable> + 8531

    7    tmpdqfss4mh                        0x0000560e1ea1d4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0f5f34e460 __libc_start_main +
    245

    9    tmpdqfss4mh                        0x0000560e1ea1d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    var last: Int\
    \ = 0\n    for x in lst {\n        if x == last {\n            return false\n\
    \        }\n        last = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1sv1e385/tmp1sv1e385.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b677d115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b677ce0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b677ce0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b677ce0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1sv1e385                        0x000055da10a2b646 <unavailable> + 5702

    5    libc.so.6                          0x00002b677d301460 __libc_start_main +
    245

    6    tmp1sv1e385                        0x000055da10a2b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] !=\
    \ nil {\n            return false\n        } else {\n            seen[num] = num\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae97ce9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae97cb95561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae97cb95286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae97cb9513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae97cb94bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae97c994e83 <unavailable> + 188035

    6    tmpjw5mtl8n                        0x0000557147cae137 <unavailable> + 8503

    7    tmpjw5mtl8n                        0x0000557147cad4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002ae97d08a460 __libc_start_main +
    245

    9    tmpjw5mtl8n                        0x0000557147cad1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst.count > 1 {\n        var last:\
    \ Int = 0\n        for idx in lst.indices {\n            if idx == last {\n  \
    \              return false\n            }\n            last = idx\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpeav0uwzu/tmpeav0uwzu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8929cb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89299afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89299af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89299ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeav0uwzu                        0x000055b5db4f0597 <unavailable> + 5527

    5    libc.so.6                          0x00002b8929ea4460 __libc_start_main +
    245

    6    tmpeav0uwzu                        0x000055b5db4f0149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] ==\
    \ nil {\n            seen[num] = true\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpq7qg2xdj.swift:17:22: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[num] == nil {\n  \
    \         ~~~~~~~~~ ^  ~~~\n/tmp/tmpq7qg2xdj.swift:18:25: error: cannot assign\
    \ value of type 'Bool' to subscript of type 'Int'\n            seen[num] = true\n\
    \                        ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] ==\
    \ nil {\n            seen[num] = true\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpq7qg2xdj.swift:17:22: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[num] == nil {\n  \
    \         ~~~~~~~~~ ^  ~~~\n/tmp/tmpq7qg2xdj.swift:18:25: error: cannot assign\
    \ value of type 'Bool' to subscript of type 'Int'\n            seen[num] = true\n\
    \                        ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x] == nil\
    \ {\n            seen[x] = true\n            return true\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7tqyvd_t.swift:17:20: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[x] == nil {\n    \
    \       ~~~~~~~ ^  ~~~\n/tmp/tmp7tqyvd_t.swift:18:23: error: cannot assign value\
    \ of type 'Bool' to subscript of type 'Int'\n            seen[x] = true\n    \
    \                  ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x] == nil\
    \ {\n            seen[x] = true\n            return true\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7tqyvd_t.swift:17:20: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[x] == nil {\n    \
    \       ~~~~~~~ ^  ~~~\n/tmp/tmp7tqyvd_t.swift:18:23: error: cannot assign value\
    \ of type 'Bool' to subscript of type 'Int'\n            seen[x] = true\n    \
    \                  ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x] != nil\
    \ {\n            return false\n        }\n        seen[x] = x\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ff0e16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ff0b0d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2ff0b0d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2ff0b0d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2ff0b0cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2ff090ce83 <unavailable> + 188035

    6    tmprju0rm3x                        0x000056427ccaa137 <unavailable> + 8503

    7    tmprju0rm3x                        0x000056427cca94e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b2ff1002460 __libc_start_main +
    245

    9    tmprju0rm3x                        0x000056427cca91d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] !=\
    \ nil {\n            return false\n        }\n        seen[num] = num\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6aa9b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6aa6aa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae6aa6aa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae6aa6aa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae6aa6a9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae6aa4a9e83 <unavailable> + 188035

    6    tmp6wd_v1dn                        0x0000563739c3c137 <unavailable> + 8503

    7    tmp6wd_v1dn                        0x0000563739c3b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002ae6aab9f460 __libc_start_main +
    245

    9    tmp6wd_v1dn                        0x0000563739c3b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] !=\
    \ nil {\n            return false\n        }\n        seen[num] = num\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6aa9b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6aa6aa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae6aa6aa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae6aa6aa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae6aa6a9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae6aa4a9e83 <unavailable> + 188035

    6    tmp6wd_v1dn                        0x0000563739c3c137 <unavailable> + 8503

    7    tmp6wd_v1dn                        0x0000563739c3b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002ae6aab9f460 __libc_start_main +
    245

    9    tmp6wd_v1dn                        0x0000563739c3b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst[0] == lst[1] {\n        return\
    \ is_sorted(lst[1..<lst.count])\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqv37b3oo.swift:22:26: error: missing argument label 'lst:' in call\n\
    \        return is_sorted(lst[1..<lst.count])\n                         ^\n  \
    \                       lst: \n/tmp/tmpqv37b3oo.swift:22:29: error: cannot convert\
    \ value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n        return\
    \ is_sorted(lst[1..<lst.count])\n                            ^\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[1..<lst.count])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphlb68w2s.swift:24:22: error: missing argument label 'lst:' in call\n\
    \    return is_sorted(lst[1..<lst.count])\n                     ^\n          \
    \           lst: \n/tmp/tmphlb68w2s.swift:24:25: error: cannot convert value of\
    \ type 'ArraySlice<Int>' to expected argument type '[Int]'\n    return is_sorted(lst[1..<lst.count])\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    var last: Int\
    \ = 0\n    for x in lst {\n        if x == last {\n            return false\n\
    \        }\n        last = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpiyjk3nrn/tmpiyjk3nrn.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd3aa11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd3a708b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd3a708988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd3a7077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiyjk3nrn                        0x00005647690a2577 <unavailable> + 5495

    5    libc.so.6                          0x00002abd3abfd460 __libc_start_main +
    245

    6    tmpiyjk3nrn                        0x00005647690a2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x] != nil\
    \ {\n            return false\n        }\n        seen[x] = x\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ff0e16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ff0b0d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2ff0b0d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2ff0b0d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2ff0b0cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2ff090ce83 <unavailable> + 188035

    6    tmprju0rm3x                        0x000056427ccaa137 <unavailable> + 8503

    7    tmprju0rm3x                        0x000056427cca94e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b2ff1002460 __libc_start_main +
    245

    9    tmprju0rm3x                        0x000056427cca91d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] !=\
    \ nil {\n            return false\n        }\n        seen[num] = num\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6aa9b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6aa6aa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae6aa6aa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae6aa6aa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae6aa6a9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae6aa4a9e83 <unavailable> + 188035

    6    tmp6wd_v1dn                        0x0000563739c3c137 <unavailable> + 8503

    7    tmp6wd_v1dn                        0x0000563739c3b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002ae6aab9f460 __libc_start_main +
    245

    9    tmp6wd_v1dn                        0x0000563739c3b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last: Int = 0\n    for x in lst {\n        if x == last {\n\
    \            return false\n        }\n        last = x\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp5hiat5qx/tmp5hiat5qx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ee608bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ee5d82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ee5d82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ee5d817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hiat5qx                        0x000055a7c59e15f6 <unavailable> + 5622

    5    libc.so.6                          0x00002b7ee6277460 __libc_start_main +
    245

    6    tmp5hiat5qx                        0x000055a7c59e10d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    var prev: Int = 0\n    for x in lst\
    \ {\n        if x == prev {\n            return false\n        }\n        prev\
    \ = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpcrxfsc6b/tmpcrxfsc6b.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b213c1f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b213beefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b213beef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b213beee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcrxfsc6b                        0x000055d538bc2577 <unavailable> + 5495

    5    libc.so.6                          0x00002b213c3e4460 __libc_start_main +
    245

    6    tmpcrxfsc6b                        0x000055d538bc2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[1..<lst.count])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp15_qcxgz.swift:24:22: error: missing argument label 'lst:' in call\n\
    \    return is_sorted(lst[1..<lst.count])\n                     ^\n          \
    \           lst: \n/tmp/tmp15_qcxgz.swift:24:25: error: cannot convert value of\
    \ type 'ArraySlice<Int>' to expected argument type '[Int]'\n    return is_sorted(lst[1..<lst.count])\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x - 1] !=\
    \ nil {\n            return false\n        }\n        seen[x] = x\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f5f162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f5ee59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f5ee59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f5ee5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f5ee58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0f5ec58e83 <unavailable> + 188035

    6    tmpdqfss4mh                        0x0000560e1ea1e153 <unavailable> + 8531

    7    tmpdqfss4mh                        0x0000560e1ea1d4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0f5f34e460 __libc_start_main +
    245

    9    tmpdqfss4mh                        0x0000560e1ea1d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last: Int = 0\n    for x in lst {\n        if x == last {\n\
    \            return false\n        }\n        last = x\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp5hiat5qx/tmp5hiat5qx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ee608bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ee5d82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ee5d82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ee5d817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hiat5qx                        0x000055a7c59e15f6 <unavailable> + 5622

    5    libc.so.6                          0x00002b7ee6277460 __libc_start_main +
    245

    6    tmp5hiat5qx                        0x000055a7c59e10d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    if lst.count\
    \ == 1 {\n        return lst[0] < lst[0]\n    }\n    if lst.count > 1 {\n    \
    \    var last: Int = 0\n        for idx in 0..<lst.count {\n            if lst[idx]\
    \ == last {\n                return false\n            }\n            last = lst[idx]\n\
    \        }\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpbcy9v2jc/tmpbcy9v2jc.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68a74f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68a71efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68a71ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68a71ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcy9v2jc                        0x000055c0183e152a <unavailable> + 5418

    5    libc.so.6                          0x00002b68a76e4460 __libc_start_main +
    245

    6    tmpbcy9v2jc                        0x000055c0183e11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x - 1] !=\
    \ nil {\n            return false\n        }\n        seen[x] = x\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f5f162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f5ee59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f5ee59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f5ee5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f5ee58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0f5ec58e83 <unavailable> + 188035

    6    tmpdqfss4mh                        0x0000560e1ea1e153 <unavailable> + 8531

    7    tmpdqfss4mh                        0x0000560e1ea1d4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0f5f34e460 __libc_start_main +
    245

    9    tmpdqfss4mh                        0x0000560e1ea1d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] !=\
    \ nil {\n            return false\n        }\n        seen[num] = num\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6aa9b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6aa6aa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae6aa6aa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae6aa6aa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae6aa6a9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae6aa4a9e83 <unavailable> + 188035

    6    tmp6wd_v1dn                        0x0000563739c3c137 <unavailable> + 8503

    7    tmp6wd_v1dn                        0x0000563739c3b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002ae6aab9f460 __libc_start_main +
    245

    9    tmp6wd_v1dn                        0x0000563739c3b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] !=\
    \ nil {\n            return false\n        }\n        seen[num] = num\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6aa9b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6aa6aa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae6aa6aa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae6aa6aa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae6aa6a9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae6aa4a9e83 <unavailable> + 188035

    6    tmp6wd_v1dn                        0x0000563739c3c137 <unavailable> + 8503

    7    tmp6wd_v1dn                        0x0000563739c3b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002ae6aab9f460 __libc_start_main +
    245

    9    tmp6wd_v1dn                        0x0000563739c3b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x - 1] !=\
    \ nil {\n            return false\n        }\n        seen[x] = x\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f5f162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f5ee59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f5ee59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f5ee5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f5ee58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0f5ec58e83 <unavailable> + 188035

    6    tmpdqfss4mh                        0x0000560e1ea1e153 <unavailable> + 8531

    7    tmpdqfss4mh                        0x0000560e1ea1d4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0f5f34e460 __libc_start_main +
    245

    9    tmpdqfss4mh                        0x0000560e1ea1d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[1..<lst.count])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp15_qcxgz.swift:24:22: error: missing argument label 'lst:' in call\n\
    \    return is_sorted(lst[1..<lst.count])\n                     ^\n          \
    \           lst: \n/tmp/tmp15_qcxgz.swift:24:25: error: cannot convert value of\
    \ type 'ArraySlice<Int>' to expected argument type '[Int]'\n    return is_sorted(lst[1..<lst.count])\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x] != nil\
    \ {\n            return false\n        }\n        seen[x] = x\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ff0e16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ff0b0d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2ff0b0d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2ff0b0d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2ff0b0cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2ff090ce83 <unavailable> + 188035

    6    tmprju0rm3x                        0x000056427ccaa137 <unavailable> + 8503

    7    tmprju0rm3x                        0x000056427cca94e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b2ff1002460 __libc_start_main +
    245

    9    tmprju0rm3x                        0x000056427cca91d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] !=\
    \ nil {\n            return false\n        }\n        seen[num] = num\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6aa9b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6aa6aa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae6aa6aa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae6aa6aa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae6aa6a9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae6aa4a9e83 <unavailable> + 188035

    6    tmp6wd_v1dn                        0x0000563739c3c137 <unavailable> + 8503

    7    tmp6wd_v1dn                        0x0000563739c3b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002ae6aab9f460 __libc_start_main +
    245

    9    tmp6wd_v1dn                        0x0000563739c3b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] !=\
    \ nil {\n            return false\n        }\n        seen[num] = num\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6aa9b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6aa6aa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae6aa6aa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae6aa6aa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae6aa6a9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae6aa4a9e83 <unavailable> + 188035

    6    tmp6wd_v1dn                        0x0000563739c3c137 <unavailable> + 8503

    7    tmp6wd_v1dn                        0x0000563739c3b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002ae6aab9f460 __libc_start_main +
    245

    9    tmp6wd_v1dn                        0x0000563739c3b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last: Int = 0\n    for num in lst {\n        if num != last\
    \ {\n            return false\n        }\n        last = num\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmphm2dc6pz/tmphm2dc6pz.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b221b54dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b221b244b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b221b244988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b221b2437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphm2dc6pz                        0x00005635831b645a <unavailable> + 5210

    5    libc.so.6                          0x00002b221b739460 __libc_start_main +
    245

    6    tmphm2dc6pz                        0x00005635831b60d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[1..<lst.count])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp15_qcxgz.swift:24:22: error: missing argument label 'lst:' in call\n\
    \    return is_sorted(lst[1..<lst.count])\n                     ^\n          \
    \           lst: \n/tmp/tmp15_qcxgz.swift:24:25: error: cannot convert value of\
    \ type 'ArraySlice<Int>' to expected argument type '[Int]'\n    return is_sorted(lst[1..<lst.count])\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x - 1] !=\
    \ nil {\n            return false\n        }\n        seen[x] = x\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f5f162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f5ee59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f5ee59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f5ee5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f5ee58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0f5ec58e83 <unavailable> + 188035

    6    tmpdqfss4mh                        0x0000560e1ea1e153 <unavailable> + 8531

    7    tmpdqfss4mh                        0x0000560e1ea1d4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0f5f34e460 __libc_start_main +
    245

    9    tmpdqfss4mh                        0x0000560e1ea1d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x - 1] !=\
    \ nil {\n            return false\n        }\n        seen[x] = x\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f5f162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f5ee59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f5ee59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f5ee5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f5ee58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0f5ec58e83 <unavailable> + 188035

    6    tmpdqfss4mh                        0x0000560e1ea1e153 <unavailable> + 8531

    7    tmpdqfss4mh                        0x0000560e1ea1d4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0f5f34e460 __libc_start_main +
    245

    9    tmpdqfss4mh                        0x0000560e1ea1d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    var seen =\
    \ [Int]()\n    for num in lst {\n        if seen[num] != nil {\n            return\
    \ false\n        }\n        seen[num] = num\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6c2997c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6c268e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab6c268e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab6c268e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab6c268dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab6c248de83 <unavailable> + 188035

    6    tmpzx3ctrpf                        0x000055ddd09ae1a6 <unavailable> + 8614

    7    tmpzx3ctrpf                        0x000055ddd09ad535 <unavailable> + 5429

    8    libc.so.6                          0x00002ab6c2b83460 __libc_start_main +
    245

    9    tmpzx3ctrpf                        0x000055ddd09ad229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    var prev: Int\
    \ = 0\n    var found = false\n    for x in lst {\n        if x == prev {\n   \
    \         found = true\n        } else {\n            prev = x\n            found\
    \ = false\n        }\n    }\n    return found\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpit47om9t/tmpit47om9t.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb07593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb0728ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb0728a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb072897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit47om9t                        0x00005596b62a74aa <unavailable> + 5290

    5    libc.so.6                          0x00002afb0777f460 __libc_start_main +
    245

    6    tmpit47om9t                        0x00005596b62a7129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x] == nil\
    \ {\n            seen[x] = true\n            return true\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7tqyvd_t.swift:17:20: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[x] == nil {\n    \
    \       ~~~~~~~ ^  ~~~\n/tmp/tmp7tqyvd_t.swift:18:23: error: cannot assign value\
    \ of type 'Bool' to subscript of type 'Int'\n            seen[x] = true\n    \
    \                  ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    var prev: Int\
    \ = 0\n    for x in lst {\n        if x == prev {\n            return false\n\
    \        }\n        prev = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp7_r_4kzd/tmp7_r_4kzd.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8bd543c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8bd23ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8bd23a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8bd2397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_r_4kzd                        0x0000564f812d4646 <unavailable> + 5702

    5    libc.so.6                          0x00002ac8bd72f460 __libc_start_main +
    245

    6    tmp7_r_4kzd                        0x0000564f812d4129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x - 1] !=\
    \ nil {\n            return false\n        }\n        seen[x] = x\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f5f162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f5ee59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f5ee59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f5ee5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f5ee58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0f5ec58e83 <unavailable> + 188035

    6    tmpdqfss4mh                        0x0000560e1ea1e153 <unavailable> + 8531

    7    tmpdqfss4mh                        0x0000560e1ea1d4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0f5f34e460 __libc_start_main +
    245

    9    tmpdqfss4mh                        0x0000560e1ea1d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[1..<lst.count])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp15_qcxgz.swift:24:22: error: missing argument label 'lst:' in call\n\
    \    return is_sorted(lst[1..<lst.count])\n                     ^\n          \
    \           lst: \n/tmp/tmp15_qcxgz.swift:24:25: error: cannot convert value of\
    \ type 'ArraySlice<Int>' to expected argument type '[Int]'\n    return is_sorted(lst[1..<lst.count])\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] ==\
    \ nil {\n            seen[num] = true\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpq7qg2xdj.swift:17:22: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[num] == nil {\n  \
    \         ~~~~~~~~~ ^  ~~~\n/tmp/tmpq7qg2xdj.swift:18:25: error: cannot assign\
    \ value of type 'Bool' to subscript of type 'Int'\n            seen[num] = true\n\
    \                        ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    var last: Int\
    \ = 0\n    for x in lst {\n        if x == last {\n            return false\n\
    \        }\n        last = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1sv1e385/tmp1sv1e385.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b677d115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b677ce0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b677ce0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b677ce0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1sv1e385                        0x000055da10a2b646 <unavailable> + 5702

    5    libc.so.6                          0x00002b677d301460 __libc_start_main +
    245

    6    tmp1sv1e385                        0x000055da10a2b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] ==\
    \ nil {\n            seen[num] = true\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpq7qg2xdj.swift:17:22: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[num] == nil {\n  \
    \         ~~~~~~~~~ ^  ~~~\n/tmp/tmpq7qg2xdj.swift:18:25: error: cannot assign\
    \ value of type 'Bool' to subscript of type 'Int'\n            seen[num] = true\n\
    \                        ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    var last: Int\
    \ = 0\n    for x in lst {\n        if x == last {\n            return false\n\
    \        }\n        last = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1sv1e385/tmp1sv1e385.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b677d115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b677ce0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b677ce0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b677ce0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1sv1e385                        0x000055da10a2b646 <unavailable> + 5702

    5    libc.so.6                          0x00002b677d301460 __libc_start_main +
    245

    6    tmp1sv1e385                        0x000055da10a2b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    var seen =\
    \ [Int]()\n    for num in lst {\n        if seen[num] == true {\n            return\
    \ false\n        }\n        seen[num] = true\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpiq0_4xr9.swift:20:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Int' and 'Bool'\n        if seen[num] == true {\n     \
    \      ~~~~~~~~~ ^  ~~~~\n/tmp/tmpiq0_4xr9.swift:20:22: note: overloads for '=='\
    \ exist with these partially matching parameter lists: (Bool, Bool), (Int, Int)\n\
    \        if seen[num] == true {\n                     ^\n/tmp/tmpiq0_4xr9.swift:23:21:\
    \ error: cannot assign value of type 'Bool' to subscript of type 'Int'\n     \
    \   seen[num] = true\n                    ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last: Int = 0\n    for x in lst {\n        if x == last {\n\
    \            return false\n        }\n        last = x\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp5hiat5qx/tmp5hiat5qx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ee608bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ee5d82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ee5d82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ee5d817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hiat5qx                        0x000055a7c59e15f6 <unavailable> + 5622

    5    libc.so.6                          0x00002b7ee6277460 __libc_start_main +
    245

    6    tmp5hiat5qx                        0x000055a7c59e10d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = Set<Int>()\n    for num in lst {\n        if seen.contains(num)\
    \ {\n            return false\n        }\n        seen.insert(num)\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpxre22bq3/tmpxre22bq3.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2c33d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2c30cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2c30ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2c30c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxre22bq3                        0x000055739e821746 <unavailable> + 5958

    5    libc.so.6                          0x00002af2c35bf460 __libc_start_main +
    245

    6    tmpxre22bq3                        0x000055739e821229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] !=\
    \ nil {\n            return false\n        }\n        seen[num] = num\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6aa9b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6aa6aa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae6aa6aa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae6aa6aa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae6aa6a9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae6aa4a9e83 <unavailable> + 188035

    6    tmp6wd_v1dn                        0x0000563739c3c137 <unavailable> + 8503

    7    tmp6wd_v1dn                        0x0000563739c3b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002ae6aab9f460 __libc_start_main +
    245

    9    tmp6wd_v1dn                        0x0000563739c3b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[1..<lst.count])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp15_qcxgz.swift:24:22: error: missing argument label 'lst:' in call\n\
    \    return is_sorted(lst[1..<lst.count])\n                     ^\n          \
    \           lst: \n/tmp/tmp15_qcxgz.swift:24:25: error: cannot convert value of\
    \ type 'ArraySlice<Int>' to expected argument type '[Int]'\n    return is_sorted(lst[1..<lst.count])\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    var prev: Int\
    \ = 0\n    for x in lst {\n        if x == prev {\n            return false\n\
    \        }\n        prev = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpcojctuzo/tmpcojctuzo.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68eab4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68ea843b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68ea843988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68ea8427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcojctuzo                        0x0000556be508d577 <unavailable> + 5495

    5    libc.so.6                          0x00002b68ead38460 __libc_start_main +
    245

    6    tmpcojctuzo                        0x0000556be508d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x] == nil\
    \ {\n            seen[x] = true\n            return true\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7tqyvd_t.swift:17:20: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[x] == nil {\n    \
    \       ~~~~~~~ ^  ~~~\n/tmp/tmp7tqyvd_t.swift:18:23: error: cannot assign value\
    \ of type 'Bool' to subscript of type 'Int'\n            seen[x] = true\n    \
    \                  ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 { return true }\n    if lst.count == 1 { return\
    \ false }\n    if lst[0] != lst[0] { return false }\n    return is_sorted(lst[1..<lst.count])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmplraydknm.swift:18:22: error: missing argument label 'lst:' in call\n\
    \    return is_sorted(lst[1..<lst.count])\n                     ^\n          \
    \           lst: \n/tmp/tmplraydknm.swift:18:25: error: cannot convert value of\
    \ type 'ArraySlice<Int>' to expected argument type '[Int]'\n    return is_sorted(lst[1..<lst.count])\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x] != nil\
    \ {\n            return false\n        }\n        seen[x] = x\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ff0e16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ff0b0d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2ff0b0d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2ff0b0d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2ff0b0cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2ff090ce83 <unavailable> + 188035

    6    tmprju0rm3x                        0x000056427ccaa137 <unavailable> + 8503

    7    tmprju0rm3x                        0x000056427cca94e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b2ff1002460 __libc_start_main +
    245

    9    tmprju0rm3x                        0x000056427cca91d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last: Int = 0\n    for x in lst {\n        if x == last {\n\
    \            return false\n        }\n        last = x\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp5hiat5qx/tmp5hiat5qx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ee608bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ee5d82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ee5d82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ee5d817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hiat5qx                        0x000055a7c59e15f6 <unavailable> + 5622

    5    libc.so.6                          0x00002b7ee6277460 __libc_start_main +
    245

    6    tmp5hiat5qx                        0x000055a7c59e10d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 { return true }\n    var prev: Int = 0\n    for\
    \ x in lst {\n        if x == prev { return false }\n        prev = x\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpllrluwng/tmpllrluwng.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9374507c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93741feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93741fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93741fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpllrluwng                        0x0000565460d47646 <unavailable> + 5702

    5    libc.so.6                          0x00002b93746f3460 __libc_start_main +
    245

    6    tmpllrluwng                        0x0000565460d47129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    if lst.count\
    \ == 1 {\n        return lst[0] == lst[0]\n    }\n    if lst.count > 1 {\n   \
    \     var prev: Int?\n        for v in lst {\n            if prev == nil {\n \
    \               prev = v\n                continue\n            }\n          \
    \  if v == prev! {\n                return false\n            }\n            prev\
    \ = v\n        }\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpfxmrgqo7/tmpfxmrgqo7.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31917a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b319149fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b319149f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b319149e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxmrgqo7                        0x000055f6e75b7736 <unavailable> + 5942

    5    libc.so.6                          0x00002b3191994460 __libc_start_main +
    245

    6    tmpfxmrgqo7                        0x000055f6e75b7219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = Set<Int>()\n    for num in lst {\n        if seen.contains(num)\
    \ {\n            return false\n        }\n        seen.insert(num)\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpxre22bq3/tmpxre22bq3.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2c33d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2c30cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2c30ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2c30c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxre22bq3                        0x000055739e821746 <unavailable> + 5958

    5    libc.so.6                          0x00002af2c35bf460 __libc_start_main +
    245

    6    tmpxre22bq3                        0x000055739e821229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last: Int = 0\n    for x in lst {\n        if x == last {\n\
    \            return false\n        }\n        last = x\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp5hiat5qx/tmp5hiat5qx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ee608bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ee5d82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ee5d82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ee5d817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hiat5qx                        0x000055a7c59e15f6 <unavailable> + 5622

    5    libc.so.6                          0x00002b7ee6277460 __libc_start_main +
    245

    6    tmp5hiat5qx                        0x000055a7c59e10d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x] == nil\
    \ {\n            seen[x] = true\n            return true\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7tqyvd_t.swift:17:20: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[x] == nil {\n    \
    \       ~~~~~~~ ^  ~~~\n/tmp/tmp7tqyvd_t.swift:18:23: error: cannot assign value\
    \ of type 'Bool' to subscript of type 'Int'\n            seen[x] = true\n    \
    \                  ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x] == nil\
    \ {\n            seen[x] = true\n            return true\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7tqyvd_t.swift:17:20: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[x] == nil {\n    \
    \       ~~~~~~~ ^  ~~~\n/tmp/tmp7tqyvd_t.swift:18:23: error: cannot assign value\
    \ of type 'Bool' to subscript of type 'Int'\n            seen[x] = true\n    \
    \                  ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x - 1] !=\
    \ nil {\n            return false\n        }\n        seen[x] = x\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f5f162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f5ee59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f5ee59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f5ee5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f5ee58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0f5ec58e83 <unavailable> + 188035

    6    tmpdqfss4mh                        0x0000560e1ea1e153 <unavailable> + 8531

    7    tmpdqfss4mh                        0x0000560e1ea1d4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0f5f34e460 __libc_start_main +
    245

    9    tmpdqfss4mh                        0x0000560e1ea1d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    var seen =\
    \ [Int]()\n    for x in lst {\n        if seen[x] == nil {\n            seen[x]\
    \ = true\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpexwthjw5.swift:20:20: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[x] == nil {\n    \
    \       ~~~~~~~ ^  ~~~\n/tmp/tmpexwthjw5.swift:21:23: error: cannot assign value\
    \ of type 'Bool' to subscript of type 'Int'\n            seen[x] = true\n    \
    \                  ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    var last: Int\
    \ = 0\n    for x in lst {\n        if x == last {\n            return false\n\
    \        }\n        last = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1sv1e385/tmp1sv1e385.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b677d115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b677ce0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b677ce0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b677ce0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1sv1e385                        0x000055da10a2b646 <unavailable> + 5702

    5    libc.so.6                          0x00002b677d301460 __libc_start_main +
    245

    6    tmp1sv1e385                        0x000055da10a2b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 1 {\n        return true\n    }\n    var last: Int\
    \ = 0\n    for x in lst {\n        if x == last {\n            return false\n\
    \        }\n        last = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp2rwrhnk3/tmp2rwrhnk3.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85b67b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85b64a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85b64a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85b64a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2rwrhnk3                        0x0000555a3c21c646 <unavailable> + 5702

    5    libc.so.6                          0x00002b85b699e460 __libc_start_main +
    245

    6    tmp2rwrhnk3                        0x0000555a3c21c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 1 {\n        return true\n    }\n    var seen =\
    \ [Int]()\n    for x in lst {\n        if seen[x] != nil {\n            return\
    \ false\n        }\n        seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f16e40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f16b37561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6f16b37286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6f16b3713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6f16b36bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6f16936e83 <unavailable> + 188035

    6    tmpg6lmvb_f                        0x000055766067c19f <unavailable> + 8607

    7    tmpg6lmvb_f                        0x000055766067b602 <unavailable> + 5634

    8    libc.so.6                          0x00002b6f1702c460 __libc_start_main +
    245

    9    tmpg6lmvb_f                        0x000055766067b229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    var last: Int\
    \ = 0\n    for x in lst {\n        if x == last {\n            return false\n\
    \        }\n        last = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1sv1e385/tmp1sv1e385.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b677d115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b677ce0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b677ce0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b677ce0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1sv1e385                        0x000055da10a2b646 <unavailable> + 5702

    5    libc.so.6                          0x00002b677d301460 __libc_start_main +
    245

    6    tmp1sv1e385                        0x000055da10a2b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst.count > 1 {\n        var seen\
    \ = [Int]()\n        for num in lst {\n            if seen.contains(num) {\n \
    \               return false\n            }\n            seen.insert(num)\n  \
    \      }\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxzk_macf.swift:27:28: error: missing argument for parameter 'at'\
    \ in call\n            seen.insert(num)\n                           ^\n      \
    \                     , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)'\
    \ declared here\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    var last: Int\
    \ = 0\n    for x in lst {\n        if x == last {\n            return false\n\
    \        }\n        last = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1sv1e385/tmp1sv1e385.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b677d115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b677ce0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b677ce0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b677ce0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1sv1e385                        0x000055da10a2b646 <unavailable> + 5702

    5    libc.so.6                          0x00002b677d301460 __libc_start_main +
    245

    6    tmp1sv1e385                        0x000055da10a2b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    if lst.count\
    \ == 1 {\n        return lst[0] == lst[0]\n    }\n    if lst.count > 1 {\n   \
    \     var seen = [Int]()\n        for num in lst {\n            if seen[num] ==\
    \ true {\n                return false\n            }\n            seen[num] =\
    \ true\n        }\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpcg8rj1ch.swift:24:26: error: binary operator '==' cannot be applied\
    \ to operands of type 'Int' and 'Bool'\n            if seen[num] == true {\n \
    \              ~~~~~~~~~ ^  ~~~~\n/tmp/tmpcg8rj1ch.swift:24:26: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Bool, Bool),\
    \ (Int, Int)\n            if seen[num] == true {\n                         ^\n\
    /tmp/tmpcg8rj1ch.swift:27:25: error: cannot assign value of type 'Bool' to subscript\
    \ of type 'Int'\n            seen[num] = true\n                        ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    var last: Int\
    \ = 0\n    for x in lst {\n        if x == last {\n            return false\n\
    \        }\n        last = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1sv1e385/tmp1sv1e385.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b677d115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b677ce0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b677ce0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b677ce0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1sv1e385                        0x000055da10a2b646 <unavailable> + 5702

    5    libc.so.6                          0x00002b677d301460 __libc_start_main +
    245

    6    tmp1sv1e385                        0x000055da10a2b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    var prev: Int\
    \ = 0\n    for num in lst {\n        if num == prev {\n            return false\n\
    \        }\n        prev = num\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpepqlwqcn/tmpepqlwqcn.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5ebde5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5ebadcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5ebadc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5ebadb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpepqlwqcn                        0x0000564e9e163577 <unavailable> + 5495

    5    libc.so.6                          0x00002ba5ebfd1460 __libc_start_main +
    245

    6    tmpepqlwqcn                        0x0000564e9e163129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 1 {\n        return true\n    }\n    var last: Int\
    \ = 0\n    var lastCount: Int = 0\n    for x in lst {\n        if x == last {\n\
    \            lastCount += 1\n        } else {\n            last = x;\n       \
    \     lastCount = 1;\n        }\n    }\n    return lastCount <= 1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp3nt3z97n/tmp3nt3z97n.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05723cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05720c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05720c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05720c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3nt3z97n                        0x00005617702ce646 <unavailable> + 5702

    5    libc.so.6                          0x00002b05725bb460 __libc_start_main +
    245

    6    tmp3nt3z97n                        0x00005617702ce129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[1..<lst.count])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp15_qcxgz.swift:24:22: error: missing argument label 'lst:' in call\n\
    \    return is_sorted(lst[1..<lst.count])\n                     ^\n          \
    \           lst: \n/tmp/tmp15_qcxgz.swift:24:25: error: cannot convert value of\
    \ type 'ArraySlice<Int>' to expected argument type '[Int]'\n    return is_sorted(lst[1..<lst.count])\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last: Int = 0\n    for x in lst {\n        if x == last {\n\
    \            return false\n        }\n        last = x\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp5hiat5qx/tmp5hiat5qx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ee608bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ee5d82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ee5d82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ee5d817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hiat5qx                        0x000055a7c59e15f6 <unavailable> + 5622

    5    libc.so.6                          0x00002b7ee6277460 __libc_start_main +
    245

    6    tmp5hiat5qx                        0x000055a7c59e10d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    if lst.count\
    \ == 1 {\n        return lst[0] == lst[0]\n    }\n    if lst.count > 1 {\n   \
    \     var seen = [Int]()\n        for num in lst {\n            if seen.contains(num)\
    \ {\n                return false\n            }\n            seen.insert(num)\n\
    \        }\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpd06pb5el.swift:27:28: error: missing argument for parameter 'at'\
    \ in call\n            seen.insert(num)\n                           ^\n      \
    \                     , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)'\
    \ declared here\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[1..<lst.count])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp15_qcxgz.swift:24:22: error: missing argument label 'lst:' in call\n\
    \    return is_sorted(lst[1..<lst.count])\n                     ^\n          \
    \           lst: \n/tmp/tmp15_qcxgz.swift:24:25: error: cannot convert value of\
    \ type 'ArraySlice<Int>' to expected argument type '[Int]'\n    return is_sorted(lst[1..<lst.count])\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last: Int = 0\n    for x in lst {\n        if x == last {\n\
    \            return false\n        }\n        last = x\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp5hiat5qx/tmp5hiat5qx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ee608bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ee5d82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ee5d82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ee5d817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hiat5qx                        0x000055a7c59e15f6 <unavailable> + 5622

    5    libc.so.6                          0x00002b7ee6277460 __libc_start_main +
    245

    6    tmp5hiat5qx                        0x000055a7c59e10d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst.count > 1 {\n        var seen\
    \ = [Int]()\n        for num in lst {\n            if seen[num] == true {\n  \
    \              return false\n            }\n            seen[num] = true\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5gp9ctti.swift:24:26: error: binary operator '==' cannot be applied\
    \ to operands of type 'Int' and 'Bool'\n            if seen[num] == true {\n \
    \              ~~~~~~~~~ ^  ~~~~\n/tmp/tmp5gp9ctti.swift:24:26: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Bool, Bool),\
    \ (Int, Int)\n            if seen[num] == true {\n                         ^\n\
    /tmp/tmp5gp9ctti.swift:27:25: error: cannot assign value of type 'Bool' to subscript\
    \ of type 'Int'\n            seen[num] = true\n                        ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst.count > 1 {\n        var seen\
    \ = [Int]()\n        for v in lst {\n            if !seen.contains(v) {\n    \
    \            seen.append(v)\n            }\n        }\n        return false\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp6our2wt8/tmp6our2wt8.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2474ef8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2474befb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2474bef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2474bee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6our2wt8                        0x0000555f074ec697 <unavailable> + 5783

    5    libc.so.6                          0x00002b24750e4460 __libc_start_main +
    245

    6    tmp6our2wt8                        0x0000555f074ec249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] !=\
    \ nil {\n            return false\n        }\n        seen[num] = num\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6aa9b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6aa6aa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae6aa6aa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae6aa6aa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae6aa6a9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae6aa4a9e83 <unavailable> + 188035

    6    tmp6wd_v1dn                        0x0000563739c3c137 <unavailable> + 8503

    7    tmp6wd_v1dn                        0x0000563739c3b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002ae6aab9f460 __libc_start_main +
    245

    9    tmp6wd_v1dn                        0x0000563739c3b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst.count > 1 {\n        var seen\
    \ = [Int]()\n        for num in lst {\n            if seen.contains(num) {\n \
    \               return false\n            }\n            seen.insert(num)\n  \
    \      }\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxzk_macf.swift:27:28: error: missing argument for parameter 'at'\
    \ in call\n            seen.insert(num)\n                           ^\n      \
    \                     , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)'\
    \ declared here\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst.count > 1 {\n        var seen\
    \ = [Int]()\n        for v in lst {\n            if !seen.contains(v) {\n    \
    \            seen.append(v)\n            } else {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1omdlwuy/tmp1omdlwuy.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53fbf84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53fbc7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53fbc7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53fbc7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1omdlwuy                        0x0000562fd389d766 <unavailable> + 5990

    5    libc.so.6                          0x00002b53fc170460 __libc_start_main +
    245

    6    tmp1omdlwuy                        0x0000562fd389d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x - 1] !=\
    \ nil {\n            return false\n        }\n        seen[x] = x\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f5f162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f5ee59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f5ee59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f5ee5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f5ee58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0f5ec58e83 <unavailable> + 188035

    6    tmpdqfss4mh                        0x0000560e1ea1e153 <unavailable> + 8531

    7    tmpdqfss4mh                        0x0000560e1ea1d4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0f5f34e460 __libc_start_main +
    245

    9    tmpdqfss4mh                        0x0000560e1ea1d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen.contains(num)\
    \ {\n            return false\n        } else {\n            seen.append(num)\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpjt6aksiw/tmpjt6aksiw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add322dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add31fd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add31fd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add31fd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjt6aksiw                        0x000055ebb4802716 <unavailable> + 5910

    5    libc.so.6                          0x00002add324ca460 __libc_start_main +
    245

    6    tmpjt6aksiw                        0x000055ebb48021f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x] != nil\
    \ {\n            return false\n        } else {\n            seen[x] = x\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8579e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8576db561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8576db286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8576db13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8576dabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab8574dae83 <unavailable> + 188035

    6    tmph6oho25x                        0x000055f9fa1b2137 <unavailable> + 8503

    7    tmph6oho25x                        0x000055f9fa1b14e5 <unavailable> + 5349

    8    libc.so.6                          0x00002ab857bd0460 __libc_start_main +
    245

    9    tmph6oho25x                        0x000055f9fa1b11d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last: Int = 0\n    for x in lst {\n        if x == last {\n\
    \            return false\n        }\n        last = x\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp5hiat5qx/tmp5hiat5qx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ee608bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ee5d82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ee5d82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ee5d817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hiat5qx                        0x000055a7c59e15f6 <unavailable> + 5622

    5    libc.so.6                          0x00002b7ee6277460 __libc_start_main +
    245

    6    tmp5hiat5qx                        0x000055a7c59e10d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] !=\
    \ nil {\n            return false\n        }\n        seen[num] = num\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6aa9b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6aa6aa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae6aa6aa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae6aa6aa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae6aa6a9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae6aa4a9e83 <unavailable> + 188035

    6    tmp6wd_v1dn                        0x0000563739c3c137 <unavailable> + 8503

    7    tmp6wd_v1dn                        0x0000563739c3b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002ae6aab9f460 __libc_start_main +
    245

    9    tmp6wd_v1dn                        0x0000563739c3b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    var prev: Int\
    \ = 0\n    var found = false\n    for x in lst {\n        if x == prev {\n   \
    \         found = true\n        } else {\n            prev = x\n            found\
    \ = false\n        }\n    }\n    return found\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpit47om9t/tmpit47om9t.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb07593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb0728ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb0728a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb072897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit47om9t                        0x00005596b62a74aa <unavailable> + 5290

    5    libc.so.6                          0x00002afb0777f460 __libc_start_main +
    245

    6    tmpit47om9t                        0x00005596b62a7129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = Set<Int>()\n    for x in lst {\n        if seen.contains(x)\
    \ {\n            return false\n        }\n        seen.add(x)\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpezjmo7k5.swift:20:14: error: value of type 'Set<Int>' has no member\
    \ 'add'\n        seen.add(x)\n        ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen.contains(num)\
    \ {\n            return false\n        }\n        seen.append(num)\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp8v92usqu/tmp8v92usqu.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc0a0e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc09ddeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc09dde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc09ddd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8v92usqu                        0x00005589cc843716 <unavailable> + 5910

    5    libc.so.6                          0x00002abc0a2d3460 __libc_start_main +
    245

    6    tmp8v92usqu                        0x00005589cc8431f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    var last: Int\
    \ = 0\n    for x in lst {\n        if x == last {\n            return false\n\
    \        }\n        last = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1sv1e385/tmp1sv1e385.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b677d115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b677ce0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b677ce0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b677ce0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1sv1e385                        0x000055da10a2b646 <unavailable> + 5702

    5    libc.so.6                          0x00002b677d301460 __libc_start_main +
    245

    6    tmp1sv1e385                        0x000055da10a2b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count < 2 {\n        return true\n    }\n    var last: Int\
    \ = 0\n    for x in lst {\n        if x == last {\n            return false\n\
    \        }\n        last = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp4nfqs3ai/tmp4nfqs3ai.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b445e8d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b445e5c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b445e5c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b445e5c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4nfqs3ai                        0x00005576311f5646 <unavailable> + 5702

    5    libc.so.6                          0x00002b445eabc460 __libc_start_main +
    245

    6    tmp4nfqs3ai                        0x00005576311f5129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[1..<lst.count])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp15_qcxgz.swift:24:22: error: missing argument label 'lst:' in call\n\
    \    return is_sorted(lst[1..<lst.count])\n                     ^\n          \
    \           lst: \n/tmp/tmp15_qcxgz.swift:24:25: error: cannot convert value of\
    \ type 'ArraySlice<Int>' to expected argument type '[Int]'\n    return is_sorted(lst[1..<lst.count])\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] !=\
    \ nil {\n            return false\n        }\n        seen[num] = num\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6aa9b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6aa6aa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae6aa6aa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae6aa6aa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae6aa6a9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae6aa4a9e83 <unavailable> + 188035

    6    tmp6wd_v1dn                        0x0000563739c3c137 <unavailable> + 8503

    7    tmp6wd_v1dn                        0x0000563739c3b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002ae6aab9f460 __libc_start_main +
    245

    9    tmp6wd_v1dn                        0x0000563739c3b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    var i = 0\n    var j = 0\n    var k\
    \ = lst.count - 1\n    while i < k {\n        if lst[i] > lst[j] {\n         \
    \   return false\n        }\n        i += 1\n        j += 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp3bejo8q2/tmp3bejo8q2.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13bd4d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13bd1c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13bd1c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13bd1c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bejo8q2                        0x00005630712c7467 <unavailable> + 5223

    5    libc.so.6                          0x00002b13bd6be460 __libc_start_main +
    245

    6    tmp3bejo8q2                        0x00005630712c7019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    if lst.count\
    \ == 1 {\n        return lst[0] == lst[0]\n    }\n    if lst.count > 1 {\n   \
    \     var seen = [Int]()\n        for num in lst {\n            if seen[num] ==\
    \ true {\n                return false\n            }\n            seen[num] =\
    \ true\n        }\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpcg8rj1ch.swift:24:26: error: binary operator '==' cannot be applied\
    \ to operands of type 'Int' and 'Bool'\n            if seen[num] == true {\n \
    \              ~~~~~~~~~ ^  ~~~~\n/tmp/tmpcg8rj1ch.swift:24:26: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Bool, Bool),\
    \ (Int, Int)\n            if seen[num] == true {\n                         ^\n\
    /tmp/tmpcg8rj1ch.swift:27:25: error: cannot assign value of type 'Bool' to subscript\
    \ of type 'Int'\n            seen[num] = true\n                        ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x] == nil\
    \ {\n            seen[x] = true\n            return true\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7tqyvd_t.swift:17:20: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[x] == nil {\n    \
    \       ~~~~~~~ ^  ~~~\n/tmp/tmp7tqyvd_t.swift:18:23: error: cannot assign value\
    \ of type 'Bool' to subscript of type 'Int'\n            seen[x] = true\n    \
    \                  ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last: Int = 0\n    for num in lst {\n        if num == last\
    \ {\n            return false\n        }\n        last = num\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpp34_gkbs/tmpp34_gkbs.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57c3a10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57c3707b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57c3707988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57c37067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp34_gkbs                        0x0000558ee052e5f6 <unavailable> + 5622

    5    libc.so.6                          0x00002b57c3bfc460 __libc_start_main +
    245

    6    tmpp34_gkbs                        0x0000558ee052e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] ==\
    \ nil {\n            seen[num] = true\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpq7qg2xdj.swift:17:22: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[num] == nil {\n  \
    \         ~~~~~~~~~ ^  ~~~\n/tmp/tmpq7qg2xdj.swift:18:25: error: cannot assign\
    \ value of type 'Bool' to subscript of type 'Int'\n            seen[num] = true\n\
    \                        ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last: Int = 0\n    for num in lst {\n        if last < num {\n\
    \            return false\n        }\n        last = num\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpcm_53nwp/tmpcm_53nwp.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e2775ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e27455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e27455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e274547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcm_53nwp                        0x0000556d2e25f45a <unavailable> + 5210

    5    libc.so.6                          0x00002b0e2794a460 __libc_start_main +
    245

    6    tmpcm_53nwp                        0x0000556d2e25f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] !=\
    \ nil {\n            return false\n        }\n        seen[num] = num\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6aa9b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6aa6aa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae6aa6aa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae6aa6aa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae6aa6a9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae6aa4a9e83 <unavailable> + 188035

    6    tmp6wd_v1dn                        0x0000563739c3c137 <unavailable> + 8503

    7    tmp6wd_v1dn                        0x0000563739c3b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002ae6aab9f460 __libc_start_main +
    245

    9    tmp6wd_v1dn                        0x0000563739c3b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 1 {\n        return true\n    }\n    var last: Int\
    \ = 0\n    for idx in lst.indices {\n        if idx == last {\n            return\
    \ false\n        }\n        last = idx\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpcmy331e1/tmpcmy331e1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b105559dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1055294b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1055294988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10552937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcmy331e1                        0x0000560a0f30b597 <unavailable> + 5527

    5    libc.so.6                          0x00002b1055789460 __libc_start_main +
    245

    6    tmpcmy331e1                        0x0000560a0f30b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 1 {\n        return true\n    }\n    var seen =\
    \ [Int]()\n    for x in lst {\n        if seen[x] != nil {\n            return\
    \ false\n        }\n        seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f16e40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f16b37561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6f16b37286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6f16b3713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6f16b36bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6f16936e83 <unavailable> + 188035

    6    tmpg6lmvb_f                        0x000055766067c19f <unavailable> + 8607

    7    tmpg6lmvb_f                        0x000055766067b602 <unavailable> + 5634

    8    libc.so.6                          0x00002b6f1702c460 __libc_start_main +
    245

    9    tmpg6lmvb_f                        0x000055766067b229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last: Int = 0\n    for x in lst {\n        if x == last {\n\
    \            return false\n        }\n        last = x\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp5hiat5qx/tmp5hiat5qx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ee608bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ee5d82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ee5d82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ee5d817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hiat5qx                        0x000055a7c59e15f6 <unavailable> + 5622

    5    libc.so.6                          0x00002b7ee6277460 __libc_start_main +
    245

    6    tmp5hiat5qx                        0x000055a7c59e10d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] !=\
    \ nil {\n            return false\n        } else {\n            seen[num] = num\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae97ce9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae97cb95561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae97cb95286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae97cb9513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae97cb94bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae97c994e83 <unavailable> + 188035

    6    tmpjw5mtl8n                        0x0000557147cae137 <unavailable> + 8503

    7    tmpjw5mtl8n                        0x0000557147cad4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002ae97d08a460 __libc_start_main +
    245

    9    tmpjw5mtl8n                        0x0000557147cad1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] !=\
    \ nil {\n            return false\n        }\n        seen[num] = num\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6aa9b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6aa6aa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae6aa6aa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae6aa6aa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae6aa6a9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae6aa4a9e83 <unavailable> + 188035

    6    tmp6wd_v1dn                        0x0000563739c3c137 <unavailable> + 8503

    7    tmp6wd_v1dn                        0x0000563739c3b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002ae6aab9f460 __libc_start_main +
    245

    9    tmp6wd_v1dn                        0x0000563739c3b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    if lst.count\
    \ == 1 {\n        return lst[0] == lst[0]\n    }\n    if lst.count > 1 {\n   \
    \     var last: Int = 0\n        var lastCount: Int = 0\n        for idx in lst\
    \ {\n            if idx == last {\n                lastCount += 1\n          \
    \  } else {\n                if lastCount > 1 {\n                    return false\n\
    \                }\n                last = idx\n                lastCount = 1\n\
    \            }\n        }\n        return true\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpr66j3cyz/tmpr66j3cyz.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e8341dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e83114b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e83114988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e831137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr66j3cyz                        0x000055e578ea86a6 <unavailable> + 5798

    5    libc.so.6                          0x00002b5e83609460 __libc_start_main +
    245

    6    tmpr66j3cyz                        0x000055e578ea8189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x] == nil\
    \ {\n            seen[x] = true\n            return true\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7tqyvd_t.swift:17:20: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[x] == nil {\n    \
    \       ~~~~~~~ ^  ~~~\n/tmp/tmp7tqyvd_t.swift:18:23: error: cannot assign value\
    \ of type 'Bool' to subscript of type 'Int'\n            seen[x] = true\n    \
    \                  ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x - 1] !=\
    \ nil {\n            return false\n        }\n        seen[x] = true\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8q4v7asy.swift:17:24: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns true\n        if seen[x - 1] != nil {\n \
    \          ~~~~~~~~~~~ ^  ~~~\n/tmp/tmp8q4v7asy.swift:20:19: error: cannot assign\
    \ value of type 'Bool' to subscript of type 'Int'\n        seen[x] = true\n  \
    \                ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    return lst.sorted == true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzcrm4_5o.swift:21:23: error: binary operator '==' cannot be applied\
    \ to operands of type '() -> [Int]' and 'Bool'\n    return lst.sorted == true\n\
    \           ~~~~~~~~~~ ^  ~~~~\n/tmp/tmpzcrm4_5o.swift:21:23: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Bool, Bool)\n\
    \    return lst.sorted == true\n                      ^\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] !=\
    \ nil {\n            return false\n        } else {\n            seen[num] = num\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae97ce9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae97cb95561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae97cb95286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae97cb9513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae97cb94bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae97c994e83 <unavailable> + 188035

    6    tmpjw5mtl8n                        0x0000557147cae137 <unavailable> + 8503

    7    tmpjw5mtl8n                        0x0000557147cad4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002ae97d08a460 __libc_start_main +
    245

    9    tmpjw5mtl8n                        0x0000557147cad1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x] == nil\
    \ {\n            seen[x] = true\n            return true\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7tqyvd_t.swift:17:20: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[x] == nil {\n    \
    \       ~~~~~~~ ^  ~~~\n/tmp/tmp7tqyvd_t.swift:18:23: error: cannot assign value\
    \ of type 'Bool' to subscript of type 'Int'\n            seen[x] = true\n    \
    \                  ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    if lst.count\
    \ == 1 {\n        return lst[0] == 0\n    }\n    if lst.count > 1 {\n        var\
    \ last: Int = 0\n        for idx in 0..<lst.count {\n            if lst[idx] !=\
    \ last {\n                return false\n            }\n            last = idx\n\
    \        }\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpp63hwmui/tmpp63hwmui.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adcb17d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcb14ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adcb14ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adcb14cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp63hwmui                        0x0000562f990cf52a <unavailable> + 5418

    5    libc.so.6                          0x00002adcb19c3460 __libc_start_main +
    245

    6    tmpp63hwmui                        0x0000562f990cf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[1..<lst.count])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp15_qcxgz.swift:24:22: error: missing argument label 'lst:' in call\n\
    \    return is_sorted(lst[1..<lst.count])\n                     ^\n          \
    \           lst: \n/tmp/tmp15_qcxgz.swift:24:25: error: cannot convert value of\
    \ type 'ArraySlice<Int>' to expected argument type '[Int]'\n    return is_sorted(lst[1..<lst.count])\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last: Int = 0\n    for x in lst {\n        if x == last {\n\
    \            return false\n        }\n        last = x\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp5hiat5qx/tmp5hiat5qx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ee608bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ee5d82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ee5d82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ee5d817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hiat5qx                        0x000055a7c59e15f6 <unavailable> + 5622

    5    libc.so.6                          0x00002b7ee6277460 __libc_start_main +
    245

    6    tmp5hiat5qx                        0x000055a7c59e10d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last: Int = 0\n    for x in lst {\n        if x == last {\n\
    \            return false\n        }\n        last = x\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp5hiat5qx/tmp5hiat5qx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ee608bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ee5d82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ee5d82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ee5d817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hiat5qx                        0x000055a7c59e15f6 <unavailable> + 5622

    5    libc.so.6                          0x00002b7ee6277460 __libc_start_main +
    245

    6    tmp5hiat5qx                        0x000055a7c59e10d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count < 2 {\n        return true\n    }\n    var last: Int\
    \ = 0\n    var flag = false\n    for x in lst {\n        if x == last {\n    \
    \        flag = true\n        } else {\n            last = x\n        }\n    }\n\
    \    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp3ul9qgn7/tmp3ul9qgn7.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5337c0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5337901b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5337901988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53379007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ul9qgn7                        0x0000561e8124b577 <unavailable> + 5495

    5    libc.so.6                          0x00002b5337df6460 __libc_start_main +
    245

    6    tmp3ul9qgn7                        0x0000561e8124b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013968
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x - 1] !=\
    \ nil {\n            return false\n        }\n        seen[x] = x\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f5f162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f5ee59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f5ee59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f5ee5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f5ee58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0f5ec58e83 <unavailable> + 188035

    6    tmpdqfss4mh                        0x0000560e1ea1e153 <unavailable> + 8531

    7    tmpdqfss4mh                        0x0000560e1ea1d4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0f5f34e460 __libc_start_main +
    245

    9    tmpdqfss4mh                        0x0000560e1ea1d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var prev: Int = 0\n    for x in lst {\n        if prev > x {\n \
    \           return false\n        }\n        prev = x\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpm9rcqxm4/tmpm9rcqxm4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4db753c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4db44ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4db44a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4db4497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm9rcqxm4                        0x00005650efcf5c2b <unavailable> + 7211

    5    libc.so.6                          0x00002ab4db93f460 __libc_start_main +
    245

    6    tmpm9rcqxm4                        0x00005650efcf50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013968
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x] != nil\
    \ {\n            return false\n        }\n        seen[x] = x\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ff0e16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ff0b0d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2ff0b0d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2ff0b0d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2ff0b0cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2ff090ce83 <unavailable> + 188035

    6    tmprju0rm3x                        0x000056427ccaa137 <unavailable> + 8503

    7    tmprju0rm3x                        0x000056427cca94e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b2ff1002460 __libc_start_main +
    245

    9    tmprju0rm3x                        0x000056427cca91d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    var prev: Int?\n\
    \    for x in lst {\n        if prev != nil {\n            if x == prev! {\n \
    \               return false\n            }\n        }\n        prev = x\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpuocaq2cu/tmpuocaq2cu.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b720ba83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b720b77ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b720b77a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b720b7797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuocaq2cu                        0x000055d60342f617 <unavailable> + 5655

    5    libc.so.6                          0x00002b720bc6f460 __libc_start_main +
    245

    6    tmpuocaq2cu                        0x000055d60342f1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    var last: Int\
    \ = 0\n    var lastCount: Int = 0\n    for num in lst {\n        if num == last\
    \ {\n            lastCount++\n        } else {\n            last = num\n     \
    \       lastCount = 1\n        }\n    }\n    if lastCount > 1 {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxqm8qoop.swift:22:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            lastCount++\n                     ^~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    var last: Int\
    \ = 0\n    for idx in lst {\n        if idx == last {\n            return false\n\
    \        }\n        last = idx\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpde7j2bq5/tmpde7j2bq5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee82248c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee81f3fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee81f3f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee81f3e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7j2bq5                        0x0000560e50b2e577 <unavailable> + 5495

    5    libc.so.6                          0x00002aee82434460 __libc_start_main +
    245

    6    tmpde7j2bq5                        0x0000560e50b2e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x] == nil\
    \ {\n            seen[x] = true\n            return true\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7tqyvd_t.swift:17:20: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[x] == nil {\n    \
    \       ~~~~~~~ ^  ~~~\n/tmp/tmp7tqyvd_t.swift:18:23: error: cannot assign value\
    \ of type 'Bool' to subscript of type 'Int'\n            seen[x] = true\n    \
    \                  ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[1..<lst.count])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp15_qcxgz.swift:24:22: error: missing argument label 'lst:' in call\n\
    \    return is_sorted(lst[1..<lst.count])\n                     ^\n          \
    \           lst: \n/tmp/tmp15_qcxgz.swift:24:25: error: cannot convert value of\
    \ type 'ArraySlice<Int>' to expected argument type '[Int]'\n    return is_sorted(lst[1..<lst.count])\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x] != nil\
    \ {\n            return false\n        }\n        seen[x] = x\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ff0e16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ff0b0d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2ff0b0d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2ff0b0d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2ff0b0cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2ff090ce83 <unavailable> + 188035

    6    tmprju0rm3x                        0x000056427ccaa137 <unavailable> + 8503

    7    tmprju0rm3x                        0x000056427cca94e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b2ff1002460 __libc_start_main +
    245

    9    tmprju0rm3x                        0x000056427cca91d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] ==\
    \ nil {\n            seen[num] = true\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpq7qg2xdj.swift:17:22: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[num] == nil {\n  \
    \         ~~~~~~~~~ ^  ~~~\n/tmp/tmpq7qg2xdj.swift:18:25: error: cannot assign\
    \ value of type 'Bool' to subscript of type 'Int'\n            seen[num] = true\n\
    \                        ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x] == nil\
    \ {\n            seen[x] = true\n            return true\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7tqyvd_t.swift:17:20: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[x] == nil {\n    \
    \       ~~~~~~~ ^  ~~~\n/tmp/tmp7tqyvd_t.swift:18:23: error: cannot assign value\
    \ of type 'Bool' to subscript of type 'Int'\n            seen[x] = true\n    \
    \                  ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    var last: Int\
    \ = 0\n    for x in lst {\n        if x == last {\n            return false\n\
    \        }\n        last = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1sv1e385/tmp1sv1e385.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b677d115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b677ce0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b677ce0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b677ce0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1sv1e385                        0x000055da10a2b646 <unavailable> + 5702

    5    libc.so.6                          0x00002b677d301460 __libc_start_main +
    245

    6    tmp1sv1e385                        0x000055da10a2b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x - 1] !=\
    \ nil {\n            return false\n        }\n        seen[x] = x\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f5f162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f5ee59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f5ee59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f5ee5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f5ee58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0f5ec58e83 <unavailable> + 188035

    6    tmpdqfss4mh                        0x0000560e1ea1e153 <unavailable> + 8531

    7    tmpdqfss4mh                        0x0000560e1ea1d4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0f5f34e460 __libc_start_main +
    245

    9    tmpdqfss4mh                        0x0000560e1ea1d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    var i = 0\n\
    \    var j = 0\n    while i < lst.count {\n        if lst[i] > lst[j] {\n    \
    \        return false\n        }\n        i += 1\n        j += 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp4hxo2388/tmp4hxo2388.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae175627c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae17531eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae17531e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae17531d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4hxo2388                        0x0000564e4f7c1467 <unavailable> + 5223

    5    libc.so.6                          0x00002ae175813460 __libc_start_main +
    245

    6    tmp4hxo2388                        0x0000564e4f7c1019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013968
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last: Int = 0\n    for x in lst {\n        if x == last {\n\
    \            return false\n        }\n        last = x\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp5hiat5qx/tmp5hiat5qx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ee608bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ee5d82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ee5d82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ee5d817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hiat5qx                        0x000055a7c59e15f6 <unavailable> + 5622

    5    libc.so.6                          0x00002b7ee6277460 __libc_start_main +
    245

    6    tmp5hiat5qx                        0x000055a7c59e10d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var prev: Int?\n    for x in lst {\n        if prev == nil {\n \
    \           prev = x\n            continue\n        }\n        if x == prev! {\n\
    \            return false\n        }\n        prev = x\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpen1ygiox/tmpen1ygiox.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab04a81bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab04a512b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab04a512988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab04a5117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen1ygiox                        0x000055854537b686 <unavailable> + 5766

    5    libc.so.6                          0x00002ab04aa07460 __libc_start_main +
    245

    6    tmpen1ygiox                        0x000055854537b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013968
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x - 1] !=\
    \ nil {\n            return false\n        }\n        seen[x] = x\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f5f162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f5ee59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f5ee59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f5ee5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f5ee58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0f5ec58e83 <unavailable> + 188035

    6    tmpdqfss4mh                        0x0000560e1ea1e153 <unavailable> + 8531

    7    tmpdqfss4mh                        0x0000560e1ea1d4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0f5f34e460 __libc_start_main +
    245

    9    tmpdqfss4mh                        0x0000560e1ea1d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    var prev: Int\
    \ = 0\n    for x in lst {\n        if x == prev {\n            return false\n\
    \        }\n        prev = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpcojctuzo/tmpcojctuzo.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68eab4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68ea843b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68ea843988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68ea8427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcojctuzo                        0x0000556be508d577 <unavailable> + 5495

    5    libc.so.6                          0x00002b68ead38460 __libc_start_main +
    245

    6    tmpcojctuzo                        0x0000556be508d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x - 1] !=\
    \ nil {\n            return false\n        }\n        seen[x] = x\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f5f162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f5ee59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f5ee59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f5ee5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f5ee58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0f5ec58e83 <unavailable> + 188035

    6    tmpdqfss4mh                        0x0000560e1ea1e153 <unavailable> + 8531

    7    tmpdqfss4mh                        0x0000560e1ea1d4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0f5f34e460 __libc_start_main +
    245

    9    tmpdqfss4mh                        0x0000560e1ea1d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst.count == 2 {\n        return\
    \ lst[0] < lst[1]\n    }\n    if lst.count > 2 {\n        var i = 0\n        var\
    \ j = 0\n        var k = lst.count - 1\n        var tmp: Int\n        var flag\
    \ = true\n        while i < k {\n            tmp = lst[i]\n            if j ==\
    \ k {\n                flag = false\n                break\n            }\n  \
    \          if tmp == lst[j] {\n                flag = false\n                break\n\
    \            }\n            if tmp < lst[j] {\n                flag = false\n\
    \                break\n            }\n            i += 1\n            j += 1\n\
    \        }\n        return flag\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpkstfmzdc/tmpkstfmzdc.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d0fe50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d0fb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d0fb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d0fb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkstfmzdc                        0x000055aa27783467 <unavailable> + 5223

    5    libc.so.6                          0x00002b0d1003c460 __libc_start_main +
    245

    6    tmpkstfmzdc                        0x000055aa27783019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] ==\
    \ nil {\n            seen[num] = true\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpq7qg2xdj.swift:17:22: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[num] == nil {\n  \
    \         ~~~~~~~~~ ^  ~~~\n/tmp/tmpq7qg2xdj.swift:18:25: error: cannot assign\
    \ value of type 'Bool' to subscript of type 'Int'\n            seen[num] = true\n\
    \                        ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x] == nil\
    \ {\n            seen[x] = true\n            return true\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7tqyvd_t.swift:17:20: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[x] == nil {\n    \
    \       ~~~~~~~ ^  ~~~\n/tmp/tmp7tqyvd_t.swift:18:23: error: cannot assign value\
    \ of type 'Bool' to subscript of type 'Int'\n            seen[x] = true\n    \
    \                  ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last: Int = 0\n    for x in lst {\n        if x == last {\n\
    \            return false\n        }\n        last = x\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp5hiat5qx/tmp5hiat5qx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ee608bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ee5d82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ee5d82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ee5d817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hiat5qx                        0x000055a7c59e15f6 <unavailable> + 5622

    5    libc.so.6                          0x00002b7ee6277460 __libc_start_main +
    245

    6    tmp5hiat5qx                        0x000055a7c59e10d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] !=\
    \ nil {\n            return false\n        }\n        seen[num] = num\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6aa9b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6aa6aa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae6aa6aa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae6aa6aa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae6aa6a9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae6aa4a9e83 <unavailable> + 188035

    6    tmp6wd_v1dn                        0x0000563739c3c137 <unavailable> + 8503

    7    tmp6wd_v1dn                        0x0000563739c3b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002ae6aab9f460 __libc_start_main +
    245

    9    tmp6wd_v1dn                        0x0000563739c3b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x - 1] !=\
    \ nil {\n            return false\n        }\n        seen[x] = x\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f5f162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f5ee59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f5ee59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f5ee5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f5ee58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0f5ec58e83 <unavailable> + 188035

    6    tmpdqfss4mh                        0x0000560e1ea1e153 <unavailable> + 8531

    7    tmpdqfss4mh                        0x0000560e1ea1d4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0f5f34e460 __libc_start_main +
    245

    9    tmpdqfss4mh                        0x0000560e1ea1d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count < 2 {\n        return true\n    }\n    var last: Int\
    \ = 0\n    for x in lst {\n        if x == last {\n            return false\n\
    \        }\n        last = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp4nfqs3ai/tmp4nfqs3ai.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b445e8d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b445e5c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b445e5c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b445e5c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4nfqs3ai                        0x00005576311f5646 <unavailable> + 5702

    5    libc.so.6                          0x00002b445eabc460 __libc_start_main +
    245

    6    tmp4nfqs3ai                        0x00005576311f5129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x - 1] !=\
    \ nil {\n            return false\n        }\n        seen[x] = x\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f5f162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f5ee59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f5ee59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f5ee5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f5ee58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0f5ec58e83 <unavailable> + 188035

    6    tmpdqfss4mh                        0x0000560e1ea1e153 <unavailable> + 8531

    7    tmpdqfss4mh                        0x0000560e1ea1d4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0f5f34e460 __libc_start_main +
    245

    9    tmpdqfss4mh                        0x0000560e1ea1d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[1..<lst.count])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp15_qcxgz.swift:24:22: error: missing argument label 'lst:' in call\n\
    \    return is_sorted(lst[1..<lst.count])\n                     ^\n          \
    \           lst: \n/tmp/tmp15_qcxgz.swift:24:25: error: cannot convert value of\
    \ type 'ArraySlice<Int>' to expected argument type '[Int]'\n    return is_sorted(lst[1..<lst.count])\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last: Int = 0\n    for num in lst {\n        if num == last\
    \ {\n            return false\n        }\n        last = num\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpp34_gkbs/tmpp34_gkbs.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57c3a10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57c3707b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57c3707988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57c37067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp34_gkbs                        0x0000558ee052e5f6 <unavailable> + 5622

    5    libc.so.6                          0x00002b57c3bfc460 __libc_start_main +
    245

    6    tmpp34_gkbs                        0x0000558ee052e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    var last: Int\
    \ = 0\n    for x in lst {\n        if x == last {\n            return false\n\
    \        }\n        last = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1sv1e385/tmp1sv1e385.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b677d115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b677ce0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b677ce0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b677ce0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1sv1e385                        0x000055da10a2b646 <unavailable> + 5702

    5    libc.so.6                          0x00002b677d301460 __libc_start_main +
    245

    6    tmp1sv1e385                        0x000055da10a2b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    var i = 0\n    var j = 0\n    var k\
    \ = 0\n    for k in lst {\n        if i == j {\n            return false\n   \
    \     }\n        if k > i {\n            return false\n        }\n        i +=\
    \ 1\n    }\n    for k in lst {\n        if j == k {\n            return false\n\
    \        }\n        if k < j {\n            return false\n        }\n        j\
    \ += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp78z46tn1/tmp78z46tn1.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f6a98fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f6a686b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f6a686988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f6a6857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp78z46tn1                        0x00005563e731d577 <unavailable> + 5495

    5    libc.so.6                          0x00002b6f6ab7b460 __libc_start_main +
    245

    6    tmp78z46tn1                        0x00005563e731d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x] == nil\
    \ {\n            seen[x] = true\n            return true\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7tqyvd_t.swift:17:20: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[x] == nil {\n    \
    \       ~~~~~~~ ^  ~~~\n/tmp/tmp7tqyvd_t.swift:18:23: error: cannot assign value\
    \ of type 'Bool' to subscript of type 'Int'\n            seen[x] = true\n    \
    \                  ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = Set<Int>()\n    for num in lst {\n        if seen.contains(num)\
    \ {\n            return false\n        }\n        seen.insert(num)\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpxre22bq3/tmpxre22bq3.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2c33d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2c30cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2c30ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2c30c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxre22bq3                        0x000055739e821746 <unavailable> + 5958

    5    libc.so.6                          0x00002af2c35bf460 __libc_start_main +
    245

    6    tmpxre22bq3                        0x000055739e821229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    var last: Int\
    \ = 0\n    var flag: Bool = false\n    for x in lst {\n        if x == last {\n\
    \            flag = true\n        } else {\n            last = x\n        }\n\
    \    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpo452psbp/tmpo452psbp.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b4c94ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b4c641b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b4c641988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b4c6407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo452psbp                        0x000055a98e2354aa <unavailable> + 5290

    5    libc.so.6                          0x00002b6b4cb36460 __libc_start_main +
    245

    6    tmpo452psbp                        0x000055a98e235129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013968
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    var i = 0\n\
    \    var j = 0\n    var k = lst.count\n    while i < k {\n        if lst[i] <\
    \ lst[j] {\n            return false\n        }\n        i += 1\n        j +=\
    \ 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpecbfk7xr/tmpecbfk7xr.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea5aa09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea5a700b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea5a700988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea5a6ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpecbfk7xr                        0x000055b6b2af5467 <unavailable> + 5223

    5    libc.so.6                          0x00002aea5abf5460 __libc_start_main +
    245

    6    tmpecbfk7xr                        0x000055b6b2af5019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[1..<lst.count])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp15_qcxgz.swift:24:22: error: missing argument label 'lst:' in call\n\
    \    return is_sorted(lst[1..<lst.count])\n                     ^\n          \
    \           lst: \n/tmp/tmp15_qcxgz.swift:24:25: error: cannot convert value of\
    \ type 'ArraySlice<Int>' to expected argument type '[Int]'\n    return is_sorted(lst[1..<lst.count])\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 1 {\n        return true\n    }\n    if lst.count\
    \ > 1 {\n        var seen = [Int]()\n        for num in lst {\n            if\
    \ seen[num] == true {\n                return false\n            }\n         \
    \   seen[num] = true\n        }\n        return true\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgh90smyu.swift:21:26: error: binary operator '==' cannot be applied\
    \ to operands of type 'Int' and 'Bool'\n            if seen[num] == true {\n \
    \              ~~~~~~~~~ ^  ~~~~\n/tmp/tmpgh90smyu.swift:21:26: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Bool, Bool),\
    \ (Int, Int)\n            if seen[num] == true {\n                         ^\n\
    /tmp/tmpgh90smyu.swift:24:25: error: cannot assign value of type 'Bool' to subscript\
    \ of type 'Int'\n            seen[num] = true\n                        ^~~~\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last: Int = 0\n    for x in lst {\n        if x == last {\n\
    \            return false\n        }\n        last = x\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp5hiat5qx/tmp5hiat5qx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ee608bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ee5d82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ee5d82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ee5d817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hiat5qx                        0x000055a7c59e15f6 <unavailable> + 5622

    5    libc.so.6                          0x00002b7ee6277460 __libc_start_main +
    245

    6    tmp5hiat5qx                        0x000055a7c59e10d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x - 1] !=\
    \ nil {\n            return false\n        }\n        seen[x] = x\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f5f162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f5ee59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f5ee59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f5ee5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f5ee58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0f5ec58e83 <unavailable> + 188035

    6    tmpdqfss4mh                        0x0000560e1ea1e153 <unavailable> + 8531

    7    tmpdqfss4mh                        0x0000560e1ea1d4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0f5f34e460 __libc_start_main +
    245

    9    tmpdqfss4mh                        0x0000560e1ea1d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[1..<lst.count])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp15_qcxgz.swift:24:22: error: missing argument label 'lst:' in call\n\
    \    return is_sorted(lst[1..<lst.count])\n                     ^\n          \
    \           lst: \n/tmp/tmp15_qcxgz.swift:24:25: error: cannot convert value of\
    \ type 'ArraySlice<Int>' to expected argument type '[Int]'\n    return is_sorted(lst[1..<lst.count])\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last: Int = 0\n    for x in lst {\n        if x == last {\n\
    \            return false\n        }\n        last = x\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp5hiat5qx/tmp5hiat5qx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ee608bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ee5d82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ee5d82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ee5d817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hiat5qx                        0x000055a7c59e15f6 <unavailable> + 5622

    5    libc.so.6                          0x00002b7ee6277460 __libc_start_main +
    245

    6    tmp5hiat5qx                        0x000055a7c59e10d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    if lst.count\
    \ == 1 {\n        return lst[0] < lst[0]\n    }\n    if lst.count > 1 {\n    \
    \    var prev: Int = 0\n        for idx in 0..<lst.count {\n            if prev\
    \ == lst[idx] {\n                return false\n            }\n            prev\
    \ = lst[idx]\n        }\n        return true\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp9sfa3too/tmp9sfa3too.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cf2defc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cf2ae6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cf2ae6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cf2ae57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9sfa3too                        0x0000557f462b752a <unavailable> + 5418

    5    libc.so.6                          0x00002b5cf2fdb460 __libc_start_main +
    245

    6    tmp9sfa3too                        0x0000557f462b71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013968
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last: Int = 0\n    for x in lst {\n        if x == last {\n\
    \            return false\n        }\n        last = x\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp5hiat5qx/tmp5hiat5qx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ee608bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ee5d82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ee5d82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ee5d817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hiat5qx                        0x000055a7c59e15f6 <unavailable> + 5622

    5    libc.so.6                          0x00002b7ee6277460 __libc_start_main +
    245

    6    tmp5hiat5qx                        0x000055a7c59e10d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    var prev: Int\
    \ = 0\n    for x in lst {\n        if x == prev {\n            return false\n\
    \        }\n        prev = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp7_r_4kzd/tmp7_r_4kzd.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8bd543c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8bd23ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8bd23a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8bd2397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_r_4kzd                        0x0000564f812d4646 <unavailable> + 5702

    5    libc.so.6                          0x00002ac8bd72f460 __libc_start_main +
    245

    6    tmp7_r_4kzd                        0x0000564f812d4129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x] != nil\
    \ {\n            return false\n        }\n        seen[x] = x\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ff0e16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ff0b0d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2ff0b0d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2ff0b0d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2ff0b0cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2ff090ce83 <unavailable> + 188035

    6    tmprju0rm3x                        0x000056427ccaa137 <unavailable> + 8503

    7    tmprju0rm3x                        0x000056427cca94e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b2ff1002460 __libc_start_main +
    245

    9    tmprju0rm3x                        0x000056427cca91d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x] == nil\
    \ {\n            seen[x] = true\n            return true\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7tqyvd_t.swift:17:20: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[x] == nil {\n    \
    \       ~~~~~~~ ^  ~~~\n/tmp/tmp7tqyvd_t.swift:18:23: error: cannot assign value\
    \ of type 'Bool' to subscript of type 'Int'\n            seen[x] = true\n    \
    \                  ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    var last: Int\
    \ = 0\n    for x in lst {\n        if x == last {\n            return false\n\
    \        }\n        last = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1sv1e385/tmp1sv1e385.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b677d115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b677ce0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b677ce0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b677ce0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1sv1e385                        0x000055da10a2b646 <unavailable> + 5702

    5    libc.so.6                          0x00002b677d301460 __libc_start_main +
    245

    6    tmp1sv1e385                        0x000055da10a2b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    var lastVal\
    \ = lst[0]\n    for val in lst {\n        if val == lastVal {\n            return\
    \ false\n        }\n        lastVal = val\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpjg9mcqvd/tmpjg9mcqvd.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b247b06ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b247ad65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b247ad65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b247ad647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjg9mcqvd                        0x00005560f578c50a <unavailable> + 5386

    5    libc.so.6                          0x00002b247b25a460 __libc_start_main +
    245

    6    tmpjg9mcqvd                        0x00005560f578c189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013968
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last: Int = 0\n    for x in lst {\n        if x == last {\n\
    \            return false\n        }\n        last = x\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp5hiat5qx/tmp5hiat5qx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ee608bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ee5d82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ee5d82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ee5d817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hiat5qx                        0x000055a7c59e15f6 <unavailable> + 5622

    5    libc.so.6                          0x00002b7ee6277460 __libc_start_main +
    245

    6    tmp5hiat5qx                        0x000055a7c59e10d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    var last: Int\
    \ = 0\n    for x in lst {\n        if x == last {\n            return false\n\
    \        }\n        last = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1sv1e385/tmp1sv1e385.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b677d115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b677ce0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b677ce0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b677ce0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1sv1e385                        0x000055da10a2b646 <unavailable> + 5702

    5    libc.so.6                          0x00002b677d301460 __libc_start_main +
    245

    6    tmp1sv1e385                        0x000055da10a2b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x] == nil\
    \ {\n            seen[x] = true\n            return true\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7tqyvd_t.swift:17:20: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[x] == nil {\n    \
    \       ~~~~~~~ ^  ~~~\n/tmp/tmp7tqyvd_t.swift:18:23: error: cannot assign value\
    \ of type 'Bool' to subscript of type 'Int'\n            seen[x] = true\n    \
    \                  ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var prev: Int = 0\n    for x in lst {\n        if prev > x {\n \
    \           return false\n        }\n        prev = x\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpm9rcqxm4/tmpm9rcqxm4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4db753c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4db44ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4db44a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4db4497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm9rcqxm4                        0x00005650efcf5c2b <unavailable> + 7211

    5    libc.so.6                          0x00002ab4db93f460 __libc_start_main +
    245

    6    tmpm9rcqxm4                        0x00005650efcf50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013968
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    var last: Int\
    \ = 0\n    for x in lst {\n        if x == last {\n            return false\n\
    \        }\n        last = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpiyjk3nrn/tmpiyjk3nrn.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd3aa11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd3a708b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd3a708988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd3a7077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiyjk3nrn                        0x00005647690a2577 <unavailable> + 5495

    5    libc.so.6                          0x00002abd3abfd460 __libc_start_main +
    245

    6    tmpiyjk3nrn                        0x00005647690a2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] !=\
    \ nil {\n            return false\n        }\n        seen[num] = num\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6aa9b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6aa6aa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae6aa6aa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae6aa6aa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae6aa6a9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae6aa4a9e83 <unavailable> + 188035

    6    tmp6wd_v1dn                        0x0000563739c3c137 <unavailable> + 8503

    7    tmp6wd_v1dn                        0x0000563739c3b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002ae6aab9f460 __libc_start_main +
    245

    9    tmp6wd_v1dn                        0x0000563739c3b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] !=\
    \ nil {\n            return false\n        }\n        seen[num] = num\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6aa9b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6aa6aa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae6aa6aa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae6aa6aa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae6aa6a9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae6aa4a9e83 <unavailable> + 188035

    6    tmp6wd_v1dn                        0x0000563739c3c137 <unavailable> + 8503

    7    tmp6wd_v1dn                        0x0000563739c3b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002ae6aab9f460 __libc_start_main +
    245

    9    tmp6wd_v1dn                        0x0000563739c3b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x - 1] !=\
    \ nil {\n            return false\n        }\n        seen[x] = x\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f5f162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f5ee59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f5ee59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f5ee5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f5ee58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0f5ec58e83 <unavailable> + 188035

    6    tmpdqfss4mh                        0x0000560e1ea1e153 <unavailable> + 8531

    7    tmpdqfss4mh                        0x0000560e1ea1d4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0f5f34e460 __libc_start_main +
    245

    9    tmpdqfss4mh                        0x0000560e1ea1d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] ==\
    \ nil {\n            seen[num] = true\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpq7qg2xdj.swift:17:22: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[num] == nil {\n  \
    \         ~~~~~~~~~ ^  ~~~\n/tmp/tmpq7qg2xdj.swift:18:25: error: cannot assign\
    \ value of type 'Bool' to subscript of type 'Int'\n            seen[num] = true\n\
    \                        ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] ==\
    \ nil {\n            seen[num] = true\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpq7qg2xdj.swift:17:22: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[num] == nil {\n  \
    \         ~~~~~~~~~ ^  ~~~\n/tmp/tmpq7qg2xdj.swift:18:25: error: cannot assign\
    \ value of type 'Bool' to subscript of type 'Int'\n            seen[num] = true\n\
    \                        ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    var last: Int\
    \ = 0\n    for x in lst {\n        if x == last {\n            return false\n\
    \        }\n        last = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1sv1e385/tmp1sv1e385.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b677d115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b677ce0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b677ce0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b677ce0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1sv1e385                        0x000055da10a2b646 <unavailable> + 5702

    5    libc.so.6                          0x00002b677d301460 __libc_start_main +
    245

    6    tmp1sv1e385                        0x000055da10a2b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    if lst.count\
    \ == 1 {\n        return lst[0] == lst[0]\n    }\n    var prev: Int? = nil\n \
    \   for x in lst {\n        if prev == nil {\n            prev = x\n         \
    \   continue\n        }\n        if prev != x {\n            return false\n  \
    \      }\n        prev = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp53jtof9o/tmp53jtof9o.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e51370c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e51067b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e51067988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e510667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp53jtof9o                        0x000055cd359965d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b7e5155c460 __libc_start_main +
    245

    6    tmp53jtof9o                        0x000055cd35996189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013968
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] !=\
    \ nil {\n            return false\n        }\n        seen[num] = num\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6aa9b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6aa6aa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae6aa6aa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae6aa6aa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae6aa6a9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae6aa4a9e83 <unavailable> + 188035

    6    tmp6wd_v1dn                        0x0000563739c3c137 <unavailable> + 8503

    7    tmp6wd_v1dn                        0x0000563739c3b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002ae6aab9f460 __libc_start_main +
    245

    9    tmp6wd_v1dn                        0x0000563739c3b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] ==\
    \ nil {\n            seen[num] = true\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpq7qg2xdj.swift:17:22: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[num] == nil {\n  \
    \         ~~~~~~~~~ ^  ~~~\n/tmp/tmpq7qg2xdj.swift:18:25: error: cannot assign\
    \ value of type 'Bool' to subscript of type 'Int'\n            seen[num] = true\n\
    \                        ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x - 1] !=\
    \ nil {\n            return false\n        }\n        seen[x] = x\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f5f162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f5ee59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f5ee59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f5ee5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f5ee58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0f5ec58e83 <unavailable> + 188035

    6    tmpdqfss4mh                        0x0000560e1ea1e153 <unavailable> + 8531

    7    tmpdqfss4mh                        0x0000560e1ea1d4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0f5f34e460 __libc_start_main +
    245

    9    tmpdqfss4mh                        0x0000560e1ea1d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    if lst.count\
    \ == 1 {\n        return lst[0] < lst[0]\n    }\n    if lst.count > 1 {\n    \
    \    var prev: Int = 0\n        for cur in lst {\n            if prev == cur {\n\
    \                return false\n            }\n            prev = cur\n       \
    \ }\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp2pqcjr8i/tmp2pqcjr8i.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e14770c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e14467b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e14467988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e144667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2pqcjr8i                        0x000055ec18b3b50a <unavailable> + 5386

    5    libc.so.6                          0x00002b1e1495c460 __libc_start_main +
    245

    6    tmp2pqcjr8i                        0x000055ec18b3b189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    if lst.count\
    \ == 1 {\n        return lst[0] < lst[0]\n    }\n    if lst.count > 1 {\n    \
    \    let last = lst.last\n        for num in lst {\n            if num == last\
    \ {\n                return false\n            }\n            last = num\n   \
    \     }\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptajhybpm.swift:27:13: error: cannot assign to value: 'last' is\
    \ a 'let' constant\n            last = num\n            ^~~~\n/tmp/tmptajhybpm.swift:22:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let last = lst.last\n\
    \        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] ==\
    \ nil {\n            seen[num] = true\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpq7qg2xdj.swift:17:22: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[num] == nil {\n  \
    \         ~~~~~~~~~ ^  ~~~\n/tmp/tmpq7qg2xdj.swift:18:25: error: cannot assign\
    \ value of type 'Bool' to subscript of type 'Int'\n            seen[num] = true\n\
    \                        ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[1..<lst.count])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp15_qcxgz.swift:24:22: error: missing argument label 'lst:' in call\n\
    \    return is_sorted(lst[1..<lst.count])\n                     ^\n          \
    \           lst: \n/tmp/tmp15_qcxgz.swift:24:25: error: cannot convert value of\
    \ type 'ArraySlice<Int>' to expected argument type '[Int]'\n    return is_sorted(lst[1..<lst.count])\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 1 {\n        return true\n    }\n    var last: Int\
    \ = 0\n    var flag = true\n    for x in lst {\n        if x == last {\n     \
    \       flag = false\n        } else {\n            last = x\n        }\n    }\n\
    \    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp6vuu31n_/tmp6vuu31n_.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8adfd8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8adccfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8adccf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8adcce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vuu31n_                        0x000055d5fc477646 <unavailable> + 5702

    5    libc.so.6                          0x00002ae8ae1c4460 __libc_start_main +
    245

    6    tmp6vuu31n_                        0x000055d5fc477129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] ==\
    \ nil {\n            seen[num] = true\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpq7qg2xdj.swift:17:22: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[num] == nil {\n  \
    \         ~~~~~~~~~ ^  ~~~\n/tmp/tmpq7qg2xdj.swift:18:25: error: cannot assign\
    \ value of type 'Bool' to subscript of type 'Int'\n            seen[num] = true\n\
    \                        ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last: Int = 0\n    for num in lst {\n        if num == last\
    \ {\n            return false\n        }\n        last = num\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpp34_gkbs/tmpp34_gkbs.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57c3a10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57c3707b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57c3707988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57c37067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp34_gkbs                        0x0000558ee052e5f6 <unavailable> + 5622

    5    libc.so.6                          0x00002b57c3bfc460 __libc_start_main +
    245

    6    tmpp34_gkbs                        0x0000558ee052e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    if lst.count\
    \ == 1 {\n        return lst[0] == lst[0]\n    }\n    var last: Int = 0\n    var\
    \ lastCount: Int = 0\n    for x in lst {\n        if x == last {\n           \
    \ lastCount++\n        } else {\n            lastCount = 1\n            last =\
    \ x\n        }\n        if lastCount > 1 {\n            return false\n       \
    \ }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpp0qjac9_.swift:25:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            lastCount++\n                     ^~\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var seen = [Int]()\n    for x in lst {\n        if seen[x] == nil\
    \ {\n            seen[x] = true\n            return true\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7tqyvd_t.swift:17:20: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[x] == nil {\n    \
    \       ~~~~~~~ ^  ~~~\n/tmp/tmp7tqyvd_t.swift:18:23: error: cannot assign value\
    \ of type 'Bool' to subscript of type 'Int'\n            seen[x] = true\n    \
    \                  ^~~~\n"
  stdout: ''
  timestamp: 1660013967
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last: Int = 0\n    for x in lst {\n        if x == last {\n\
    \            return false\n        }\n        last = x\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp5hiat5qx/tmp5hiat5qx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ee608bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ee5d82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ee5d82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ee5d817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hiat5qx                        0x000055a7c59e15f6 <unavailable> + 5622

    5    libc.so.6                          0x00002b7ee6277460 __libc_start_main +
    245

    6    tmp5hiat5qx                        0x000055a7c59e10d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013967
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 0 {\n        return true\n    }\n    if lst.count\
    \ == 1 {\n        return lst[0] == lst[0]\n    }\n    if lst.count > 1 {\n   \
    \     var seen = [Int]()\n        for v in lst {\n            if !seen[v] {\n\
    \                return false\n            }\n            seen[v] = true\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzmpiqq62.swift:24:21: error: type 'Int' cannot be used as a boolean;\
    \ test for '== 0' instead\n            if !seen[v] {\n               ~    ^\n\
    \                (       == 0)\n/tmp/tmpzmpiqq62.swift:27:23: error: cannot assign\
    \ value of type 'Bool' to subscript of type 'Int'\n            seen[v] = true\n\
    \                      ^~~~\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count > 1 {\n        return false\n    }\n    var i = 0\n\
    \    var j = 0\n    while i < lst.count {\n        if lst[i] > lst[j] {\n    \
    \        return false\n        }\n        i += 1\n        j += 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp4hxo2388/tmp4hxo2388.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae175627c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae17531eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae17531e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae17531d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4hxo2388                        0x0000564e4f7c1467 <unavailable> + 5223

    5    libc.so.6                          0x00002ae175813460 __libc_start_main +
    245

    6    tmp4hxo2388                        0x0000564e4f7c1019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013968
