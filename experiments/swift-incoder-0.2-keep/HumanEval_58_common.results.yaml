language: swift
name: HumanEval_58_common
results:
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        for y in l2 {\n        \
    \    if x == y {\n                continue\n            }\n            if result.contains(&x)\
    \ {\n                continue\n            }\n            result.append(x)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpbeqym3ze.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmpbeqym3ze.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] < l2[j] {\n \
    \           i += 1\n        } else {\n            j += 1\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpgjn778yi/tmpgjn778yi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b33d85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b33a7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b33a7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b33a7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgjn778yi                        0x0000563b6b2235ac <unavailable> + 5548

    5    libc.so.6                          0x00002b6b33f71460 __libc_start_main +
    245

    6    tmpgjn778yi                        0x0000563b6b223129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           j += 1\n        } else {\n            i += 1\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpe9ngngw0/tmpe9ngngw0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0ce34ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0ce041b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0ce041988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0ce0407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9ngngw0                        0x000055ed2384455c <unavailable> + 5468

    5    libc.so.6                          0x00002ab0ce536460 __libc_start_main +
    245

    6    tmpe9ngngw0                        0x000055ed238440d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    for x in l2 {\n        if\
    \ !contains(l1, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpiem_p5k8.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n/tmp/tmpiem_p5k8.swift:15:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(l1, x) {\n    \
    \        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           j += 1\n        } else {\n            i += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpayp3tere/tmpayp3tere.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe82ca6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe8299db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe8299d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe8299c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayp3tere                        0x0000563faa7925ac <unavailable> + 5548

    5    libc.so.6                          0x00002abe82e92460 __libc_start_main +
    245

    6    tmpayp3tere                        0x0000563faa792129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           j += 1\n        } else {\n            i += 1\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmppp73diyq/tmppp73diyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4313ad8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43137cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43137cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43137ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppp73diyq                        0x00005591018e25ac <unavailable> + 5548

    5    libc.so.6                          0x00002b4313cc4460 __libc_start_main +
    245

    6    tmppp73diyq                        0x00005591018e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] < l2[j] {\n \
    \           i += 1\n        } else {\n            j += 1\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpgjn778yi/tmpgjn778yi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b33d85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b33a7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b33a7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b33a7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgjn778yi                        0x0000563b6b2235ac <unavailable> + 5548

    5    libc.so.6                          0x00002b6b33f71460 __libc_start_main +
    245

    6    tmpgjn778yi                        0x0000563b6b223129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    while i < l1.count && i < l2.count\
    \ {\n        if l1[i] == l2[i] {\n            result.append(l1[i])\n         \
    \   i += 1\n        } else {\n            i += 1\n        }\n    }\n    while\
    \ i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n    while\
    \ i < l2.count {\n        result.append(l2[i])\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmp28_sb4f1/tmp28_sb4f1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe85e98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe85b8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe85b8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe85b8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28_sb4f1                        0x000055821549c5ac <unavailable> + 5548

    5    libc.so.6                          0x00002afe86084460 __libc_start_main +
    245

    6    tmp28_sb4f1                        0x000055821549c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] < l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n        } else if l1[i] > l2[j] {\n            result.append(l2[j])\n\
    \            j += 1\n        } else {\n            result.append(l1[i])\n    \
    \        i += 1\n            j += 1\n        }\n    }\n    while i < l1.count\
    \ {\n        result.append(l1[i])\n        i += 1\n    }\n    while j < l2.count\
    \ {\n        result.append(l2[j])\n        j += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmprsi6_34b/tmprsi6_34b.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0707cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee06d73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee06d73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee06d727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprsi6_34b                        0x000056424f3a755c <unavailable> + 5468

    5    libc.so.6                          0x00002aee07268460 __libc_start_main +
    245

    6    tmprsi6_34b                        0x000056424f3a70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           j += 1\n        } else {\n            i += 1\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmppp73diyq/tmppp73diyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4313ad8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43137cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43137cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43137ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppp73diyq                        0x00005591018e25ac <unavailable> + 5548

    5    libc.so.6                          0x00002b4313cc4460 __libc_start_main +
    245

    6    tmppp73diyq                        0x00005591018e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] < l2[j] {\n \
    \           i += 1\n        } else {\n            j += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpco8ny1wy/tmpco8ny1wy.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad25c6ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad25c3e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad25c3e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad25c3e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpco8ny1wy                        0x000055b8bcb8b5ac <unavailable> + 5548

    5    libc.so.6                          0x00002ad25c8d8460 __libc_start_main +
    245

    6    tmpco8ny1wy                        0x000055b8bcb8b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] < l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n        } else if l1[i] > l2[j] {\n            result.append(l2[j])\n\
    \            j += 1\n        } else {\n            result.append(l1[i])\n    \
    \        i += 1\n            j += 1\n        }\n    }\n    while i < l1.count\
    \ {\n        result.append(l1[i])\n        i += 1\n    }\n    while j < l2.count\
    \ {\n        result.append(l2[j])\n        j += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpdyh3u9in/tmpdyh3u9in.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae799300c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae798ff7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae798ff7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae798ff67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdyh3u9in                        0x00005638de10f5ac <unavailable> + 5548

    5    libc.so.6                          0x00002ae7994ec460 __libc_start_main +
    245

    6    tmpdyh3u9in                        0x00005638de10f129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var l1 = l1\n    var l2 = l2\n    var result = [Int]()\n    while l1.count\
    \ > 0 || l2.count > 0 {\n        if l1.count > 0 {\n            if l2.count >\
    \ 0 {\n                if l1.last == l2.last {\n                    result.append(l1.first)\n\
    \                    l1.removeFirst()\n                    l2.removeFirst()\n\
    \                } else {\n                    result.append(l1.first)\n     \
    \               l1.removeFirst()\n                }\n            } else {\n  \
    \              result.append(l1.first)\n                l1.removeFirst()\n   \
    \         }\n        } else {\n            if l2.count > 0 {\n               \
    \ result.append(l2.first)\n                l2.removeFirst()\n            } else\
    \ {\n                result.append(l2.first)\n                l2.removeFirst()\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7kuoq_hn.swift:15:38: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n                    result.append(l1.first)\n\
    \                                     ^\n/tmp/tmp7kuoq_hn.swift:15:38: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \                 result.append(l1.first)\n                                  \
    \   ^\n                                           ?? <#default value#>\n/tmp/tmp7kuoq_hn.swift:15:38:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                    result.append(l1.first)\n                       \
    \              ^\n                                          !\n/tmp/tmp7kuoq_hn.swift:19:38:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \                    result.append(l1.first)\n                               \
    \      ^\n/tmp/tmp7kuoq_hn.swift:19:38: note: coalesce using '??' to provide a\
    \ default when the optional value contains 'nil'\n                    result.append(l1.first)\n\
    \                                     ^\n                                    \
    \       ?? <#default value#>\n/tmp/tmp7kuoq_hn.swift:19:38: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \            result.append(l1.first)\n                                     ^\n\
    \                                          !\n/tmp/tmp7kuoq_hn.swift:23:34: error:\
    \ value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n \
    \               result.append(l1.first)\n                                 ^\n\
    /tmp/tmp7kuoq_hn.swift:23:34: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                result.append(l1.first)\n\
    \                                 ^\n                                       ??\
    \ <#default value#>\n/tmp/tmp7kuoq_hn.swift:23:34: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n                result.append(l1.first)\n\
    \                                 ^\n                          "
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        for y in l2 {\n        \
    \    if x == y {\n                continue\n            }\n            if result.contains(&x)\
    \ {\n                continue\n            }\n            if result.contains(&y)\
    \ {\n                continue\n            }\n            result.append(x)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpiqiuu8yh.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmpiqiuu8yh.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n/tmp/tmpiqiuu8yh.swift:17:32:\
    \ error: '&' used with non-inout argument of type 'Int'\n            if result.contains(&y)\
    \ {\n                               ^~\n                               \n/tmp/tmpiqiuu8yh.swift:17:32:\
    \ error: cannot pass immutable value as inout argument: 'y' is a 'let' constant\n\
    \            if result.contains(&y) {\n                               ^~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        for y in l2 {\n        \
    \    if x == y {\n                continue\n            }\n            if result.contains(&x)\
    \ {\n                continue\n            }\n            result.insert(x)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp_7j19wv5.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmp_7j19wv5.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n/tmp/tmp_7j19wv5.swift:17:28:\
    \ error: missing argument for parameter 'at' in call\n            result.insert(x)\n\
    \                           ^\n                           , at: <#Int#>\nSwift.Array:11:37:\
    \ note: 'insert(_:at:)' declared here\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] < l2[j] {\n \
    \           i += 1\n        } else {\n            j += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpco8ny1wy/tmpco8ny1wy.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad25c6ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad25c3e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad25c3e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad25c3e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpco8ny1wy                        0x000055b8bcb8b5ac <unavailable> + 5548

    5    libc.so.6                          0x00002ad25c8d8460 __libc_start_main +
    245

    6    tmpco8ny1wy                        0x000055b8bcb8b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] < l2[j] {\n \
    \           i += 1\n        } else {\n            j += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpco8ny1wy/tmpco8ny1wy.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad25c6ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad25c3e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad25c3e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad25c3e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpco8ny1wy                        0x000055b8bcb8b5ac <unavailable> + 5548

    5    libc.so.6                          0x00002ad25c8d8460 __libc_start_main +
    245

    6    tmpco8ny1wy                        0x000055b8bcb8b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] < l2[j] {\n \
    \           i += 1\n        } else {\n            j += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpco8ny1wy/tmpco8ny1wy.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad25c6ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad25c3e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad25c3e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad25c3e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpco8ny1wy                        0x000055b8bcb8b5ac <unavailable> + 5548

    5    libc.so.6                          0x00002ad25c8d8460 __libc_start_main +
    245

    6    tmpco8ny1wy                        0x000055b8bcb8b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var l = [Int]()\n    for x in l1 {\n        if !contains(l, x) {\n      \
    \      l.append(x)\n        }\n    }\n    for x in l2 {\n        if !contains(l,\
    \ x) {\n            l.append(x)\n        }\n    }\n    return l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) ==\
    \ [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1kcn51fs.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l, x) {\n            ^~~~~~~~\n/tmp/tmp1kcn51fs.swift:15:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(l, x) {\n     \
    \       ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           j += 1\n        } else {\n            i += 1\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmppp73diyq/tmppp73diyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4313ad8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43137cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43137cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43137ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppp73diyq                        0x00005591018e25ac <unavailable> + 5548

    5    libc.so.6                          0x00002b4313cc4460 __libc_start_main +
    245

    6    tmppp73diyq                        0x00005591018e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           j += 1\n        } else {\n            i += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpayp3tere/tmpayp3tere.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe82ca6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe8299db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe8299d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe8299c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayp3tere                        0x0000563faa7925ac <unavailable> + 5548

    5    libc.so.6                          0x00002abe82e92460 __libc_start_main +
    245

    6    tmpayp3tere                        0x0000563faa792129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    for x in l2 {\n        if\
    \ !contains(l1, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp71zffh35.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n/tmp/tmp71zffh35.swift:15:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(l1, x) {\n    \
    \        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] < l2[j] {\n \
    \           i += 1\n        } else {\n            j += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpco8ny1wy/tmpco8ny1wy.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad25c6ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad25c3e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad25c3e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad25c3e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpco8ny1wy                        0x000055b8bcb8b5ac <unavailable> + 5548

    5    libc.so.6                          0x00002ad25c8d8460 __libc_start_main +
    245

    6    tmpco8ny1wy                        0x000055b8bcb8b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] < l2[j] {\n \
    \           i += 1\n        } else {\n            j += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpco8ny1wy/tmpco8ny1wy.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad25c6ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad25c3e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad25c3e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad25c3e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpco8ny1wy                        0x000055b8bcb8b5ac <unavailable> + 5548

    5    libc.so.6                          0x00002ad25c8d8460 __libc_start_main +
    245

    6    tmpco8ny1wy                        0x000055b8bcb8b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] < l2[j] {\n \
    \           i += 1\n        } else {\n            j += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpqikbri1l/tmpqikbri1l.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5e4906c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5e45fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5e45fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5e45fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqikbri1l                        0x0000558c6726855c <unavailable> + 5468

    5    libc.so.6                          0x00002ab5e4af2460 __libc_start_main +
    245

    6    tmpqikbri1l                        0x0000558c672680d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] < l2[j] {\n \
    \           i += 1\n        } else {\n            j += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpco8ny1wy/tmpco8ny1wy.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad25c6ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad25c3e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad25c3e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad25c3e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpco8ny1wy                        0x000055b8bcb8b5ac <unavailable> + 5548

    5    libc.so.6                          0x00002ad25c8d8460 __libc_start_main +
    245

    6    tmpco8ny1wy                        0x000055b8bcb8b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] < l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n        } else if l1[i] > l2[j] {\n            result.append(l2[j])\n\
    \            j += 1\n        } else {\n            result.append(l1[i])\n    \
    \        i += 1\n            j += 1\n        }\n    }\n    while i < l1.count\
    \ {\n        result.append(l1[i])\n        i += 1\n    }\n    while j < l2.count\
    \ {\n        result.append(l2[j])\n        j += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpdyh3u9in/tmpdyh3u9in.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae799300c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae798ff7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae798ff7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae798ff67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdyh3u9in                        0x00005638de10f5ac <unavailable> + 5548

    5    libc.so.6                          0x00002ae7994ec460 __libc_start_main +
    245

    6    tmpdyh3u9in                        0x00005638de10f129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        for y in l2 {\n        \
    \    if x == y {\n                continue\n            }\n            if result.contains(&x)\
    \ {\n                continue\n            }\n            result.insert(x)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp_7j19wv5.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmp_7j19wv5.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n/tmp/tmp_7j19wv5.swift:17:28:\
    \ error: missing argument for parameter 'at' in call\n            result.insert(x)\n\
    \                           ^\n                           , at: <#Int#>\nSwift.Array:11:37:\
    \ note: 'insert(_:at:)' declared here\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           j += 1\n        } else {\n            i += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpayp3tere/tmpayp3tere.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe82ca6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe8299db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe8299d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe8299c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayp3tere                        0x0000563faa7925ac <unavailable> + 5548

    5    libc.so.6                          0x00002abe82e92460 __libc_start_main +
    245

    6    tmpayp3tere                        0x0000563faa792129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    while i < l1.count && i < l2.count\
    \ {\n        if l1[i] == l2[i] {\n            result.append(l1[i])\n         \
    \   i += 1\n        } else {\n            i += 1\n        }\n    }\n    while\
    \ i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n    while\
    \ i < l2.count {\n        result.append(l2[i])\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmp28_sb4f1/tmp28_sb4f1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe85e98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe85b8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe85b8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe85b8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28_sb4f1                        0x000055821549c5ac <unavailable> + 5548

    5    libc.so.6                          0x00002afe86084460 __libc_start_main +
    245

    6    tmp28_sb4f1                        0x000055821549c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           j += 1\n        } else {\n            i += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpayp3tere/tmpayp3tere.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe82ca6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe8299db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe8299d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe8299c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayp3tere                        0x0000563faa7925ac <unavailable> + 5548

    5    libc.so.6                          0x00002abe82e92460 __libc_start_main +
    245

    6    tmpayp3tere                        0x0000563faa792129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           j += 1\n        } else {\n            i += 1\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpe9ngngw0/tmpe9ngngw0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0ce34ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0ce041b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0ce041988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0ce0407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9ngngw0                        0x000055ed2384455c <unavailable> + 5468

    5    libc.so.6                          0x00002ab0ce536460 __libc_start_main +
    245

    6    tmpe9ngngw0                        0x000055ed238440d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        for y in l2 {\n        \
    \    if x == y {\n                continue\n            }\n            if result.contains(&x)\
    \ {\n                continue\n            }\n            result.append(x)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpbeqym3ze.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmpbeqym3ze.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] < l2[j] {\n \
    \           i += 1\n        } else {\n            j += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpco8ny1wy/tmpco8ny1wy.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad25c6ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad25c3e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad25c3e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad25c3e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpco8ny1wy                        0x000055b8bcb8b5ac <unavailable> + 5548

    5    libc.so.6                          0x00002ad25c8d8460 __libc_start_main +
    245

    6    tmpco8ny1wy                        0x000055b8bcb8b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           j += 1\n        } else {\n            i += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpayp3tere/tmpayp3tere.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe82ca6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe8299db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe8299d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe8299c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayp3tere                        0x0000563faa7925ac <unavailable> + 5548

    5    libc.so.6                          0x00002abe82e92460 __libc_start_main +
    245

    6    tmpayp3tere                        0x0000563faa792129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        for y in l2 {\n        \
    \    if x == y {\n                continue\n            }\n            if result.contains(&x)\
    \ {\n                continue\n            }\n            result.append(x)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpbeqym3ze.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmpbeqym3ze.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    for x in l2 {\n        if\
    \ !contains(l1, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp71zffh35.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n/tmp/tmp71zffh35.swift:15:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(l1, x) {\n    \
    \        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] < l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n        } else if l1[i] > l2[j] {\n            result.append(l2[j])\n\
    \            j += 1\n        } else {\n            result.append(l1[i])\n    \
    \        i += 1\n            j += 1\n        }\n    }\n    while i < l1.count\
    \ {\n        result.append(l1[i])\n        i += 1\n    }\n    while j < l2.count\
    \ {\n        result.append(l2[j])\n        j += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpdyh3u9in/tmpdyh3u9in.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae799300c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae798ff7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae798ff7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae798ff67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdyh3u9in                        0x00005638de10f5ac <unavailable> + 5548

    5    libc.so.6                          0x00002ae7994ec460 __libc_start_main +
    245

    6    tmpdyh3u9in                        0x00005638de10f129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    for x in l2 {\n        if\
    \ !contains(l1, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp71zffh35.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n/tmp/tmp71zffh35.swift:15:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(l1, x) {\n    \
    \        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] < l2[j] {\n \
    \           i += 1\n        } else {\n            j += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpco8ny1wy/tmpco8ny1wy.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad25c6ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad25c3e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad25c3e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad25c3e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpco8ny1wy                        0x000055b8bcb8b5ac <unavailable> + 5548

    5    libc.so.6                          0x00002ad25c8d8460 __libc_start_main +
    245

    6    tmpco8ny1wy                        0x000055b8bcb8b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] < l2[j] {\n \
    \           i += 1\n        } else {\n            j += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpco8ny1wy/tmpco8ny1wy.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad25c6ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad25c3e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad25c3e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad25c3e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpco8ny1wy                        0x000055b8bcb8b5ac <unavailable> + 5548

    5    libc.so.6                          0x00002ad25c8d8460 __libc_start_main +
    245

    6    tmpco8ny1wy                        0x000055b8bcb8b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    for x in l2 {\n        if\
    \ !contains(l1, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp71zffh35.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n/tmp/tmp71zffh35.swift:15:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(l1, x) {\n    \
    \        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] < l2[j] {\n \
    \           i += 1\n        } else {\n            j += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpco8ny1wy/tmpco8ny1wy.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad25c6ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad25c3e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad25c3e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad25c3e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpco8ny1wy                        0x000055b8bcb8b5ac <unavailable> + 5548

    5    libc.so.6                          0x00002ad25c8d8460 __libc_start_main +
    245

    6    tmpco8ny1wy                        0x000055b8bcb8b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpm605zrel.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var l = [Int]()\n    for x in l1 {\n        if !contains(l, x) {\n      \
    \      l.append(x)\n        }\n    }\n    for x in l2 {\n        if !contains(l,\
    \ x) {\n            l.append(x)\n        }\n    }\n    return l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) ==\
    \ [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1kcn51fs.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l, x) {\n            ^~~~~~~~\n/tmp/tmp1kcn51fs.swift:15:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(l, x) {\n     \
    \       ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           j += 1\n        } else {\n            i += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpayp3tere/tmpayp3tere.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe82ca6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe8299db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe8299d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe8299c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayp3tere                        0x0000563faa7925ac <unavailable> + 5548

    5    libc.so.6                          0x00002abe82e92460 __libc_start_main +
    245

    6    tmpayp3tere                        0x0000563faa792129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           j += 1\n        } else {\n            i += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpayp3tere/tmpayp3tere.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe82ca6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe8299db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe8299d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe8299c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayp3tere                        0x0000563faa7925ac <unavailable> + 5548

    5    libc.so.6                          0x00002abe82e92460 __libc_start_main +
    245

    6    tmpayp3tere                        0x0000563faa792129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var l = [Int]()\n    for i in l1 {\n        if !contains(l, i) {\n      \
    \      l.append(i)\n        }\n    }\n    for i in l2 {\n        if !contains(l,\
    \ i) {\n            l.append(i)\n        }\n    }\n    return l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) ==\
    \ [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpjdaida9r.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l, i) {\n            ^~~~~~~~\n/tmp/tmpjdaida9r.swift:15:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(l, i) {\n     \
    \       ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] < l2[j] {\n \
    \           i += 1\n        } else {\n            j += 1\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpgjn778yi/tmpgjn778yi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b33d85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b33a7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b33a7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b33a7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgjn778yi                        0x0000563b6b2235ac <unavailable> + 5548

    5    libc.so.6                          0x00002b6b33f71460 __libc_start_main +
    245

    6    tmpgjn778yi                        0x0000563b6b223129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] < l2[j] {\n \
    \           i += 1\n        } else {\n            j += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpqikbri1l/tmpqikbri1l.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5e4906c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5e45fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5e45fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5e45fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqikbri1l                        0x0000558c6726855c <unavailable> + 5468

    5    libc.so.6                          0x00002ab5e4af2460 __libc_start_main +
    245

    6    tmpqikbri1l                        0x0000558c672680d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        for y in l2 {\n        \
    \    if x == y {\n                continue\n            }\n            if !contains(&result,\
    \ x) {\n                append(&result, x)\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfkcddhbe.swift:14:17: error: cannot find 'contains' in scope\n\
    \            if !contains(&result, x) {\n                ^~~~~~~~\n/tmp/tmpfkcddhbe.swift:15:17:\
    \ error: cannot find 'append' in scope\n                append(&result, x)\n \
    \               ^~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] < l2[j] {\n \
    \           i += 1\n        } else {\n            j += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpco8ny1wy/tmpco8ny1wy.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad25c6ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad25c3e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad25c3e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad25c3e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpco8ny1wy                        0x000055b8bcb8b5ac <unavailable> + 5548

    5    libc.so.6                          0x00002ad25c8d8460 __libc_start_main +
    245

    6    tmpco8ny1wy                        0x000055b8bcb8b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    while i < l1.count && i < l2.count\
    \ {\n        if l1[i] == l2[i] {\n            result.append(l1[i])\n         \
    \   i += 1\n        } else {\n            i += 1\n        }\n    }\n    while\
    \ i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n    while\
    \ i < l2.count {\n        result.append(l2[i])\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmp28_sb4f1/tmp28_sb4f1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe85e98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe85b8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe85b8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe85b8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28_sb4f1                        0x000055821549c5ac <unavailable> + 5548

    5    libc.so.6                          0x00002afe86084460 __libc_start_main +
    245

    6    tmp28_sb4f1                        0x000055821549c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           j += 1\n        } else {\n            i += 1\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmppp73diyq/tmppp73diyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4313ad8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43137cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43137cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43137ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppp73diyq                        0x00005591018e25ac <unavailable> + 5548

    5    libc.so.6                          0x00002b4313cc4460 __libc_start_main +
    245

    6    tmppp73diyq                        0x00005591018e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    for x in l2 {\n        if\
    \ !contains(l1, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp71zffh35.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n/tmp/tmp71zffh35.swift:15:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(l1, x) {\n    \
    \        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           j += 1\n        } else {\n            i += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpayp3tere/tmpayp3tere.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe82ca6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe8299db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe8299d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe8299c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayp3tere                        0x0000563faa7925ac <unavailable> + 5548

    5    libc.so.6                          0x00002abe82e92460 __libc_start_main +
    245

    6    tmpayp3tere                        0x0000563faa792129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] < l2[j] {\n \
    \           i += 1\n        } else {\n            j += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpco8ny1wy/tmpco8ny1wy.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad25c6ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad25c3e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad25c3e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad25c3e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpco8ny1wy                        0x000055b8bcb8b5ac <unavailable> + 5548

    5    libc.so.6                          0x00002ad25c8d8460 __libc_start_main +
    245

    6    tmpco8ny1wy                        0x000055b8bcb8b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           j += 1\n        } else {\n            i += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpayp3tere/tmpayp3tere.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe82ca6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe8299db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe8299d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe8299c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayp3tere                        0x0000563faa7925ac <unavailable> + 5548

    5    libc.so.6                          0x00002abe82e92460 __libc_start_main +
    245

    6    tmpayp3tere                        0x0000563faa792129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           j += 1\n        } else {\n            i += 1\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmppp73diyq/tmppp73diyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4313ad8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43137cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43137cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43137ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppp73diyq                        0x00005591018e25ac <unavailable> + 5548

    5    libc.so.6                          0x00002b4313cc4460 __libc_start_main +
    245

    6    tmppp73diyq                        0x00005591018e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var l = [Int]()\n    for i in l1 {\n        if !contains(l, i) {\n      \
    \      l.append(i)\n        }\n    }\n    for i in l2 {\n        if !contains(l,\
    \ i) {\n            l.append(i)\n        }\n    }\n    return l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) ==\
    \ [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpjdaida9r.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l, i) {\n            ^~~~~~~~\n/tmp/tmpjdaida9r.swift:15:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(l, i) {\n     \
    \       ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           j += 1\n        } else {\n            i += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpwxnj3w5v/tmpwxnj3w5v.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17e9a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17e974db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17e974d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17e974c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwxnj3w5v                        0x000055c06aef755c <unavailable> + 5468

    5    libc.so.6                          0x00002b17e9c42460 __libc_start_main +
    245

    6    tmpwxnj3w5v                        0x000055c06aef70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           j += 1\n        } else {\n            i += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpayp3tere/tmpayp3tere.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe82ca6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe8299db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe8299d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe8299c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayp3tere                        0x0000563faa7925ac <unavailable> + 5548

    5    libc.so.6                          0x00002abe82e92460 __libc_start_main +
    245

    6    tmpayp3tere                        0x0000563faa792129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        for y in l2 {\n        \
    \    if x == y {\n                continue\n            }\n            if result.contains(&x)\
    \ {\n                continue\n            }\n            result.append(x)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpbeqym3ze.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmpbeqym3ze.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        for y in l2 {\n        \
    \    if x == y {\n                continue\n            }\n            if result.contains(&x)\
    \ {\n                continue\n            }\n            result.append(x)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpbeqym3ze.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmpbeqym3ze.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_yyn096.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           j += 1\n        } else {\n            i += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpayp3tere/tmpayp3tere.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe82ca6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe8299db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe8299d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe8299c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayp3tere                        0x0000563faa7925ac <unavailable> + 5548

    5    libc.so.6                          0x00002abe82e92460 __libc_start_main +
    245

    6    tmpayp3tere                        0x0000563faa792129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7he_ikey.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1_cjbtvi.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824699
