language: swift
name: HumanEval_86_anti_shuffle
results:
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var index = 0\n    for char\
    \ in s {\n        if char == \" \" {\n            if word != \"\" {\n        \
    \        result += word\n                word = \"\"\n            }\n        }\
    \ else {\n            word += char\n        }\n    }\n    if word != \"\" {\n\
    \        result += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpocqy8pba.swift:22:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            word += char\n             \
    \       ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        switch c {\n        case \" \":\n            result += word\n       \
    \     word = \"\"\n        case \" \", \"\\n\", \"\\t\":\n            word +=\
    \ c\n        default:\n            word += String(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp1irmcfga.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1irmcfga.swift:20:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            word += c\n                    ^\n/tmp/tmp1irmcfga.swift:19:14: warning:\
    \ literal value is already handled by previous pattern; consider removing it\n\
    \        case \" \", \"\\n\", \"\\t\":\n             ^~~\n/tmp/tmp1irmcfga.swift:16:14:\
    \ note: first occurrence of identical literal pattern is here\n        case \"\
    \ \":\n             ^~~\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if !isLetter(c) {\n            result += c\n            continue\n  \
    \      }\n        if word != \"\" {\n            result += word\n            word\
    \ = \"\"\n        }\n        if isUpper(c) {\n            word += c.uppercaseString\n\
    \        } else {\n            word += c.lowercaseString\n        }\n    }\n \
    \   if word != \"\" {\n        result += word\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpfit3p7wr.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpfit3p7wr.swift:15:13:\
    \ error: cannot find 'isLetter' in scope\n        if !isLetter(c) {\n        \
    \    ^~~~~~~~\n/tmp/tmpfit3p7wr.swift:16:23: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n            result += c\n  \
    \                    ^\n/tmp/tmpfit3p7wr.swift:23:12: error: cannot find 'isUpper'\
    \ in scope\n        if isUpper(c) {\n           ^~~~~~~\n/tmp/tmpfit3p7wr.swift:24:23:\
    \ error: value of type 'Character' has no member 'uppercaseString'\n         \
    \   word += c.uppercaseString\n                    ~ ^~~~~~~~~~~~~~~\n/tmp/tmpfit3p7wr.swift:26:23:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   word += c.lowercaseString\n                    ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var index = 0\n    for char\
    \ in s {\n        if char == \" \" {\n            if word != \"\" {\n        \
    \        result += word\n                word = \"\"\n            }\n        }\
    \ else {\n            word += char\n        }\n    }\n    if word != \"\" {\n\
    \        result += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpocqy8pba.swift:22:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            word += char\n             \
    \       ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var lastWord = \"\"\n   \
    \ var lastAsc = 0\n    var lastAscIndex = 0\n    for c in s.characters {\n   \
    \     if c == \" \" {\n            if word != \"\" {\n                result +=\
    \ word\n                lastAsc = lastAscIndex\n                lastWord = \"\"\
    \n            }\n        } else {\n            if lastAsc == 0 {\n           \
    \     lastAsc = lastAscIndex\n            }\n            word += String(c)\n \
    \           lastAscIndex += 1\n        }\n    }\n    if word != \"\" {\n     \
    \   result += word\n        lastAsc = lastAscIndex\n        lastWord = \"\"\n\
    \    }\n    for c in s.characters {\n        if c == \" \" {\n            if word\
    \ != \"\" {\n                result += word\n                lastAsc = lastAscIndex\n\
    \                lastWord = \"\"\n            }\n        } else {\n          \
    \  if lastAsc == 0 {\n                lastAsc = lastAscIndex\n            }\n\
    \            word += String(c)\n            lastAscIndex += 1\n        }\n   \
    \ }\n    if lastAsc == 0 {\n        lastAsc = lastAscIndex\n    }\n    result\
    \ += String(s.characters[lastAsc..<s.characters.endIndex])\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpswmse9mu.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpswmse9mu.swift:37:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpswmse9mu.swift:55:35: error: cannot convert value of\
    \ type 'Int' to expected argument type 'String.Index'\n    result += String(s.characters[lastAsc..<s.characters.endIndex])\n\
    \                                  ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    for c in s.characters {\n     \
    \   if i == 0 {\n            result += c\n        } else {\n            if c <\
    \ s.characters[i-1] {\n                result += c\n            } else {\n   \
    \             result += s.characters[i-1]\n            }\n        }\n        i\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp81vz43zd.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp81vz43zd.swift:16:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmp81vz43zd.swift:18:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if c < s.characters[i-1] {\n      \
    \             ^~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp81vz43zd.swift:18:22: error: 'characters' is\
    \ unavailable: Please use String directly\n            if c < s.characters[i-1]\
    \ {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp81vz43zd.swift:19:27: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n                result += c\n\
    \                          ^\n/tmp/tmp81vz43zd.swift:21:39: error: no exact matches\
    \ in call to subscript \n                result += s.characters[i-1]\n       \
    \                               ^\nSwift.String:3:12: note: candidate expects\
    \ value of type 'Range<String.Index>' for parameter #1 (got 'Int')\n    public\
    \ subscript(r: Range<String.Index>) -> Substring { get }\n           ^\nSwift.Collection:3:23:\
    \ note: candidate expects value of type '(UnboundedRange_) -> ()' for parameter\
    \ #1 (got 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ())\
    \ -> Self.SubSequence { get }\n                      ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var newString = \"\"\n    for char in s.characters {\n        newString\
    \ += String(char)\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp9o138bbs.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c == \" \" {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    if word != \"\" {\n        result\
    \ += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpg_lqs8fq.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpg_lqs8fq.swift:14:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c.isLetter {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n            result += c.asciiValue\n\
    \        } else {\n            word += String(c.asciiValue)\n        }\n    }\n\
    \    if word != \"\" {\n        result += word\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpe56lij_3.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpe56lij_3.swift:20:25:\
    \ error: cannot convert value of type 'UInt8?' to expected argument type 'String'\n\
    \            result += c.asciiValue\n                        ^\n/tmp/tmpe56lij_3.swift:22:21:\
    \ error: no exact matches in call to initializer \n            word += String(c.asciiValue)\n\
    \                    ^\nSwift.String:4:23: note: found candidate with type 'UInt8?'\n\
    \    @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible\n\
    \                      ^\nSwift.String:2:12: note: found candidate with type 'UInt8?'\n\
    \    public init<T>(_ value: T, radix: Int = 10, uppercase: Bool = false) where\
    \ T : BinaryInteger\n           ^\nSwift.String:2:12: note: incorrect labels for\
    \ candidate (have: '(_:)', expected: '(describing:)')\n    public init<Subject>(describing\
    \ instance: Subject)\n           ^\nSwift.String:6:12: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting\
    \ subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    for c in s.characters {\n     \
    \   if i == 0 {\n            result += c\n        } else {\n            result\
    \ += String(c).swapcase()\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp01xj5wgq.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp01xj5wgq.swift:16:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmp01xj5wgq.swift:18:33:\
    \ error: value of type 'String' has no member 'swapcase'\n            result +=\
    \ String(c).swapcase()\n                      ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s\
    \ {\n        if c == \" \" {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n        } else {\n    \
    \        word += c\n        }\n    }\n    if word != \"\" {\n        result +=\
    \ word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp7ssm8xt8.swift:22:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            word += c\n                \
    \    ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for c in s.characters {\n        let asciiValue\
    \ = Int(c)\n        if asciiValue > 96 {\n            result += String(UnicodeScalar(asciiValue\
    \ - 96))\n        } else {\n            result += String(c)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpu4h3pa6o.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpu4h3pa6o.swift:14:26:\
    \ error: no exact matches in call to initializer \n        let asciiValue = Int(c)\n\
    \                         ^\nSwift.Int:7:12: note: candidate expects value of\
    \ type 'Float16' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'Character')\n    public init(_ source: Float)\n\
    \           ^\nSwift.Int:12:12: note: candidate expects value of type 'Double'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Double)\n    \
    \       ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float80)\n       \
    \    ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\nSwift.FixedWidthInteger:3:23: note: candidate expects value of type\
    \ 'String' for parameter #1 (got 'Character')\n    @inlinable public init?(_ description:\
    \ String)\n                      ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var isSpace = false\n   \
    \ for c in s.characters {\n        if isSpace {\n            result += c\n   \
    \         isSpace = false\n        } else {\n            if let _ = c {\n    \
    \            isSpace = true\n                result += c\n            } else {\n\
    \                word += c\n            }\n        }\n    }\n    if word != \"\
    \" {\n        result += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmppz6fh67k.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmppz6fh67k.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmppz6fh67k.swift:22:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += c\n                          ^\n/tmp/tmppz6fh67k.swift:24:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                word += c\n                        ^\n/tmp/tmppz6fh67k.swift:20:16:\
    \ error: initializer for conditional binding must have Optional type, not 'Character'\n\
    \            if let _ = c {\n               ^       ~\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for c in s.characters {\n        if c.isLetter\
    \ {\n            result += c.lowercaseString\n        } else {\n            result\
    \ += c.uppercaseString\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmphrtqoqf7.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmphrtqoqf7.swift:15:25:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   result += c.lowercaseString\n                      ~ ^~~~~~~~~~~~~~~\n/tmp/tmphrtqoqf7.swift:17:25:\
    \ error: value of type 'Character' has no member 'uppercaseString'\n         \
    \   result += c.uppercaseString\n                      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for c in s.characters {\n        let ascii = Int(c)\n\
    \        if ascii < 97 {\n            result += String(c)\n        }\n       \
    \ if ascii < 123 {\n            result += String(ascii + 32)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp95mt_4fp.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp95mt_4fp.swift:14:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(c)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var newString = \"\"\n    var word = \"\"\n    var newWord = \"\"\n \
    \   var isSpace = false\n    for c in s.characters {\n        if isSpace {\n \
    \           newString += c\n            isSpace = false\n        } else {\n  \
    \          if c == \" \" {\n                isSpace = true\n            } else\
    \ {\n                newWord += c\n            }\n        }\n    }\n    for c\
    \ in newWord.characters {\n        if c != \" \" {\n            newString += c\n\
    \        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpus3sygk1.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpus3sygk1.swift:18:26:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            newString += c\n                         ^\n/tmp/tmpus3sygk1.swift:24:28:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                newWord += c\n                           ^\n/tmp/tmpus3sygk1.swift:28:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ newWord.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpus3sygk1.swift:30:26: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            newString\
    \ += c\n                         ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var lastChar = \"\"\n   \
    \ var lastAsciiValue = 0\n    for c in s.characters {\n        if c == \" \" {\n\
    \            if word != \"\" {\n                result += word\n             \
    \   word = \"\"\n            }\n        } else {\n            word += c\n    \
    \    }\n        lastChar = c\n        lastAsciiValue = Int(c)\n    }\n    if word\
    \ != \"\" {\n        result += word\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpnp8b43r3.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpnp8b43r3.swift:23:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            word += c\n                    ^\n/tmp/tmpnp8b43r3.swift:25:20: error:\
    \ cannot assign value of type 'Character' to type 'String'\n        lastChar =\
    \ c\n                   ^\n/tmp/tmpnp8b43r3.swift:26:26: error: no exact matches\
    \ in call to initializer \n        lastAsciiValue = Int(c)\n                 \
    \        ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float16)\n       \
    \    ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float)\n           ^\nSwift.Int:12:12:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate expects\
    \ value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n    public\
    \ init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate\
    \ expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n  \
    \  public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c.isLetter {\n            word += c.asciiValue\n        } else {\n\
    \            if word != \"\" {\n                result += String(word)\n     \
    \           word = \"\"\n            }\n            result += String(c.asciiValue)\n\
    \        }\n    }\n    if word != \"\" {\n        result += String(word)\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmplgfgsy2p.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmplgfgsy2p.swift:16:23:\
    \ error: cannot convert value of type 'UInt8?' to expected argument type 'String'\n\
    \            word += c.asciiValue\n                      ^\n/tmp/tmplgfgsy2p.swift:22:23:\
    \ error: no exact matches in call to initializer \n            result += String(c.asciiValue)\n\
    \                      ^\nSwift.String:4:23: note: found candidate with type 'UInt8?'\n\
    \    @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible\n\
    \                      ^\nSwift.String:2:12: note: found candidate with type 'UInt8?'\n\
    \    public init<T>(_ value: T, radix: Int = 10, uppercase: Bool = false) where\
    \ T : BinaryInteger\n           ^\nSwift.String:2:12: note: incorrect labels for\
    \ candidate (have: '(_:)', expected: '(describing:)')\n    public init<Subject>(describing\
    \ instance: Subject)\n           ^\nSwift.String:6:12: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting\
    \ subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    if word != \"\" {\n        result\
    \ += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpz1_2n1e1.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c == \" \" {\n            result += word\n            word = \"\
    \"\n        } else {\n            word += c\n        }\n    }\n    result += word\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpqyb896y6.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpqyb896y6.swift:20:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            word += c\n                    ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(\" \")\n    for word in words\
    \ {\n        var newWord = \"\"\n        for char in word {\n            newWord\
    \ += String(Int(char.asciiValue) + Int(Int(char.asciiValue) / 2))\n        }\n\
    \        result += newWord\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hnw184p.swift:13:19: error: no exact matches in call to instance\
    \ method 'split'\n    var words = s.split(\" \")\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    if word != \"\" {\n        result\
    \ += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpz1_2n1e1.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for c in s.characters {\n        let ascii = Int(c)\n\
    \        if ascii < 97 || ascii > 122 {\n            result += String(c)\n   \
    \     } else {\n            result += String(Character(ascii) - 32)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp01ogsy7d.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp01ogsy7d.swift:14:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(c)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n\
    /tmp/tmp01ogsy7d.swift:18:30: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n            result += String(Character(ascii)\
    \ - 32)\n                             ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    if word != \"\" {\n        result\
    \ += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpz1_2n1e1.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for c in s.characters {\n        switch c {\n\
    \        case \" \":\n            result += c\n        case \" \", \"\\n\", \"\
    \\t\", \"\\r\":\n            result += c\n        default:\n            result\
    \ += String(UnicodeScalar(Int(c)!))\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpr__syb7q.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpr__syb7q.swift:16:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpr__syb7q.swift:18:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpr__syb7q.swift:20:30:\
    \ error: value of optional type 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>')\
    \ must be unwrapped to a value of type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \            result += String(UnicodeScalar(Int(c)!))\n                      \
    \       ^\n/tmp/tmpr__syb7q.swift:20:30: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n            result += String(UnicodeScalar(Int(c)!))\n\
    \                             ^\n                                            \
    \        ?? <#default value#>\n/tmp/tmpr__syb7q.swift:20:30: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    result += String(UnicodeScalar(Int(c)!))\n                             ^\n\
    \                                                   !\n/tmp/tmpr__syb7q.swift:20:48:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += String(UnicodeScalar(Int(c)!))\n                      \
    \                         ^\n/tmp/tmpr__syb7q.swift:17:14: warning: literal value\
    \ is already handled by previous pattern; consider removing it\n        case \"\
    \ \", \"\\n\", \"\\t\", \"\\r\":\n             ^~~\n/tmp/tmpr__syb7q.swift:15:14:\
    \ note: first occurrence of identical literal pattern is here\n        case \"\
    \ \":\n             ^~~\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c == \" \" {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    if word != \"\" {\n        result\
    \ += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpg_lqs8fq.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpg_lqs8fq.swift:14:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c == \" \" {\n            result += word\n            word = \"\
    \"\n        } else {\n            word += String(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpke2ukus9.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpke2ukus9.swift:14:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word\n            word = \"\"\n\
    \        } else {\n            word += String(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpqkevarrq.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    for c in s.characters {\n     \
    \   if i == 0 {\n            result += String(c)\n        } else {\n         \
    \   result += String(c)\n            if c == \" \" {\n                result +=\
    \ String(c)\n                i = 0\n            } else {\n                i +=\
    \ 1\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpicxznm75.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for c in s.characters {\n        let index = s.characters.indexOf(c)\n\
    \        if index != s.characters.endIndex && index != 0 {\n            let prevChar\
    \ = s.characters[index - 1]\n            let nextChar = s.characters[index + 1]\n\
    \            if prevChar == \" \" {\n                result += nextChar\n    \
    \        } else {\n                result += c\n            }\n        } else\
    \ {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpmoivmpxx.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmoivmpxx.swift:14:34:\
    \ error: value of type 'String' has no member 'indexOf'\n        let index = s.characters.indexOf(c)\n\
    \                    ~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpmoivmpxx.swift:21:27: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += c\n                          ^\n/tmp/tmpmoivmpxx.swift:24:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var lastChar = \"\"\n   \
    \ for c in s.characters {\n        if c == \" \" {\n            if word != \"\"\
    \ {\n                result += word\n                word = \"\"\n           \
    \ }\n        } else {\n            word += c\n        }\n    }\n    if word !=\
    \ \"\" {\n        result += word\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpidx5bqv4.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpidx5bqv4.swift:22:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            word += c\n                    ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.split(\" \") {\n        let chars\
    \ = word.characters\n        var newChars = chars\n        for char in chars {\n\
    \            let index = chars.index(char, offsetBy: 1)\n            let newIndex\
    \ = chars.index(char, offsetBy: -1)\n            if newIndex < index {\n     \
    \           newChars.append(char.uppercased())\n            } else {\n       \
    \         newChars.append(char.lowercased())\n            }\n        }\n     \
    \   result = result + String(newChars)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpy5uptakw.swift:13:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c == \" \" {\n            result += word\n            word = \"\
    \"\n        } else {\n            word += String(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpke2ukus9.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpke2ukus9.swift:14:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    for c in s.characters {\n     \
    \   if i == 0 {\n            result += String(c)\n        } else {\n         \
    \   if c != \" \" {\n                result += String(c)\n            }\n    \
    \    }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpkequqw6y.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(separator: \" \")\n    for\
    \ word in words {\n        let chars = word.characters\n        var sortedChars\
    \ = chars.sorted()\n        var newWord = \"\"\n        for char in sortedChars\
    \ {\n            newWord += String(char)\n        }\n        result += newWord\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp72c50a0l.swift:15:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        let chars = word.characters\n              \
    \           ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: Substring { get set }\n           \
    \    ^\n/tmp/tmp72c50a0l.swift:13:9: warning: variable 'words' was never mutated;\
    \ consider changing to 'let' constant\n    var words = s.split(separator: \" \"\
    )\n    ~~~ ^\n    let\n/tmp/tmp72c50a0l.swift:16:13: warning: variable 'sortedChars'\
    \ was never mutated; consider changing to 'let' constant\n        var sortedChars\
    \ = chars.sorted()\n        ~~~ ^\n        let\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s\
    \ {\n        if c == \" \" {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n        } else {\n    \
    \        word += c\n        }\n    }\n    if word != \"\" {\n        result +=\
    \ word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp7ssm8xt8.swift:22:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            word += c\n                \
    \    ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    var j = 0\n    var k = 0\n    for\
    \ i < s.count {\n        if s[i] == \" \" {\n            result += \" \"\n   \
    \         i += 1\n            continue\n        }\n        if i == 0 {\n     \
    \       result += s[i]\n            i += 1\n            continue\n        }\n\
    \        if s[i-1] == \" \" {\n            result += \" \"\n            i += 1\n\
    \            continue\n        }\n        if s[i-1] == \" \" && s[i] == \" \"\
    \ {\n            result += \" \"\n            i += 1\n            continue\n \
    \       }\n        if s[i-1] == \" \" && s[i] != \" \" {\n            result +=\
    \ s[i]\n            i += 1\n            continue\n        }\n        if s[i-1]\
    \ != \" \" && s[i] != \" \" {\n            result += s[i]\n            i += 1\n\
    \            continue\n        }\n        if s[i-1] != \" \" && s[i] != \" \"\
    \ {\n            result += s[i]\n            i += 1\n            continue\n  \
    \      }\n        if s[i-1] != \" \" && s[i] != \" \" {\n            result +=\
    \ s[i]\n            i += 1\n            continue\n        }\n        if s[i-1]\
    \ != \" \" && s[i] != \" \" {\n            result += s[i]\n            i += 1\n\
    \            continue\n        }\n        if s[i-1] != \" \" && s[i] != \" \"\
    \ {\n            result += s[i]\n            i += 1\n            continue\n  \
    \      }\n        if s[i-1] != \" \" && s[i] != \" \" {\n            result +=\
    \ s[i]\n            i += 1\n            continue\n        }\n        if s[i-1]\
    \ != \" \" && s[i] != \" \" {\n            result += s[i]\n            i += 1\n\
    \            continue\n        }\n        if s[i-1] != \" \" && s[i] != \" \"\
    \ {\n            result += s[i]\n            i += 1\n            continue\n  \
    \      }\n        if s[i-1] != \" \" && s[i] != \" \" {\n            result +=\
    \ s[i]\n            i += 1\n            continue\n        }\n        if s[i-1]\
    \ != \" \" && s[i] != \" \" {\n            result += s[i]\n            i += 1\n\
    \            continue\n        }\n        if s[i-1] != \" \" && s[i] != \" \"\
    \ {\n            result += s[i]\n            i += 1\n            continue\n  \
    \      }\n        if s[i-1] != \" \" && s[i] != \" \" {\n            result +=\
    \ s[i]\n            i += 1\n            continue\n        }\n        if s[i-1]\
    \ != \" \" && s[i] != \" \" {\n            result += s[i]\n            i += 1\n\
    \            continue\n        }\n        if s[i-1] != \" \" && s[i] != \" \"\
    \ {\n            result += s[i]\n            i += 1\n            continue\n  \
    \      }\n        if s[i-1] != \" \" && s[i] != \" \" {\n            result +=\
    \ s[i]\n            i += 1\n            continue\n        }\n        if s[i-1]\
    \ != \" \" && s[i] != \" \" {\n            result += s[i]\n            i += 1\n\
    \            continue\n        }\n        if s[i-1] != \" \" && s[i] != \" \"\
    \ {\n            result += s[i]\n            i += 1\n            continue\n  \
    \      }\n        if s[i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpe3t51cly.swift:16:11: error: expected 'in' after for-each pattern\n\
    \    for i < s.count {\n          ^\n/tmp/tmpe3t51cly.swift:16:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < s.count {\n     \
    \     ^~\n           \n/tmp/tmpe3t51cly.swift:128:1: error: expected ']' in expression\
    \ list\n}\n^\n/tmp/tmpe3t51cly.swift:127:13: note: to match this opening '['\n\
    \        if s[i\n            ^\n/tmp/tmpe3t51cly.swift:149:116: error: expected\
    \ '}' at end of brace statement\nassert(anti_shuffle(s: \"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n \
    \                                                                            \
    \                                      ^\n/tmp/tmpe3t51cly.swift:11:40: note:\
    \ to match this opening '{'\nfunc anti_shuffle(s: String) -> String {\n      \
    \                                 ^\n/tmp/tmpe3t51cly.swift:16:11: error: '<'\
    \ is not a prefix unary operator\n    for i < s.count {\n          ^\n/tmp/tmpe3t51cly.swift:131:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c.isLetter {\n            word += c\n        } else {\n          \
    \  result += word\n            result += c\n            word = \"\"\n        }\n\
    \    }\n    result += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp1i8jvrdg.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1i8jvrdg.swift:16:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            word += c\n                    ^\n/tmp/tmp1i8jvrdg.swift:19:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    var j = 0\n    var k = 0\n    var\
    \ l = s.count\n    for (i; i < l; i++ {\n        j = i\n        k = i\n      \
    \  while (j > 0 && s[k] != ' ') {\n            k = k - 1\n        }\n        while\
    \ (k >= 0 && s[k] != ' ') {\n            j = j - 1\n        }\n        if j >\
    \ 0 {\n            result = result + s[k]\n        }\n        if k >= 0 {\n  \
    \          result = result + s[k]\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpv7tlsl8d.swift:20:33: error: single-quoted string literal found,\
    \ use '\"'\n        while (j > 0 && s[k] != ' ') {\n                         \
    \       ^~~\n                                \" \"\n/tmp/tmpv7tlsl8d.swift:23:34:\
    \ error: single-quoted string literal found, use '\"'\n        while (k >= 0 &&\
    \ s[k] != ' ') {\n                                 ^~~\n                     \
    \            \" \"\n/tmp/tmpv7tlsl8d.swift:17:5: error: C-style for statement\
    \ has been removed in Swift 3\n    for (i; i < l; i++ {\n    ^   ~~~~~~~~~~~~~~~~\n\
    /tmp/tmpv7tlsl8d.swift:33:18: error: expected '{' to start the body of for-each\
    \ loop\n    return result\n                 ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    for c in s.characters {\n     \
    \   if i == 0 {\n            result += c\n        } else {\n            result\
    \ += String(c).swapcase()\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp01xj5wgq.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp01xj5wgq.swift:16:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmp01xj5wgq.swift:18:33:\
    \ error: value of type 'String' has no member 'swapcase'\n            result +=\
    \ String(c).swapcase()\n                      ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for char in s {\n        let asciiValue = Int(char)\n\
    \        if asciiValue > 96 {\n            result += String(UnicodeScalar(asciiValue\
    \ - 96))\n        } else {\n            result += String(UnicodeScalar(asciiValue\
    \ + 96))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpwr9htzaq.swift:14:26: error: no exact matches in call to initializer\
    \ \n        let asciiValue = Int(char)\n                         ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23: note: candidate\
    \ expects value of type 'String' for parameter #1 (got 'Character')\n    @inlinable\
    \ public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for char in s.characters {\n        let value\
    \ = Int(char)\n        if value < 97 { // a-z\n            result += String(char)\n\
    \        } else if value < 123 { // A-Z\n            result += String(char.uppercased())\n\
    \        } else if value < 65535 { // A-Z\n            result += String(char.lowercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp8ooub8yw.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp8ooub8yw.swift:14:21:\
    \ error: no exact matches in call to initializer \n        let value = Int(char)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    for c in s.characters {\n     \
    \   if i == 0 {\n            result += String(c)\n        } else {\n         \
    \   result += String(c)\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp1lzwerzm.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var index = 0\n    for c\
    \ in s.characters {\n        if c == \" \" {\n            if word != \"\" {\n\
    \                result += word\n                word = \"\"\n            }\n\
    \        } else {\n            word += c\n        }\n    }\n    if word != \"\"\
    \ {\n        result += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpmfvtntgb.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmfvtntgb.swift:22:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            word += c\n                    ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s\
    \ {\n        if c == \" \" {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n        } else {\n    \
    \        word += c\n        }\n    }\n    if word != \"\" {\n        result +=\
    \ word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp7ssm8xt8.swift:22:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            word += c\n                \
    \    ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var last = \"\"\n    for c in s {\n        if\
    \ last != \"\" {\n            result += last\n        }\n        last = c.isUppercase()\
    \ ? c.lowercaseString() : c.uppercaseString()\n    }\n    result += last\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpzuzkr8gp.swift:18:18: error: cannot call value of non-function\
    \ type 'Bool'\n        last = c.isUppercase() ? c.lowercaseString() : c.uppercaseString()\n\
    \                 ^          ~~\n                            \n/tmp/tmpzuzkr8gp.swift:18:36:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n        last\
    \ = c.isUppercase() ? c.lowercaseString() : c.uppercaseString()\n            \
    \                     ~ ^~~~~~~~~~~~~~~\n/tmp/tmpzuzkr8gp.swift:18:58: error:\
    \ value of type 'Character' has no member 'uppercaseString'\n        last = c.isUppercase()\
    \ ? c.lowercaseString() : c.uppercaseString()\n                              \
    \                         ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if i == 0 {\n            result += c\n        }\n        if i ==\
    \ s.characters.count - 1 {\n            result += c\n        }\n        if c !=\
    \ \" \" {\n            result += c\n        }\n        if c == \" \" {\n     \
    \       result += word\n            word = \"\"\n        }\n        i += 1\n \
    \   }\n    if word != \"\" {\n        result += word\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp3_8221bb.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp3_8221bb.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmp3_8221bb.swift:19:19:\
    \ error: 'characters' is unavailable: Please use String directly\n        if i\
    \ == s.characters.count - 1 {\n                  ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp3_8221bb.swift:20:23: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            result\
    \ += c\n                      ^\n/tmp/tmp3_8221bb.swift:23:23: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            result\
    \ += c\n                      ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var newString = \"\"\n    var currentString = \"\"\n    var currentChar\
    \ = \"\"\n    for char in s.characters {\n        currentChar = String(char)\n\
    \        if currentChar == \" \" {\n            newString += currentString\n \
    \           currentString = \"\"\n        } else {\n            currentString\
    \ += currentChar\n        }\n    }\n    newString += currentString\n    return\
    \ newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmprocb1bt1.swift:15:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.split(\" \") {\n        let chars\
    \ = word.characters\n        let sortedChars = chars.sorted()\n        let newWord\
    \ = String(sortedChars)\n        result += newWord + \" \"\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpv1a0c5l5.swift:13:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var lastSpace = 0\n    for c in s.characters {\n\
    \        if c == ' ' {\n            if lastSpace > 0 {\n                result\
    \ += String(s.characters[lastSpace..<c])\n            }\n            lastSpace\
    \ = c\n        } else {\n            result += String(s.characters[lastSpace..<c])\n\
    \            lastSpace = c\n        }\n    }\n    if lastSpace > 0 {\n       \
    \ result += String(s.characters[lastSpace..<s.characters.endIndex])\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpe3i2dkc9.swift:15:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == ' ' {\n                ^~~\n                \" \"\n\
    /tmp/tmpe3i2dkc9.swift:14:16: error: 'characters' is unavailable: Please use String\
    \ directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpe3i2dkc9.swift:17:59: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n                result\
    \ += String(s.characters[lastSpace..<c])\n                                   \
    \                       ^\n/tmp/tmpe3i2dkc9.swift:19:25: error: cannot assign\
    \ value of type 'Character' to type 'Int'\n            lastSpace = c\n       \
    \                 ^\n/tmp/tmpe3i2dkc9.swift:21:55: error: cannot convert value\
    \ of type 'Character' to expected argument type 'Int'\n            result += String(s.characters[lastSpace..<c])\n\
    \                                                      ^\n/tmp/tmpe3i2dkc9.swift:22:25:\
    \ error: cannot assign value of type 'Character' to type 'Int'\n            lastSpace\
    \ = c\n                        ^\n/tmp/tmpe3i2dkc9.swift:26:39: error: cannot\
    \ convert value of type 'Int' to expected argument type 'String.Index'\n     \
    \   result += String(s.characters[lastSpace..<s.characters.endIndex])\n      \
    \                                ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for c in s.characters {\n        let index = s.characters.indexOf(c)\n\
    \        if index != s.characters.endIndex && index != 0 {\n            let nextIndex\
    \ = s.characters.index(before: index)\n            let nextChar = s.characters[nextIndex]\n\
    \            let nextCharAscii = nextChar.asciiValue\n            if nextCharAscii\
    \ < c.asciiValue {\n                result += String(c.asciiValue)\n         \
    \   } else {\n                result += String(nextCharAscii)\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp3xcrb_87.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp3xcrb_87.swift:14:34:\
    \ error: value of type 'String' has no member 'indexOf'\n        let index = s.characters.indexOf(c)\n\
    \                    ~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp3xcrb_87.swift:19:34: error:\
    \ value of optional type 'UInt8?' must be unwrapped to a value of type 'UInt8'\n\
    \            if nextCharAscii < c.asciiValue {\n                             \
    \    ^\n/tmp/tmp3xcrb_87.swift:19:34: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n            if nextCharAscii < c.asciiValue\
    \ {\n                                 ^\n                                    \
    \        ?? <#default value#>\n/tmp/tmp3xcrb_87.swift:19:34: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    if nextCharAscii < c.asciiValue {\n                                 ^\n \
    \                                          !\n/tmp/tmp3xcrb_87.swift:20:27: error:\
    \ no exact matches in call to initializer \n                result += String(c.asciiValue)\n\
    \                          ^\nSwift.String:4:23: note: found candidate with type\
    \ 'UInt8?'\n    @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible\n\
    \                      ^\nSwift.String:2:12: note: found candidate with type 'UInt8?'\n\
    \    public init<T>(_ value: T, radix: Int = 10, uppercase: Bool = false) where\
    \ T : BinaryInteger\n           ^\nSwift.String:2:12: note: incorrect labels for\
    \ candidate (have: '(_:)', expected: '(describing:)')\n    public init<Subject>(describing\
    \ instance: Subject)\n           ^\nSwift.String:6:12: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting\
    \ subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c == \" \" {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    if word != \"\" {\n        result\
    \ += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpg_lqs8fq.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpg_lqs8fq.swift:14:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(\" \")\n    for word in words\
    \ {\n        var newWord = \"\"\n        for char in word {\n            newWord\
    \ += String(Int(char.asciiValue))\n        }\n        result += newWord\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp992tipng.swift:13:19: error: no exact matches in call to instance\
    \ method 'split'\n    var words = s.split(\" \")\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for char in s.characters {\n        let value\
    \ = char.asciiValue\n        if value > 64 {\n            result += String(UnicodeScalar(value\
    \ + 32))\n        } else {\n            result += String(UnicodeScalar(value))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpwj7cq5ih.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpwj7cq5ih.swift:15:12:\
    \ error: value of optional type 'UInt8?' must be unwrapped to a value of type\
    \ 'UInt8'\n        if value > 64 {\n           ^\n/tmp/tmpwj7cq5ih.swift:15:12:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if value > 64 {\n           ^\n                 ?? <#default\
    \ value#>\n/tmp/tmpwj7cq5ih.swift:15:12: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n        if value > 64 {\n  \
    \         ^\n                !\n/tmp/tmpwj7cq5ih.swift:16:44: error: value of\
    \ optional type 'UInt8?' must be unwrapped to a value of type 'UInt8'\n      \
    \      result += String(UnicodeScalar(value + 32))\n                         \
    \                  ^\n/tmp/tmpwj7cq5ih.swift:16:44: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            result\
    \ += String(UnicodeScalar(value + 32))\n                                     \
    \      ^\n                                           (     ?? <#default value#>)\n\
    /tmp/tmpwj7cq5ih.swift:16:44: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            result += String(UnicodeScalar(value\
    \ + 32))\n                                           ^\n                     \
    \                           !\n/tmp/tmpwj7cq5ih.swift:18:44: error: value of optional\
    \ type 'UInt8?' must be unwrapped to a value of type 'UInt8'\n            result\
    \ += String(UnicodeScalar(value))\n                                          \
    \ ^\n/tmp/tmpwj7cq5ih.swift:18:44: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n            result += String(UnicodeScalar(value))\n\
    \                                           ^\n                              \
    \                   ?? <#default va"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    if word != \"\" {\n        result\
    \ += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpz1_2n1e1.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(separator: \" \")\n    for\
    \ word in words {\n        var newWord = \"\"\n        for char in word {\n  \
    \          newWord = newWord + String(UnicodeScalar(Int(char.value)!))\n     \
    \   }\n        result = result + newWord\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpc0gn0bry.swift:17:40: error: value of optional type 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>') must be unwrapped to a value of type 'UnicodeScalar'\
    \ (aka 'Unicode.Scalar')\n            newWord = newWord + String(UnicodeScalar(Int(char.value)!))\n\
    \                                       ^\n/tmp/tmpc0gn0bry.swift:17:40: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \            newWord = newWord + String(UnicodeScalar(Int(char.value)!))\n   \
    \                                    ^\n                                     \
    \                                  ?? <#default value#>\n/tmp/tmpc0gn0bry.swift:17:40:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            newWord = newWord + String(UnicodeScalar(Int(char.value)!))\n\
    \                                       ^\n                                  \
    \                                    !\n/tmp/tmpc0gn0bry.swift:17:63: error: value\
    \ of type 'Character' has no member 'value'\n            newWord = newWord + String(UnicodeScalar(Int(char.value)!))\n\
    \                                                         ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    var j = 0\n    var k = 0\n    for\
    \ i < s.count {\n        if s[i] == \" \" {\n            for j = i; j > 0; j--\
    \ {\n                if s[j-1] < s[j] {\n                    result = result +\
    \ String(s[j])\n                    s[j] = String(s[j-1])\n                  \
    \  s[j-1] = \" \"\n                    break\n                }\n            }\n\
    \        } else {\n            result = result + String(s[i])\n            s[i]\
    \ = \" \"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp4ygqag1p.swift:16:11: error: expected 'in' after for-each pattern\n\
    \    for i < s.count {\n          ^\n/tmp/tmp4ygqag1p.swift:16:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < s.count {\n     \
    \     ^~\n           \n/tmp/tmp4ygqag1p.swift:18:13: error: C-style for statement\
    \ has been removed in Swift 3\n            for j = i; j > 0; j-- {\n         \
    \   ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmp4ygqag1p.swift:16:11: error: '<' is not a prefix\
    \ unary operator\n    for i < s.count {\n          ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s\
    \ {\n        if c == \" \" {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n        } else {\n    \
    \        word += c\n        }\n    }\n    if word != \"\" {\n        result +=\
    \ word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp7ssm8xt8.swift:22:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            word += c\n                \
    \    ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var lastChar = \"\"\n   \
    \ for char in s {\n        if char == \" \" {\n            result += char\n  \
    \      } else {\n            if char != lastChar {\n                result +=\
    \ char\n            }\n            lastChar = char\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmppod2nrkv.swift:17:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n/tmp/tmppod2nrkv.swift:19:24: error: cannot convert value of type\
    \ 'String' to expected argument type 'Character'\n            if char != lastChar\
    \ {\n                       ^\n/tmp/tmppod2nrkv.swift:20:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n             \
    \   result += char\n                          ^\n/tmp/tmppod2nrkv.swift:22:24:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  lastChar = char\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        switch c {\n        case \" \":\n            if word != \"\" {\n    \
    \            result += word\n                word = \"\"\n            }\n    \
    \    case \" \", \"\\n\", \"\\t\":\n            word += c\n        default:\n\
    \            word += String(c)\n        }\n    }\n    if word != \"\" {\n    \
    \    result += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpznaig0g4.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpznaig0g4.swift:22:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            word += c\n                    ^\n/tmp/tmpznaig0g4.swift:21:14: warning:\
    \ literal value is already handled by previous pattern; consider removing it\n\
    \        case \" \", \"\\n\", \"\\t\":\n             ^~~\n/tmp/tmpznaig0g4.swift:16:14:\
    \ note: first occurrence of identical literal pattern is here\n        case \"\
    \ \":\n             ^~~\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(separator: \" \")\n    for\
    \ word in words {\n        var newWord = \"\"\n        for char in word {\n  \
    \          if char.asciiValue > 96 {\n                newWord += \"z\"\n     \
    \       } else {\n                newWord += String(char)\n            }\n   \
    \     }\n        result += newWord\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp25lc6ukg.swift:17:21: error: value of optional type 'UInt8?' must\
    \ be unwrapped to a value of type 'UInt8'\n            if char.asciiValue > 96\
    \ {\n                    ^\n/tmp/tmp25lc6ukg.swift:17:21: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n         \
    \   if char.asciiValue > 96 {\n                    ^\n                       \
    \        ?? <#default value#>\n/tmp/tmp25lc6ukg.swift:17:21: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    if char.asciiValue > 96 {\n                    ^\n                      \
    \        !\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s {\n        if\
    \ c.isWhitespace {\n            result += c\n        } else {\n            word\
    \ += c\n        }\n    }\n    for c in word {\n        if c.isWhitespace {\n \
    \           result += c\n        } else {\n            result += c.asciiValue\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpq3jvm792.swift:16:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += c\n              \
    \        ^\n/tmp/tmpq3jvm792.swift:18:21: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n            word += c\n    \
    \                ^\n/tmp/tmpq3jvm792.swift:23:23: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n            result +=\
    \ c\n                      ^\n/tmp/tmpq3jvm792.swift:25:25: error: cannot convert\
    \ value of type 'UInt8?' to expected argument type 'String'\n            result\
    \ += c.asciiValue\n                        ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for c in s.characters {\n        result += String(UnicodeScalar(Int(c)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmprccc1ke2.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmprccc1ke2.swift:14:40:\
    \ error: no exact matches in call to initializer \n        result += String(UnicodeScalar(Int(c)))\n\
    \                                       ^\n/tmp/tmprccc1ke2.swift:14:40: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n        result += String(UnicodeScalar(Int(c)))\n\
    \                                       ^\n/tmp/tmprccc1ke2.swift:14:40: note:\
    \ candidate expects value of type 'Float' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n        result += String(UnicodeScalar(Int(c)))\n\
    \                                       ^\n/tmp/tmprccc1ke2.swift:14:40: note:\
    \ candidate expects value of type 'Double' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n        result += String(UnicodeScalar(Int(c)))\n\
    \                                       ^\n/tmp/tmprccc1ke2.swift:14:40: note:\
    \ candidate expects value of type 'Float80' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n        result += String(UnicodeScalar(Int(c)))\n\
    \                                       ^\n/tmp/tmprccc1ke2.swift:14:40: note:\
    \ candidate expects value of type 'Builtin.Int64' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n        result += String(UnicodeScalar(Int(c)))\n\
    \                                       ^\n/tmp/tmprccc1ke2.swift:14:40: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n        result += String(UnicodeScalar(Int(c)))\n\
    \                                       ^\n/tmp/tmprccc1ke2.swift:14:26: error:\
    \ value of optional type 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>') must\
    \ be unwrapped to a value of type 'UnicodeSca"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    for c in s.characters {\n     \
    \   if i == 0 {\n            result += c\n        } else {\n            result\
    \ += String(UnicodeScalar(Int(c))).uppercaseString\n        }\n        i += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp13278h7i.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp13278h7i.swift:16:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmp13278h7i.swift:18:44:\
    \ error: no exact matches in call to initializer \n            result += String(UnicodeScalar(Int(c))).uppercaseString\n\
    \                                           ^\n/tmp/tmp13278h7i.swift:18:44: note:\
    \ found candidate with type '(Float16) -> Int'\n            result += String(UnicodeScalar(Int(c))).uppercaseString\n\
    \                                           ^\n/tmp/tmp13278h7i.swift:18:44: note:\
    \ found candidate with type '(Float) -> Int'\n            result += String(UnicodeScalar(Int(c))).uppercaseString\n\
    \                                           ^\n/tmp/tmp13278h7i.swift:18:44: note:\
    \ found candidate with type '(Double) -> Int'\n            result += String(UnicodeScalar(Int(c))).uppercaseString\n\
    \                                           ^\n/tmp/tmp13278h7i.swift:18:44: note:\
    \ found candidate with type '(Float80) -> Int'\n            result += String(UnicodeScalar(Int(c))).uppercaseString\n\
    \                                           ^\n/tmp/tmp13278h7i.swift:18:44: note:\
    \ found candidate with type '(Builtin.Int64) -> Int'\n            result += String(UnicodeScalar(Int(c))).uppercaseString\n\
    \                                           ^\n/tmp/tmp13278h7i.swift:18:44: note:\
    \ found candidate with type '(Builtin.Word) -> Int'\n            result += String(UnicodeScalar(Int(c))).uppercaseString\n\
    \                                           ^\n/tmp/tmp13278h7i.swift:18:30: error:\
    \ value of optional type 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>') must\
    \ be unwrapped to a value of type 'UnicodeScalar' (aka 'Unicode.Scalar')\n   \
    \         result += String(UnicodeScalar(Int(c))).uppercaseSt"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(separator: \" \")\n    for\
    \ word in words {\n        var newWord = \"\"\n        for char in word {\n  \
    \          let ascii = Int(char)\n            newWord = newWord + String(UnicodeScalar(ascii).value)\n\
    \        }\n        result = result + newWord\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5n0p5czd.swift:17:25: error: no exact matches in call to initializer\
    \ \n            let ascii = Int(char)\n                        ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23: note: candidate\
    \ expects value of type 'String' for parameter #1 (got 'Character')\n    @inlinable\
    \ public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(\" \")\n    for word in words\
    \ {\n        var newWord = \"\"\n        for char in word {\n            newWord\
    \ += String(Int(char.asciiValue))\n        }\n        result += newWord\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp992tipng.swift:13:19: error: no exact matches in call to instance\
    \ method 'split'\n    var words = s.split(\" \")\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var lastWord = \"\"\n    var lastChar = \"\"\n\
    \    for char in s.characters {\n        let ascii = Int(char)\n        if ascii\
    \ > 96 {\n            result += lastChar\n            lastChar = \"\"\n      \
    \  }\n        if ascii < 97 {\n            lastChar = String(char)\n        }\n\
    \        if ascii > 122 {\n            result += lastChar\n            lastChar\
    \ = \"\"\n        }\n        if ascii < 65 {\n            lastChar = String(char)\n\
    \        }\n        if ascii > 90 {\n            result += lastChar\n        \
    \    lastChar = \"\"\n        }\n        if ascii < 97 {\n            lastChar\
    \ = String(char)\n        }\n        if ascii > 122 {\n            result += lastChar\n\
    \            lastChar = \"\"\n        }\n        if ascii < 65 {\n           \
    \ lastChar = String(char)\n        }\n        if ascii > 90 {\n            result\
    \ += lastChar\n            lastChar = \"\"\n        }\n        if ascii < 97 {\n\
    \            lastChar = String(char)\n        }\n        if ascii > 122 {\n  \
    \          result += lastChar\n            lastChar = \"\"\n        }\n      \
    \  if ascii < 65 {\n            lastChar = String(char)\n        }\n        if\
    \ ascii > 90 {\n            result += lastChar\n            lastChar = \"\"\n\
    \        }\n        if ascii < 97 {\n            lastChar = String(char)\n   \
    \     }\n        if ascii > 122 {\n            result += lastChar\n          \
    \  lastChar = \"\"\n        }\n        if ascii < 65 {\n            lastChar =\
    \ String(char)\n        }\n        if ascii > 90 {\n            result += lastChar\n\
    \            lastChar = \"\"\n        }\n        if ascii < 97 {\n           \
    \ lastChar = String(char)\n        }\n        if ascii > 122 {\n            result\
    \ += lastChar\n            lastChar = \"\"\n        }\n        if ascii < 65 {\n\
    \            lastChar = String(char)\n        }\n        if ascii > 90 {\n   \
    \         result += lastChar\n            lastChar = \"\"\n        }\n       \
    \ if ascii < 97 {\n            lastChar = String(char)\n        }\n        if\
    \ ascii > 122 {\n            result += lastChar\n            lastChar = \"\"\n\
    \        }\n        if ascii < 65 {\n            lastChar = String(char)\n   \
    \     }\n        if ascii > 90 {\n            result += lastChar\n           \
    \ lastChar = \"\"\n        }\n        if ascii < 97 {\n            lastChar =\
    \ String(char)\n        }\n        if ascii > 122 {\n            result += lastChar\n\
    \            lastChar = \"\"\n        }\n        if ascii < 65 {\n           \
    \ lastChar = String(char)\n        }\n        if ascii > 90 {\n            result\
    \ += lastChar\n            lastChar = \"\"\n        }\n        if ascii < 97 {\n\
    \            lastChar = String(char)\n        }\n        if ascii > 122 {\n  \
    \          result += lastChar\n            lastChar = \"\"\n        }\n      \
    \  if ascii < 65\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp133g5z27.swift:126:22: error: expected '{' after 'if' condition\n\
    \        if ascii < 65\n                     ^\n/tmp/tmp133g5z27.swift:148:116:\
    \ error: expected '}' at end of brace statement\nassert(anti_shuffle(s: \"Hi.\
    \ My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\")\n                                                              \
    \                                                     ^\n/tmp/tmp133g5z27.swift:11:40:\
    \ note: to match this opening '{'\nfunc anti_shuffle(s: String) -> String {\n\
    \                                       ^\n/tmp/tmp133g5z27.swift:15:19: error:\
    \ 'characters' is unavailable: Please use String directly\n    for char in s.characters\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp133g5z27.swift:16:21: error: no exact matches in call to initializer\
    \ \n        let ascii = Int(char)\n                    ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23: note: candidate\
    \ expects value of type 'String' for parameter #1 (got 'Character')\n    @inlinable\
    \ public init?(_ description: String)\n   "
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(\" \")\n    for word in words\
    \ {\n        var newWord = \"\"\n        for char in word {\n            if char\
    \ >= 'a' && char <= 'z' {\n                newWord += char.lowercased()\n    \
    \        } else if char >= 'A' && char <= 'Z' {\n                newWord += char.uppercased()\n\
    \            } else if char == ' ' {\n                newWord += \"_\"\n     \
    \       } else {\n                newWord += char\n            }\n        }\n\
    \        result += newWord\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpk00gmwsn.swift:17:24: error: single-quoted string literal found,\
    \ use '\"'\n            if char >= 'a' && char <= 'z' {\n                    \
    \   ^~~\n                       \"a\"\n/tmp/tmpk00gmwsn.swift:17:39: error: single-quoted\
    \ string literal found, use '\"'\n            if char >= 'a' && char <= 'z' {\n\
    \                                      ^~~\n                                 \
    \     \"z\"\n/tmp/tmpk00gmwsn.swift:19:31: error: single-quoted string literal\
    \ found, use '\"'\n            } else if char >= 'A' && char <= 'Z' {\n      \
    \                        ^~~\n                              \"A\"\n/tmp/tmpk00gmwsn.swift:19:46:\
    \ error: single-quoted string literal found, use '\"'\n            } else if char\
    \ >= 'A' && char <= 'Z' {\n                                             ^~~\n\
    \                                             \"Z\"\n/tmp/tmpk00gmwsn.swift:21:31:\
    \ error: single-quoted string literal found, use '\"'\n            } else if char\
    \ == ' ' {\n                              ^~~\n                              \"\
    \ \"\n/tmp/tmpk00gmwsn.swift:13:19: error: no exact matches in call to instance\
    \ method 'split'\n    var words = s.split(\" \")\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var isSpace = false\n   \
    \ for c in s.characters {\n        if isSpace {\n            result += word\n\
    \            word = \"\"\n            isSpace = false\n        }\n        if c\
    \ == \" \" {\n            isSpace = true\n        } else {\n            word +=\
    \ String(c)\n        }\n    }\n    result += word\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpvwio98zq.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        switch c {\n        case \" \":\n            if word != \"\" {\n    \
    \            result += word\n                word = \"\"\n            }\n    \
    \    case \" \", \"\\n\", \"\\t\":\n            word += c\n        default:\n\
    \            word += c\n        }\n    }\n    if word != \"\" {\n        result\
    \ += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpsvr53_ac.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsvr53_ac.swift:22:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            word += c\n                    ^\n/tmp/tmpsvr53_ac.swift:24:21: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            word += c\n                    ^\n/tmp/tmpsvr53_ac.swift:21:14: warning:\
    \ literal value is already handled by previous pattern; consider removing it\n\
    \        case \" \", \"\\n\", \"\\t\":\n             ^~~\n/tmp/tmpsvr53_ac.swift:16:14:\
    \ note: first occurrence of identical literal pattern is here\n        case \"\
    \ \":\n             ^~~\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var lastWord = \"\"\n    for word in s.split(\"\
    \ \") {\n        if word != lastWord {\n            result += String(lastWord)\n\
    \            lastWord = word\n        } else {\n            result += String(word)\n\
    \        }\n    }\n    result += String(lastWord)\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp_5tx991z.swift:14:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(separator: \" \")\n    for\
    \ word in words {\n        var newWord = \"\"\n        for char in word {\n  \
    \          newWord = newWord + String(UnicodeScalar(Int(char.value)!))\n     \
    \   }\n        result = result + newWord\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpc0gn0bry.swift:17:40: error: value of optional type 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>') must be unwrapped to a value of type 'UnicodeScalar'\
    \ (aka 'Unicode.Scalar')\n            newWord = newWord + String(UnicodeScalar(Int(char.value)!))\n\
    \                                       ^\n/tmp/tmpc0gn0bry.swift:17:40: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \            newWord = newWord + String(UnicodeScalar(Int(char.value)!))\n   \
    \                                    ^\n                                     \
    \                                  ?? <#default value#>\n/tmp/tmpc0gn0bry.swift:17:40:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            newWord = newWord + String(UnicodeScalar(Int(char.value)!))\n\
    \                                       ^\n                                  \
    \                                    !\n/tmp/tmpc0gn0bry.swift:17:63: error: value\
    \ of type 'Character' has no member 'value'\n            newWord = newWord + String(UnicodeScalar(Int(char.value)!))\n\
    \                                                         ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    for c in s.characters {\n     \
    \   if i == 0 {\n            result += c\n        } else {\n            result\
    \ += String(c).swapcase()\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp01xj5wgq.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp01xj5wgq.swift:16:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmp01xj5wgq.swift:18:33:\
    \ error: value of type 'String' has no member 'swapcase'\n            result +=\
    \ String(c).swapcase()\n                      ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if i == 0 {\n            result += c\n        }\n        if c ==\
    \ \" \" {\n            result += c\n            word = \"\"\n        }\n     \
    \   else {\n            word += c\n        }\n        i += 1\n    }\n    for c\
    \ in word.characters {\n        if c != \" \" {\n            result += c\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpmv7tudkb.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmv7tudkb.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpmv7tudkb.swift:20:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpmv7tudkb.swift:24:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            word += c\n                    ^\n/tmp/tmpmv7tudkb.swift:28:19: error:\
    \ 'characters' is unavailable: Please use String directly\n    for c in word.characters\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpmv7tudkb.swift:30:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += c\n              \
    \        ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var prev = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            if prev != \"\" {\n                result\
    \ += prev\n                prev = \"\"\n            }\n        } else {\n    \
    \        prev += String(c)\n        }\n    }\n    if prev != \"\" {\n        result\
    \ += prev\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp_unjr_s0.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var index = 0\n    for c\
    \ in s.characters {\n        if c == \" \" {\n            if word != \"\" {\n\
    \                result += word\n                word = \"\"\n            }\n\
    \        } else {\n            word += c\n        }\n    }\n    if word != \"\"\
    \ {\n        result += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpmfvtntgb.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmfvtntgb.swift:22:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            word += c\n                    ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var newString = \"\"\n    var word = \"\"\n    for c in s.characters\
    \ {\n        if c == \" \" {\n            newString += c\n        } else {\n \
    \           word += c\n        }\n    }\n    for c in newString.characters {\n\
    \        if c == \" \" {\n            newString += c\n        } else {\n     \
    \       newString += word[newString.characters.indexOf(c)]\n        }\n    }\n\
    \    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpbsstdnq3.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpbsstdnq3.swift:16:26:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            newString += c\n                         ^\n/tmp/tmpbsstdnq3.swift:18:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            word += c\n                    ^\n/tmp/tmpbsstdnq3.swift:21:24: error:\
    \ 'characters' is unavailable: Please use String directly\n    for c in newString.characters\
    \ {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbsstdnq3.swift:23:26: error: cannot convert value of\
    \ type 'Character' to expected argument type 'String'\n            newString +=\
    \ c\n                         ^\n/tmp/tmpbsstdnq3.swift:25:52: error: value of\
    \ type 'String' has no member 'indexOf'\n            newString += word[newString.characters.indexOf(c)]\n\
    \                              ~~~~~~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    for c in s.characters {\n     \
    \   if i == 0 {\n            result += c\n        } else {\n            result\
    \ += c.swap()\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpe12qevv6.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpe12qevv6.swift:16:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpe12qevv6.swift:18:25:\
    \ error: value of type 'Character' has no member 'swap'\n            result +=\
    \ c.swap()\n                      ~ ^~~~\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    for c in s.characters {\n     \
    \   if i == 0 {\n            result += c\n        } else {\n            if c.isUppercase\
    \ {\n                result += c.lowercase\n            } else {\n           \
    \     result += c.uppercase\n            }\n        }\n        i += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp7kg1a0_7.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7kg1a0_7.swift:16:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmp7kg1a0_7.swift:19:29:\
    \ error: value of type 'Character' has no member 'lowercase'\n               \
    \ result += c.lowercase\n                          ~ ^~~~~~~~~\n/tmp/tmp7kg1a0_7.swift:21:29:\
    \ error: value of type 'Character' has no member 'uppercase'\n               \
    \ result += c.uppercase\n                          ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    for c in s.characters {\n     \
    \   if i == 0 {\n            result += c\n        } else {\n            result\
    \ += String(Int(c) - Int(s.characters[i-1]))\n        }\n        i += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpa7f3ihva.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpa7f3ihva.swift:16:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpa7f3ihva.swift:18:39:\
    \ error: no exact matches in call to initializer \n            result += String(Int(c)\
    \ - Int(s.characters[i-1]))\n                                      ^\n/tmp/tmpa7f3ihva.swift:18:39:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \            result += String(Int(c) - Int(s.characters[i-1]))\n             \
    \                         ^\n/tmp/tmpa7f3ihva.swift:18:39: note: candidate expects\
    \ value of type 'Float' for parameter #1 (got 'Character')\n            result\
    \ += String(Int(c) - Int(s.characters[i-1]))\n                               \
    \       ^\n/tmp/tmpa7f3ihva.swift:18:39: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n            result += String(Int(c)\
    \ - Int(s.characters[i-1]))\n                                      ^\n/tmp/tmpa7f3ihva.swift:18:39:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \            result += String(Int(c) - Int(s.characters[i-1]))\n             \
    \                         ^\n/tmp/tmpa7f3ihva.swift:18:39: note: candidate expects\
    \ value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n         \
    \   result += String(Int(c) - Int(s.characters[i-1]))\n                      \
    \                ^\n/tmp/tmpa7f3ihva.swift:18:39: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n            result\
    \ += String(Int(c) - Int(s.characters[i-1]))\n                               \
    \       ^\n/tmp/tmpa7f3ihva.swift:18:30: error: no exact matches in call to initializer\
    \ \n            result += String(Int(c) - Int(s.characters[i"
  stdout: ''
  timestamp: 1660013982
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var prev = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            if prev != \"\" {\n                result\
    \ += prev\n                prev = \"\"\n            }\n        } else {\n    \
    \        prev += String(c)\n        }\n    }\n    if prev != \"\" {\n        result\
    \ += prev\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp_unjr_s0.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var lastChar = \"\"\n    for c in s.characters\
    \ {\n        if c == \" \" {\n            if lastChar == \" \" {\n           \
    \     result += c\n            } else {\n                result += c\n       \
    \         lastChar = c\n            }\n        } else {\n            result +=\
    \ c\n            lastChar = c\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpl6lxxr8o.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpl6lxxr8o.swift:17:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += c\n                          ^\n/tmp/tmpl6lxxr8o.swift:19:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += c\n                          ^\n/tmp/tmpl6lxxr8o.swift:20:28:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \      lastChar = c\n                           ^\n/tmp/tmpl6lxxr8o.swift:23:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpl6lxxr8o.swift:24:24:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  lastChar = c\n                       ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(\" \")\n    for word in words\
    \ {\n        var newWord = \"\"\n        for char in word {\n            newWord\
    \ += String(Int(char.asciiValue)) + char\n        }\n        result += newWord\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmplfu5xlab.swift:13:19: error: no exact matches in call to instance\
    \ method 'split'\n    var words = s.split(\" \")\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(separator: \" \")\n    for\
    \ word in words {\n        var newWord = \"\"\n        for char in word {\n  \
    \          if char.asciiValue > 96 {\n                newWord += \"z\"\n     \
    \       } else {\n                newWord += String(char)\n            }\n   \
    \     }\n        result += newWord\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp25lc6ukg.swift:17:21: error: value of optional type 'UInt8?' must\
    \ be unwrapped to a value of type 'UInt8'\n            if char.asciiValue > 96\
    \ {\n                    ^\n/tmp/tmp25lc6ukg.swift:17:21: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n         \
    \   if char.asciiValue > 96 {\n                    ^\n                       \
    \        ?? <#default value#>\n/tmp/tmp25lc6ukg.swift:17:21: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    if char.asciiValue > 96 {\n                    ^\n                      \
    \        !\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    for c in s.characters {\n     \
    \   if i == 0 {\n            result += c\n        } else {\n            if c ==\
    \ \" \" {\n                result += c\n            } else {\n               \
    \ let value = Int(c) - Int(s.characters[i-1])\n                if value < 0 {\n\
    \                    result += String(c)\n                } else {\n         \
    \           result += String(s.characters[i-1]) + String(c)\n                }\n\
    \            }\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpmioypp2u.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmioypp2u.swift:16:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpmioypp2u.swift:19:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += c\n                          ^\n/tmp/tmpmioypp2u.swift:21:29:\
    \ error: no exact matches in call to initializer \n                let value =\
    \ Int(c) - Int(s.characters[i-1])\n                            ^\n/tmp/tmpmioypp2u.swift:21:29:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \                let value = Int(c) - Int(s.characters[i-1])\n               \
    \             ^\n/tmp/tmpmioypp2u.swift:21:29: note: candidate expects value of\
    \ type 'Float' for parameter #1 (got 'Character')\n                let value =\
    \ Int(c) - Int(s.characters[i-1])\n                            ^\n/tmp/tmpmioypp2u.swift:21:29:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'Character')\n\
    \                let value = Int(c) - Int(s.characters[i-1])\n               \
    \             ^\n/tmp/tmpmioypp2u.swift:21:29: note: candidate expects value of\
    \ type 'Float80' for parameter #1 (got 'Character')\n                let value\
    \ = Int(c) - Int(s.characters[i-1])\n                            ^\n/tmp/tmpmioypp2u.swift:21:29:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n                let value = Int(c) - Int(s.characters[i-1])\n\
    \                            ^\n/tmp/tmpmioypp2u.swift:21:29: note: candidate\
    \ expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n  \
    \              let value = Int(c) - Int(s.characters[i-1])\n                 \
    \           ^\n/tmp/tmpmioypp2u.swift:21:38: error: no exact mat"
  stdout: ''
  timestamp: 1660013970
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var lastChar = \"\"\n   \
    \ for c in s.characters {\n        if c == \" \" {\n            if word != \"\"\
    \ {\n                result += word\n                word = \"\"\n           \
    \ }\n        } else {\n            if word == \"\" {\n                word +=\
    \ c\n            } else {\n                word += c\n            }\n        }\n\
    \    }\n    if word != \"\" {\n        result += word\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp2o_m60fw.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp2o_m60fw.swift:23:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                word += c\n                        ^\n/tmp/tmp2o_m60fw.swift:25:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                word += c\n                        ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c == \" \" {\n            result += word\n            word = \"\
    \"\n        } else {\n            word += c\n        }\n    }\n    result += word\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpqyb896y6.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpqyb896y6.swift:20:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            word += c\n                    ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for c in s.characters {\n        let ascii = Int(c)\n\
    \        if ascii < 97 || ascii > 122 {\n            result += String(c)\n   \
    \     } else {\n            result += String(ascii + 96 - 97)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp1idzgbx4.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1idzgbx4.swift:14:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(c)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var index = 0\n    for c\
    \ in s {\n        if c == \" \" {\n            if word != \"\" {\n           \
    \     result += word\n                word = \"\"\n            }\n        } else\
    \ {\n            word += c\n        }\n    }\n    if word != \"\" {\n        result\
    \ += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp4a13m1xa.swift:22:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            word += c\n                \
    \    ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var index = 0\n    for c\
    \ in s.characters {\n        if c == \" \" {\n            if word != \"\" {\n\
    \                result += word\n                word = \"\"\n            }\n\
    \        } else {\n            word += String(c)\n        }\n    }\n    if word\
    \ != \"\" {\n        result += word\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpz1bqmsg2.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpz1bqmsg2.swift:14:9:\
    \ warning: initialization of variable 'index' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var index = 0\n    ~~~~^~~~~\n  \
    \  _\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    if word != \"\" {\n        result\
    \ += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpz1_2n1e1.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.split(\" \") {\n        var newWord\
    \ = \"\"\n        for char in word {\n            newWord += String(Int(char.asciiValue))\n\
    \        }\n        result += newWord\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpf5vv32c_.swift:13:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var newString = \"\"\n    var word = \"\"\n    for c in s.characters\
    \ {\n        if c == \" \" {\n            newString += word\n            word\
    \ = \"\"\n        } else {\n            word += String(c)\n        }\n    }\n\
    \    newString += word\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpm0ydymw8.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    var j = 0\n    var k = 0\n    var\
    \ l = s.count\n    for k in 0..<l {\n        if s[k] == \" \" {\n            result\
    \ += \" \"\n            i += 1\n        } else {\n            result += s[k]\n\
    \            i += 1\n        }\n    }\n    for j in 0..<l {\n        if s[j] ==\
    \ \" \" {\n            result += \" \"\n            i += 1\n        } else {\n\
    \            result += s[j]\n            i += 1\n        }\n    }\n    for j in\
    \ 0..<l {\n        if s[j] == \" \" {\n            result += \" \"\n         \
    \   i += 1\n        } else {\n            result += s[j]\n            i += 1\n\
    \        }\n    }\n    for j in 0..<l {\n        if s[j] == \" \" {\n        \
    \    result += \" \"\n            i += 1\n        } else {\n            result\
    \ += s[j]\n            i += 1\n        }\n    }\n    for j in 0..<l {\n      \
    \  if s[j] == \" \" {\n            result += \" \"\n            i += 1\n     \
    \   } else {\n            result += s[j]\n            i += 1\n        }\n    }\n\
    \    for j in 0..<l {\n        if s[j] == \" \" {\n            result += \" \"\
    \n            i += 1\n        } else {\n            result += s[j]\n         \
    \   i += 1\n        }\n    }\n    for j in 0..<l {\n        if s[j] == \" \" {\n\
    \            result += \" \"\n            i += 1\n        } else {\n         \
    \   result += s[j]\n            i += 1\n        }\n    }\n    for j in 0..<l {\n\
    \        if s[j] == \" \" {\n            result += \" \"\n            i += 1\n\
    \        } else {\n            result += s[j]\n            i += 1\n        }\n\
    \    }\n    for j in 0..<l {\n        if s[j] == \" \" {\n            result +=\
    \ \" \"\n            i += 1\n        } else {\n            result += s[j]\n  \
    \          i += 1\n        }\n    }\n    for j in 0..<l {\n        if s[j] ==\
    \ \" \" {\n            result += \" \"\n            i += 1\n        } else {\n\
    \            result += s[j]\n            i += 1\n        }\n    }\n    for j in\
    \ 0..<l {\n        if s[j] == \" \" {\n            result += \" \"\n         \
    \   i += 1\n        } else {\n            result += s[j]\n            i += 1\n\
    \        }\n    }\n    for j in 0..<l {\n        if s[j] == \" \" {\n        \
    \    result += \" \"\n            i += 1\n        } else {\n            result\
    \ += s[j]\n            i += 1\n        }\n    }\n    for j in 0..<l {\n      \
    \  if s[j] == \" \" {\n            result += \" \"\n            i += 1\n     \
    \   } else {\n            result += s[j]\n            i += 1\n        }\n    }\n\
    \    for j in 0..<l {\n        if s[j] == \" \" {\n            result += \" \"\
    \n            i += 1\n        } else {\n            result += s[j]\n         \
    \   i += 1\n        }\n    }\n    for \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpdwkjta5e.swift:143:8: error: expected pattern\n    for \n     \
    \  ^\n/tmp/tmpdwkjta5e.swift:143:8: error: expected Sequence expression for for-each\
    \ loop\n    for \n       ^\n/tmp/tmpdwkjta5e.swift:143:8: error: expected '{'\
    \ to start the body of for-each loop\n    for \n       ^\n/tmp/tmpdwkjta5e.swift:18:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[k] == \" \" {\n           ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdwkjta5e.swift:22:24:\
    \ error: no exact matches in call to subscript \n            result += s[k]\n\
    \                       ^\nSwift.String:3:12: note: candidate expects value of\
    \ type 'Range<String.Index>' for parameter #1 (got 'Int')\n    public subscript(r:\
    \ Range<String.Index>) -> Substring { get }\n           ^\nSwift.Collection:3:23:\
    \ note: candidate expects value of type '(UnboundedRange_) -> ()' for parameter\
    \ #1 (got 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ())\
    \ -> Self.SubSequence { get }\n                      ^\n/tmp/tmpdwkjta5e.swift:27:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[j] == \" \" {\n           ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdwkjta5e.swift:31:24:\
    \ error: no exact matches in call to subscript \n            result += s[j]\n\
    \                       ^\nSwift.String:3:12: note: candidate expects value of\
    \ type 'Range<String.Index>' for parameter #1 (got 'Int')\n    public subscript(r:\
    \ Range<String.Index>) -> Substring { get }\n           ^\nSwift.Collection:3:23:\
    \ note: candidate expects value of type '(UnboundedRange_) -> ()' for parameter\
    \ #1 (got 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ())\
    \ -> Self.SubSequence { get }\n                      ^\n/tmp/tmpdwkjta5e.swift:36:12:\
    \ error: 's"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(separator: \" \")\n    for\
    \ word in words {\n        let chars = word.characters\n        let sortedChars\
    \ = chars.sorted()\n        let sortedString = String(sortedChars)\n        result\
    \ += sortedString\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpeev30rqk.swift:15:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        let chars = word.characters\n              \
    \           ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: Substring { get set }\n           \
    \    ^\n/tmp/tmpeev30rqk.swift:13:9: warning: variable 'words' was never mutated;\
    \ consider changing to 'let' constant\n    var words = s.split(separator: \" \"\
    )\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.split(\" \") {\n        let chars\
    \ = word.characters\n        let sortedChars = chars.sorted()\n        let sortedCharsString\
    \ = String(sortedChars)\n        result += sortedCharsString\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpc5snq33f.swift:13:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    var j = 0\n    var k = 0\n    var\
    \ l = s.count\n    for (i; i < l; i++ {\n        var c = s[i]\n        if c ==\
    \ \" \" {\n            for (j = i; j < l; j++ {\n                if s[j] != \"\
    \ \" {\n                    break\n                }\n            }\n        \
    \    for (k = i; k < j; k++ {\n                result += s[k]\n            }\n\
    \        } else {\n            for (j = i; j < l; j++ {\n                if s[j]\
    \ > c {\n                    break\n                }\n            }\n       \
    \     for (k = i; k < j; k++ {\n                result += s[k]\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpf2oxa97s.swift:17:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for (i; i < l; i++ {\n    ^   ~~~~~~~~~~~~~~~~\n/tmp/tmpf2oxa97s.swift:39:18:\
    \ error: expected '{' to start the body of for-each loop\n    return result\n\
    \                 ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c == \" \" {\n            result += word\n            word = \"\
    \"\n        } else {\n            word += String(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpke2ukus9.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpke2ukus9.swift:14:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    var j = 0\n    var k = 0\n    var\
    \ l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q\
    \ = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v =\
    \ 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n\
    \    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n \
    \   var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n  \
    \  var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n   \
    \ var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var\
    \ v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a\
    \ = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f =\
    \ 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n\
    \    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n \
    \   var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n  \
    \  var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n   \
    \ var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var\
    \ f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k\
    \ = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p =\
    \ 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n\
    \    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n \
    \   var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n  \
    \  var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n   \
    \ var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var\
    \ p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u\
    \ = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z =\
    \ 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n\
    \    var f = 0\n    var g = 0\n    var h\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmphyokli6e.swift:39:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmphyokli6e.swift:13:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmphyokli6e.swift:40:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmphyokli6e.swift:14:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmphyokli6e.swift:41:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmphyokli6e.swift:15:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmphyokli6e.swift:42:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmphyokli6e.swift:16:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmphyokli6e.swift:43:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmphyokli6e.swift:17:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmphyokli6e.swift:44:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmphyokli6e.swift:18:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmphyokli6e.swift:45:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmphyokli6e.swift:19:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmphyokli6e.swift:46:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmphyokli6e.swift:20:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmphyokli6e.swift:47:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmphyokli6e.swift:21:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmphyokli6e.swift:48:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmphyokli6e.swift:22:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmphyokli6e.swift:49:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmphyokli6e.swift:23:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmphyokli6e.swift:50:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmphyok"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var isSpace = false\n   \
    \ for c in s.characters {\n        if isSpace {\n            result += c\n   \
    \         isSpace = false\n        } else {\n            if let _ = c {\n    \
    \            isSpace = true\n            } else {\n                result += word\n\
    \                result += c\n                word = \"\"\n                isSpace\
    \ = false\n            }\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmps49x8eaw.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmps49x8eaw.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmps49x8eaw.swift:24:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += c\n                          ^\n/tmp/tmps49x8eaw.swift:20:16:\
    \ error: initializer for conditional binding must have Optional type, not 'Character'\n\
    \            if let _ = c {\n               ^       ~\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if i == 0 {\n            result += c\n        } else {\n        \
    \    result += c\n            if c == \" \" {\n                result += word\n\
    \                word = \"\"\n                i = 0\n            } else {\n  \
    \              word += c\n            }\n        }\n        i += 1\n    }\n  \
    \  if word != \"\" {\n        result += word\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpdxhn12d8.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpdxhn12d8.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpdxhn12d8.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpdxhn12d8.swift:25:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                word += c\n                        ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s\
    \ {\n        if c == \" \" {\n            result += word\n            word = \"\
    \"\n        } else {\n            word += c\n        }\n    }\n    result += word\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpkk5mbvgj.swift:20:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            word += c\n                \
    \    ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        word = word + c\n    }\n    for c in word.characters {\n        if c\
    \ != \" \" {\n            result = result + c\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpukhijygs.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpukhijygs.swift:15:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        word = word + c\n                      ^\n/tmp/tmpukhijygs.swift:17:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpukhijygs.swift:19:31: error: cannot convert value of\
    \ type 'Character' to expected argument type 'String'\n            result = result\
    \ + c\n                              ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var lastWord = \"\"\n    for c in s.characters\
    \ {\n        if c == ' ' {\n            if lastWord != \"\" {\n              \
    \  result += lastWord\n                lastWord = \"\"\n            }\n      \
    \  } else {\n            lastWord += String(c)\n        }\n    }\n    if lastWord\
    \ != \"\" {\n        result += lastWord\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp2es3bqph.swift:15:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == ' ' {\n                ^~~\n                \" \"\n\
    /tmp/tmp2es3bqph.swift:14:16: error: 'characters' is unavailable: Please use String\
    \ directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var index = 0\n    for c\
    \ in s {\n        if c == \" \" {\n            result += word\n            word\
    \ = \"\"\n        } else {\n            word += c\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp00pkboa9.swift:20:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            word += c\n                \
    \    ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s\
    \ {\n        if c == \" \" {\n            result += word\n            word = \"\
    \"\n        } else {\n            word += c\n        }\n    }\n    result += word\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpkk5mbvgj.swift:20:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            word += c\n                \
    \    ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var isSpace = false\n   \
    \ for c in s.characters {\n        if isSpace {\n            result += c\n   \
    \         isSpace = false\n            continue\n        }\n        if c == \"\
    \ \" {\n            isSpace = true\n            continue\n        }\n        word\
    \ += c\n    }\n    for c in word.characters {\n        result += String(c)\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmphqstjyqb.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmphqstjyqb.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmphqstjyqb.swift:25:17:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        word += c\n                ^\n/tmp/tmphqstjyqb.swift:27:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for c in word.characters {\n\
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var isSpace = false\n   \
    \ for c in s.characters {\n        if c == \" \" {\n            isSpace = true\n\
    \            result += c\n        } else if !isSpace {\n            result +=\
    \ c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpp6eghih1.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpp6eghih1.swift:18:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpp6eghih1.swift:20:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    for c in s.characters {\n     \
    \   if i == 0 {\n            result += c\n        } else {\n            result\
    \ += String(c).swapcase()\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp01xj5wgq.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp01xj5wgq.swift:16:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmp01xj5wgq.swift:18:33:\
    \ error: value of type 'String' has no member 'swapcase'\n            result +=\
    \ String(c).swapcase()\n                      ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s.characters\
    \ {\n        word = String(char)\n        if word != \"\" {\n            result\
    \ += String(word.unicodeScalars.filter({ $0.value > 128 }).sorted(by: { $0.value\
    \ < $1.value }).first!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpct9_zrt6.swift:14:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for c in s.characters {\n        switch c {\n\
    \        case ' ':\n            result += c\n        case ' ':\n            result\
    \ += c\n        default:\n            result += String(Int(c) + Int(Int(c) / 2))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpyrxygrhk.swift:15:14: error: single-quoted string literal found,\
    \ use '\"'\n        case ' ':\n             ^~~\n             \" \"\n/tmp/tmpyrxygrhk.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ' ':\n   \
    \          ^~~\n             \" \"\n/tmp/tmpyrxygrhk.swift:13:16: error: 'characters'\
    \ is unavailable: Please use String directly\n    for c in s.characters {\n  \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpyrxygrhk.swift:16:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += c\n              \
    \        ^\n/tmp/tmpyrxygrhk.swift:18:23: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n            result += c\n  \
    \                    ^\n/tmp/tmpyrxygrhk.swift:20:43: error: no exact matches\
    \ in call to initializer \n            result += String(Int(c) + Int(Int(c) /\
    \ 2))\n                                          ^\n/tmp/tmpyrxygrhk.swift:20:43:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \            result += String(Int(c) + Int(Int(c) / 2))\n                    \
    \                      ^\n/tmp/tmpyrxygrhk.swift:20:43: note: candidate expects\
    \ value of type 'Float' for parameter #1 (got 'Character')\n            result\
    \ += String(Int(c) + Int(Int(c) / 2))\n                                      \
    \    ^\n/tmp/tmpyrxygrhk.swift:20:43: note: candidate expects value of type 'Double'\
    \ for parameter #1 (got 'Character')\n            result += String(Int(c) + Int(Int(c)\
    \ / 2))\n                                          ^\n/tmp/tmpyrxygrhk.swift:20:43:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \            result += String(Int(c) + Int(Int(c) / 2))\n                    \
    \                      ^\n/tmp/tmpyrxygrhk.swift:20:43: note: candidate expects\
    \ value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n         \
    \   result += String(Int(c) + Int(In"
  stdout: ''
  timestamp: 1660013985
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var newString = \"\"\n    var word = \"\"\n    var count = 0\n    for\
    \ c in s {\n        if c == \" \" {\n            if word != \"\" {\n         \
    \       newString += word\n                count = 0\n                word = \"\
    \"\n            }\n        } else {\n            count += 1\n            word\
    \ += c\n        }\n    }\n    if word != \"\" {\n        newString += word\n \
    \   }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpd87rizne.swift:24:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            word += c\n                \
    \    ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(\" \")\n    for word in words\
    \ {\n        var newWord = \"\"\n        for char in word {\n            if char\
    \ != \" \" {\n                newWord += char\n            }\n        }\n    \
    \    for char in newWord {\n            var index = newWord.index(char, offsetBy:\
    \ 1)\n            var newChar = newWord[index...].sorted()\n            newWord\
    \ = newWord.substring(to: index)\n            newWord += newChar\n        }\n\
    \        result += newWord + \" \" // append a space after each word\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpim4m87wr.swift:13:19: error: no exact matches in call to instance\
    \ method 'split'\n    var words = s.split(\" \")\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n/tmp/tmpim4m87wr.swift:22:39: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String.Index'\n       \
    \     var index = newWord.index(char, offsetBy: 1)\n                         \
    \             ^\n/tmp/tmpim4m87wr.swift:23:40: error: cannot convert value of\
    \ type '()' to expected argument type 'Range<String.Index>'\n            var newChar\
    \ = newWord[index...].sorted()\n                                       ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c == \" \" {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    if word != \"\" {\n        result\
    \ += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpg_lqs8fq.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpg_lqs8fq.swift:14:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var index = 0\n    for c\
    \ in s.characters {\n        if c == \" \" {\n            result += word\n   \
    \         word = \"\"\n        } else {\n            word += String(c)\n     \
    \   }\n    }\n    result += word\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp0he9v_jb.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp0he9v_jb.swift:14:9:\
    \ warning: initialization of variable 'index' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var index = 0\n    ~~~~^~~~~\n  \
    \  _\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c.isWhitespace {\n            result += word\n            word = \"\
    \"\n        } else {\n            word += String(c.value)\n        }\n    }\n\
    \    result += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpvruzx5xz.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpvruzx5xz.swift:19:30:\
    \ error: value of type 'Character' has no member 'value'\n            word +=\
    \ String(c.value)\n                           ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var isSpace = false\n   \
    \ for c in s.characters {\n        if isSpace {\n            result += word\n\
    \            word = \"\"\n            isSpace = false\n        }\n        if c\
    \ == \" \" {\n            isSpace = true\n        } else {\n            word +=\
    \ String(c)\n        }\n    }\n    result += word\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpvwio98zq.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    if word != \"\" {\n        result\
    \ += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpz1_2n1e1.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for char in s.characters {\n        if char ==\
    \ ' ' {\n            result += char\n        } else {\n            result += String(UnicodeScalar(char).value\
    \ - 32)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpv5fzm5tb.swift:14:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == ' ' {\n                   ^~~\n               \
    \    \" \"\n/tmp/tmpv5fzm5tb.swift:13:19: error: 'characters' is unavailable:\
    \ Please use String directly\n    for char in s.characters {\n               \
    \   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpv5fzm5tb.swift:15:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n/tmp/tmpv5fzm5tb.swift:17:30:\
    \ error: no exact matches in call to initializer \n            result += String(UnicodeScalar(char).value\
    \ - 32)\n                             ^\nSwift.Unicode.Scalar:7:23: note: candidate\
    \ expects value of type 'UInt8' for parameter #1 (got 'Character')\n    @inlinable\
    \ public init(_ v: UInt8)\n                      ^\nSwift.Unicode.Scalar:8:23:\
    \ note: candidate expects value of type 'Unicode.Scalar' for parameter #1 (got\
    \ 'Character')\n    @inlinable public init(_ v: Unicode.Scalar)\n            \
    \          ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for char in s.characters {\n        let ascii\
    \ = Int(char)\n        if ascii < 65 {\n            result += String(char)\n \
    \       } else if ascii < 91 {\n            result += String(char.uppercase)\n\
    \        } else {\n            result += String(char.lowercase)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpxbvr4kx7.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpxbvr4kx7.swift:14:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(char)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n\
    /tmp/tmpxbvr4kx7.swift:18:35: error: value of type 'Character' has no member 'uppercase'\n\
    \            result += String(char.uppercase)\n                             ~~~~\
    \ ^~~~~~~~~\n/tmp/tmpxbvr4kx7.swift:20:35: error: value of type 'Character' has\
    \ no member 'lowercase'\n            result += String(char.lowercase)\n      \
    \                       ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(separator: \" \")\n    for\
    \ word in words {\n        var newWord = \"\"\n        for char in word {\n  \
    \          newWord += String(UnicodeScalar(Int(char.value - 65)))\n        }\n\
    \        result += newWord\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpl441ux95.swift:17:31: error: value of optional type 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>') must be unwrapped to a value of type 'UnicodeScalar'\
    \ (aka 'Unicode.Scalar')\n            newWord += String(UnicodeScalar(Int(char.value\
    \ - 65)))\n                              ^\n/tmp/tmpl441ux95.swift:17:31: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \            newWord += String(UnicodeScalar(Int(char.value - 65)))\n        \
    \                      ^\n                                                   \
    \               ?? <#default value#>\n/tmp/tmpl441ux95.swift:17:31: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    newWord += String(UnicodeScalar(Int(char.value - 65)))\n                \
    \              ^\n                                                           \
    \      !\n/tmp/tmpl441ux95.swift:17:54: error: value of type 'Character' has no\
    \ member 'value'\n            newWord += String(UnicodeScalar(Int(char.value -\
    \ 65)))\n                                                ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(\" \").sorted(by: <)\n   \
    \ for word in words {\n        let newWord = String(word.characters.sorted())\n\
    \        result += newWord\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp24sishu3.swift:13:25: error: missing argument label 'separator:'\
    \ in call\n    var words = s.split(\" \").sorted(by: <)\n                    \
    \    ^\n                        separator: \n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(separator: \" \")\n    for\
    \ word in words {\n        let chars = word.characters\n        var sortedChars\
    \ = chars.sorted()\n        for char in sortedChars {\n            result += String(char)\n\
    \        }\n        result += \" \"\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpwz2rri5f.swift:15:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        let chars = word.characters\n              \
    \           ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: Substring { get set }\n           \
    \    ^\n/tmp/tmpwz2rri5f.swift:13:9: warning: variable 'words' was never mutated;\
    \ consider changing to 'let' constant\n    var words = s.split(separator: \" \"\
    )\n    ~~~ ^\n    let\n/tmp/tmpwz2rri5f.swift:16:13: warning: variable 'sortedChars'\
    \ was never mutated; consider changing to 'let' constant\n        var sortedChars\
    \ = chars.sorted()\n        ~~~ ^\n        let\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for c in s.characters {\n        if c != \" \"\
    \ {\n            result += String(c)\n        }\n    }\n    for c in s.characters\
    \ {\n        if c == \" \" {\n            result += String(c)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpm41kl5g0.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpm41kl5g0.swift:18:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if let _ = c {\n            word += String(UnicodeScalar(UInt32(c)))\n\
    \        } else {\n            result += word\n            word = \"\"\n     \
    \   }\n    }\n    result += word\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp3gtlhhc_.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp3gtlhhc_.swift:16:42:\
    \ error: no exact matches in call to initializer \n            word += String(UnicodeScalar(UInt32(c)))\n\
    \                                         ^\n/tmp/tmp3gtlhhc_.swift:16:42: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            word += String(UnicodeScalar(UInt32(c)))\n\
    \                                         ^\n/tmp/tmp3gtlhhc_.swift:16:42: note:\
    \ candidate expects value of type 'Float' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            word += String(UnicodeScalar(UInt32(c)))\n\
    \                                         ^\n/tmp/tmp3gtlhhc_.swift:16:42: note:\
    \ candidate expects value of type 'Double' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            word += String(UnicodeScalar(UInt32(c)))\n\
    \                                         ^\n/tmp/tmp3gtlhhc_.swift:16:42: note:\
    \ candidate expects value of type 'Float80' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            word += String(UnicodeScalar(UInt32(c)))\n\
    \                                         ^\n/tmp/tmp3gtlhhc_.swift:16:42: note:\
    \ candidate expects value of type 'Builtin.Int32' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            word += String(UnicodeScalar(UInt32(c)))\n\
    \                                         ^\n/tmp/tmp3gtlhhc_.swift:16:42: note:\
    \ candidate expects value of type 'Unicode.Scalar' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            word += String(UnicodeScalar(UInt32(c)))\n\
    \                                         ^\n/tmp/tmp3gtlhhc_.swift:16:28: error:\
    \ value of optional type 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c.isLetter {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n            result += c.asciiValue\n\
    \        } else if c.isSpace {\n            word += c.asciiValue\n        } else\
    \ {\n            word += c.asciiValue\n        }\n    }\n    if word != \"\" {\n\
    \        result += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpwxauo3og.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpwxauo3og.swift:20:25:\
    \ error: cannot convert value of type 'UInt8?' to expected argument type 'String'\n\
    \            result += c.asciiValue\n                        ^\n/tmp/tmpwxauo3og.swift:21:21:\
    \ error: value of type 'Character' has no member 'isSpace'\n        } else if\
    \ c.isSpace {\n                  ~ ^~~~~~~\n/tmp/tmpwxauo3og.swift:22:23: error:\
    \ cannot convert value of type 'UInt8?' to expected argument type 'String'\n \
    \           word += c.asciiValue\n                      ^\n/tmp/tmpwxauo3og.swift:24:23:\
    \ error: cannot convert value of type 'UInt8?' to expected argument type 'String'\n\
    \            word += c.asciiValue\n                      ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.split(\" \") {\n        let chars\
    \ = word.characters\n        let sortedChars = chars.sorted()\n        let newWord\
    \ = String(sortedChars)\n        result += newWord\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp_zt_b7af.swift:13:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.split(\" \") {\n        var newWord\
    \ = \"\"\n        for char in word {\n            newWord += String(Int(char.asciiValue)\
    \ + Int(Int(char.asciiValue) / 2))\n        }\n        result += newWord\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp9b5ambib.swift:13:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var isSpace = false\n   \
    \ for c in s.characters {\n        if isSpace {\n            result += word\n\
    \            word = \"\"\n            isSpace = false\n        }\n        if c\
    \ == \" \" {\n            isSpace = true\n        } else {\n            word +=\
    \ String(c)\n        }\n    }\n    result += word\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpvwio98zq.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var lastWord = \"\"\n    for char in s.characters\
    \ {\n        if char == ' ' {\n            if lastWord != \"\" {\n           \
    \     result += lastWord\n                lastWord = \"\"\n            }\n   \
    \     } else {\n            lastWord += String(char)\n        }\n    }\n    if\
    \ lastWord != \"\" {\n        result += lastWord\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpkk_uu_w2.swift:15:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == ' ' {\n                   ^~~\n               \
    \    \" \"\n/tmp/tmpkk_uu_w2.swift:14:19: error: 'characters' is unavailable:\
    \ Please use String directly\n    for char in s.characters {\n               \
    \   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var newString = \"\"\n    var word = \"\"\n    var i = 0\n    for c in\
    \ s.characters {\n        if c == \" \" {\n            if word != \"\" {\n   \
    \             newString += word\n                word = \"\"\n            }\n\
    \        } else {\n            word += String(c)\n        }\n    }\n    if word\
    \ != \"\" {\n        newString += word\n    }\n    return newString\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpylcvb4fs.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpylcvb4fs.swift:14:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    var j = 0\n    var k = 0\n    var\
    \ l = s.count\n    for i < l {\n        if s[i] == \" \" {\n            result\
    \ += \" \"\n            i += 1\n            continue\n        }\n        if i\
    \ == l {\n            result += s[i]\n            break\n        }\n        if\
    \ s[i] != \" \" {\n            result += s[i]\n            i += 1\n          \
    \  continue\n        }\n        if i == l {\n            result += s[i]\n    \
    \        break\n        }\n        if s[i] != \" \" {\n            result += s[i]\n\
    \            i += 1\n            continue\n        }\n        if i == l {\n  \
    \          result += s[i]\n            break\n        }\n        if s[i] != \"\
    \ \" {\n            result += s[i]\n            i += 1\n            continue\n\
    \        }\n        if i == l {\n            result += s[i]\n            break\n\
    \        }\n        if s[i] != \" \" {\n            result += s[i]\n         \
    \   i += 1\n            continue\n        }\n        if i == l {\n           \
    \ result += s[i]\n            break\n        }\n        if s[i] != \" \" {\n \
    \           result += s[i]\n            i += 1\n            continue\n       \
    \ }\n        if i == l {\n            result += s[i]\n            break\n    \
    \    }\n        if s[i] != \" \" {\n            result += s[i]\n            i\
    \ += 1\n            continue\n        }\n        if i == l {\n            result\
    \ += s[i]\n            break\n        }\n        if s[i] != \" \" {\n        \
    \    result += s[i]\n            i += 1\n            continue\n        }\n   \
    \     if i == l {\n            result += s[i]\n            break\n        }\n\
    \        if s[i] != \" \" {\n            result += s[i]\n            i += 1\n\
    \            continue\n        }\n        if i == l {\n            result += s[i]\n\
    \            break\n        }\n        if s[i] != \" \" {\n            result\
    \ += s[i]\n            i += 1\n            continue\n        }\n        if i ==\
    \ l {\n            result += s[i]\n            break\n        }\n        if s[i]\
    \ != \" \" {\n            result += s[i]\n            i += 1\n            continue\n\
    \        }\n        if i == l {\n            result += s[i]\n            break\n\
    \        }\n        if s[i] != \" \" {\n            result += s[i]\n         \
    \   i += 1\n            continue\n        }\n        if i == l {\n           \
    \ result += s[i]\n            break\n        }\n        if s[i] != \" \" {\n \
    \           result += s[i]\n            i += 1\n            continue\n       \
    \ }\n        if i == l {\n            result += s[i]\n            break\n    \
    \    }\n        if s[i] != \" \" {\n            result += s[i]\n            i\
    \ += 1\n            continue\n        }\n        if i == l {\n            result\
    \ += s[i]\n            break\n        }\n        if s[i] != \" \" {\n        \
    \    result += s[i]\n            i += 1\n            continue\n        }\n   \
    \     if i == l {\n            result += s[i]\n            break\n        }\n\
    \        if s[i] != \" \" {\n            result += s[i]\n            i += 1\n\
    \            continue\n        }\n        if i == l {\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpyguns_l5.swift:17:11: error: expected 'in' after for-each pattern\n\
    \    for i < l {\n          ^\n/tmp/tmpyguns_l5.swift:17:11: error: unary operator\
    \ cannot be separated from its operand\n    for i < l {\n          ^~\n      \
    \     \n/tmp/tmpyguns_l5.swift:180:116: error: expected '}' at end of brace statement\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")\n                                 \
    \                                                                            \
    \      ^\n/tmp/tmpyguns_l5.swift:17:15: note: to match this opening '{'\n    for\
    \ i < l {\n              ^\n/tmp/tmpyguns_l5.swift:180:116: error: expected '}'\
    \ at end of brace statement\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n        \
    \                                                                            \
    \                               ^\n/tmp/tmpyguns_l5.swift:11:40: note: to match\
    \ this opening '{'\nfunc anti_shuffle(s: String) -> String {\n               \
    \                        ^\n/tmp/tmpyguns_l5.swift:17:11: error: '<' is not a\
    \ prefix unary operator\n    for i < l {\n          ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word\n            word = \"\"\n\
    \        } else {\n            word += String(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpqkevarrq.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    var j = 0\n    var k = 0\n    var\
    \ l = s.count\n    for (i; i < l; i += 1) {\n        for (j; j < l; j += 1) {\n\
    \            if s[j].isUpper() {\n                k = j\n            }\n     \
    \       if s[j].isLower() {\n                k = j\n            }\n          \
    \  if s[j].isSpace() && s[k].isSpace() {\n                k = j\n            }\n\
    \            if s[j].isSpace() && s[k].isUpper() {\n                k = j\n  \
    \          }\n            if s[j].isSpace() && s[k].isLower() {\n            \
    \    k = j\n            }\n            if s[j].isUpper() && s[k].isUpper() {\n\
    \                k = j\n            }\n            if s[j].isLower() && s[k].isLower()\
    \ {\n                k = j\n            }\n            if s[j].isUpper() && s[k].isLower()\
    \ {\n                k = j\n            }\n            if s[j].isLower() && s[k].isUpper()\
    \ {\n                k = j\n            }\n            if s[j].isUpper() && s[k].isUpper()\
    \ {\n                k = j\n            }\n            if s[j].isLower() && s[k].isLower()\
    \ {\n                k = j\n            }\n            if s[j].isUpper() && s[k].isUpper()\
    \ {\n                k = j\n            }\n            if s[j].isLower() && s[k].isLower()\
    \ {\n                k = j\n            }\n            if s[j].isUpper() && s[k].isUpper()\
    \ {\n                k = j\n            }\n            if s[j].isLower() && s[k].isLower()\
    \ {\n                k = j\n            }\n            if s[j].isUpper() && s[k].isUpper()\
    \ {\n                k = j\n            }\n            if s[j].isLower() && s[k].isLower()\
    \ {\n                k = j\n            }\n            if s[j].isUpper() && s[k].isUpper()\
    \ {\n                k = j\n            }\n            if s[j].isLower() && s[k].isLower()\
    \ {\n                k = j\n            }\n            if s[j].isUpper() && s[k].isUpper()\
    \ {\n                k = j\n            }\n            if s[j].isLower() && s[k].isLower()\
    \ {\n                k = j\n            }\n            if s[j].isUpper() && s[k].isUpper()\
    \ {\n                k = j\n            }\n            if s[j].isLower() && s[k].isLower()\
    \ {\n                k = j\n            }\n            if s[j].isUpper() && s[k].isUpper()\
    \ {\n                k = j\n            }\n            if s[j].isLower() && s[k].isLower()\
    \ {\n                k = j\n            }\n            if s[j].isUpper() && s[k].isUpper()\
    \ {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5dqg4ch0.swift:17:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for (i; i < l; i += 1) {\n    ^   ~~~~~~~~~~~~~~~~~~\n/tmp/tmp5dqg4ch0.swift:18:9:\
    \ error: C-style for statement has been removed in Swift 3\n        for (j; j\
    \ < l; j += 1) {\n        ^   ~~~~~~~~~~~~~~~~~~\n/tmp/tmp5dqg4ch0.swift:117:116:\
    \ error: expected '}' at end of brace statement\nassert(anti_shuffle(s: \"Hi.\
    \ My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\")\n                                                              \
    \                                                     ^\n/tmp/tmp5dqg4ch0.swift:18:32:\
    \ note: to match this opening '{'\n        for (j; j < l; j += 1) {\n        \
    \                       ^\n/tmp/tmp5dqg4ch0.swift:117:116: error: expected '}'\
    \ at end of brace statement\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n        \
    \                                                                            \
    \                               ^\n/tmp/tmp5dqg4ch0.swift:17:28: note: to match\
    \ this opening '{'\n    for (i; i < l; i += 1) {\n                           ^\n\
    /tmp/tmp5dqg4ch0.swift:117:116: error: expected '}' at end of brace statement\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")\n                                 \
    \                                                                            \
    \      ^\n/tmp/tmp5dqg4ch0.swift:11:40: note: to match this opening '{'\nfunc\
    \ anti_shuffle(s: String) -> String {\n                                      \
    \ ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(separator: \" \")\n    for\
    \ word in words {\n        var newWord = \"\"\n        for char in word {\n  \
    \          if char.isUppercase {\n                newWord += char.lowercased()\n\
    \            } else {\n                newWord += char\n            }\n      \
    \  }\n        result += newWord\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpji73eqg0.swift:20:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n                newWord += char\n      \
    \                     ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s {\n        if\
    \ c.isWhitespace {\n            result += word\n            word = \"\"\n    \
    \    } else {\n            word += c\n        }\n    }\n    result += word\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp2b1z0ql9.swift:19:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            word += c\n                \
    \    ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for c in s.characters {\n        let ascii = Int(c)\n\
    \        if ascii < 97 || ascii > 122 {\n            result += String(c)\n   \
    \     } else {\n            result += String(Character(ascii) + 1)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpda8o803g.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpda8o803g.swift:14:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(c)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n\
    /tmp/tmpda8o803g.swift:18:30: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n            result += String(Character(ascii)\
    \ + 1)\n                             ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(\" \").sorted(by: <)\n   \
    \ for word in words {\n        result += String(word.unicodeScalars.filter({ $0.value\
    \ > 128 }).sorted(by: >))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp0os19fqf.swift:13:25: error: missing argument label 'separator:'\
    \ in call\n    var words = s.split(\" \").sorted(by: <)\n                    \
    \    ^\n                        separator: \n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for c in s.characters {\n        let index = Int(c)\
    \ - 97\n        if index >= 0 && index < 26 {\n            result += String(UnicodeScalar(index))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgsu2_8kk.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpgsu2_8kk.swift:14:21:\
    \ error: no exact matches in call to initializer \n        let index = Int(c)\
    \ - 97\n                    ^\nSwift.Int:7:12: note: candidate expects value of\
    \ type 'Float16' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'Character')\n    public init(_ source: Float)\n\
    \           ^\nSwift.Int:12:12: note: candidate expects value of type 'Double'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Double)\n    \
    \       ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float80)\n       \
    \    ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for char in s.characters {\n        let value\
    \ = char.asciiValue\n        if value > 96 {\n            result += String(UnicodeScalar(value\
    \ - 96))\n        } else {\n            result += String(UnicodeScalar(value))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpq79dtcp_.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpq79dtcp_.swift:15:12:\
    \ error: value of optional type 'UInt8?' must be unwrapped to a value of type\
    \ 'UInt8'\n        if value > 96 {\n           ^\n/tmp/tmpq79dtcp_.swift:15:12:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if value > 96 {\n           ^\n                 ?? <#default\
    \ value#>\n/tmp/tmpq79dtcp_.swift:15:12: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n        if value > 96 {\n  \
    \         ^\n                !\n/tmp/tmpq79dtcp_.swift:16:44: error: value of\
    \ optional type 'UInt8?' must be unwrapped to a value of type 'UInt8'\n      \
    \      result += String(UnicodeScalar(value - 96))\n                         \
    \                  ^\n/tmp/tmpq79dtcp_.swift:16:44: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            result\
    \ += String(UnicodeScalar(value - 96))\n                                     \
    \      ^\n                                           (     ?? <#default value#>)\n\
    /tmp/tmpq79dtcp_.swift:16:44: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            result += String(UnicodeScalar(value\
    \ - 96))\n                                           ^\n                     \
    \                           !\n/tmp/tmpq79dtcp_.swift:18:44: error: value of optional\
    \ type 'UInt8?' must be unwrapped to a value of type 'UInt8'\n            result\
    \ += String(UnicodeScalar(value))\n                                          \
    \ ^\n/tmp/tmpq79dtcp_.swift:18:44: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n            result += String(UnicodeScalar(value))\n\
    \                                           ^\n                              \
    \                   ?? <#default va"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    for c in s.characters {\n     \
    \   if i == 0 {\n            result = c + result\n        } else {\n         \
    \   if c.isUppercase {\n                result = c.lowercaseString + result\n\
    \            } else {\n                result = result + c.lowercaseString\n \
    \           }\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpd19e4mcc.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpd19e4mcc.swift:16:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = c + result\n                     ^\n/tmp/tmpd19e4mcc.swift:19:28:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \       result = c.lowercaseString + result\n                         ~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpd19e4mcc.swift:21:37: error: value of type 'Character' has no member 'lowercaseString'\n\
    \                result = result + c.lowercaseString\n                       \
    \           ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    for c in s.characters {\n     \
    \   if i == 0 {\n            result += c\n        } else {\n            result\
    \ += String(UnicodeScalar(Int(c)).value)\n        }\n        i += 1\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpdanqtseh.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpdanqtseh.swift:16:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpdanqtseh.swift:18:44:\
    \ error: no exact matches in call to initializer \n            result += String(UnicodeScalar(Int(c)).value)\n\
    \                                           ^\n/tmp/tmpdanqtseh.swift:18:44: note:\
    \ found candidate with type '(Float16) -> Int'\n            result += String(UnicodeScalar(Int(c)).value)\n\
    \                                           ^\n/tmp/tmpdanqtseh.swift:18:44: note:\
    \ found candidate with type '(Float) -> Int'\n            result += String(UnicodeScalar(Int(c)).value)\n\
    \                                           ^\n/tmp/tmpdanqtseh.swift:18:44: note:\
    \ found candidate with type '(Double) -> Int'\n            result += String(UnicodeScalar(Int(c)).value)\n\
    \                                           ^\n/tmp/tmpdanqtseh.swift:18:44: note:\
    \ found candidate with type '(Float80) -> Int'\n            result += String(UnicodeScalar(Int(c)).value)\n\
    \                                           ^\n/tmp/tmpdanqtseh.swift:18:44: note:\
    \ found candidate with type '(Builtin.Int64) -> Int'\n            result += String(UnicodeScalar(Int(c)).value)\n\
    \                                           ^\n/tmp/tmpdanqtseh.swift:18:44: note:\
    \ found candidate with type '(Builtin.Word) -> Int'\n            result += String(UnicodeScalar(Int(c)).value)\n\
    \                                           ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c == \" \" {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    if word != \"\" {\n        result\
    \ += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpg_lqs8fq.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpg_lqs8fq.swift:14:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for char in s.characters {\n        let ascii\
    \ = Int(char)\n        if ascii < 97 {\n            result += String(char)\n \
    \       } else if ascii < 123 {\n            result += String(char.unicodeScalars.first!)\n\
    \        } else {\n            result += String(char.unicodeScalars.last!)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpyddb9e6e.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpyddb9e6e.swift:14:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(char)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(separator: \" \")\n    for\
    \ word in words {\n        var newWord = \"\"\n        for char in word {\n  \
    \          let asciiValue = Int(char.unicodeScalars.first!.value)\n          \
    \  newWord = newWord + String(UnicodeScalar(asciiValue))\n        }\n        result\
    \ = result + newWord + \" \" + word\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp_59t7z10.swift:18:33: error: no exact matches in call to initializer\
    \ \n            newWord = newWord + String(UnicodeScalar(asciiValue))\n      \
    \                          ^\nSwift.String:3:23: note: found candidate with type\
    \ 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>')\n    @inlinable public init(_\
    \ scalar: Unicode.Scalar)\n                      ^\nSwift.String:4:23: note: found\
    \ candidate with type 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>')\n    @inlinable\
    \ public init<T>(_ value: T) where T : LosslessStringConvertible\n           \
    \           ^\nSwift.String:2:12: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(describing:)')\n    public init<Subject>(describing instance:\
    \ Subject)\n           ^\nSwift.String:6:12: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting\
    \ subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.split(\" \") {\n        var newWord\
    \ = \"\"\n        for char in word {\n            newWord += String(Int(char.asciiValue))\n\
    \        }\n        result += newWord\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpf5vv32c_.swift:13:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c == \" \" {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    if word != \"\" {\n        result\
    \ += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpg_lqs8fq.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpg_lqs8fq.swift:14:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    for c in s.characters {\n     \
    \   if i == 0 {\n            result += c\n        } else {\n            result\
    \ += String(c).swapcase()\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp01xj5wgq.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp01xj5wgq.swift:16:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmp01xj5wgq.swift:18:33:\
    \ error: value of type 'String' has no member 'swapcase'\n            result +=\
    \ String(c).swapcase()\n                      ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    for c in s.characters {\n     \
    \   if i == 0 {\n            result += c\n        } else {\n            result\
    \ += String(UnicodeScalar(UInt32(c))).uppercaseString\n        }\n        i +=\
    \ 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpod3_11gh.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpod3_11gh.swift:16:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpod3_11gh.swift:18:44:\
    \ error: no exact matches in call to initializer \n            result += String(UnicodeScalar(UInt32(c))).uppercaseString\n\
    \                                           ^\n/tmp/tmpod3_11gh.swift:18:44: note:\
    \ found candidate with type '(Float16) -> UInt32'\n            result += String(UnicodeScalar(UInt32(c))).uppercaseString\n\
    \                                           ^\n/tmp/tmpod3_11gh.swift:18:44: note:\
    \ found candidate with type '(Float) -> UInt32'\n            result += String(UnicodeScalar(UInt32(c))).uppercaseString\n\
    \                                           ^\n/tmp/tmpod3_11gh.swift:18:44: note:\
    \ found candidate with type '(Double) -> UInt32'\n            result += String(UnicodeScalar(UInt32(c))).uppercaseString\n\
    \                                           ^\n/tmp/tmpod3_11gh.swift:18:44: note:\
    \ found candidate with type '(Float80) -> UInt32'\n            result += String(UnicodeScalar(UInt32(c))).uppercaseString\n\
    \                                           ^\n/tmp/tmpod3_11gh.swift:18:44: note:\
    \ found candidate with type '(Builtin.Int32) -> UInt32'\n            result +=\
    \ String(UnicodeScalar(UInt32(c))).uppercaseString\n                         \
    \                  ^\n/tmp/tmpod3_11gh.swift:18:44: note: found candidate with\
    \ type '(Unicode.Scalar) -> UInt32'\n            result += String(UnicodeScalar(UInt32(c))).uppercaseString\n\
    \                                           ^\n/tmp/tmpod3_11gh.swift:18:30: error:\
    \ value of optional type 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>') must\
    \ be unwrapped to a value of type 'UnicodeScalar' (aka 'Unicode.Scalar')\n   \
    \         result += "
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var isSpace = false\n   \
    \ for c in s.characters {\n        if isSpace {\n            result += word\n\
    \            word = \"\"\n            isSpace = false\n        }\n        if c\
    \ == ' ' {\n            isSpace = true\n        } else {\n            word +=\
    \ String(c)\n        }\n    }\n    result += word\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpakihtpm6.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == ' ' {\n                ^~~\n                \" \"\n\
    /tmp/tmpakihtpm6.swift:15:16: error: 'characters' is unavailable: Please use String\
    \ directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c == \" \" {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    if word != \"\" {\n        result\
    \ += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpg_lqs8fq.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpg_lqs8fq.swift:14:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c == \" \" {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    if word != \"\" {\n        result\
    \ += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpg_lqs8fq.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpg_lqs8fq.swift:14:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for c in s.characters {\n        if c != \" \"\
    \ {\n            result += String(c)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpfogugoti.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    for c in s.characters {\n     \
    \   if i == 0 {\n            result += c\n        } else {\n            result\
    \ += String.fromCharCode(Int(c) + Int(result[i-1].unicodeScalars.value.integerValue))\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgvhrp1ax.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpgvhrp1ax.swift:16:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpgvhrp1ax.swift:18:43:\
    \ error: no exact matches in call to initializer \n            result += String.fromCharCode(Int(c)\
    \ + Int(result[i-1].unicodeScalars.value.integerValue))\n                    \
    \                      ^\n/tmp/tmpgvhrp1ax.swift:18:43: note: found candidate\
    \ with type '(Float16) -> Int'\n            result += String.fromCharCode(Int(c)\
    \ + Int(result[i-1].unicodeScalars.value.integerValue))\n                    \
    \                      ^\n/tmp/tmpgvhrp1ax.swift:18:43: note: found candidate\
    \ with type '(Float) -> Int'\n            result += String.fromCharCode(Int(c)\
    \ + Int(result[i-1].unicodeScalars.value.integerValue))\n                    \
    \                      ^\n/tmp/tmpgvhrp1ax.swift:18:43: note: found candidate\
    \ with type '(Double) -> Int'\n            result += String.fromCharCode(Int(c)\
    \ + Int(result[i-1].unicodeScalars.value.integerValue))\n                    \
    \                      ^\n/tmp/tmpgvhrp1ax.swift:18:43: note: found candidate\
    \ with type '(Float80) -> Int'\n            result += String.fromCharCode(Int(c)\
    \ + Int(result[i-1].unicodeScalars.value.integerValue))\n                    \
    \                      ^\n/tmp/tmpgvhrp1ax.swift:18:43: note: found candidate\
    \ with type '(Builtin.Int64) -> Int'\n            result += String.fromCharCode(Int(c)\
    \ + Int(result[i-1].unicodeScalars.value.integerValue))\n                    \
    \                      ^\n/tmp/tmpgvhrp1ax.swift:18:43: note: found candidate\
    \ with type '(Builtin.Word) -> Int'\n            result += String.fromCharCode(Int(c)\
    \ + Int(result[i-1].unicodeScalars.value.integerValue))\n                    \
    \                      ^\n/tmp/tmpgvh"
  stdout: ''
  timestamp: 1660013970
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == ' ' {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    if word != \"\" {\n        result\
    \ += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5htld9_w.swift:15:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == ' ' {\n                ^~~\n                \" \"\n\
    /tmp/tmp5htld9_w.swift:14:16: error: 'characters' is unavailable: Please use String\
    \ directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.split(\" \") {\n        result +=\
    \ String(word.unicodeScalars.filter({ $0.value > 128 }).sorted(by: { $0.value\
    \ < $1.value }).first!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5g81a0zw.swift:13:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    for c in s {\n        if i == 0\
    \ {\n            result = c\n        } else {\n            result += c\n     \
    \   }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpnd54j31r.swift:16:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = c\n                     ^\n/tmp/tmpnd54j31r.swift:18:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    for c in s {\n        if i == 0\
    \ {\n            result = c\n        } else {\n            if c.isUpper() {\n\
    \                result = result + c.lowercased()\n            } else {\n    \
    \            result = result + c\n            }\n        }\n        i += 1\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmppb3e82mn.swift:16:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = c\n                     ^\n/tmp/tmppb3e82mn.swift:18:18:\
    \ error: value of type 'Character' has no member 'isUpper'\n            if c.isUpper()\
    \ {\n               ~ ^~~~~~~\n/tmp/tmppb3e82mn.swift:21:35: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n             \
    \   result = result + c\n                                  ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(separator: \" \")\n    for\
    \ word in words {\n        let chars = word.characters\n        var charsSorted\
    \ = chars.sorted()\n        for char in charsSorted {\n            result += String(char)\n\
    \        }\n        result += \" \"\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpl3sqf0fg.swift:15:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        let chars = word.characters\n              \
    \           ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: Substring { get set }\n           \
    \    ^\n/tmp/tmpl3sqf0fg.swift:13:9: warning: variable 'words' was never mutated;\
    \ consider changing to 'let' constant\n    var words = s.split(separator: \" \"\
    )\n    ~~~ ^\n    let\n/tmp/tmpl3sqf0fg.swift:16:13: warning: variable 'charsSorted'\
    \ was never mutated; consider changing to 'let' constant\n        var charsSorted\
    \ = chars.sorted()\n        ~~~ ^\n        let\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(separator: \" \")\n    for\
    \ word in words {\n        var newWord = \"\"\n        for char in word {\n  \
    \          newWord = newWord + String(UnicodeScalar(Int(char.value)!))\n     \
    \   }\n        result = result + newWord + \" \"\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpyqyhjkgg.swift:17:40: error: value of optional type 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>') must be unwrapped to a value of type 'UnicodeScalar'\
    \ (aka 'Unicode.Scalar')\n            newWord = newWord + String(UnicodeScalar(Int(char.value)!))\n\
    \                                       ^\n/tmp/tmpyqyhjkgg.swift:17:40: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \            newWord = newWord + String(UnicodeScalar(Int(char.value)!))\n   \
    \                                    ^\n                                     \
    \                                  ?? <#default value#>\n/tmp/tmpyqyhjkgg.swift:17:40:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            newWord = newWord + String(UnicodeScalar(Int(char.value)!))\n\
    \                                       ^\n                                  \
    \                                    !\n/tmp/tmpyqyhjkgg.swift:17:63: error: value\
    \ of type 'Character' has no member 'value'\n            newWord = newWord + String(UnicodeScalar(Int(char.value)!))\n\
    \                                                         ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c.isLetter {\n            word += c\n        } else {\n          \
    \  result += word\n            result += c\n            word = \"\"\n        }\n\
    \    }\n    result += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp1i8jvrdg.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1i8jvrdg.swift:16:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            word += c\n                    ^\n/tmp/tmp1i8jvrdg.swift:19:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if i == 0 {\n            result += c\n        } else {\n        \
    \    word += c\n        }\n        i += 1\n    }\n    for c in word.characters\
    \ {\n        if c != \" \" {\n            result += c\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpa8vgqqz6.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpa8vgqqz6.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpa8vgqqz6.swift:19:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            word += c\n                    ^\n/tmp/tmpa8vgqqz6.swift:23:19: error:\
    \ 'characters' is unavailable: Please use String directly\n    for c in word.characters\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpa8vgqqz6.swift:25:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += c\n              \
    \        ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(\" \")\n    for word in words\
    \ {\n        var newWord = \"\"\n        for char in word {\n            newWord\
    \ += String(Int(char.asciiValue)-Int(Int(char.asciiValue)))\n        }\n     \
    \   result += newWord\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpfak1n3am.swift:13:19: error: no exact matches in call to instance\
    \ method 'split'\n    var words = s.split(\" \")\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c == ' ' {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    if word != \"\" {\n        result\
    \ += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz5mnnes.swift:16:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == ' ' {\n                ^~~\n                \" \"\n\
    /tmp/tmpjz5mnnes.swift:15:16: error: 'characters' is unavailable: Please use String\
    \ directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpjz5mnnes.swift:14:9: warning: initialization\
    \ of variable 'i' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var lastChar = \"\"\n   \
    \ for char in s.characters {\n        if char == \" \" {\n            if word\
    \ != \"\" {\n                result += word\n                word = \"\"\n   \
    \         }\n        } else {\n            word += String(char)\n        }\n \
    \   }\n    if word != \"\" {\n        result += word\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpld5f5dh5.swift:15:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpld5f5dh5.swift:14:9:\
    \ warning: initialization of variable 'lastChar' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var lastChar = \"\"\n    ~~~~^~~~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c == \" \" {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    if word != \"\" {\n        result\
    \ += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpg_lqs8fq.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpg_lqs8fq.swift:14:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var isSpace = false\n   \
    \ for c in s.characters {\n        if isSpace {\n            result += c\n   \
    \         isSpace = false\n        } else {\n            if c == \" \" {\n   \
    \             isSpace = true\n            } else {\n                word += c\n\
    \            }\n        }\n    }\n    for c in word.characters {\n        if c\
    \ != \" \" {\n            result += c\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp75epjpcs.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp75epjpcs.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmp75epjpcs.swift:23:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                word += c\n                        ^\n/tmp/tmp75epjpcs.swift:27:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp75epjpcs.swift:29:23: error: cannot convert value of\
    \ type 'Character' to expected argument type 'String'\n            result += c\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var prev = \"\"\n    for c in s {\n        if\
    \ c == \" \" {\n            if prev != \"\" {\n                result += prev\n\
    \            }\n            prev = \"\"\n        } else {\n            prev +=\
    \ c\n        }\n    }\n    if prev != \"\" {\n        result += prev\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmppevql84l.swift:21:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            prev += c\n                \
    \    ^\n"
  stdout: ''
  timestamp: 1660013970
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for c in s.characters {\n        let value = Int(c).asciiValue\
    \ - Int(\" \".asciiValue)\n        if value < 0 {\n            result += String(\"\
    \ \")\n        } else {\n            result += String(c)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpmo69qva4.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmo69qva4.swift:14:21:\
    \ error: no exact matches in call to initializer \n        let value = Int(c).asciiValue\
    \ - Int(\" \".asciiValue)\n                    ^\n/tmp/tmpmo69qva4.swift:14:21:\
    \ note: found candidate with type '(Float16) -> Int'\n        let value = Int(c).asciiValue\
    \ - Int(\" \".asciiValue)\n                    ^\n/tmp/tmpmo69qva4.swift:14:21:\
    \ note: found candidate with type '(Float) -> Int'\n        let value = Int(c).asciiValue\
    \ - Int(\" \".asciiValue)\n                    ^\n/tmp/tmpmo69qva4.swift:14:21:\
    \ note: found candidate with type '(Double) -> Int'\n        let value = Int(c).asciiValue\
    \ - Int(\" \".asciiValue)\n                    ^\n/tmp/tmpmo69qva4.swift:14:21:\
    \ note: found candidate with type '(Float80) -> Int'\n        let value = Int(c).asciiValue\
    \ - Int(\" \".asciiValue)\n                    ^\n/tmp/tmpmo69qva4.swift:14:21:\
    \ note: found candidate with type '(Builtin.Int64) -> Int'\n        let value\
    \ = Int(c).asciiValue - Int(\" \".asciiValue)\n                    ^\n/tmp/tmpmo69qva4.swift:14:21:\
    \ note: found candidate with type '(Builtin.Word) -> Int'\n        let value =\
    \ Int(c).asciiValue - Int(\" \".asciiValue)\n                    ^\n/tmp/tmpmo69qva4.swift:14:21:\
    \ note: found candidate with type '(String) -> Int?'\n        let value = Int(c).asciiValue\
    \ - Int(\" \".asciiValue)\n                    ^\n/tmp/tmpmo69qva4.swift:14:49:\
    \ error: value of type 'String' has no member 'asciiValue'\n        let value\
    \ = Int(c).asciiValue - Int(\" \".asciiValue)\n                              \
    \              ~~~ ^~~~~~~~~~\n/tmp/tmpmo69qva4.swift:14:28: error: reference\
    \ to member 'asciiValue' cannot be resolved without a contextual type\n      \
    \  let value = Int(c).asciiValue - Int(\" \".asciiValue)\n                   \
    \        ^\n"
  stdout: ''
  timestamp: 1660013970
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var newString = \"\"\n    var word = \"\"\n    var i = 0\n    for c in\
    \ s.characters {\n        if c == \" \" {\n            if word != \"\" {\n   \
    \             newString += word\n                word = \"\"\n            }\n\
    \        } else {\n            word += String(c)\n        }\n    }\n    if word\
    \ != \"\" {\n        newString += word\n    }\n    return newString\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpylcvb4fs.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpylcvb4fs.swift:14:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var lastWord = \"\"\n    var lastChar = \"\"\n\
    \    var lastAsciiValue = 0\n    for c in s {\n        if c == \" \" {\n     \
    \       if lastWord != \"\" {\n                result += lastWord\n          \
    \      lastWord = \"\"\n            }\n        } else {\n            let value\
    \ = Int(c)\n            if lastAsciiValue < value {\n                lastAsciiValue\
    \ = value\n                lastWord = \"\"\n            } else {\n           \
    \     lastAsciiValue = value\n                lastWord += String(lastChar)\n \
    \               lastChar = \"\"\n            }\n        }\n        lastChar +=\
    \ String(c)\n    }\n    if lastWord != \"\" {\n        result += lastWord\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpj1bmluw_.swift:23:25: error: no exact matches in call to initializer\
    \ \n            let value = Int(c)\n                        ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23: note: candidate\
    \ expects value of type 'String' for parameter #1 (got 'Character')\n    @inlinable\
    \ public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660013970
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c == \" \" {\n            result += word\n            word = \"\
    \"\n        } else {\n            word += String(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpke2ukus9.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpke2ukus9.swift:14:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var lastChar = \"\"\n   \
    \ var isSpace = false\n    for c in s.characters {\n        if isSpace {\n   \
    \         result += c\n            lastChar = c\n            isSpace = false\n\
    \            continue\n        }\n        if c == \" \" {\n            isSpace\
    \ = true\n            continue\n        }\n        if lastChar == \" \" {\n  \
    \          result += c\n            lastChar = c\n            continue\n     \
    \   }\n        if lastChar == \" \" {\n            result += c\n            lastChar\
    \ = c\n            continue\n        }\n        if lastChar == \" \" {\n     \
    \       result += c\n            lastChar = c\n            continue\n        }\n\
    \        if lastChar == \" \" {\n            result += c\n            lastChar\
    \ = c\n            continue\n        }\n        if lastChar == \" \" {\n     \
    \       result += c\n            lastChar = c\n            continue\n        }\n\
    \        if lastChar == \" \" {\n            result += c\n            lastChar\
    \ = c\n            continue\n        }\n        if lastChar == \" \" {\n     \
    \       result += c\n            lastChar = c\n            continue\n        }\n\
    \        if lastChar == \" \" {\n            result += c\n            lastChar\
    \ = c\n            continue\n        }\n        if lastChar == \" \" {\n     \
    \       result += c\n            lastChar = c\n            continue\n        }\n\
    \        if lastChar == \" \" {\n            result += c\n            lastChar\
    \ = c\n            continue\n        }\n        if lastChar == \" \" {\n     \
    \       result += c\n            lastChar = c\n            continue\n        }\n\
    \        if lastChar == \" \" {\n            result += c\n            lastChar\
    \ = c\n            continue\n        }\n        if lastChar == \" \" {\n     \
    \       result += c\n            lastChar = c\n            continue\n        }\n\
    \        if lastChar == \" \" {\n            result += c\n            lastChar\
    \ = c\n            continue\n        }\n        if lastChar == \" \" {\n     \
    \       result += c\n            lastChar = c\n            continue\n        }\n\
    \        if lastChar == \" \" {\n            result += c\n            lastChar\
    \ = c\n            continue\n        }\n        if lastChar == \" \" {\n     \
    \       result += c\n            lastChar = c\n            continue\n        }\n\
    \        if lastChar == \" \" {\n            result += c\n            lastChar\
    \ = c\n            continue\n        }\n        if lastChar == \" \" {\n     \
    \       result += c\n            lastChar = c\n            continue\n        }\n\
    \        if lastChar == \" \" {\n            result += c\n            lastChar\
    \ = c\n            continue\n        }\n        if lastChar == \" \" {\n     \
    \       result += c\n            lastChar = c\n            continue\n        }\n\
    \        if lastChar == \" \" {\n            result += c\n            lastChar\
    \ = c\n            continue\n        }\n        if lastChar == \" \" {\n     \
    \       result += \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpsaaq62uu.swift:139:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpsaaq62uu.swift:160:116: error: expected '}' at end of brace statement\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")\n                                 \
    \                                                                            \
    \      ^\n/tmp/tmpsaaq62uu.swift:16:27: note: to match this opening '{'\n    for\
    \ c in s.characters {\n                          ^\n/tmp/tmpsaaq62uu.swift:160:116:\
    \ error: expected '}' at end of brace statement\nassert(anti_shuffle(s: \"Hi.\
    \ My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\")\n                                                              \
    \                                                     ^\n/tmp/tmpsaaq62uu.swift:11:40:\
    \ note: to match this opening '{'\nfunc anti_shuffle(s: String) -> String {\n\
    \                                       ^\n/tmp/tmpsaaq62uu.swift:16:16: error:\
    \ 'characters' is unavailable: Please use String directly\n    for c in s.characters\
    \ {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpsaaq62uu.swift:18:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += c\n              \
    \        ^\n/tmp/tmpsaaq62uu.swift:19:24: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            lastChar = c\n                       ^\n/tmp/tmpsaaq62uu.swift:28:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpsaaq62uu.swift:29:24:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  lastChar = c\n                       ^\n/tmp/tmpsaaq62uu.swift:33:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpsaaq62uu.swift:34:24:\
    \ error: canno"
  stdout: ''
  timestamp: 1660013970
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    for c in s.characters {\n     \
    \   if c == \" \" {\n            result += c\n        } else {\n            result\
    \ += String(UnicodeScalar(Int(c)))\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmprsiphll8.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmprsiphll8.swift:16:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmprsiphll8.swift:18:44:\
    \ error: no exact matches in call to initializer \n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmprsiphll8.swift:18:44: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmprsiphll8.swift:18:44: note:\
    \ candidate expects value of type 'Float' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmprsiphll8.swift:18:44: note:\
    \ candidate expects value of type 'Double' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmprsiphll8.swift:18:44: note:\
    \ candidate expects value of type 'Float80' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmprsiphll8.swift:18:44: note:\
    \ candidate expects value of type 'Builtin.Int64' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmprsiphll8.swift:18:44: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeSc"
  stdout: ''
  timestamp: 1660013970
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c.isLetter {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n            result += String(c.value)\n\
    \        } else {\n            word += String(c.value)\n        }\n    }\n   \
    \ if word != \"\" {\n        result += word\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpnmnbcn_s.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpnmnbcn_s.swift:21:32:\
    \ error: value of type 'Character' has no member 'value'\n            result +=\
    \ String(c.value)\n                             ~ ^~~~~\n/tmp/tmpnmnbcn_s.swift:23:30:\
    \ error: value of type 'Character' has no member 'value'\n            word +=\
    \ String(c.value)\n                           ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013970
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var prev = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            if prev != \"\" {\n                result\
    \ += prev\n                prev = \"\"\n            }\n        } else {\n    \
    \        prev += String(c)\n        }\n    }\n    if prev != \"\" {\n        result\
    \ += prev\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp_unjr_s0.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if !c.isWhitespace {\n            word += c\n        } else {\n     \
    \       result += word\n            word = \"\"\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpzxw59qlz.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpzxw59qlz.swift:16:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            word += c\n                    ^\n"
  stdout: ''
  timestamp: 1660013970
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    for c in s.characters {\n     \
    \   if i == 0 {\n            result += String(c)\n        } else {\n         \
    \   if c != \" \" {\n                result += String(c)\n            }\n    \
    \    }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpkequqw6y.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    for c in s.characters {\n     \
    \   if i == 0 {\n            result += c\n        } else {\n            result\
    \ += String(c).swapcase()\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp01xj5wgq.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp01xj5wgq.swift:16:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmp01xj5wgq.swift:18:33:\
    \ error: value of type 'String' has no member 'swapcase'\n            result +=\
    \ String(c).swapcase()\n                      ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == ' ' {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n        } else {\n    \
    \        word += string(c)\n        }\n    }\n    if word != \"\" {\n        result\
    \ += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpzcegh870.swift:15:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == ' ' {\n                ^~~\n                \" \"\n\
    /tmp/tmpzcegh870.swift:14:16: error: 'characters' is unavailable: Please use String\
    \ directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpzcegh870.swift:21:21: error: cannot find\
    \ 'string' in scope\n            word += string(c)\n                    ^~~~~~\n"
  stdout: ''
  timestamp: 1660013970
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    if word != \"\" {\n        result\
    \ += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpz1_2n1e1.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(\" \")\n    for word in words\
    \ {\n        var newWord = \"\"\n        for char in word {\n            newWord\
    \ += String(Int(char.asciiValue))\n        }\n        result += newWord\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp992tipng.swift:13:19: error: no exact matches in call to instance\
    \ method 'split'\n    var words = s.split(\" \")\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word\n            word = \"\"\n\
    \        } else {\n            word += String(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpqkevarrq.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for char in s.characters {\n        let ascii\
    \ = Int(char)\n        let newChar = String(UnicodeScalar(ascii).value)\n    \
    \    result += newChar\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpcmj35m15.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpcmj35m15.swift:14:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(char)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660013970
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var isSpace = false\n   \
    \ for c in s.characters {\n        if c == \" \" {\n            isSpace = true\n\
    \            result += c\n            continue\n        }\n        if isSpace\
    \ {\n            result += c\n            isSpace = false\n            continue\n\
    \        }\n        word += c\n    }\n    word = word\n        .lowercased()\n\
    \        .characters\n        .sorted()\n        .reduce(\"\") { $0 + String($1)\
    \ }\n    result += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmphwwswh8w.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmphwwswh8w.swift:18:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmphwwswh8w.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmphwwswh8w.swift:26:17:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        word += c\n                ^\n/tmp/tmphwwswh8w.swift:30:10: error: 'characters'\
    \ is unavailable: Please use String directly\n        .characters\n         ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013970
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for char in s.characters {\n        let asciiValue\
    \ = Int(char)\n        if asciiValue > 96 {\n            result += String(UnicodeScalar(asciiValue\
    \ - 96))\n        } else {\n            result += String(UnicodeScalar(asciiValue\
    \ + 96))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmprf5l_bem.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmprf5l_bem.swift:14:26:\
    \ error: no exact matches in call to initializer \n        let asciiValue = Int(char)\n\
    \                         ^\nSwift.Int:7:12: note: candidate expects value of\
    \ type 'Float16' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'Character')\n    public init(_ source: Float)\n\
    \           ^\nSwift.Int:12:12: note: candidate expects value of type 'Double'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Double)\n    \
    \       ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float80)\n       \
    \    ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\nSwift.FixedWidthInteger:3:23: note: candidate expects value of type\
    \ 'String' for parameter #1 (got 'Character')\n    @inlinable public init?(_ description:\
    \ String)\n                      ^\n"
  stdout: ''
  timestamp: 1660013970
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s {\n        switch\
    \ c {\n        case \" \":\n            result += word\n            word = \"\"\
    \n        case \" \":\n            word += c\n        default:\n            word\
    \ += c\n        }\n    }\n    result += word\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp4xaq99wb.swift:20:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            word += c\n                \
    \    ^\n/tmp/tmp4xaq99wb.swift:22:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            word += c\n                \
    \    ^\n/tmp/tmp4xaq99wb.swift:19:14: warning: literal value is already handled\
    \ by previous pattern; consider removing it\n        case \" \":\n           \
    \  ^~~\n/tmp/tmp4xaq99wb.swift:16:14: note: first occurrence of identical literal\
    \ pattern is here\n        case \" \":\n             ^~~\n"
  stdout: ''
  timestamp: 1660013970
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    for c in s.characters {\n     \
    \   if i == 0 {\n            result += c\n        } else {\n            result\
    \ += String(UnicodeScalar(UInt32(c))).uppercaseString\n        }\n        i +=\
    \ 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpod3_11gh.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpod3_11gh.swift:16:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpod3_11gh.swift:18:44:\
    \ error: no exact matches in call to initializer \n            result += String(UnicodeScalar(UInt32(c))).uppercaseString\n\
    \                                           ^\n/tmp/tmpod3_11gh.swift:18:44: note:\
    \ found candidate with type '(Float16) -> UInt32'\n            result += String(UnicodeScalar(UInt32(c))).uppercaseString\n\
    \                                           ^\n/tmp/tmpod3_11gh.swift:18:44: note:\
    \ found candidate with type '(Float) -> UInt32'\n            result += String(UnicodeScalar(UInt32(c))).uppercaseString\n\
    \                                           ^\n/tmp/tmpod3_11gh.swift:18:44: note:\
    \ found candidate with type '(Double) -> UInt32'\n            result += String(UnicodeScalar(UInt32(c))).uppercaseString\n\
    \                                           ^\n/tmp/tmpod3_11gh.swift:18:44: note:\
    \ found candidate with type '(Float80) -> UInt32'\n            result += String(UnicodeScalar(UInt32(c))).uppercaseString\n\
    \                                           ^\n/tmp/tmpod3_11gh.swift:18:44: note:\
    \ found candidate with type '(Builtin.Int32) -> UInt32'\n            result +=\
    \ String(UnicodeScalar(UInt32(c))).uppercaseString\n                         \
    \                  ^\n/tmp/tmpod3_11gh.swift:18:44: note: found candidate with\
    \ type '(Unicode.Scalar) -> UInt32'\n            result += String(UnicodeScalar(UInt32(c))).uppercaseString\n\
    \                                           ^\n/tmp/tmpod3_11gh.swift:18:30: error:\
    \ value of optional type 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>') must\
    \ be unwrapped to a value of type 'UnicodeScalar' (aka 'Unicode.Scalar')\n   \
    \         result += "
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(\" \")\n    for word in words\
    \ {\n        let chars = word.characters\n        var sortedChars = chars.sorted()\n\
    \        for char in sortedChars {\n            result += String(char)\n     \
    \   }\n        result += \" \"\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpwbwtmp2h.swift:13:19: error: no exact matches in call to instance\
    \ method 'split'\n    var words = s.split(\" \")\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013970
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s\
    \ {\n        if c.isWhitespace {\n            result += c\n            continue\n\
    \        }\n        if i == 0 {\n            result += c\n            continue\n\
    \        }\n        if c.isUppercase {\n            result += c.lowercase\n  \
    \          continue\n        }\n        if c.isLowercase {\n            result\
    \ += c.uppercase\n            continue\n        }\n        if c.isDigit() {\n\
    \            result += c.lowercase\n            continue\n        }\n        if\
    \ c.isAlpha() {\n            result += c.lowercase\n            continue\n   \
    \     }\n        if c.isAlphaNumeric() {\n            result += c.lowercase\n\
    \            continue\n        }\n        if c.isPunctChar() {\n            result\
    \ += c.lowercase\n            continue\n        }\n        word += c\n    }\n\
    \    for i = 0; i < word.count; i++ {\n        if i == 0 {\n            result\
    \ += word\n            continue\n        }\n        if word[i].isUppercase {\n\
    \            result += word[i].lowercase\n            continue\n        }\n  \
    \      if word[i].isLowercase {\n            result += word[i].uppercase\n   \
    \         continue\n        }\n        if word[i].isDigit() {\n            result\
    \ += word[i].lowercase\n            continue\n        }\n        if word[i].isAlpha()\
    \ {\n            result += word[i].lowercase\n            continue\n        }\n\
    \        if word[i].isAlphaNumeric() {\n            result += word[i].lowercase\n\
    \            continue\n        }\n        if word[i].isPunctChar() {\n       \
    \     result += word[i].lowercase\n            continue\n        }\n        result\
    \ += word[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmprbrj7wzh.swift:50:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 0; i < word.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmprbrj7wzh.swift:17:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += c\n              \
    \        ^\n/tmp/tmprbrj7wzh.swift:21:23: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n            result += c\n  \
    \                    ^\n/tmp/tmprbrj7wzh.swift:25:25: error: value of type 'Character'\
    \ has no member 'lowercase'\n            result += c.lowercase\n             \
    \         ~ ^~~~~~~~~\n/tmp/tmprbrj7wzh.swift:29:25: error: value of type 'Character'\
    \ has no member 'uppercase'\n            result += c.uppercase\n             \
    \         ~ ^~~~~~~~~\n/tmp/tmprbrj7wzh.swift:32:14: error: value of type 'Character'\
    \ has no member 'isDigit'\n        if c.isDigit() {\n           ~ ^~~~~~~\n/tmp/tmprbrj7wzh.swift:33:25:\
    \ error: value of type 'Character' has no member 'lowercase'\n            result\
    \ += c.lowercase\n                      ~ ^~~~~~~~~\n/tmp/tmprbrj7wzh.swift:36:14:\
    \ error: value of type 'Character' has no member 'isAlpha'\n        if c.isAlpha()\
    \ {\n           ~ ^~~~~~~\n/tmp/tmprbrj7wzh.swift:37:25: error: value of type\
    \ 'Character' has no member 'lowercase'\n            result += c.lowercase\n \
    \                     ~ ^~~~~~~~~\n/tmp/tmprbrj7wzh.swift:40:14: error: value\
    \ of type 'Character' has no member 'isAlphaNumeric'\n        if c.isAlphaNumeric()\
    \ {\n           ~ ^~~~~~~~~~~~~~\n/tmp/tmprbrj7wzh.swift:41:25: error: value of\
    \ type 'Character' has no member 'lowercase'\n            result += c.lowercase\n\
    \                      ~ ^~~~~~~~~\n/tmp/tmprbrj7wzh.swift:44:14: error: value\
    \ of type 'Character' has no member 'isPunctChar'\n        if c.isPunctChar()\
    \ {\n           ~ ^~~~~~~~~~~\n/tmp/tmprbrj7wzh.swift:45:25: error: value of type\
    \ 'Character' has no member 'lowercase'\n            result += c.lowercase\n \
    \                     ~ ^~~~~~~~~\n/tmp/tmprbrj7wzh.swift:48:17: error: cannot\
    \ convert value of "
  stdout: ''
  timestamp: 1660013970
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c == \" \" {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    if word != \"\" {\n        result\
    \ += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpg_lqs8fq.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpg_lqs8fq.swift:14:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c == \" \" {\n            if word != \"\" {\n                result\
    \ += word\n                word = \"\"\n            }\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    if word != \"\" {\n        result\
    \ += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpg_lqs8fq.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpg_lqs8fq.swift:14:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var i = 0\n    var j = 0\n    var k = 0\n    for\
    \ i < s.count {\n        if s[i] == \" \" {\n            result += \" \"\n   \
    \         i += 1\n            continue\n        }\n        if i == 0 {\n     \
    \       result += s[i]\n            i += 1\n            continue\n        }\n\
    \        if s[i-1] == \" \" {\n            result += s[i]\n            i += 1\n\
    \            continue\n        }\n        if s[i-1] == \" \" && s[i] != \" \"\
    \ {\n            result += s[i]\n            i += 1\n            continue\n  \
    \      }\n        if s[i-1] == \" \" && s[i] == \" \" {\n            result +=\
    \ \" \"\n            i += 1\n            continue\n        }\n        if s[i-1]\
    \ == \" \" && s[i] != \" \" {\n            result += s[i]\n            i += 1\n\
    \            continue\n        }\n        if s[i-1] != \" \" && s[i] != \" \"\
    \ {\n            result += s[i]\n            i += 1\n            continue\n  \
    \      }\n        if s[i-1] != \" \" && s[i] == \" \" {\n            result +=\
    \ \" \"\n            i += 1\n            continue\n        }\n        if s[i-1]\
    \ != \" \" && s[i] != \" \" {\n            result += s[i]\n            i += 1\n\
    \            continue\n        }\n        if s[i-1] != \" \" && s[i] != \" \"\
    \ {\n            result += s[i]\n            i += 1\n            continue\n  \
    \      }\n        if s[i-1] != \" \" && s[i] == \" \" {\n            result +=\
    \ \" \"\n            i += 1\n            continue\n        }\n        if s[i-1]\
    \ != \" \" && s[i] != \" \" {\n            result += s[i]\n            i += 1\n\
    \            continue\n        }\n        if s[i-1] != \" \" && s[i] == \" \"\
    \ {\n            result += \" \"\n            i += 1\n            continue\n \
    \       }\n        if s[i-1] != \" \" && s[i] != \" \" {\n            result +=\
    \ s[i]\n            i += 1\n            continue\n        }\n        if s[i-1]\
    \ != \" \" && s[i] == \" \" {\n            result += \" \"\n            i += 1\n\
    \            continue\n        }\n        if s[i-1] != \" \" && s[i] != \" \"\
    \ {\n            result += s[i]\n            i += 1\n            continue\n  \
    \      }\n        if s[i-1] != \" \" && s[i] == \" \" {\n            result +=\
    \ \" \"\n            i += 1\n            continue\n        }\n        if s[i-1]\
    \ != \" \" && s[i] != \" \" {\n            result += s[i]\n            i += 1\n\
    \            continue\n        }\n        if s[i-1] != \" \" && s[i] == \" \"\
    \ {\n            result += \" \"\n            i += 1\n            continue\n \
    \       }\n        if s[i-1] != \" \" && s[i] != \" \" {\n            result +=\
    \ s[i]\n            i += 1\n            continue\n        }\n        if s[i-1]\
    \ != \" \" && s[i] == \" \" {\n            result += \" \"\n            i += 1\n\
    \            continue\n        }\n        if s[i-1] != \" \" && s[i] != \" \"\
    \ {\n            result += s[i]\n            i += 1\n            continue\n  \
    \      }\n        if s[i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpka_nvi2p.swift:16:11: error: expected 'in' after for-each pattern\n\
    \    for i < s.count {\n          ^\n/tmp/tmpka_nvi2p.swift:16:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < s.count {\n     \
    \     ^~\n           \n/tmp/tmpka_nvi2p.swift:128:1: error: expected ']' in expression\
    \ list\n}\n^\n/tmp/tmpka_nvi2p.swift:127:13: note: to match this opening '['\n\
    \        if s[i\n            ^\n/tmp/tmpka_nvi2p.swift:149:116: error: expected\
    \ '}' at end of brace statement\nassert(anti_shuffle(s: \"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n \
    \                                                                            \
    \                                      ^\n/tmp/tmpka_nvi2p.swift:11:40: note:\
    \ to match this opening '{'\nfunc anti_shuffle(s: String) -> String {\n      \
    \                                 ^\n/tmp/tmpka_nvi2p.swift:16:11: error: '<'\
    \ is not a prefix unary operator\n    for i < s.count {\n          ^\n/tmp/tmpka_nvi2p.swift:131:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013970
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(separator: \" \")\n    for\
    \ word in words {\n        var newWord = \"\"\n        for char in word {\n  \
    \          newWord = newWord + String(UnicodeScalar(Int(char.value)!))\n     \
    \   }\n        result = result + newWord\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpc0gn0bry.swift:17:40: error: value of optional type 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>') must be unwrapped to a value of type 'UnicodeScalar'\
    \ (aka 'Unicode.Scalar')\n            newWord = newWord + String(UnicodeScalar(Int(char.value)!))\n\
    \                                       ^\n/tmp/tmpc0gn0bry.swift:17:40: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \            newWord = newWord + String(UnicodeScalar(Int(char.value)!))\n   \
    \                                    ^\n                                     \
    \                                  ?? <#default value#>\n/tmp/tmpc0gn0bry.swift:17:40:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            newWord = newWord + String(UnicodeScalar(Int(char.value)!))\n\
    \                                       ^\n                                  \
    \                                    !\n/tmp/tmpc0gn0bry.swift:17:63: error: value\
    \ of type 'Character' has no member 'value'\n            newWord = newWord + String(UnicodeScalar(Int(char.value)!))\n\
    \                                                         ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(\" \")\n    for word in words\
    \ {\n        var newWord = \"\"\n        for char in word {\n            newWord\
    \ = newWord + String(char.asciiValue)\n        }\n        result = result + newWord\
    \ + \" \" + word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp_8nwmugr.swift:13:19: error: no exact matches in call to instance\
    \ method 'split'\n    var words = s.split(\" \")\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013970
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for c in s.characters {\n        if c != \" \"\
    \ {\n            result += String(c)\n        } else {\n            result +=\
    \ \" \"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5dfc1324.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013970
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s.characters\
    \ {\n        if char == ' ' {\n            result += word\n            word =\
    \ \"\"\n        } else {\n            word += String(char)\n        }\n    }\n\
    \    result += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmptwaf5r3i.swift:15:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == ' ' {\n                   ^~~\n               \
    \    \" \"\n/tmp/tmptwaf5r3i.swift:14:19: error: 'characters' is unavailable:\
    \ Please use String directly\n    for char in s.characters {\n               \
    \   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013970
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var newString = \"\"\n    var word = \"\"\n    var character = 0\n  \
    \  for character in s.characters {\n        word = word + String(character)\n\
    \    }\n    for character in word.characters {\n        newString = newString\
    \ + String(character)\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpmdbocvvu.swift:15:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in s.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpmdbocvvu.swift:18:27:\
    \ error: 'characters' is unavailable: Please use String directly\n    for character\
    \ in word.characters {\n                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpmdbocvvu.swift:14:9: warning: initialization\
    \ of variable 'character' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var character = 0\n    ~~~~^~~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1660013970
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.split(separator: \" \")\n    for\
    \ word in words {\n        let chars = word.characters\n        var sortedChars\
    \ = chars.sorted()\n        for char in sortedChars {\n            result += String(char)\n\
    \        }\n        result += \" \"\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpwz2rri5f.swift:15:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        let chars = word.characters\n              \
    \           ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: Substring { get set }\n           \
    \    ^\n/tmp/tmpwz2rri5f.swift:13:9: warning: variable 'words' was never mutated;\
    \ consider changing to 'let' constant\n    var words = s.split(separator: \" \"\
    )\n    ~~~ ^\n    let\n/tmp/tmpwz2rri5f.swift:16:13: warning: variable 'sortedChars'\
    \ was never mutated; consider changing to 'let' constant\n        var sortedChars\
    \ = chars.sorted()\n        ~~~ ^\n        let\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c.isLetter {\n            word += c.asciiValue\n        } else {\n\
    \            result += word\n            word = \"\"\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp0e1lytf4.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp0e1lytf4.swift:16:23:\
    \ error: cannot convert value of type 'UInt8?' to expected argument type 'String'\n\
    \            word += c.asciiValue\n                      ^\n"
  stdout: ''
  timestamp: 1660013970
