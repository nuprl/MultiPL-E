language: swift
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp8vm9q4o2.swift:15:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:16:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp8vm9q4o2.swift:12:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:17:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:13:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp8vm9q4o2.swift:18:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp8vm9q4o2.swift:14:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp8vm9q4o2.swift:19:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:20:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp8vm9q4o2.swift:12:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:21:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:13:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp8vm9q4o2.swift:22:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp8vm9q4o2.swift:14:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp8vm9q4o2.swift:23:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:24:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    for char in paren_string.characters {\n        if char == '(' {\n \
    \           paren_nesting++\n        } else if char == ')' {\n            paren_nesting--\n\
    \            if paren_nesting == 0 {\n                levels.append(paren_level)\n\
    \            }\n        }\n        paren_level++\n    }\n    return levels\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp1fsx_4gz.swift:12:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmp1fsx_4gz.swift:14:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmp1fsx_4gz.swift:11:30: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in paren_string.characters\
    \ {\n                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1fsx_4gz.swift:13:26: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            paren_nesting++\n              \
    \           ^~\n/tmp/tmp1fsx_4gz.swift:15:26: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n            paren_nesting--\n              \
    \           ^~\n/tmp/tmp1fsx_4gz.swift:20:20: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        paren_level++\n                   ^~\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_groups = [String]()\n    var paren_group_index\
    \ = 0\n    var paren_group_count = 0\n    var paren_group_char_count = 0\n   \
    \ var paren_group_char_index = 0\n    var paren_group_chars = \"\"\n    var paren_group_char\
    \ = \"\"\n    var paren_group_char_prev = \"\"\n    var paren_group_char_next\
    \ = \"\"\n    var paren_group_char_prev_index = 0\n    var paren_group_char_next_index\
    \ = 0\n    var paren_group_char_prev_index = 0\n    var paren_group_char_next_index\
    \ = 0\n    var paren_group_char_prev_index = 0\n    var paren_group_char_next_index\
    \ = 0\n    var paren_group_char_prev_index = 0\n    var paren_group_char_next_index\
    \ = 0\n    var paren_group_char_prev_index = 0\n    var paren_group_char_next_index\
    \ = 0\n    var paren_group_char_prev_index = 0\n    var paren_group_char_next_index\
    \ = 0\n    var paren_group_char_prev_index = 0\n    var paren_group_char_next_index\
    \ = 0\n    var paren_group_char_prev_index = 0\n    var paren_group_char_next_index\
    \ = 0\n    var paren_group_char_prev_index = 0\n    var paren_group_char_next_index\
    \ = 0\n    var paren_group_char_prev_index = 0\n    var paren_group_char_next_index\
    \ = 0\n    var paren_group_char_prev_index = 0\n    var paren_group_char_next_index\
    \ = 0\n    var paren_group_char_prev_index = 0\n    var paren_group_char_next_index\
    \ = 0\n    var paren_group_char_prev_index = 0\n    var paren_group_char_next_index\
    \ = 0\n    var paren_group_char_prev_index = 0\n    var paren_group_char_next_index\
    \ = 0\n    var paren_group_char_prev_index = 0\n    var paren_group_char_next_index\
    \ = 0\n    var paren_group_char_prev_index = 0\n    var paren_group_char_next_index\
    \ = 0\n    var paren_group_char_prev_index = 0\n    var paren_group_char_next_index\
    \ = 0\n    var paren_group_char_prev_index = 0\n    var paren_group_char_next_index\
    \ = 0\n    var paren_group_char_prev_index = 0\n    var paren_group_char_next_index\
    \ = 0\n    var paren_group_char_prev_index = 0\n    var paren_group_char_next_index\
    \ = 0\n    var paren_group_char_prev_index = 0\n    var paren_group_char_next_index\
    \ = 0\n    var paren_group_char_prev_index = 0\n    var paren_group_char_next_index\
    \ = 0\n    var paren_group_char_prev_index = 0\n    var paren_group_char_next_index\
    \ = 0\n    var paren_group_char_prev_index = 0\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpkgnu5c8s.swift:23:9: error: invalid redeclaration of 'paren_group_char_prev_index'\n\
    \    var paren_group_char_prev_index = 0\n        ^\n/tmp/tmpkgnu5c8s.swift:21:9:\
    \ note: 'paren_group_char_prev_index' previously declared here\n    var paren_group_char_prev_index\
    \ = 0\n        ^\n/tmp/tmpkgnu5c8s.swift:24:9: error: invalid redeclaration of\
    \ 'paren_group_char_next_index'\n    var paren_group_char_next_index = 0\n   \
    \     ^\n/tmp/tmpkgnu5c8s.swift:22:9: note: 'paren_group_char_next_index' previously\
    \ declared here\n    var paren_group_char_next_index = 0\n        ^\n/tmp/tmpkgnu5c8s.swift:25:9:\
    \ error: invalid redeclaration of 'paren_group_char_prev_index'\n    var paren_group_char_prev_index\
    \ = 0\n        ^\n/tmp/tmpkgnu5c8s.swift:21:9: note: 'paren_group_char_prev_index'\
    \ previously declared here\n    var paren_group_char_prev_index = 0\n        ^\n\
    /tmp/tmpkgnu5c8s.swift:26:9: error: invalid redeclaration of 'paren_group_char_next_index'\n\
    \    var paren_group_char_next_index = 0\n        ^\n/tmp/tmpkgnu5c8s.swift:22:9:\
    \ note: 'paren_group_char_next_index' previously declared here\n    var paren_group_char_next_index\
    \ = 0\n        ^\n/tmp/tmpkgnu5c8s.swift:27:9: error: invalid redeclaration of\
    \ 'paren_group_char_prev_index'\n    var paren_group_char_prev_index = 0\n   \
    \     ^\n/tmp/tmpkgnu5c8s.swift:21:9: note: 'paren_group_char_prev_index' previously\
    \ declared here\n    var paren_group_char_prev_index = 0\n        ^\n/tmp/tmpkgnu5c8s.swift:28:9:\
    \ error: invalid redeclaration of 'paren_group_char_next_index'\n    var paren_group_char_next_index\
    \ = 0\n        ^\n/tmp/tmpkgnu5c8s.swift:22:9: note: 'paren_group_char_next_index'\
    \ previously declared here\n    var paren_group_char_next_index = 0\n        ^\n\
    /tmp/tmpkgnu5c8s.swift:29:9: error: invalid redeclaration of 'paren_group_char_prev_index'\n\
    \    var paren_group_char_prev_index = 0\n        ^\n/tmp/tmpkgnu5c8s.swift:21:9:\
    \ note: 'paren_group_char_prev_index' previously declared here\n    var paren_group_char_prev_index\
    \ = 0\n        ^\n/tmp/tmpkgnu5c8s.swift:30:9: error: invalid redeclaration of\
    \ 'paren_group_char_ne"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_char = 0\n    for c in paren_string.characters {\n      \
    \  if c == '(' {\n            paren_count += 1\n        } else if c == ')' {\n\
    \            paren_count -= 1\n            if paren_count == 0 {\n           \
    \     levels.append(level)\n            }\n        }\n        level = 0\n    }\n\
    \    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpwkr1lk96.swift:13:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpwkr1lk96.swift:15:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpwkr1lk96.swift:12:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpwkr1lk96.swift:11:9: warning: initialization of variable 'paren_char'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_char = 0\n    ~~~~^~~~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char = \"\"\n    var paren_char_next = \"\"\n    var paren_char_next2\
    \ = \"\"\n    var paren_char_next3 = \"\"\n    var paren_char_next4 = \"\"\n \
    \   var paren_char_next5 = \"\"\n    var paren_char_next6 = \"\"\n    var paren_char_next7\
    \ = \"\"\n    var paren_char_next8 = \"\"\n    var paren_char_next9 = \"\"\n \
    \   var paren_char_next10 = \"\"\n    var paren_char_next11 = \"\"\n    var paren_char_next12\
    \ = \"\"\n    var paren_char_next13 = \"\"\n    var paren_char_next14 = \"\"\n\
    \    var paren_char_next15 = \"\"\n    var paren_char_next16 = \"\"\n    var paren_char_next17\
    \ = \"\"\n    var paren_char_next18 = \"\"\n    var paren_char_next19 = \"\"\n\
    \    var paren_char_next20 = \"\"\n    var paren_char_next21 = \"\"\n    var paren_char_next22\
    \ = \"\"\n    var paren_char_next23 = \"\"\n    var paren_char_next24 = \"\"\n\
    \    var paren_char_next25 = \"\"\n    var paren_char_next26 = \"\"\n    var paren_char_next27\
    \ = \"\"\n    var paren_char_next28 = \"\"\n    var paren_char_next29 = \"\"\n\
    \    var paren_char_next30 = \"\"\n    var paren_char_next31 = \"\"\n    var paren_char_next32\
    \ = \"\"\n    var paren_char_next33 = \"\"\n    var paren_char_next34 = \"\"\n\
    \    var paren_char_next35 = \"\"\n    var paren_char_next36 = \"\"\n    var paren_char_next37\
    \ = \"\"\n    var paren_char_next38 = \"\"\n    var paren_char_next39 = \"\"\n\
    \    var paren_char_next40 = \"\"\n    var paren_char_next41 = \"\"\n    var paren_char_next42\
    \ = \"\"\n    var paren_char_next43 = \"\"\n    var paren_char_next44 = \"\"\n\
    \    var paren_char_next45 = \"\"\n    var paren_char_next46 = \"\"\n    var paren_char_next47\
    \ = \"\"\n    var paren_char_next48 = \"\"\n    var paren_char_next49 = \"\"\n\
    \    var paren_char_next50 = \"\"\n    var paren_char_next51 = \"\"\n    var paren_char_next52\
    \ = \"\"\n    var paren_char_next53 = \"\"\n    var paren_char_next54 = \"\"\n\
    \    var paren_char_next55 = \"\"\n    var paren_char_next56 = \"\"\n    var paren_char_next57\
    \ = \"\"\n    var paren_char_next\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6_4xqjip.swift:72:9: error: type annotation missing in pattern\n\
    \    var paren_char_next\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_open\
    \ = 0\n    var paren_close = 0\n    var paren_nesting = 0\n    var paren_nesting_level\
    \ = 0\n    var paren_nesting_open = 0\n    var paren_nesting_close = 0\n    var\
    \ paren_nesting_nesting = 0\n    var paren_nesting_nesting_level = 0\n    var\
    \ paren_nesting_nesting_open = 0\n    var paren_nesting_nesting_close = 0\n  \
    \  var paren_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_open = 0\n    var paren_nesting_nesting_nesting_close\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_open = 0\n    var paren_nesting_nesting_nesting_close\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_open = 0\n    var paren_nesting_nesting_nesting_close\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_open = 0\n    var paren_nesting_nesting_nesting_close\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_open = 0\n    var paren_nesting_nesting_nesting_close\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_open = 0\n    var paren_nesting_nesting_nesting_close\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_open = 0\n    var paren_nesting_nesting_nesting_close\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_open = 0\n    var paren_nesting_nesting_nesting_close\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpck1a1udf.swift:25:9: error: invalid redeclaration of 'paren_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpck1a1udf.swift:21:9:\
    \ note: 'paren_nesting_nesting_nesting_level' previously declared here\n    var\
    \ paren_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpck1a1udf.swift:26:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_open'\n    var\
    \ paren_nesting_nesting_nesting_open = 0\n        ^\n/tmp/tmpck1a1udf.swift:22:9:\
    \ note: 'paren_nesting_nesting_nesting_open' previously declared here\n    var\
    \ paren_nesting_nesting_nesting_open = 0\n        ^\n/tmp/tmpck1a1udf.swift:27:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_close'\n    var\
    \ paren_nesting_nesting_nesting_close = 0\n        ^\n/tmp/tmpck1a1udf.swift:23:9:\
    \ note: 'paren_nesting_nesting_nesting_close' previously declared here\n    var\
    \ paren_nesting_nesting_nesting_close = 0\n        ^\n/tmp/tmpck1a1udf.swift:28:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting'\n  \
    \  var paren_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpck1a1udf.swift:24:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting' previously declared here\n   \
    \ var paren_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpck1a1udf.swift:29:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_level'\n    var\
    \ paren_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpck1a1udf.swift:21:9:\
    \ note: 'paren_nesting_nesting_nesting_level' previously declared here\n    var\
    \ paren_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpck1a1udf.swift:30:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_open'\n    var\
    \ paren_nesting_nesting_nesting_open = 0\n        ^\n/tmp/tmpck1a1udf.swift:22:9:\
    \ note: 'paren_nesting_nesting_nesting_open' previously declared here\n    var\
    \ paren_nesting_nesting_nesting_open = 0\n        ^\n/tmp/tmpck1a1udf.swift:31:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_close'\n    var\
    \ paren_nesting_nesting_nesting_close = 0\n        ^\n/tmp/tmpck1a1"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp8vm9q4o2.swift:15:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:16:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp8vm9q4o2.swift:12:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:17:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:13:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp8vm9q4o2.swift:18:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp8vm9q4o2.swift:14:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp8vm9q4o2.swift:19:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:20:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp8vm9q4o2.swift:12:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:21:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:13:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp8vm9q4o2.swift:22:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp8vm9q4o2.swift:14:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp8vm9q4o2.swift:23:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:24:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_chars\
    \ = \"\"\n    for c in paren_string {\n        if c == '(' {\n            paren_count\
    \ += 1\n            paren_chars += c\n        } else if c == ')' {\n         \
    \   paren_char_count += 1\n            if paren_char_count == paren_count {\n\
    \                level += 1\n                paren_count = 0\n               \
    \ paren_char_count = 0\n            }\n        } else if c == ' ' {\n        \
    \    if paren_char_count == 0 {\n                level += 1\n                paren_count\
    \ = 0\n                paren_char_count = 0\n            }\n        }\n    }\n\
    \    if paren_char_count != 0 {\n        level += 1\n    }\n    if level > max_level\
    \ {\n        max_level = level\n        max_level_parens = paren_count\n    }\n\
    \    var result = [Int](count: level, repeatedValue: 0)\n    for _ in 0..<level\
    \ {\n        result[level] = max_level_parens\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmperndr5uh.swift:15:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmperndr5uh.swift:18:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmperndr5uh.swift:25:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == ' ' {\n                       ^~~\n\
    \                       \" \"\n/tmp/tmperndr5uh.swift:17:28: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            paren_chars\
    \ += c\n                           ^\n/tmp/tmperndr5uh.swift:40:18: error: no\
    \ exact matches in call to initializer \n    var result = [Int](count: level,\
    \ repeatedValue: 0)\n                 ^\n/tmp/tmperndr5uh.swift:40:18: note: candidate\
    \ has partially matching parameter list (repeating: Int, count: Int)\n    var\
    \ result = [Int](count: level, repeatedValue: 0)\n                 ^\n/tmp/tmperndr5uh.swift:40:18:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var result = [Int](count: level, repeatedValue: 0)\n             \
    \    ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp8vm9q4o2.swift:15:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:16:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp8vm9q4o2.swift:12:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:17:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:13:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp8vm9q4o2.swift:18:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp8vm9q4o2.swift:14:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp8vm9q4o2.swift:19:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:20:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp8vm9q4o2.swift:12:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:21:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:13:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp8vm9q4o2.swift:22:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp8vm9q4o2.swift:14:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp8vm9q4o2.swift:23:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:24:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char\
    \ = \"\"\n    var paren_char_array = [Character]()\n    var paren_char_array_index\
    \ = 0\n    var paren_char_array_length = 0\n    var paren_char_array_max = 0\n\
    \    var paren_char_array_max_index = 0\n    var paren_char_array_max_length =\
    \ 0\n    var paren_char_array_max_count = 0\n    var paren_char_array_max_count_index\
    \ = 0\n    var paren_char_array_max_count_length = 0\n    var paren_char_array_max_count_count\
    \ = 0\n    var paren_char_array_max_count_count_index = 0\n    var paren_char_array_max_count_count_length\
    \ = 0\n    var paren_char_array_max_count_count_count = 0\n    var paren_char_array_max_count_count_count_index\
    \ = 0\n    var paren_char_array_max_count_count_count_length = 0\n    var paren_char_array_max_count_count_count_count\
    \ = 0\n    var paren_char_array_max_count_count_count_count_index = 0\n    var\
    \ paren_char_array_max_count_count_count_count_length = 0\n    var paren_char_array_max_count_count_count_count_count\
    \ = 0\n    var paren_char_array_max_count_count_count_count_count_index = 0\n\
    \    var paren_char_array_max_count_count_count_count_count_length = 0\n    var\
    \ paren_char_array_max_count_count_count_count_count_count = 0\n    var paren_char_array_max_count_count_count_count_count_count_index\
    \ = 0\n    var paren_char_array_max_count_count_count_count_count_count_length\
    \ = 0\n    var paren_char_array_max_count_count_count_count_count_count_count\
    \ = 0\n    var paren_char_array_max_count_count_count_count_count_count_index\
    \ = 0\n    var paren_char_array_max_count_count_count_count_count_count_count_length\
    \ = 0\n    var paren_char_array_max_count_count_count_count_count_count_count_count\
    \ = 0\n    var paren_char_array_max_count_count_count_count_count_count_count_index\
    \ = 0\n    var paren_char_array_max_count_count_count_count_count_count_count_count_length\
    \ = 0\n    var paren_char_array_max_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var paren_char_array_max_count_count_count_count_count_count_count_count_index\
    \ = 0\n    var paren_char_array_max_count_count_count_count_count_count_count_count_length\
    \ = 0\n    var paren_char_array_max_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var paren_char_array_max_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n    var paren_char_array_max_count_count_count_count_count_count_count_count_count_length\
    \ = 0\n    var paren_char_array_max_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmplyhcrv66.swift:39:9: error: invalid redeclaration of 'paren_char_array_max_count_count_count_count_count_count_index'\n\
    \    var paren_char_array_max_count_count_count_count_count_count_index = 0\n\
    \        ^\n/tmp/tmplyhcrv66.swift:36:9: note: 'paren_char_array_max_count_count_count_count_count_count_index'\
    \ previously declared here\n    var paren_char_array_max_count_count_count_count_count_count_index\
    \ = 0\n        ^\n/tmp/tmplyhcrv66.swift:46:9: error: invalid redeclaration of\
    \ 'paren_char_array_max_count_count_count_count_count_count_count_count_length'\n\
    \    var paren_char_array_max_count_count_count_count_count_count_count_count_length\
    \ = 0\n        ^\n/tmp/tmplyhcrv66.swift:43:9: note: 'paren_char_array_max_count_count_count_count_count_count_count_count_length'\
    \ previously declared here\n    var paren_char_array_max_count_count_count_count_count_count_count_count_length\
    \ = 0\n        ^\n/tmp/tmplyhcrv66.swift:47:9: error: invalid redeclaration of\
    \ 'paren_char_array_max_count_count_count_count_count_count_count_count_count'\n\
    \    var paren_char_array_max_count_count_count_count_count_count_count_count_count\
    \ = 0\n        ^\n/tmp/tmplyhcrv66.swift:44:9: note: 'paren_char_array_max_count_count_count_count_count_count_count_count_count'\
    \ previously declared here\n    var paren_char_array_max_count_count_count_count_count_count_count_count_count\
    \ = 0\n        ^\n/tmp/tmplyhcrv66.swift:51:9: error: type annotation missing\
    \ in pattern\n    var paren\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_open = 0\n    var paren_close = 0\n    var paren_level_count\
    \ = 0\n    var paren_open_count = 0\n    var paren_close_count = 0\n    var paren_level_string\
    \ = \"\"\n    var paren_open_string = \"\"\n    var paren_close_string = \"\"\n\
    \    var paren_level_string_count = 0\n    var paren_open_string_count = 0\n \
    \   var paren_close_string_count = 0\n    var paren_level_string = \"\"\n    var\
    \ paren_open_string = \"\"\n    var paren_close_string = \"\"\n    var paren_level_string_count\
    \ = 0\n    var paren_open_string_count = 0\n    var paren_close_string_count =\
    \ 0\n    var paren_level_string = \"\"\n    var paren_open_string = \"\"\n   \
    \ var paren_close_string = \"\"\n    var paren_level_string_count = 0\n    var\
    \ paren_open_string_count = 0\n    var paren_close_string_count = 0\n    var paren_level_string\
    \ = \"\"\n    var paren_open_string = \"\"\n    var paren_close_string = \"\"\n\
    \    var paren_level_string_count = 0\n    var paren_open_string_count = 0\n \
    \   var paren_close_string_count = 0\n    var paren_level_string = \"\"\n    var\
    \ paren_open_string = \"\"\n    var paren_close_string = \"\"\n    var paren_level_string_count\
    \ = 0\n    var paren_open_string_count = 0\n    var paren_close_string_count =\
    \ 0\n    var paren_level_string = \"\"\n    var paren_open_string = \"\"\n   \
    \ var paren_close_string = \"\"\n    var paren_level_string_count = 0\n    var\
    \ paren_open_string_count = 0\n    var paren_close_string_count = 0\n    var paren_level_string\
    \ = \"\"\n    var paren_open_string = \"\"\n    var paren_close_string = \"\"\n\
    \    var paren_level_string_count = 0\n    var paren_open_string_count = 0\n \
    \   var paren_close_string_count = 0\n    var paren_level_string = \"\"\n    var\
    \ paren_open_string = \"\"\n    var paren_close_string = \"\"\n    var paren_level_string_count\
    \ = 0\n    var paren_open_string_count = 0\n    var paren_close_string_count =\
    \ 0\n    var paren_level_string = \"\"\n    var paren_open_string = \"\"\n   \
    \ var paren_close_string = \"\"\n    var paren_level_string_count = 0\n    var\
    \ paren_open_string_count = 0\n    var paren_close_string_count = 0\n    var paren_level_string\
    \ = \"\"\n    var paren_open_string = \"\"\n    var paren_close_string = \"\"\n\
    \    var paren_level_string_count = 0\n    var paren_open_string_count = 0\n \
    \   var paren_close_string_count = 0\n    var paren_level_string = \"\"\n    var\
    \ paren_open_string = \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpyw26dq8g.swift:22:9: error: invalid redeclaration of 'paren_level_string'\n\
    \    var paren_level_string = \"\"\n        ^\n/tmp/tmpyw26dq8g.swift:16:9: note:\
    \ 'paren_level_string' previously declared here\n    var paren_level_string =\
    \ \"\"\n        ^\n/tmp/tmpyw26dq8g.swift:23:9: error: invalid redeclaration of\
    \ 'paren_open_string'\n    var paren_open_string = \"\"\n        ^\n/tmp/tmpyw26dq8g.swift:17:9:\
    \ note: 'paren_open_string' previously declared here\n    var paren_open_string\
    \ = \"\"\n        ^\n/tmp/tmpyw26dq8g.swift:24:9: error: invalid redeclaration\
    \ of 'paren_close_string'\n    var paren_close_string = \"\"\n        ^\n/tmp/tmpyw26dq8g.swift:18:9:\
    \ note: 'paren_close_string' previously declared here\n    var paren_close_string\
    \ = \"\"\n        ^\n/tmp/tmpyw26dq8g.swift:25:9: error: invalid redeclaration\
    \ of 'paren_level_string_count'\n    var paren_level_string_count = 0\n      \
    \  ^\n/tmp/tmpyw26dq8g.swift:19:9: note: 'paren_level_string_count' previously\
    \ declared here\n    var paren_level_string_count = 0\n        ^\n/tmp/tmpyw26dq8g.swift:26:9:\
    \ error: invalid redeclaration of 'paren_open_string_count'\n    var paren_open_string_count\
    \ = 0\n        ^\n/tmp/tmpyw26dq8g.swift:20:9: note: 'paren_open_string_count'\
    \ previously declared here\n    var paren_open_string_count = 0\n        ^\n/tmp/tmpyw26dq8g.swift:27:9:\
    \ error: invalid redeclaration of 'paren_close_string_count'\n    var paren_close_string_count\
    \ = 0\n        ^\n/tmp/tmpyw26dq8g.swift:21:9: note: 'paren_close_string_count'\
    \ previously declared here\n    var paren_close_string_count = 0\n        ^\n\
    /tmp/tmpyw26dq8g.swift:28:9: error: invalid redeclaration of 'paren_level_string'\n\
    \    var paren_level_string = \"\"\n        ^\n/tmp/tmpyw26dq8g.swift:16:9: note:\
    \ 'paren_level_string' previously declared here\n    var paren_level_string =\
    \ \"\"\n        ^\n/tmp/tmpyw26dq8g.swift:29:9: error: invalid redeclaration of\
    \ 'paren_open_string'\n    var paren_open_string = \"\"\n        ^\n/tmp/tmpyw26dq8g.swift:17:9:\
    \ note: 'paren_open_string' previously declared here\n    var paren_open_string\
    \ = \"\"\n        ^\n/tmp/tmpyw26dq8g.s"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    var paren_nesting_level = 0\n    var paren_nesting_count = 0\n    var\
    \ paren_nesting_count_max = 0\n    var paren_nesting_count_min = 0\n    var paren_nesting_count_min_index\
    \ = 0\n    var paren_nesting_count_max_index = 0\n    var paren_nesting_count_max_count\
    \ = 0\n    var paren_nesting_count_min_index = 0\n    var paren_nesting_count_max_index\
    \ = 0\n    var paren_nesting_count_max_count = 0\n    var paren_nesting_count_min_index\
    \ = 0\n    var paren_nesting_count_max_index = 0\n    var paren_nesting_count_max_count\
    \ = 0\n    var paren_nesting_count_min_index = 0\n    var paren_nesting_count_max_index\
    \ = 0\n    var paren_nesting_count_max_count = 0\n    var paren_nesting_count_min_index\
    \ = 0\n    var paren_nesting_count_max_index = 0\n    var paren_nesting_count_max_count\
    \ = 0\n    var paren_nesting_count_min_index = 0\n    var paren_nesting_count_max_index\
    \ = 0\n    var paren_nesting_count_max_count = 0\n    var paren_nesting_count_min_index\
    \ = 0\n    var paren_nesting_count_max_index = 0\n    var paren_nesting_count_max_count\
    \ = 0\n    var paren_nesting_count_min_index = 0\n    var paren_nesting_count_max_index\
    \ = 0\n    var paren_nesting_count_max_count = 0\n    var paren_nesting_count_min_index\
    \ = 0\n    var paren_nesting_count_max_index = 0\n    var paren_nesting_count_max_count\
    \ = 0\n    var paren_nesting_count_min_index = 0\n    var paren_nesting_count_max_index\
    \ = 0\n    var paren_nesting_count_max_count = 0\n    var paren_nesting_count_min_index\
    \ = 0\n    var paren_nesting_count_max_index = 0\n    var paren_nesting_count_max_count\
    \ = 0\n    var paren_nesting_count_min_index = 0\n    var paren_nesting_count_max_index\
    \ = 0\n    var paren_nesting_count_max_count = 0\n    var paren_nesting_count_min_index\
    \ = 0\n    var paren_nesting_count_max_index = 0\n    var paren_nesting_count_max_count\
    \ = 0\n    var paren_nesting_count_min_index = 0\n    var paren_nesting_count_max_index\
    \ = 0\n    var paren_nesting_count_max_count = 0\n    var paren_nesting_count_min_index\
    \ = 0\n    var paren_nesting_count_max_index = 0\n    var paren_nesting_count_max_count\
    \ = 0\n    var paren_nesting_count_min_index = 0\n    var paren_nesting_count_max_index\
    \ = 0\n    var paren_nest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp9m04zdvc.swift:18:9: error: invalid redeclaration of 'paren_nesting_count_min_index'\n\
    \    var paren_nesting_count_min_index = 0\n        ^\n/tmp/tmp9m04zdvc.swift:15:9:\
    \ note: 'paren_nesting_count_min_index' previously declared here\n    var paren_nesting_count_min_index\
    \ = 0\n        ^\n/tmp/tmp9m04zdvc.swift:19:9: error: invalid redeclaration of\
    \ 'paren_nesting_count_max_index'\n    var paren_nesting_count_max_index = 0\n\
    \        ^\n/tmp/tmp9m04zdvc.swift:16:9: note: 'paren_nesting_count_max_index'\
    \ previously declared here\n    var paren_nesting_count_max_index = 0\n      \
    \  ^\n/tmp/tmp9m04zdvc.swift:20:9: error: invalid redeclaration of 'paren_nesting_count_max_count'\n\
    \    var paren_nesting_count_max_count = 0\n        ^\n/tmp/tmp9m04zdvc.swift:17:9:\
    \ note: 'paren_nesting_count_max_count' previously declared here\n    var paren_nesting_count_max_count\
    \ = 0\n        ^\n/tmp/tmp9m04zdvc.swift:21:9: error: invalid redeclaration of\
    \ 'paren_nesting_count_min_index'\n    var paren_nesting_count_min_index = 0\n\
    \        ^\n/tmp/tmp9m04zdvc.swift:15:9: note: 'paren_nesting_count_min_index'\
    \ previously declared here\n    var paren_nesting_count_min_index = 0\n      \
    \  ^\n/tmp/tmp9m04zdvc.swift:22:9: error: invalid redeclaration of 'paren_nesting_count_max_index'\n\
    \    var paren_nesting_count_max_index = 0\n        ^\n/tmp/tmp9m04zdvc.swift:16:9:\
    \ note: 'paren_nesting_count_max_index' previously declared here\n    var paren_nesting_count_max_index\
    \ = 0\n        ^\n/tmp/tmp9m04zdvc.swift:23:9: error: invalid redeclaration of\
    \ 'paren_nesting_count_max_count'\n    var paren_nesting_count_max_count = 0\n\
    \        ^\n/tmp/tmp9m04zdvc.swift:17:9: note: 'paren_nesting_count_max_count'\
    \ previously declared here\n    var paren_nesting_count_max_count = 0\n      \
    \  ^\n/tmp/tmp9m04zdvc.swift:24:9: error: invalid redeclaration of 'paren_nesting_count_min_index'\n\
    \    var paren_nesting_count_min_index = 0\n        ^\n/tmp/tmp9m04zdvc.swift:15:9:\
    \ note: 'paren_nesting_count_min_index' previously declared here\n    var paren_nesting_count_min_index\
    \ = 0\n        ^\n/tmp/tmp9m04zdvc.swift:25"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7loufpti.swift:14:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:15:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:16:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:17:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:18:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:19:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:20:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:21:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:22:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:23:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char_start = 0\n    var paren_char_end = 0\n    var paren_char_char\
    \ = 0\n    var paren_char_char_count = 0\n    var paren_char_char_level = 0\n\
    \    var paren_char_char_start = 0\n    var paren_char_char_end = 0\n    var paren_char_char_char\
    \ = 0\n    var paren_char_char_char_count = 0\n    var paren_char_char_char_level\
    \ = 0\n    var paren_char_char_char_start = 0\n    var paren_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char = 0\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_end = 0\n    var paren_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char = 0\n \
    \   var paren_char_char_char_char_char_char_char_char_char_count = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmppi886xuk.swift:58:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    for index in 0..<paren_string.characters.count\
    \ {\n        let char = paren_string.characters[index]\n        if char == '('\
    \ {\n            paren_count += 1\n            paren_level = 1\n            paren_start\
    \ = index\n        } else if char == ')' {\n            paren_count -= 1\n   \
    \         if paren_count < 0 {\n                levels.append(paren_level)\n \
    \           }\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7um__vyl.swift:14:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmp7um__vyl.swift:18:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmp7um__vyl.swift:12:35: error: 'characters'\
    \ is unavailable: Please use String directly\n    for index in 0..<paren_string.characters.count\
    \ {\n                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7um__vyl.swift:13:20: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ char = paren_string.characters[index]\n                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7um__vyl.swift:13:33:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ char = paren_string.characters[index]\n                                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7um__vyl.swift:11:9:\
    \ warning: variable 'paren_start' was written to, but never read\n    var paren_start\
    \ = 0\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    for c in paren_string.unicodeScalars {\n \
    \       if c == paren {\n            paren_count += 1\n            if paren_count\
    \ == 1 {\n                levels.append(level)\n            }\n            paren_count\
    \ = 0\n            paren_level = 0\n        } else {\n            paren_count\
    \ -= 1\n        }\n        level += 1\n    }\n    levels.append(level)\n    return\
    \ levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpwyifa41j.swift:13:17: error: cannot find 'paren' in scope\n   \
    \     if c == paren {\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    for char in paren_string.characters {\n  \
    \      switch char {\n        case ')':\n            levels[level] = paren_count\n\
    \            level++\n            paren_count = 0\n            paren_level = 0\n\
    \        case ')':\n            levels[level] = paren_count\n            level++\n\
    \            paren_count++\n        case ')':\n            levels[level] = paren_count\n\
    \            level++\n            paren_count++\n        case ')':\n         \
    \   levels[level] = paren_count\n            level++\n            paren_count++\n\
    \        case ')':\n            levels[level] = paren_count\n            level++\n\
    \            paren_count++\n        case ')':\n            levels[level] = paren_count\n\
    \            level++\n            paren_count++\n        case ')':\n         \
    \   levels[level] = paren_count\n            level++\n            paren_count++\n\
    \        case ')':\n            levels[level] = paren_count\n            level++\n\
    \            paren_count++\n        case ')':\n            levels[level] = paren_count\n\
    \            level++\n            paren_count++\n        case ')':\n         \
    \   levels[level] = paren_count\n            level++\n            paren_count++\n\
    \        case ')':\n            levels[level] = paren_count\n            level++\n\
    \            paren_count++\n        case ')':\n            levels[level] = paren_count\n\
    \            level++\n            paren_count++\n        case ')':\n         \
    \   levels[level] = paren_count\n            level++\n            paren_count++\n\
    \        case ')':\n            levels[level] = paren_count\n            level++\n\
    \            paren_count++\n        case ')':\n            levels[level] = paren_count\n\
    \            level++\n            paren_count++\n        case ')':\n         \
    \   levels[level] = paren_count\n            level++\n            paren_count++\n\
    \        case ')':\n            levels[level] = paren_count\n            level++\n\
    \            paren_count++\n        case ')':\n            levels[level] = paren_count\n\
    \            level++\n            paren_count++\n        case ')':\n         \
    \   levels[level] = paren_count\n            level++\n            paren_count++\n\
    \        case ')':\n            levels[level] = paren_count\n            level++\n\
    \            paren_count++\n        case ')':\n            levels[level] = paren_count\n\
    \            level++\n            paren_count++\n        case ')':\n         \
    \   levels[level] = paren_count\n            level++\n            paren_count++\n\
    \        case ')':\n            levels[level] = \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp3izpwx67.swift:14:14: error: single-quoted string literal found,\
    \ use '\"'\n        case ')':\n             ^~~\n             \")\"\n/tmp/tmp3izpwx67.swift:19:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ')':\n   \
    \          ^~~\n             \")\"\n/tmp/tmp3izpwx67.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case ')':\n             ^~~\n      \
    \       \")\"\n/tmp/tmp3izpwx67.swift:27:14: error: single-quoted string literal\
    \ found, use '\"'\n        case ')':\n             ^~~\n             \")\"\n/tmp/tmp3izpwx67.swift:31:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ')':\n   \
    \          ^~~\n             \")\"\n/tmp/tmp3izpwx67.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case ')':\n             ^~~\n      \
    \       \")\"\n/tmp/tmp3izpwx67.swift:39:14: error: single-quoted string literal\
    \ found, use '\"'\n        case ')':\n             ^~~\n             \")\"\n/tmp/tmp3izpwx67.swift:43:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ')':\n   \
    \          ^~~\n             \")\"\n/tmp/tmp3izpwx67.swift:47:14: error: single-quoted\
    \ string literal found, use '\"'\n        case ')':\n             ^~~\n      \
    \       \")\"\n/tmp/tmp3izpwx67.swift:51:14: error: single-quoted string literal\
    \ found, use '\"'\n        case ')':\n             ^~~\n             \")\"\n/tmp/tmp3izpwx67.swift:55:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ')':\n   \
    \          ^~~\n             \")\"\n/tmp/tmp3izpwx67.swift:59:14: error: single-quoted\
    \ string literal found, use '\"'\n        case ')':\n             ^~~\n      \
    \       \")\"\n/tmp/tmp3izpwx67.swift:63:14: error: single-quoted string literal\
    \ found, use '\"'\n        case ')':\n             ^~~\n             \")\"\n/tmp/tmp3izpwx67.swift:67:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ')':\n   \
    \          ^~~\n             \")\"\n/tmp/tmp3izpwx67.swift:71:14: error: single-quoted\
    \ string literal found, use '\"'\n        case ')':\n             ^~~\n      \
    \       \")\"\n/tmp/tmp3izpwx67.swift:75:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_count_parens = 0\n    var paren_count_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens = 0\n    var paren_count_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens = 0\n    var paren_count_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens =\
    \ 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_paren\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpq3pombzs.swift:29:9: error: invalid redeclaration of 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\n\
    \    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpq3pombzs.swift:28:9: note: 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\
    \ previously declared here\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpq3pombzs.swift:31:9: error: type annotation missing\
    \ in pattern\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_paren\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var max_level_group = 0\n    var groups\
    \ = [String]()\n    var levels = [Int]()\n    var level = 0\n    var group_level\
    \ = 0\n    var group_count = 0\n    var paren_count = 0\n    var paren_level =\
    \ 0\n    var paren_group = 0\n    var paren_group_count = 0\n    var paren_group_level\
    \ = 0\n    var paren_group_count = 0\n    var paren_group_level = 0\n    var paren_group_level\
    \ = 0\n    var paren_group_level = 0\n    var paren_group_level = 0\n    var paren_group_level\
    \ = 0\n    var paren_group_level = 0\n    var paren_group_level = 0\n    var paren_group_level\
    \ = 0\n    var paren_group_level = 0\n    var paren_group_level = 0\n    var paren_group_level\
    \ = 0\n    var paren_group_level = 0\n    var paren_group_level = 0\n    var paren_group_level\
    \ = 0\n    var paren_group_level = 0\n    var paren_group_level = 0\n    var paren_group_level\
    \ = 0\n    var paren_group_level = 0\n    var paren_group_level = 0\n    var paren_group_level\
    \ = 0\n    var paren_group_level = 0\n    var paren_group_level = 0\n    var paren_group_level\
    \ = 0\n    var paren_group_level = 0\n    var paren_group_level = 0\n    var paren_group_level\
    \ = 0\n    var paren_group_level = 0\n    var paren_group_level = 0\n    var paren_group_level\
    \ = 0\n    var paren_group_level = 0\n    var paren_group_level = 0\n    var paren_group_level\
    \ = 0\n    var paren_group_level = 0\n    var paren_group_level = 0\n    var paren_group_level\
    \ = 0\n    var paren_group_level = 0\n    var paren_group_level = 0\n    var paren_group_level\
    \ = 0\n    var paren_group_level = 0\n    var paren_group_level = 0\n    var paren_group_level\
    \ = 0\n    var paren_group_level = 0\n    var paren_group_level = 0\n    var paren_group_level\
    \ = 0\n    var paren_group_level = 0\n    var paren_group_level = 0\n    var paren_group_level\
    \ = 0\n    var paren_group_level = 0\n    var paren_group_level = 0\n    var paren_group_level\
    \ = 0\n    var paren_group_level = 0\n    var paren_group_level = 0\n    var paren_group_level\
    \ = 0\n    var paren_group_level = 0\n    var paren_group_level = 0\n    var paren_group_level\
    \ = 0\n    var paren_group_level = 0\n    var paren_group_level = 0\n    var paren_group_level\
    \ = 0\n    var paren_group_level = 0\n    var paren_group_level = 0\n    var paren_group_level\
    \ = 0\n    var paren_group_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmprrt96l_7.swift:20:9: error: invalid redeclaration of 'paren_group_count'\n\
    \    var paren_group_count = 0\n        ^\n/tmp/tmprrt96l_7.swift:18:9: note:\
    \ 'paren_group_count' previously declared here\n    var paren_group_count = 0\n\
    \        ^\n/tmp/tmprrt96l_7.swift:21:9: error: invalid redeclaration of 'paren_group_level'\n\
    \    var paren_group_level = 0\n        ^\n/tmp/tmprrt96l_7.swift:19:9: note:\
    \ 'paren_group_level' previously declared here\n    var paren_group_level = 0\n\
    \        ^\n/tmp/tmprrt96l_7.swift:22:9: error: invalid redeclaration of 'paren_group_level'\n\
    \    var paren_group_level = 0\n        ^\n/tmp/tmprrt96l_7.swift:19:9: note:\
    \ 'paren_group_level' previously declared here\n    var paren_group_level = 0\n\
    \        ^\n/tmp/tmprrt96l_7.swift:23:9: error: invalid redeclaration of 'paren_group_level'\n\
    \    var paren_group_level = 0\n        ^\n/tmp/tmprrt96l_7.swift:19:9: note:\
    \ 'paren_group_level' previously declared here\n    var paren_group_level = 0\n\
    \        ^\n/tmp/tmprrt96l_7.swift:24:9: error: invalid redeclaration of 'paren_group_level'\n\
    \    var paren_group_level = 0\n        ^\n/tmp/tmprrt96l_7.swift:19:9: note:\
    \ 'paren_group_level' previously declared here\n    var paren_group_level = 0\n\
    \        ^\n/tmp/tmprrt96l_7.swift:25:9: error: invalid redeclaration of 'paren_group_level'\n\
    \    var paren_group_level = 0\n        ^\n/tmp/tmprrt96l_7.swift:19:9: note:\
    \ 'paren_group_level' previously declared here\n    var paren_group_level = 0\n\
    \        ^\n/tmp/tmprrt96l_7.swift:26:9: error: invalid redeclaration of 'paren_group_level'\n\
    \    var paren_group_level = 0\n        ^\n/tmp/tmprrt96l_7.swift:19:9: note:\
    \ 'paren_group_level' previously declared here\n    var paren_group_level = 0\n\
    \        ^\n/tmp/tmprrt96l_7.swift:27:9: error: invalid redeclaration of 'paren_group_level'\n\
    \    var paren_group_level = 0\n        ^\n/tmp/tmprrt96l_7.swift:19:9: note:\
    \ 'paren_group_level' previously declared here\n    var paren_group_level = 0\n\
    \        ^\n/tmp/tmprrt96l_7.swift:28:9: error: invalid redeclaration of 'paren_group_level'\n\
    \    var paren_group_level = 0\n        ^"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var levels = [Int]()\n\
    \    var paren_count = 0\n    var paren_level = 0\n    var paren_levels = [Int]()\n\
    \    var paren_levels_len = 0\n    var paren_levels_lens = [Int]()\n    var paren_levels_lens_len\
    \ = 0\n    var paren_levels_lens_lens = [Int]()\n    var paren_levels_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens = [Int]()\n    var paren_levels_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens = [Int]()\n    var paren_levels_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens = [Int]()\n   \
    \ var paren_levels_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n\
    \    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n \
    \   var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n\
    \    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens =\
    \ 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_len\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpab56ifmg.swift:37:9: error: type annotation missing in pattern\n\
    \    var paren_levels_lens_lens_lens_lens_lens_len\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char_next = 0\n    var paren_char_next_index = 0\n    var\
    \ paren_char_next_count = 0\n    var paren_char_next_count_index = 0\n    var\
    \ paren_char_next_count_index = 0\n    var paren_char_next_count_index = 0\n \
    \   var paren_char_next_count_index = 0\n    var paren_char_next_count_index =\
    \ 0\n    var paren_char_next_count_index = 0\n    var paren_char_next_count_index\
    \ = 0\n    var paren_char_next_count_index = 0\n    var paren_char_next_count_index\
    \ = 0\n    var paren_char_next_count_index = 0\n    var paren_char_next_count_index\
    \ = 0\n    var paren_char_next_count_index = 0\n    var paren_char_next_count_index\
    \ = 0\n    var paren_char_next_count_index = 0\n    var paren_char_next_count_index\
    \ = 0\n    var paren_char_next_count_index = 0\n    var paren_char_next_count_index\
    \ = 0\n    var paren_char_next_count_index = 0\n    var paren_char_next_count_index\
    \ = 0\n    var paren_char_next_count_index = 0\n    var paren_char_next_count_index\
    \ = 0\n    var paren_char_next_count_index = 0\n    var paren_char_next_count_index\
    \ = 0\n    var paren_char_next_count_index = 0\n    var paren_char_next_count_index\
    \ = 0\n    var paren_char_next_count_index = 0\n    var paren_char_next_count_index\
    \ = 0\n    var paren_char_next_count_index = 0\n    var paren_char_next_count_index\
    \ = 0\n    var paren_char_next_count_index = 0\n    var paren_char_next_count_index\
    \ = 0\n    var paren_char_next_count_index = 0\n    var paren_char_next_count_index\
    \ = 0\n    var paren_char_next_count_index = 0\n    var paren_char_next_count_index\
    \ = 0\n    var paren_char_next_count_index = 0\n    var paren_char_next_count_index\
    \ = 0\n    var paren_char_next_count_index = 0\n    var paren_char_next_count_index\
    \ = 0\n    var paren_char_next_count_index = 0\n    var paren_char_next_count_index\
    \ = 0\n    var paren_char_next_count_index = 0\n    var paren_char_next_count_index\
    \ = 0\n    var paren_char_next_count_index = 0\n    var paren_char_next_count_index\
    \ = 0\n    var paren_char_next_count_index = 0\n    var paren_char_next_count_index\
    \ = 0\n    var paren_char_next_count_index = 0\n    var paren_char_next_count_index\
    \ = 0\n    var paren_char_next_count_index = 0\n    var paren_char_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpksw9ushc.swift:18:9: error: invalid redeclaration of 'paren_char_next_count_index'\n\
    \    var paren_char_next_count_index = 0\n        ^\n/tmp/tmpksw9ushc.swift:17:9:\
    \ note: 'paren_char_next_count_index' previously declared here\n    var paren_char_next_count_index\
    \ = 0\n        ^\n/tmp/tmpksw9ushc.swift:19:9: error: invalid redeclaration of\
    \ 'paren_char_next_count_index'\n    var paren_char_next_count_index = 0\n   \
    \     ^\n/tmp/tmpksw9ushc.swift:17:9: note: 'paren_char_next_count_index' previously\
    \ declared here\n    var paren_char_next_count_index = 0\n        ^\n/tmp/tmpksw9ushc.swift:20:9:\
    \ error: invalid redeclaration of 'paren_char_next_count_index'\n    var paren_char_next_count_index\
    \ = 0\n        ^\n/tmp/tmpksw9ushc.swift:17:9: note: 'paren_char_next_count_index'\
    \ previously declared here\n    var paren_char_next_count_index = 0\n        ^\n\
    /tmp/tmpksw9ushc.swift:21:9: error: invalid redeclaration of 'paren_char_next_count_index'\n\
    \    var paren_char_next_count_index = 0\n        ^\n/tmp/tmpksw9ushc.swift:17:9:\
    \ note: 'paren_char_next_count_index' previously declared here\n    var paren_char_next_count_index\
    \ = 0\n        ^\n/tmp/tmpksw9ushc.swift:22:9: error: invalid redeclaration of\
    \ 'paren_char_next_count_index'\n    var paren_char_next_count_index = 0\n   \
    \     ^\n/tmp/tmpksw9ushc.swift:17:9: note: 'paren_char_next_count_index' previously\
    \ declared here\n    var paren_char_next_count_index = 0\n        ^\n/tmp/tmpksw9ushc.swift:23:9:\
    \ error: invalid redeclaration of 'paren_char_next_count_index'\n    var paren_char_next_count_index\
    \ = 0\n        ^\n/tmp/tmpksw9ushc.swift:17:9: note: 'paren_char_next_count_index'\
    \ previously declared here\n    var paren_char_next_count_index = 0\n        ^\n\
    /tmp/tmpksw9ushc.swift:24:9: error: invalid redeclaration of 'paren_char_next_count_index'\n\
    \    var paren_char_next_count_index = 0\n        ^\n/tmp/tmpksw9ushc.swift:17:9:\
    \ note: 'paren_char_next_count_index' previously declared here\n    var paren_char_next_count_index\
    \ = 0\n        ^\n/tmp/tmpksw9ushc.swift:25:9: error: invalid redeclaration of\
    \ 'paren_char_next_cou"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    for c in paren_string.unicodeScalars {\n \
    \       if c == '(' {\n            paren_count += 1\n            levels.append(paren_level)\n\
    \            paren_level = 0\n        } else if c == ')' {\n            paren_count\
    \ -= 1\n            if paren_count > 0 {\n                levels.append(paren_level)\n\
    \                paren_level = 0\n            } else {\n                levels.append(0)\n\
    \            }\n        } else if paren_count > 0 {\n            paren_level +=\
    \ 1\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpr8fzljr6.swift:13:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpr8fzljr6.swift:17:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpr8fzljr6.swift:9:9: warning: initialization of variable\
    \ 'level' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var level = 0\n    ~~~~^~~~~\n    _\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char_char_count = 0\n    var paren_char_char_level = 0\n\
    \    var paren_char_char_char_count = 0\n    var paren_char_char_char_level =\
    \ 0\n    var paren_char_char_char_char_count = 0\n    var paren_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_count = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_level = 0\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_count = 0\n \
    \   var paren_char_char_char_char_char_char_char_char_char_char_level = 0\n  \
    \  var paren_char_char_char_char_char_char_char_char_char_char_char_count = 0\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_char_level =\
    \ 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp8ht1vyf6.swift:44:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_char_\n     \
    \   ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_levels_len = 0\n    var paren_levels_start = 0\n    var\
    \ paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpitl1gpqy.swift:73:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpitl1gpqy.swift:17:9: error: invalid redeclaration of 'paren_levels_len'\n\
    \    var paren_levels_len = 0\n        ^\n/tmp/tmpitl1gpqy.swift:14:9: note: 'paren_levels_len'\
    \ previously declared here\n    var paren_levels_len = 0\n        ^\n/tmp/tmpitl1gpqy.swift:18:9:\
    \ error: invalid redeclaration of 'paren_levels_start'\n    var paren_levels_start\
    \ = 0\n        ^\n/tmp/tmpitl1gpqy.swift:15:9: note: 'paren_levels_start' previously\
    \ declared here\n    var paren_levels_start = 0\n        ^\n/tmp/tmpitl1gpqy.swift:19:9:\
    \ error: invalid redeclaration of 'paren_levels_end'\n    var paren_levels_end\
    \ = 0\n        ^\n/tmp/tmpitl1gpqy.swift:16:9: note: 'paren_levels_end' previously\
    \ declared here\n    var paren_levels_end = 0\n        ^\n/tmp/tmpitl1gpqy.swift:20:9:\
    \ error: invalid redeclaration of 'paren_levels_len'\n    var paren_levels_len\
    \ = 0\n        ^\n/tmp/tmpitl1gpqy.swift:14:9: note: 'paren_levels_len' previously\
    \ declared here\n    var paren_levels_len = 0\n        ^\n/tmp/tmpitl1gpqy.swift:21:9:\
    \ error: invalid redeclaration of 'paren_levels_start'\n    var paren_levels_start\
    \ = 0\n        ^\n/tmp/tmpitl1gpqy.swift:15:9: note: 'paren_levels_start' previously\
    \ declared here\n    var paren_levels_start = 0\n        ^\n/tmp/tmpitl1gpqy.swift:22:9:\
    \ error: invalid redeclaration of 'paren_levels_end'\n    var paren_levels_end\
    \ = 0\n        ^\n/tmp/tmpitl1gpqy.swift:16:9: note: 'paren_levels_end' previously\
    \ declared here\n    var paren_levels_end = 0\n        ^\n/tmp/tmpitl1gpqy.swift:23:9:\
    \ error: invalid redeclaration of 'paren_levels_len'\n    var paren_levels_len\
    \ = 0\n        ^\n/tmp/tmpitl1gpqy.swift:14:9: note: 'paren_levels_len' previously\
    \ declared here\n    var paren_levels_len = 0\n        ^\n/tmp/tmpitl1gpqy.swift:24:9:\
    \ error: invalid redeclaration of 'paren_levels_start'\n    var paren_levels_start\
    \ = 0\n        ^\n/tmp/tmpitl1gpqy.swift:15:9: note: 'paren_levels_start' previously\
    \ declared here\n    var paren_levels_start = 0\n        ^\n/tmp/tmpitl1gpqy.swift:25:9:\
    \ error: invalid redeclaration"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_stack = [Int]()\n\
    \    for ch in paren_string.characters {\n        switch ch {\n        case ')':\n\
    \            paren_stack.append(paren_count)\n            paren_count += 1\n \
    \           if paren_count == 1 {\n                levels.append(paren_level)\n\
    \            }\n        case ')':\n            paren_end = paren_stack.pop()\n\
    \            if paren_stack.isEmpty {\n                levels.append(paren_end\
    \ - paren_start + 1)\n            }\n            paren_count = 0\n        case\
    \ ')':\n            paren_start = paren_stack.pop()\n            if paren_stack.isEmpty\
    \ {\n                levels.append(paren_end - paren_start + 1)\n            }\n\
    \            paren_count = 0\n        default:\n            paren_count += 1\n\
    \        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmprp414ch1.swift:16:14: error: single-quoted string literal found,\
    \ use '\"'\n        case ')':\n             ^~~\n             \")\"\n/tmp/tmprp414ch1.swift:22:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ')':\n   \
    \          ^~~\n             \")\"\n/tmp/tmprp414ch1.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case ')':\n             ^~~\n      \
    \       \")\"\n/tmp/tmprp414ch1.swift:14:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    for ch in paren_string.characters {\n      \
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmprp414ch1.swift:23:37: error: value of type '[Int]' has no member\
    \ 'pop'\n            paren_end = paren_stack.pop()\n                        ~~~~~~~~~~~\
    \ ^~~\n/tmp/tmprp414ch1.swift:29:39: error: value of type '[Int]' has no member\
    \ 'pop'\n            paren_start = paren_stack.pop()\n                       \
    \   ~~~~~~~~~~~ ^~~\n/tmp/tmprp414ch1.swift:22:14: warning: literal value is already\
    \ handled by previous pattern; consider removing it\n        case ')':\n     \
    \        ^~~\n/tmp/tmprp414ch1.swift:16:14: note: first occurrence of identical\
    \ literal pattern is here\n        case ')':\n             ^~~\n/tmp/tmprp414ch1.swift:28:14:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n        case ')':\n             ^~~\n/tmp/tmprp414ch1.swift:16:14: note:\
    \ first occurrence of identical literal pattern is here\n        case ')':\n \
    \            ^~~\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7loufpti.swift:14:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:15:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:16:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:17:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:18:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:19:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:20:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:21:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:22:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:23:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_stack = [Int]()\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_stack = [Int]()\n    var paren_levels = [Int]()\n\
    \    var paren_level = 0\n    var paren_stack = [Int]()\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_stack = [Int]()\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_stack = [Int]()\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_stack = [Int]()\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_stack = [Int]()\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_stack = [Int]()\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_stack = [Int]()\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_stack = [Int]()\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_stack = [Int]()\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_stack = [Int]()\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_stack = [Int]()\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_stack = [Int]()\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_stack = [Int]()\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_stack = [Int]()\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_stack = [Int]()\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_stack = [Int]()\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_stack = [Int]()\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_stack = [Int]()\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_stack = [Int]()\n    var paren_levels\
    \ = [\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpop0j3v2v.swift:73:1: error: expected expression in container literal\n\
    }\n^\n/tmp/tmpop0j3v2v.swift:13:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpop0j3v2v.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpop0j3v2v.swift:14:9:\
    \ error: invalid redeclaration of 'paren_stack'\n    var paren_stack = [Int]()\n\
    \        ^\n/tmp/tmpop0j3v2v.swift:11:9: note: 'paren_stack' previously declared\
    \ here\n    var paren_stack = [Int]()\n        ^\n/tmp/tmpop0j3v2v.swift:15:9:\
    \ error: invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n\
    \        ^\n/tmp/tmpop0j3v2v.swift:12:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmpop0j3v2v.swift:16:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmpop0j3v2v.swift:10:9: note: 'paren_level' previously declared\
    \ here\n    var paren_level = 0\n        ^\n/tmp/tmpop0j3v2v.swift:17:9: error:\
    \ invalid redeclaration of 'paren_stack'\n    var paren_stack = [Int]()\n    \
    \    ^\n/tmp/tmpop0j3v2v.swift:11:9: note: 'paren_stack' previously declared here\n\
    \    var paren_stack = [Int]()\n        ^\n/tmp/tmpop0j3v2v.swift:18:9: error:\
    \ invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpop0j3v2v.swift:12:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmpop0j3v2v.swift:19:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmpop0j3v2v.swift:10:9: note: 'paren_level' previously declared\
    \ here\n    var paren_level = 0\n        ^\n/tmp/tmpop0j3v2v.swift:20:9: error:\
    \ invalid redeclaration of 'paren_stack'\n    var paren_stack = [Int]()\n    \
    \    ^\n/tmp/tmpop0j3v2v.swift:11:9: note: 'paren_stack' previously declared here\n\
    \    var paren_stack = [Int]()\n        ^\n/tmp/tmpop0j3v2v.swift:21:9: error:\
    \ invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpop0j3v2v.swift:12:9: note: 'paren_leve"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_char = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_level = 0\n    var paren_char_char = 0\n    var paren_char_char_count\
    \ = 0\n    var paren_char_char_level = 0\n    var paren_char_char_char = 0\n \
    \   var paren_char_char_char_count = 0\n    var paren_char_char_char_level = 0\n\
    \    var paren_char_char_char_char = 0\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_level = 0\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char =\
    \ 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmplkdcdo0s.swift:49:9: error: invalid redeclaration of 'paren_char_char_char_char_char_char_char_char_char_char_char_char_count'\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n        ^\n/tmp/tmplkdcdo0s.swift:46:9: note: 'paren_char_char_char_char_char_char_char_char_char_char_char_char_count'\
    \ previously declared here\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n        ^\n/tmp/tmplkdcdo0s.swift:50:9: error: invalid redeclaration of\
    \ 'paren_char_char_char_char_char_char_char_char_char_char_char_level'\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_char_char_level = 0\n   \
    \     ^\n/tmp/tmplkdcdo0s.swift:44:9: note: 'paren_char_char_char_char_char_char_char_char_char_char_char_level'\
    \ previously declared here\n    var paren_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    for paren\
    \ in paren_string.characters {\n        if paren == '(' {\n            paren_count++\n\
    \        } else if paren == ')' {\n            paren_count--\n            if paren_count\
    \ == 0 {\n                levels.append(paren_count)\n            }\n        }\n\
    \    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpusxlx4wb.swift:11:21: error: single-quoted string literal found,\
    \ use '\"'\n        if paren == '(' {\n                    ^~~\n             \
    \       \"(\"\n/tmp/tmpusxlx4wb.swift:13:28: error: single-quoted string literal\
    \ found, use '\"'\n        } else if paren == ')' {\n                        \
    \   ^~~\n                           \")\"\n/tmp/tmpusxlx4wb.swift:10:31: error:\
    \ 'characters' is unavailable: Please use String directly\n    for paren in paren_string.characters\
    \ {\n                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpusxlx4wb.swift:12:24: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            paren_count++\n                \
    \       ^~\n/tmp/tmpusxlx4wb.swift:14:24: error: cannot find operator '--' in\
    \ scope; did you mean '-= 1'?\n            paren_count--\n                   \
    \    ^~\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    for c in paren_string.unicodeScalars {\n \
    \       if paren_count == 0 {\n            paren_start = c\n        }\n      \
    \  if paren_count == 0 {\n            levels.append(paren_level)\n        }\n\
    \        if paren_count == 0 {\n            paren_count = 1\n        }\n     \
    \   if c == paren_start {\n            paren_count++\n        } else {\n     \
    \       paren_count = 0\n        }\n        paren_level++\n    }\n    return levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpoy7qy57k.swift:14:27: error: cannot assign value of type 'Unicode.Scalar'\
    \ to type 'Int'\n            paren_start = c\n                          ^\n/tmp/tmpoy7qy57k.swift:22:14:\
    \ error: referencing operator function '==' on 'BinaryInteger' requires that 'Unicode.Scalar'\
    \ conform to 'BinaryInteger'\n        if c == paren_start {\n             ^\n\
    Swift.BinaryInteger:1:11: note: where 'Self' = 'Unicode.Scalar'\nextension BinaryInteger\
    \ {\n          ^\n/tmp/tmpoy7qy57k.swift:23:24: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            paren_count++\n                \
    \       ^~\n/tmp/tmpoy7qy57k.swift:27:20: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n        paren_level++\n                   ^~\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    for c in paren_string.characters {\n        if c == '(' {\n       \
    \     paren_count++\n            levels.append(paren_level)\n        } else if\
    \ c == ')' {\n            levels.append(paren_level)\n            paren_count--\n\
    \            if paren_count == 0 {\n                levels.append(paren_level)\n\
    \            }\n        }\n        paren_level++\n    }\n    return levels\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpofgg_a_2.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpofgg_a_2.swift:15:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpofgg_a_2.swift:11:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpofgg_a_2.swift:13:24: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            paren_count++\n                       ^~\n\
    /tmp/tmpofgg_a_2.swift:17:24: error: cannot find operator '--' in scope; did you\
    \ mean '-= 1'?\n            paren_count--\n                       ^~\n/tmp/tmpofgg_a_2.swift:22:20:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        paren_level++\n\
    \                   ^~\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp8vm9q4o2.swift:15:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:16:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp8vm9q4o2.swift:12:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:17:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:13:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp8vm9q4o2.swift:18:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp8vm9q4o2.swift:14:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp8vm9q4o2.swift:19:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:20:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp8vm9q4o2.swift:12:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:21:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:13:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp8vm9q4o2.swift:22:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp8vm9q4o2.swift:14:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp8vm9q4o2.swift:23:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:24:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    for ch in\
    \ paren_string.unicodeScalars {\n        switch ch {\n        case .OpenParen,\
    \ .CloseParen:\n            paren_count += 1\n        case .OpenBracket, .CloseBracket:\n\
    \            paren_count -= 1\n        }\n        if paren_count == 0 {\n    \
    \        levels.append(paren_count)\n        }\n    }\n    return levels\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6dw1n3sb.swift:12:15: error: type 'Unicode.Scalar' has no member\
    \ 'OpenParen'\n        case .OpenParen, .CloseParen:\n             ~^~~~~~~~~\n\
    /tmp/tmp6dw1n3sb.swift:12:27: error: type 'Unicode.Scalar' has no member 'CloseParen'\n\
    \        case .OpenParen, .CloseParen:\n                         ~^~~~~~~~~~\n\
    /tmp/tmp6dw1n3sb.swift:14:15: error: type 'Unicode.Scalar' has no member 'OpenBracket'\n\
    \        case .OpenBracket, .CloseBracket:\n             ~^~~~~~~~~~~\n/tmp/tmp6dw1n3sb.swift:14:29:\
    \ error: type 'Unicode.Scalar' has no member 'CloseBracket'\n        case .OpenBracket,\
    \ .CloseBracket:\n                           ~^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if c == '(' {\n   \
    \         paren_count += 1\n            levels.append(paren_level)\n        }\
    \ else if c == ')' {\n            paren_count -= 1\n            if paren_count\
    \ == 0 {\n                levels.append(paren_level)\n            }\n        }\n\
    \        paren_level = 0\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpfwqbxm9t.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpfwqbxm9t.swift:15:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char_start = 0\n    var paren_char_end = 0\n    var paren_char_char\
    \ = 0\n    var paren_char_char_count = 0\n    var paren_char_char_level = 0\n\
    \    var paren_char_char_start = 0\n    var paren_char_char_end = 0\n    var paren_char_char_char\
    \ = 0\n    var paren_char_char_char_count = 0\n    var paren_char_char_char_level\
    \ = 0\n    var paren_char_char_char_start = 0\n    var paren_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char = 0\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_end = 0\n    var paren_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_start = 0\n\
    \    var paren_char_char_char_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpcqft1kpa.swift:58:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_char_char_\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_level = 0\n    var paren_level_paren = 0\n    var paren_level_paren_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpsg5aik7v.swift:15:9: error: invalid redeclaration of 'paren_level_counter'\n\
    \    var paren_level_counter = 0\n        ^\n/tmp/tmpsg5aik7v.swift:14:9: note:\
    \ 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpsg5aik7v.swift:16:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpsg5aik7v.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpsg5aik7v.swift:17:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpsg5aik7v.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpsg5aik7v.swift:18:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpsg5aik7v.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpsg5aik7v.swift:19:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpsg5aik7v.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpsg5aik7v.swift:20:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpsg5aik7v.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpsg5aik7v.swift:21:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpsg5aik7v.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpsg5aik7v.swift:22:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpsg5aik7v.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpsg5aik7v.swift:23:9: error: invalid redeclaratio"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    for char in paren_string.characters {\n  \
    \      if char == '(' {\n            paren_count += 1\n            levels.append(paren_level)\n\
    \            paren_level = 0\n        } else if char == ')' {\n            paren_count\
    \ -= 1\n            if paren_count < 0 {\n                levels.append(paren_level)\n\
    \                paren_count = 0\n            }\n        } else if char == ' '\
    \ {\n            levels.append(paren_level)\n            paren_count = 0\n   \
    \         paren_level = 0\n        }\n        paren_level += 1\n    }\n    return\
    \ levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6l1luc8m.swift:13:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmp6l1luc8m.swift:17:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmp6l1luc8m.swift:23:27: error: single-quoted\
    \ string literal found, use '\"'\n        } else if char == ' ' {\n          \
    \                ^~~\n                          \" \"\n/tmp/tmp6l1luc8m.swift:12:30:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in paren_string.characters {\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp6l1luc8m.swift:9:9: warning: initialization\
    \ of variable 'level' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var level = 0\n    ~~~~^~~~~\n    _\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpchcp0c3q.swift:13:9: error: invalid redeclaration of 'parens_count'\n\
    \    var parens_count = 0\n        ^\n/tmp/tmpchcp0c3q.swift:11:9: note: 'parens_count'\
    \ previously declared here\n    var parens_count = 0\n        ^\n/tmp/tmpchcp0c3q.swift:14:9:\
    \ error: invalid redeclaration of 'parens_level'\n    var parens_level = 0\n \
    \       ^\n/tmp/tmpchcp0c3q.swift:12:9: note: 'parens_level' previously declared\
    \ here\n    var parens_level = 0\n        ^\n/tmp/tmpchcp0c3q.swift:15:9: error:\
    \ invalid redeclaration of 'parens_count'\n    var parens_count = 0\n        ^\n\
    /tmp/tmpchcp0c3q.swift:11:9: note: 'parens_count' previously declared here\n \
    \   var parens_count = 0\n        ^\n/tmp/tmpchcp0c3q.swift:16:9: error: invalid\
    \ redeclaration of 'parens_level'\n    var parens_level = 0\n        ^\n/tmp/tmpchcp0c3q.swift:12:9:\
    \ note: 'parens_level' previously declared here\n    var parens_level = 0\n  \
    \      ^\n/tmp/tmpchcp0c3q.swift:17:9: error: invalid redeclaration of 'parens_count'\n\
    \    var parens_count = 0\n        ^\n/tmp/tmpchcp0c3q.swift:11:9: note: 'parens_count'\
    \ previously declared here\n    var parens_count = 0\n        ^\n/tmp/tmpchcp0c3q.swift:18:9:\
    \ error: invalid redeclaration of 'parens_level'\n    var parens_level = 0\n \
    \       ^\n/tmp/tmpchcp0c3q.swift:12:9: note: 'parens_level' previously declared\
    \ here\n    var parens_level = 0\n        ^\n/tmp/tmpchcp0c3q.swift:19:9: error:\
    \ invalid redeclaration of 'parens_count'\n    var parens_count = 0\n        ^\n\
    /tmp/tmpchcp0c3q.swift:11:9: note: 'parens_count' previously declared here\n \
    \   var parens_count = 0\n        ^\n/tmp/tmpchcp0c3q.swift:20:9: error: invalid\
    \ redeclaration of 'parens_level'\n    var parens_level = 0\n        ^\n/tmp/tmpchcp0c3q.swift:12:9:\
    \ note: 'parens_level' previously declared here\n    var parens_level = 0\n  \
    \      ^\n/tmp/tmpchcp0c3q.swift:21:9: error: invalid redeclaration of 'parens_count'\n\
    \    var parens_count = 0\n        ^\n/tmp/tmpchcp0c3q.swift:11:9: note: 'parens_count'\
    \ previously declared here\n    var parens_count = 0\n        ^\n/tmp/tmpchcp0c3q.swift:22:9:\
    \ error: invalid redeclaration o"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char_count = 0\n    var paren_char_level = 0\n    var paren_char_start\
    \ = 0\n    var paren_char_end = 0\n    var paren_char = \"\"\n    var paren_char_next\
    \ = \"\"\n    var paren_char_next_next = \"\"\n    var paren_char_next_next_next\
    \ = \"\"\n    var paren_char_prev = \"\"\n    var paren_char_prev_next = \"\"\n\
    \    var paren_char_prev_next_next = \"\"\n    var paren_char_prev_prev = \"\"\
    \n    var paren_char_prev_prev_next = \"\"\n    var paren_char_prev_prev_prev\
    \ = \"\"\n    var paren_char_prev_prev_prev = \"\"\n    var paren_char_prev_prev_prev_next\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev = \"\"\n    var paren_char_prev_prev_prev_prev\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_next = \"\"\n    var paren_char_prev_prev_prev_prev_prev\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev = \"\"\n    var paren_char_prev_prev_prev_prev_prev_next\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_next = \"\"\n    var\
    \ paren_char_prev_prev_prev_prev_prev_prev_prev = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_next = \"\"\n\
    \    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev = \"\"\n\
    \    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_next = \"\"\n    var\
    \ paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_next\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_next\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_next\
    \ = \"\"\n    var paren_char_prev_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpnf3emdj0.swift:28:9: error: invalid redeclaration of 'paren_char_prev_prev_prev'\n\
    \    var paren_char_prev_prev_prev = \"\"\n        ^\n/tmp/tmpnf3emdj0.swift:27:9:\
    \ note: 'paren_char_prev_prev_prev' previously declared here\n    var paren_char_prev_prev_prev\
    \ = \"\"\n        ^\n/tmp/tmpnf3emdj0.swift:31:9: error: invalid redeclaration\
    \ of 'paren_char_prev_prev_prev_prev'\n    var paren_char_prev_prev_prev_prev\
    \ = \"\"\n        ^\n/tmp/tmpnf3emdj0.swift:30:9: note: 'paren_char_prev_prev_prev_prev'\
    \ previously declared here\n    var paren_char_prev_prev_prev_prev = \"\"\n  \
    \      ^\n/tmp/tmpnf3emdj0.swift:34:9: error: invalid redeclaration of 'paren_char_prev_prev_prev_prev_prev'\n\
    \    var paren_char_prev_prev_prev_prev_prev = \"\"\n        ^\n/tmp/tmpnf3emdj0.swift:33:9:\
    \ note: 'paren_char_prev_prev_prev_prev_prev' previously declared here\n    var\
    \ paren_char_prev_prev_prev_prev_prev = \"\"\n        ^\n/tmp/tmpnf3emdj0.swift:37:9:\
    \ error: invalid redeclaration of 'paren_char_prev_prev_prev_prev_prev_prev'\n\
    \    var paren_char_prev_prev_prev_prev_prev_prev = \"\"\n        ^\n/tmp/tmpnf3emdj0.swift:36:9:\
    \ note: 'paren_char_prev_prev_prev_prev_prev_prev' previously declared here\n\
    \    var paren_char_prev_prev_prev_prev_prev_prev = \"\"\n        ^\n/tmp/tmpnf3emdj0.swift:40:9:\
    \ error: invalid redeclaration of 'paren_char_prev_prev_prev_prev_prev_prev_prev'\n\
    \    var paren_char_prev_prev_prev_prev_prev_prev_prev = \"\"\n        ^\n/tmp/tmpnf3emdj0.swift:39:9:\
    \ note: 'paren_char_prev_prev_prev_prev_prev_prev_prev' previously declared here\n\
    \    var paren_char_prev_prev_prev_prev_prev_prev_prev = \"\"\n        ^\n/tmp/tmpnf3emdj0.swift:43:9:\
    \ error: invalid redeclaration of 'paren_char_prev_prev_prev_prev_prev_prev_prev_prev'\n\
    \    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev = \"\"\n        ^\n\
    /tmp/tmpnf3emdj0.swift:42:9: note: 'paren_char_prev_prev_prev_prev_prev_prev_prev_prev'\
    \ previously declared here\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = \"\"\n        ^\n/tmp/tmpnf3emdj0.swift:44:9: error: invalid redeclaration\
    \ of 'paren_char_prev_prev_prev_prev_prev_"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_level_stack\
    \ = [Int]()\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_size_limit = 10\n    var paren_level_stack_size_limit_reached\
    \ = false\n    var paren_level_stack_size_limit_reached = false\n    var paren_level_stack_size_limit_reached\
    \ = false\n    var paren_level_stack_size_limit_reached = false\n    var paren_level_stack_size_limit_reached\
    \ = false\n    var paren_level_stack_size_limit_reached = false\n    var paren_level_stack_size_limit_reached\
    \ = false\n    var paren_level_stack_size_limit_reached = false\n    var paren_level_stack_size_limit_reached\
    \ = false\n    var paren_level_stack_size_limit_reached = false\n    var paren_level_stack_size_limit_reached\
    \ = false\n    var paren_level_stack_size_limit_reached = false\n    var paren_level_stack_size_limit_reached\
    \ = false\n    var paren_level_stack_size_limit_reached = false\n    var paren_level_stack_size_limit_reached\
    \ = false\n    var paren_level_stack_size_limit_reached = false\n    var paren_level_stack_size_limit_reached\
    \ = false\n    var paren_level_stack_size_limit_reached = false\n    var paren_level_stack_size_limit_reached\
    \ = false\n    var paren_level_stack_size_limit_reached = false\n    var paren_level_stack_size_limit_reached\
    \ = false\n    var paren_level_stack_size_limit_reached = false\n    var paren_level_stack_size_limit_reached\
    \ = false\n    var paren_level_stack_size_limit_reached = false\n    var paren_level_stack_size_limit_reached\
    \ = false\n    var paren_level_stack_size_limit_reached = false\n    var paren_level_stack_size_limit_reached\
    \ = false\n    var paren_level_stack_size_limit_reached = false\n    var paren_level_stack_size_limit_reached\
    \ = false\n    var paren_level_stack_size_limit_reached = false\n    var paren_level_stack_size_limit_reached\
    \ = false\n    var paren_level_stack_size_limit_reached = false\n    var paren_level_stack_size_limit_reached\
    \ = false\n    var paren_level_stack_size_limit_reached = false\n    var paren_level_stack_size_limit_reached\
    \ = false\n    var paren_level_stack_size_limit_reached = false\n    var paren_level_stack_size_limit_reached\
    \ = false\n    var paren_level_stack_size_limit_reached = false\n    var paren_level_stack_size_limit_reached\
    \ = false\n    var paren_level_stack_size_limit_reached = false\n    var paren_level_stack_size_limit_reached\
    \ = false\n    var paren_level_stack_size_limit_reached = false\n    var paren_level_stack_size_limit_reached\
    \ = false\n    var paren_level_stack_size_limit_reached = false\n    var paren_level_stack_size_limit_reached\
    \ = false\n    var paren_level_stack_size_limit_reached = false\n    var paren_level_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp58j7g5qv.swift:15:9: error: invalid redeclaration of 'paren_level_stack_size_limit_reached'\n\
    \    var paren_level_stack_size_limit_reached = false\n        ^\n/tmp/tmp58j7g5qv.swift:14:9:\
    \ note: 'paren_level_stack_size_limit_reached' previously declared here\n    var\
    \ paren_level_stack_size_limit_reached = false\n        ^\n/tmp/tmp58j7g5qv.swift:16:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size_limit_reached'\n   \
    \ var paren_level_stack_size_limit_reached = false\n        ^\n/tmp/tmp58j7g5qv.swift:14:9:\
    \ note: 'paren_level_stack_size_limit_reached' previously declared here\n    var\
    \ paren_level_stack_size_limit_reached = false\n        ^\n/tmp/tmp58j7g5qv.swift:17:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size_limit_reached'\n   \
    \ var paren_level_stack_size_limit_reached = false\n        ^\n/tmp/tmp58j7g5qv.swift:14:9:\
    \ note: 'paren_level_stack_size_limit_reached' previously declared here\n    var\
    \ paren_level_stack_size_limit_reached = false\n        ^\n/tmp/tmp58j7g5qv.swift:18:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size_limit_reached'\n   \
    \ var paren_level_stack_size_limit_reached = false\n        ^\n/tmp/tmp58j7g5qv.swift:14:9:\
    \ note: 'paren_level_stack_size_limit_reached' previously declared here\n    var\
    \ paren_level_stack_size_limit_reached = false\n        ^\n/tmp/tmp58j7g5qv.swift:19:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size_limit_reached'\n   \
    \ var paren_level_stack_size_limit_reached = false\n        ^\n/tmp/tmp58j7g5qv.swift:14:9:\
    \ note: 'paren_level_stack_size_limit_reached' previously declared here\n    var\
    \ paren_level_stack_size_limit_reached = false\n        ^\n/tmp/tmp58j7g5qv.swift:20:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size_limit_reached'\n   \
    \ var paren_level_stack_size_limit_reached = false\n        ^\n/tmp/tmp58j7g5qv.swift:14:9:\
    \ note: 'paren_level_stack_size_limit_reached' previously declared here\n    var\
    \ paren_level_stack_size_limit_reached = false\n        ^\n/tmp/tmp58j7g5qv.swift:21:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size_limit_reached"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7loufpti.swift:14:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:15:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:16:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:17:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:18:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:19:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:20:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:21:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:22:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:23:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_char = 0\n\
    \    var paren_char_count = 0\n    var paren_char_index = 0\n    var paren_char_length\
    \ = 0\n    var paren_char_char_length = 0\n    var paren_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_length = 0\n    var paren_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_length = 0\n    var paren_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_length = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_length = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpa1u_z6i9.swift:29:9: error: invalid redeclaration of 'paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length'\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n        ^\n/tmp/tmpa1u_z6i9.swift:28:9: note: 'paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length'\
    \ previously declared here\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n        ^\n/tmp/tmpa1u_z6i9.swift:38:9: error: type annotation missing\
    \ in pattern\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_chars = [String]()\n    var paren_char_indexes = [Int]()\n\
    \    var paren_char_indexes_count = [Int]()\n    var paren_char_indexes_count_index\
    \ = 0\n    var paren_char_indexes_count_index1 = 0\n    var paren_char_indexes_count_index2\
    \ = 0\n    var paren_char_indexes_count_index3 = 0\n    var paren_char_indexes_count_index4\
    \ = 0\n    var paren_char_indexes_count_index5 = 0\n    var paren_char_indexes_count_index6\
    \ = 0\n    var paren_char_indexes_count_index7 = 0\n    var paren_char_indexes_count_index8\
    \ = 0\n    var paren_char_indexes_count_index9 = 0\n    var paren_char_indexes_count_index10\
    \ = 0\n    var paren_char_indexes_count_index11 = 0\n    var paren_char_indexes_count_index12\
    \ = 0\n    var paren_char_indexes_count_index13 = 0\n    var paren_char_indexes_count_index14\
    \ = 0\n    var paren_char_indexes_count_index15 = 0\n    var paren_char_indexes_count_index16\
    \ = 0\n    var paren_char_indexes_count_index17 = 0\n    var paren_char_indexes_count_index18\
    \ = 0\n    var paren_char_indexes_count_index19 = 0\n    var paren_char_indexes_count_index20\
    \ = 0\n    var paren_char_indexes_count_index21 = 0\n    var paren_char_indexes_count_index22\
    \ = 0\n    var paren_char_indexes_count_index23 = 0\n    var paren_char_indexes_count_index24\
    \ = 0\n    var paren_char_indexes_count_index25 = 0\n    var paren_char_indexes_count_index26\
    \ = 0\n    var paren_char_indexes_count_index27 = 0\n    var paren_char_indexes_count_index28\
    \ = 0\n    var paren_char_indexes_count_index29 = 0\n    var paren_char_indexes_count_index30\
    \ = 0\n    var paren_char_indexes_count_index31 = 0\n    var paren_char_indexes_count_index32\
    \ = 0\n    var paren_char_indexes_count_index33 = 0\n    var paren_char_indexes_count_index34\
    \ = 0\n    var paren_char_indexes_count_index35 = 0\n    var paren_char_indexes_count_index36\
    \ = 0\n    var paren_char_indexes_count_index37 = 0\n    var paren_char_indexes_count_index38\
    \ = 0\n    var paren_char_indexes_count_index39 = 0\n    var paren_char_indexes_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpdz7t4tb7.swift:57:9: error: type annotation missing in pattern\n\
    \    var paren_char_indexes_count_\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_level = 0\n    var paren_level_parens = 0\n    var paren_level_parens_count\
    \ = 0\n    var paren_level_parens_count_max = 0\n    var paren_level_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count = 0\n    var paren_level_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens = 0\n    var\
    \ paren_level_parens_count_max_parens_count_max_parens_count = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_paren\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp44237gbx.swift:34:9: error: type annotation missing in pattern\n\
    \    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_paren\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_paren\
    \ = 0\n    var paren_level_paren_count = 0\n    var paren_level_paren_level =\
    \ 0\n    var paren_level_paren_level_paren = 0\n    var paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level = 0\n    var paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_count = 0\n    var paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren = 0\n   \
    \ var paren_level_paren_level_paren_level_paren_level_paren_count = 0\n    var\
    \ paren_level_paren_level_paren_level_paren_level_paren_level = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp1n6i8an6.swift:37:9: error: type annotation missing in pattern\n\
    \    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var levels = [Int]()\n    for paren in\
    \ paren_string.characters {\n        if paren == '(' {\n            levels.append(0)\n\
    \        } else if paren == ')' {\n            levels[levels.count-1] += 1\n \
    \           if levels[levels.count-1] > max_level {\n                max_level\
    \ = levels[levels.count-1]\n            }\n        } else {\n            levels[levels.count-1]\
    \ += 1\n        }\n    }\n    return max_level\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpk5dnepvk.swift:11:21: error: single-quoted string literal found,\
    \ use '\"'\n        if paren == '(' {\n                    ^~~\n             \
    \       \"(\"\n/tmp/tmpk5dnepvk.swift:13:28: error: single-quoted string literal\
    \ found, use '\"'\n        } else if paren == ')' {\n                        \
    \   ^~~\n                           \")\"\n/tmp/tmpk5dnepvk.swift:10:31: error:\
    \ 'characters' is unavailable: Please use String directly\n    for paren in paren_string.characters\
    \ {\n                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk5dnepvk.swift:22:12: error: cannot convert return\
    \ expression of type 'Int' to return type '[Int]'\n    return max_level\n    \
    \       ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char = \"\"\n    var paren_chars = []\n    for c in paren_string.unicodeScalars\
    \ {\n        switch c {\n        case .OpenParen, .CloseParen:\n            paren_char_count++\n\
    \            paren_chars.append(c)\n        case .OpenBracket, .CloseBracket:\n\
    \            paren_char_level++\n            paren_chars.append(c)\n        case\
    \ .OpenBrace, .CloseBrace:\n            paren_char_level++\n            paren_chars.append(c)\n\
    \        case .Newline:\n            levels[level] = paren_char_count\n      \
    \      level++\n            paren_count = 0\n            paren_level = 0\n   \
    \         paren_char_count = 0\n            paren_char_level = 0\n           \
    \ paren_char = \"\"\n        case .Space, .Tab, .Newline, _:\n            levels[level]\
    \ = paren_char_count\n            level++\n            paren_count = 0\n     \
    \       paren_level = 0\n            paren_char_count = 0\n            paren_char_level\
    \ = 0\n            paren_char = \"\"\n        default:\n            paren_char_count++\n\
    \            paren_chars.append(c)\n        }\n    }\n    levels[level] = paren_char_count\n\
    \    level++\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpwlwdmpx5.swift:15:23: error: empty collection literal requires\
    \ an explicit type\n    var paren_chars = []\n                      ^~\n/tmp/tmpwlwdmpx5.swift:18:15:\
    \ error: type 'Unicode.Scalar' has no member 'OpenParen'\n        case .OpenParen,\
    \ .CloseParen:\n             ~^~~~~~~~~\n/tmp/tmpwlwdmpx5.swift:18:27: error:\
    \ type 'Unicode.Scalar' has no member 'CloseParen'\n        case .OpenParen, .CloseParen:\n\
    \                         ~^~~~~~~~~~\n/tmp/tmpwlwdmpx5.swift:21:15: error: type\
    \ 'Unicode.Scalar' has no member 'OpenBracket'\n        case .OpenBracket, .CloseBracket:\n\
    \             ~^~~~~~~~~~~\n/tmp/tmpwlwdmpx5.swift:21:29: error: type 'Unicode.Scalar'\
    \ has no member 'CloseBracket'\n        case .OpenBracket, .CloseBracket:\n  \
    \                         ~^~~~~~~~~~~~\n/tmp/tmpwlwdmpx5.swift:24:15: error:\
    \ type 'Unicode.Scalar' has no member 'OpenBrace'\n        case .OpenBrace, .CloseBrace:\n\
    \             ~^~~~~~~~~\n/tmp/tmpwlwdmpx5.swift:24:27: error: type 'Unicode.Scalar'\
    \ has no member 'CloseBrace'\n        case .OpenBrace, .CloseBrace:\n        \
    \                 ~^~~~~~~~~~\n/tmp/tmpwlwdmpx5.swift:27:15: error: type 'Unicode.Scalar'\
    \ has no member 'Newline'\n        case .Newline:\n             ~^~~~~~~\n/tmp/tmpwlwdmpx5.swift:35:15:\
    \ error: type 'Unicode.Scalar' has no member 'Space'\n        case .Space, .Tab,\
    \ .Newline, _:\n             ~^~~~~\n/tmp/tmpwlwdmpx5.swift:35:23: error: type\
    \ 'Unicode.Scalar' has no member 'Tab'\n        case .Space, .Tab, .Newline, _:\n\
    \                     ~^~~\n/tmp/tmpwlwdmpx5.swift:35:29: error: type 'Unicode.Scalar'\
    \ has no member 'Newline'\n        case .Space, .Tab, .Newline, _:\n         \
    \                  ~^~~~~~~\n/tmp/tmpwlwdmpx5.swift:19:29: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            paren_char_count++\n\
    \                            ^~\n/tmp/tmpwlwdmpx5.swift:22:29: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            paren_char_level++\n\
    \                            ^~\n/tmp/tmpwlwdmpx5.swift:25:29: error: cannot find\
    \ operator '++' in scope; did you me"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var max_level_paren_index = 0\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_level_index = 0\n    var paren_level_paren_index = 0\n  \
    \  var paren_level_paren_count = 0\n    var paren_level_paren_level = 0\n    var\
    \ paren_level_paren_level_index = 0\n    var paren_level_paren_level_paren_index\
    \ = 0\n    var paren_level_paren_level_paren_count = 0\n    var paren_level_paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_index = 0\n    var paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_index = 0\n   \
    \ var paren_level_paren_level_paren_level_paren_level_paren_index = 0\n    var\
    \ paren_level_paren_level_paren_level_paren_level_paren_count = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n    var paren_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp3dtcnkm0.swift:40:9: error: type annotation missing in pattern\n\
    \    var paren_\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_count = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_max_index = 0\n    var\
    \ paren_levels_count_max_index2 = 0\n    var paren_levels_count_max_index3 = 0\n\
    \    var paren_levels_count_max_index4 = 0\n    var paren_levels_count_max_index5\
    \ = 0\n    var paren_levels_count_max_index6 = 0\n    var paren_levels_count_max_index7\
    \ = 0\n    var paren_levels_count_max_index8 = 0\n    var paren_levels_count_max_index9\
    \ = 0\n    var paren_levels_count_max_index10 = 0\n    var paren_levels_count_max_index11\
    \ = 0\n    var paren_levels_count_max_index12 = 0\n    var paren_levels_count_max_index13\
    \ = 0\n    var paren_levels_count_max_index14 = 0\n    var paren_levels_count_max_index15\
    \ = 0\n    var paren_levels_count_max_index16 = 0\n    var paren_levels_count_max_index17\
    \ = 0\n    var paren_levels_count_max_index18 = 0\n    var paren_levels_count_max_index19\
    \ = 0\n    var paren_levels_count_max_index20 = 0\n    var paren_levels_count_max_index21\
    \ = 0\n    var paren_levels_count_max_index22 = 0\n    var paren_levels_count_max_index23\
    \ = 0\n    var paren_levels_count_max_index24 = 0\n    var paren_levels_count_max_index25\
    \ = 0\n    var paren_levels_count_max_index26 = 0\n    var paren_levels_count_max_index27\
    \ = 0\n    var paren_levels_count_max_index28 = 0\n    var paren_levels_count_max_index29\
    \ = 0\n    var paren_levels_count_max_index30 = 0\n    var paren_levels_count_max_index31\
    \ = 0\n    var paren_levels_count_max_index32 = 0\n    var paren_levels_count_max_index33\
    \ = 0\n    var paren_levels_count_max_index34 = 0\n    var paren_levels_count_max_index35\
    \ = 0\n    var paren_levels_count_max_index36 = 0\n    var paren_levels_count_max_index37\
    \ = 0\n    var paren_levels_count_max_index38 = 0\n    var paren_levels_count_max_index39\
    \ = 0\n    var paren_levels_count_max_index40 = 0\n    var paren_levels_count_max_index41\
    \ = 0\n    var paren_levels_count_max_index42 = 0\n    var paren_levels_count_max_index43\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpdmbaxp8n.swift:8:9: warning: initialization of variable 'level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpdmbaxp8n.swift:9:9: warning:\
    \ initialization of variable 'paren_count' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_count = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpdmbaxp8n.swift:10:9: warning: initialization of variable 'paren_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpdmbaxp8n.swift:11:9:\
    \ warning: initialization of variable 'paren_levels' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels = [Int]()\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpdmbaxp8n.swift:12:9: warning: initialization\
    \ of variable 'paren_levels_count' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_levels_count = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpdmbaxp8n.swift:13:9: warning: initialization of variable 'paren_levels_count_max'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_levels_count_max = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdmbaxp8n.swift:14:9:\
    \ warning: initialization of variable 'paren_levels_count_max_index' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var paren_levels_count_max_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdmbaxp8n.swift:15:9:\
    \ warning: initialization of variable 'paren_levels_count_max_index2' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var paren_levels_count_max_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdmbaxp8n.swift:16:9:\
    \ warning: initialization of variable 'paren_levels_count_max_index3' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var paren_levels_count_max_index3\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdmbaxp8n.swift:17:9:"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_group = [String]()\n    var paren_group_level\
    \ = [Int]()\n    var paren_group_max_level = [Int]()\n    var paren_group_max_level_parens\
    \ = [Int]()\n    var paren_group_paren_count = [Int]()\n    var paren_group_paren_group\
    \ = [String]()\n    var paren_group_paren_group_level = [Int]()\n    var paren_group_paren_group_max_level\
    \ = [Int]()\n    var paren_group_paren_group_max_level_parens = [Int]()\n    var\
    \ paren_group_paren_group_paren_count = [Int]()\n    var paren_group_paren_group_paren_group\
    \ = [String]()\n    var paren_group_paren_group_paren_group_level = [Int]()\n\
    \    var paren_group_paren_group_paren_group_max_level = [Int]()\n    var paren_group_paren_group_paren_group_max_level_parens\
    \ = [Int]()\n    var paren_group_paren_group_paren_group_paren_count = [Int]()\n\
    \    var paren_group_paren_group_paren_group_paren_group = [String]()\n    var\
    \ paren_group_paren_group_paren_group_paren_group_level = [Int]()\n    var paren_group_paren_group_paren_group_paren_group_max_level\
    \ = [Int]()\n    var paren_group_paren_group_paren_group_paren_group_max_level_parens\
    \ = [Int]()\n    var paren_group_paren_group_paren_group_paren_group_paren_count\
    \ = [Int]()\n    var paren_group_paren_group_paren_group_paren_group_paren_group\
    \ = [String]()\n    var paren_group_paren_group_paren_group_paren_group_paren_group_level\
    \ = [Int]()\n    var paren_group_paren_group_paren_group_paren_group_paren_group_max_level\
    \ = [Int]()\n    var paren_group_paren_group_paren_group_paren_group_paren_group_max_level_parens\
    \ = [Int]()\n    var paren_group_paren_group_paren_group_paren_group_paren_group_paren_count\
    \ = [Int]()\n    var paren_group_paren_group_paren_group_paren_group_paren_group_paren_group\
    \ = [String]()\n    var paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_level\
    \ = [Int]()\n    var paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_max_level\
    \ = [Int]()\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpoazxptei.swift:40:9: error: type annotation missing in pattern\n\
    \    var paren\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_char_count = 0\n    var paren_char = ''\n    var paren_char_index\
    \ = 0\n    var paren_char_length = 0\n    var paren_char_length_index = 0\n  \
    \  var paren_char_length_count = 0\n    var paren_char_length_char_count = 0\n\
    \    var paren_char_length_char = ''\n    var paren_char_length_char_length =\
    \ 0\n    var paren_char_length_char_length_index = 0\n    var paren_char_length_char_length_count\
    \ = 0\n    var paren_char_length_char_length_char_count = 0\n    var paren_char_length_char_length_char\
    \ = ''\n    var paren_char_length_char_length_char_length = 0\n    var paren_char_length_char_length_char_length_index\
    \ = 0\n    var paren_char_length_char_length_char_length_count = 0\n    var paren_char_length_char_length_char_length_char_count\
    \ = 0\n    var paren_char_length_char_length_char_length_char = ''\n    var paren_char_length_char_length_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_index = 0\n\
    \    var paren_char_length_char_length_char_length_char_length_count = 0\n   \
    \ var paren_char_length_char_length_char_length_char_length_char_count = 0\n \
    \   var paren_char_length_char_length_char_length_char_length_char_length = 0\n\
    \    var paren_char_length_char_length_char_length_char_length_char_count = 0\n\
    \    var paren_char_length_char_length_char_length_char_length_char_length = 0\n\
    \    var paren_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_count\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char_count\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char_count\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char_count\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char_count\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char_length_char_count\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char_length_char_count\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char_length_char_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpvaee1ui1.swift:12:22: error: single-quoted string literal found,\
    \ use '\"'\n    var paren_char = ''\n                     ^~\n               \
    \      \"\"\n/tmp/tmpvaee1ui1.swift:18:34: error: single-quoted string literal\
    \ found, use '\"'\n    var paren_char_length_char = ''\n                     \
    \            ^~\n                                 \"\"\n/tmp/tmpvaee1ui1.swift:23:46:\
    \ error: single-quoted string literal found, use '\"'\n    var paren_char_length_char_length_char\
    \ = ''\n                                             ^~\n                    \
    \                         \"\"\n/tmp/tmpvaee1ui1.swift:28:58: error: single-quoted\
    \ string literal found, use '\"'\n    var paren_char_length_char_length_char_length_char\
    \ = ''\n                                                         ^~\n        \
    \                                                 \"\"\n/tmp/tmpvaee1ui1.swift:34:9:\
    \ error: invalid redeclaration of 'paren_char_length_char_length_char_length_char_length_char_count'\n\
    \    var paren_char_length_char_length_char_length_char_length_char_count = 0\n\
    \        ^\n/tmp/tmpvaee1ui1.swift:32:9: note: 'paren_char_length_char_length_char_length_char_length_char_count'\
    \ previously declared here\n    var paren_char_length_char_length_char_length_char_length_char_count\
    \ = 0\n        ^\n/tmp/tmpvaee1ui1.swift:35:9: error: invalid redeclaration of\
    \ 'paren_char_length_char_length_char_length_char_length_char_length'\n    var\
    \ paren_char_length_char_length_char_length_char_length_char_length = 0\n    \
    \    ^\n/tmp/tmpvaee1ui1.swift:33:9: note: 'paren_char_length_char_length_char_length_char_length_char_length'\
    \ previously declared here\n    var paren_char_length_char_length_char_length_char_length_char_length\
    \ = 0\n        ^\n/tmp/tmpvaee1ui1.swift:40:9: error: invalid redeclaration of\
    \ 'paren_char_length_char_length_char_length_char_length_char_length_char_count'\n\
    \    var paren_char_length_char_length_char_length_char_length_char_length_char_count\
    \ = 0\n        ^\n/tmp/tmpvaee1ui1.swift:38:9: note: 'paren_char_length_char_length_char_length_char_length_char_length_char_count'\
    \ previ"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_open = 0\n    var paren_close = 0\n    var paren_level_count\
    \ = 0\n    var paren_open_count = 0\n    var paren_close_count = 0\n    var paren_level_count_max\
    \ = 0\n    var paren_open_count_max = 0\n    var paren_close_count_max = 0\n \
    \   var paren_level_count_min = 0\n    var paren_open_count_min = 0\n    var paren_close_count_min\
    \ = 0\n    var paren_level_count_avg = 0\n    var paren_open_count_avg = 0\n \
    \   var paren_close_count_avg = 0\n    var paren_level_count_min = 0\n    var\
    \ paren_open_count_min = 0\n    var paren_close_count_min = 0\n    var paren_level_count_max\
    \ = 0\n    var paren_open_count_max = 0\n    var paren_close_count_max = 0\n \
    \   var paren_level_count_min = 0\n    var paren_open_count_min = 0\n    var paren_close_count_min\
    \ = 0\n    var paren_level_count_max = 0\n    var paren_open_count_max = 0\n \
    \   var paren_close_count_max = 0\n    var paren_level_count_min = 0\n    var\
    \ paren_open_count_min = 0\n    var paren_close_count_min = 0\n    var paren_level_count_max\
    \ = 0\n    var paren_open_count_max = 0\n    var paren_close_count_max = 0\n \
    \   var paren_level_count_min = 0\n    var paren_open_count_min = 0\n    var paren_close_count_min\
    \ = 0\n    var paren_level_count_max = 0\n    var paren_open_count_max = 0\n \
    \   var paren_close_count_max = 0\n    var paren_level_count_min = 0\n    var\
    \ paren_open_count_min = 0\n    var paren_close_count_min = 0\n    var paren_level_count_max\
    \ = 0\n    var paren_open_count_max = 0\n    var paren_close_count_max = 0\n \
    \   var paren_level_count_min = 0\n    var paren_open_count_min = 0\n    var paren_close_count_min\
    \ = 0\n    var paren_level_count_max = 0\n    var paren_open_count_max = 0\n \
    \   var paren_close_count_max = 0\n    var paren_level_count_min = 0\n    var\
    \ paren_open_count_min = 0\n    var paren_close_count_min = 0\n    var paren_level_count_max\
    \ = 0\n    var paren_open_count_max = 0\n    var paren_close_count_max = 0\n \
    \   var paren_level_count_min = 0\n    var paren_open_count_min = 0\n    var paren_close_count_min\
    \ = 0\n    var paren_level_count_max = 0\n    var paren_open_count_max = 0\n \
    \   var paren_close_count_max = 0\n    var paren_level_count_min = 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6p2tmef1.swift:25:9: error: invalid redeclaration of 'paren_level_count_min'\n\
    \    var paren_level_count_min = 0\n        ^\n/tmp/tmp6p2tmef1.swift:19:9: note:\
    \ 'paren_level_count_min' previously declared here\n    var paren_level_count_min\
    \ = 0\n        ^\n/tmp/tmp6p2tmef1.swift:26:9: error: invalid redeclaration of\
    \ 'paren_open_count_min'\n    var paren_open_count_min = 0\n        ^\n/tmp/tmp6p2tmef1.swift:20:9:\
    \ note: 'paren_open_count_min' previously declared here\n    var paren_open_count_min\
    \ = 0\n        ^\n/tmp/tmp6p2tmef1.swift:27:9: error: invalid redeclaration of\
    \ 'paren_close_count_min'\n    var paren_close_count_min = 0\n        ^\n/tmp/tmp6p2tmef1.swift:21:9:\
    \ note: 'paren_close_count_min' previously declared here\n    var paren_close_count_min\
    \ = 0\n        ^\n/tmp/tmp6p2tmef1.swift:28:9: error: invalid redeclaration of\
    \ 'paren_level_count_max'\n    var paren_level_count_max = 0\n        ^\n/tmp/tmp6p2tmef1.swift:16:9:\
    \ note: 'paren_level_count_max' previously declared here\n    var paren_level_count_max\
    \ = 0\n        ^\n/tmp/tmp6p2tmef1.swift:29:9: error: invalid redeclaration of\
    \ 'paren_open_count_max'\n    var paren_open_count_max = 0\n        ^\n/tmp/tmp6p2tmef1.swift:17:9:\
    \ note: 'paren_open_count_max' previously declared here\n    var paren_open_count_max\
    \ = 0\n        ^\n/tmp/tmp6p2tmef1.swift:30:9: error: invalid redeclaration of\
    \ 'paren_close_count_max'\n    var paren_close_count_max = 0\n        ^\n/tmp/tmp6p2tmef1.swift:18:9:\
    \ note: 'paren_close_count_max' previously declared here\n    var paren_close_count_max\
    \ = 0\n        ^\n/tmp/tmp6p2tmef1.swift:31:9: error: invalid redeclaration of\
    \ 'paren_level_count_min'\n    var paren_level_count_min = 0\n        ^\n/tmp/tmp6p2tmef1.swift:19:9:\
    \ note: 'paren_level_count_min' previously declared here\n    var paren_level_count_min\
    \ = 0\n        ^\n/tmp/tmp6p2tmef1.swift:32:9: error: invalid redeclaration of\
    \ 'paren_open_count_min'\n    var paren_open_count_min = 0\n        ^\n/tmp/tmp6p2tmef1.swift:20:9:\
    \ note: 'paren_open_count_min' previously declared here\n    var paren_open_count_min\
    \ = 0\n        ^\n/tmp"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_level = 0\n    var paren_level_paren = 0\n    var paren_level_paren_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpsg5aik7v.swift:15:9: error: invalid redeclaration of 'paren_level_counter'\n\
    \    var paren_level_counter = 0\n        ^\n/tmp/tmpsg5aik7v.swift:14:9: note:\
    \ 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpsg5aik7v.swift:16:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpsg5aik7v.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpsg5aik7v.swift:17:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpsg5aik7v.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpsg5aik7v.swift:18:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpsg5aik7v.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpsg5aik7v.swift:19:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpsg5aik7v.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpsg5aik7v.swift:20:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpsg5aik7v.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpsg5aik7v.swift:21:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpsg5aik7v.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpsg5aik7v.swift:22:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpsg5aik7v.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpsg5aik7v.swift:23:9: error: invalid redeclaratio"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    var paren_level = 0\n    var paren_levels = [Int]()\n    var paren_levels_size\
    \ = 0\n    var paren_levels_sizes = [Int]()\n    var paren_levels_sizes_size =\
    \ 0\n    var paren_levels_sizes_sizes = [Int]()\n    var paren_levels_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes = [Int]()\n    var paren_levels_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes = [Int]()\n  \
    \  var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_size = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes =\
    \ [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes =\
    \ [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_level\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp8oslf8g1.swift:30:9: error: invalid redeclaration of 'paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes'\n\
    \    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes = [Int]()\n\
    \        ^\n/tmp/tmp8oslf8g1.swift:28:9: note: 'paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes'\
    \ previously declared here\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n        ^\n/tmp/tmp8oslf8g1.swift:31:9: error: invalid redeclaration\
    \ of 'paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size'\n   \
    \ var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size = 0\n\
    \        ^\n/tmp/tmp8oslf8g1.swift:29:9: note: 'paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size'\
    \ previously declared here\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n        ^\n/tmp/tmp8oslf8g1.swift:37:9: error: type annotation missing\
    \ in pattern\n    var paren_level\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7loufpti.swift:14:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:15:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:16:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:17:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:18:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:19:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:20:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:21:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:22:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:23:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var paren_level =\
    \ 0\n    var paren_max_level = 0\n    var paren_level_count = 0\n    var paren_max_level_count\
    \ = 0\n    var paren_level_count_max = 0\n    var paren_level_count_max_max =\
    \ 0\n    var paren_level_count_max_min = 0\n    var paren_level_count_min = 0\n\
    \    var paren_level_count_min_max = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpxk0gk3k6.swift:20:9: error: invalid redeclaration of 'paren_level_count_min_min'\n\
    \    var paren_level_count_min_min = 0\n        ^\n/tmp/tmpxk0gk3k6.swift:19:9:\
    \ note: 'paren_level_count_min_min' previously declared here\n    var paren_level_count_min_min\
    \ = 0\n        ^\n/tmp/tmpxk0gk3k6.swift:21:9: error: invalid redeclaration of\
    \ 'paren_level_count_min_min'\n    var paren_level_count_min_min = 0\n       \
    \ ^\n/tmp/tmpxk0gk3k6.swift:19:9: note: 'paren_level_count_min_min' previously\
    \ declared here\n    var paren_level_count_min_min = 0\n        ^\n/tmp/tmpxk0gk3k6.swift:22:9:\
    \ error: invalid redeclaration of 'paren_level_count_min_min'\n    var paren_level_count_min_min\
    \ = 0\n        ^\n/tmp/tmpxk0gk3k6.swift:19:9: note: 'paren_level_count_min_min'\
    \ previously declared here\n    var paren_level_count_min_min = 0\n        ^\n\
    /tmp/tmpxk0gk3k6.swift:23:9: error: invalid redeclaration of 'paren_level_count_min_min'\n\
    \    var paren_level_count_min_min = 0\n        ^\n/tmp/tmpxk0gk3k6.swift:19:9:\
    \ note: 'paren_level_count_min_min' previously declared here\n    var paren_level_count_min_min\
    \ = 0\n        ^\n/tmp/tmpxk0gk3k6.swift:24:9: error: invalid redeclaration of\
    \ 'paren_level_count_min_min'\n    var paren_level_count_min_min = 0\n       \
    \ ^\n/tmp/tmpxk0gk3k6.swift:19:9: note: 'paren_level_count_min_min' previously\
    \ declared here\n    var paren_level_count_min_min = 0\n        ^\n/tmp/tmpxk0gk3k6.swift:25:9:\
    \ error: invalid redeclaration of 'paren_level_count_min_min'\n    var paren_level_count_min_min\
    \ = 0\n        ^\n/tmp/tmpxk0gk3k6.swift:19:9: note: 'paren_level_count_min_min'\
    \ previously declared here\n    var paren_level_count_min_min = 0\n        ^\n\
    /tmp/tmpxk0gk3k6.swift:26:9: error: invalid redeclaration of 'paren_level_count_min_min'\n\
    \    var paren_level_count_min_min = 0\n        ^\n/tmp/tmpxk0gk3k6.swift:19:9:\
    \ note: 'paren_level_count_min_min' previously declared here\n    var paren_level_count_min_min\
    \ = 0\n        ^\n/tmp/tmpxk0gk3k6.swift:27:9: error: invalid redeclaration of\
    \ 'paren_level_count_min_min'\n    var paren_level_count_min_min = 0\n       \
    \ ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_parens\
    \ = 0\n    var paren_level_parens_count = 0\n    var paren_level_parens_level\
    \ = 0\n    var paren_level_parens_level_parens = 0\n    var paren_level_parens_level_parens_count\
    \ = 0\n    var paren_level_parens_level_parens_level = 0\n    var paren_level_parens_level_parens_level_parens\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_count = 0\n    var\
    \ paren_level_parens_level_parens_level_parens_level = 0\n    var paren_level_parens_level_parens_level_parens_level_parens\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_count\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_count\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_count\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_count\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_count\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_count\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpfq__y5d1.swift:33:9: error: invalid redeclaration of 'paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens'\n\
    \    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens\
    \ = 0\n        ^\n/tmp/tmpfq__y5d1.swift:31:9: note: 'paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens'\
    \ previously declared here\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens\
    \ = 0\n        ^\n/tmp/tmpfq__y5d1.swift:34:9: error: invalid redeclaration of\
    \ 'paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_count'\n\
    \    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_count\
    \ = 0\n        ^\n/tmp/tmpfq__y5d1.swift:32:9: note: 'paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_count'\
    \ previously declared here\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_count\
    \ = 0\n        ^\n/tmp/tmpfq__y5d1.swift:38:9: error: type annotation missing\
    \ in pattern\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_levels_len = 0\n    var paren_levels_lens = [Int]()\n\
    \    var paren_levels_lens_len = 0\n    var paren_levels_lens_lens = [Int]()\n\
    \    var paren_levels_lens_lens_len = 0\n    var paren_levels_lens_lens_lens =\
    \ [Int]()\n    var paren_levels_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n\
    \    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpyirggveb.swift:34:84: error: expected member name or constructor\
    \ call after type name\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n                                                                  \
    \                 ^\n/tmp/tmpyirggveb.swift:34:88: note: add arguments after the\
    \ type to construct a value of the type\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n                                                                  \
    \                     ^\n                                                    \
    \                                    ()\n/tmp/tmpyirggveb.swift:34:88: note: use\
    \ '.self' to reference the type object\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n                                                                  \
    \                     ^\n                                                    \
    \                                    .self\n/tmp/tmpyirggveb.swift:8:9: warning:\
    \ initialization of variable 'levels' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var levels = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmpyirggveb.swift:9:9: warning: initialization of variable 'paren_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpyirggveb.swift:10:9:\
    \ warning: initialization of variable 'paren_levels' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels = [Int]()\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpyirggveb.swift:11:9: warning: initialization\
    \ of variable 'paren_levels_len' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_levels_len = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpyirggveb.swift:12:9: warning: initialization of variable 'paren_levels_lens'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_levels_lens = [Int]()\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpyirggveb."
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_groups = [String]()\n    var paren_group_count\
    \ = 0\n    var paren_group_parens = 0\n    var paren_group_parens_count = 0\n\
    \    var paren_group_parens_groups = [String]()\n    var paren_group_parens_group_count\
    \ = 0\n    var paren_group_parens_group_parens = 0\n    var paren_group_parens_group_parens_count\
    \ = 0\n    var paren_group_parens_group_parens_groups = [String]()\n    var paren_group_parens_group_parens_group_count\
    \ = 0\n    var paren_group_parens_group_parens_group_parens = 0\n    var paren_group_parens_group_parens_group_parens_count\
    \ = 0\n    var paren_group_parens_group_parens_group_parens_groups = [String]()\n\
    \    var paren_group_parens_group_parens_group_parens_group_count = 0\n    var\
    \ paren_group_parens_group_parens_group_parens_group_parens = 0\n    var paren_group_parens_group_parens_group_parens_group_parens_count\
    \ = 0\n    var paren_group_parens_group_parens_group_parens_group_parens_groups\
    \ = [String]()\n    var paren_group_parens_group_parens_group_parens_group_parens_group_count\
    \ = 0\n    var paren_group_parens_group_parens_group_parens_group_parens_group_parens\
    \ = 0\n    var paren_group_parens_group_parens_group_parens_group_parens_group_parens_count\
    \ = 0\n    var paren_group_parens_group_parens_group_parens_group_parens_group_parens_groups\
    \ = [String]()\n    var paren_group_parens_group_parens_group_parens_group_parens_group_parens_group_count\
    \ = 0\n    var paren_group_parens_group_parens_group_parens_group_parens_group_parens_group_parens\
    \ = 0\n    var paren_group_parens_group_parens_group_parens_group_parens_group_parens_group_parens_count\
    \ = 0\n    var paren_group_parens_group_parens_group_parens_group_parens_group_parens_group_parens_groups\
    \ = [String]()\n    var paren_group_parens_group_parens_group_parens_group_parens_group_parens_group_parens_group_count\
    \ = 0\n    var paren_group_parens_group_parens_group_parens_group_parens_group_parens_group_parens_group_parens\
    \ = 0\n    var paren_group_parens_group_parens_group_parens_group_parens_group_parens_group_parens_group_parens_count\
    \ = 0\n    var paren_group_parens_group_parens_group_parens_group_parens_group_parens_group_parens_group_parens\
    \ = 0\n    var paren_group_paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7tpt61hj.swift:40:9: error: invalid redeclaration of 'paren_group_parens_group_parens_group_parens_group_parens_group_parens_group_parens_group_parens'\n\
    \    var paren_group_parens_group_parens_group_parens_group_parens_group_parens_group_parens_group_parens\
    \ = 0\n        ^\n/tmp/tmp7tpt61hj.swift:38:9: note: 'paren_group_parens_group_parens_group_parens_group_parens_group_parens_group_parens_group_parens'\
    \ previously declared here\n    var paren_group_parens_group_parens_group_parens_group_parens_group_parens_group_parens_group_parens\
    \ = 0\n        ^\n/tmp/tmp7tpt61hj.swift:41:9: error: type annotation missing\
    \ in pattern\n    var paren_group_paren\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char: Char\n    var paren_char_length: Int\n    var paren_chars:\
    \ [Char]\n    var paren_char_lengths: [Int]\n    var paren_char_indexes: [Int]\n\
    \    var paren_char_length_indexes: [Int]\n    var paren_char_length_index: Int\n\
    \    var paren_char_length: Int\n    var paren_char_index: Int\n    var paren_char_indexes:\
    \ [Int]\n    var paren_char_index: Int\n    var paren_char_indexes: [Int]\n  \
    \  var paren_char_index: Int\n    var paren_char_indexes: [Int]\n    var paren_char_index:\
    \ Int\n    var paren_char_indexes: [Int]\n    var paren_char_index: Int\n    var\
    \ paren_char_indexes: [Int]\n    var paren_char_index: Int\n    var paren_char_indexes:\
    \ [Int]\n    var paren_char_index: Int\n    var paren_char_indexes: [Int]\n  \
    \  var paren_char_index: Int\n    var paren_char_indexes: [Int]\n    var paren_char_index:\
    \ Int\n    var paren_char_indexes: [Int]\n    var paren_char_index: Int\n    var\
    \ paren_char_indexes: [Int]\n    var paren_char_index: Int\n    var paren_char_indexes:\
    \ [Int]\n    var paren_char_index: Int\n    var paren_char_indexes: [Int]\n  \
    \  var paren_char_index: Int\n    var paren_char_indexes: [Int]\n    var paren_char_index:\
    \ Int\n    var paren_char_indexes: [Int]\n    var paren_char_index: Int\n    var\
    \ paren_char_indexes: [Int]\n    var paren_char_index: Int\n    var paren_char_indexes:\
    \ [Int]\n    var paren_char_index: Int\n    var paren_char_indexes: [Int]\n  \
    \  var paren_char_index: Int\n    var paren_char_indexes: [Int]\n    var paren_char_index:\
    \ Int\n    var paren_char_indexes: [Int]\n    var paren_char_index: Int\n    var\
    \ paren_char_indexes: [Int]\n    var paren_char_index: Int\n    var paren_char_indexes:\
    \ [Int]\n    var paren_char_index: Int\n    var paren_char_indexes: [Int]\n  \
    \  var paren_char_index: Int\n    var paren_char\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpejx3xtd8.swift:14:21: error: cannot find type 'Char' in scope\n\
    \    var paren_char: Char\n                    ^~~~\n/tmp/tmpejx3xtd8.swift:16:23:\
    \ error: cannot find type 'Char' in scope\n    var paren_chars: [Char]\n     \
    \                 ^~~~\n/tmp/tmpejx3xtd8.swift:21:9: error: invalid redeclaration\
    \ of 'paren_char_length'\n    var paren_char_length: Int\n        ^\n/tmp/tmpejx3xtd8.swift:15:9:\
    \ note: 'paren_char_length' previously declared here\n    var paren_char_length:\
    \ Int\n        ^\n/tmp/tmpejx3xtd8.swift:22:9: error: invalid redeclaration of\
    \ 'paren_char_index'\n    var paren_char_index: Int\n        ^\n/tmp/tmpejx3xtd8.swift:13:9:\
    \ note: 'paren_char_index' previously declared here\n    var paren_char_index\
    \ = 0\n        ^\n/tmp/tmpejx3xtd8.swift:23:9: error: invalid redeclaration of\
    \ 'paren_char_indexes'\n    var paren_char_indexes: [Int]\n        ^\n/tmp/tmpejx3xtd8.swift:18:9:\
    \ note: 'paren_char_indexes' previously declared here\n    var paren_char_indexes:\
    \ [Int]\n        ^\n/tmp/tmpejx3xtd8.swift:24:9: error: invalid redeclaration\
    \ of 'paren_char_index'\n    var paren_char_index: Int\n        ^\n/tmp/tmpejx3xtd8.swift:13:9:\
    \ note: 'paren_char_index' previously declared here\n    var paren_char_index\
    \ = 0\n        ^\n/tmp/tmpejx3xtd8.swift:25:9: error: invalid redeclaration of\
    \ 'paren_char_indexes'\n    var paren_char_indexes: [Int]\n        ^\n/tmp/tmpejx3xtd8.swift:18:9:\
    \ note: 'paren_char_indexes' previously declared here\n    var paren_char_indexes:\
    \ [Int]\n        ^\n/tmp/tmpejx3xtd8.swift:26:9: error: invalid redeclaration\
    \ of 'paren_char_index'\n    var paren_char_index: Int\n        ^\n/tmp/tmpejx3xtd8.swift:13:9:\
    \ note: 'paren_char_index' previously declared here\n    var paren_char_index\
    \ = 0\n        ^\n/tmp/tmpejx3xtd8.swift:27:9: error: invalid redeclaration of\
    \ 'paren_char_indexes'\n    var paren_char_indexes: [Int]\n        ^\n/tmp/tmpejx3xtd8.swift:18:9:\
    \ note: 'paren_char_indexes' previously declared here\n    var paren_char_indexes:\
    \ [Int]\n        ^\n/tmp/tmpejx3xtd8.swift:28:9: error: invalid redeclaration\
    \ of 'paren_char_index'\n    var paren"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_paren_count\
    \ = 0\n    var paren_paren_level = 0\n    var paren_paren_paren_count = 0\n  \
    \  var paren_paren_paren_level = 0\n    var paren_paren_paren_paren_count = 0\n\
    \    var paren_paren_paren_paren_level = 0\n    var paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_paren_paren_paren_paren_level = 0\n    var paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_level = 0\n    var paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_level = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_level = 0\n   \
    \ var paren_paren_paren_paren_paren_paren_paren_paren_paren_count = 0\n    var\
    \ paren_paren_paren_paren_paren_paren_paren_paren_paren_level = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_paren_paren_paren_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpb17qxap2.swift:38:9: error: type annotation missing in pattern\n\
    \    var paren_paren_paren_paren_\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char = \"\"\n    for c in paren_string {\n        if c ==\
    \ '(' {\n            paren_count += 1\n            paren_char_count += 1\n   \
    \         paren_char_level += 1\n        } else if c == ')' {\n            paren_char_count\
    \ -= 1\n            if paren_char_count < 0 {\n                paren_char_level\
    \ -= 1\n            }\n            paren_count -= 1\n            if paren_count\
    \ < 0 {\n                levels.append(level)\n                level = 0\n   \
    \             paren_count = 0\n                paren_level = 0\n             \
    \   paren_char_count = 0\n                paren_char_level = 0\n            }\n\
    \        } else {\n            paren_char_count += 1\n            paren_char_level\
    \ += 1\n        }\n        level += 1\n    }\n    levels.append(level)\n    return\
    \ levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpot7jbg50.swift:16:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpot7jbg50.swift:20:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpot7jbg50.swift:11:9: warning: variable 'paren_level' was\
    \ written to, but never read\n    var paren_level = 0\n        ^\n/tmp/tmpot7jbg50.swift:14:9:\
    \ warning: initialization of variable 'paren_char' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_char = \"\"\n    ~~~~^~~~~~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var levels = [Int]()\n    for paren in\
    \ paren_string.characters {\n        if paren == '(' {\n            levels.append(0)\n\
    \        }\n        if paren == ')' {\n            levels[levels.count - 1]++\n\
    \        }\n        if levels[levels.count - 1] > max_level {\n            max_level\
    \ = levels[levels.count - 1]\n        }\n    }\n    return levels\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpmgxkrw3g.swift:11:21: error: single-quoted string literal found,\
    \ use '\"'\n        if paren == '(' {\n                    ^~~\n             \
    \       \"(\"\n/tmp/tmpmgxkrw3g.swift:14:21: error: single-quoted string literal\
    \ found, use '\"'\n        if paren == ')' {\n                    ^~~\n      \
    \              \")\"\n/tmp/tmpmgxkrw3g.swift:10:31: error: 'characters' is unavailable:\
    \ Please use String directly\n    for paren in paren_string.characters {\n   \
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpmgxkrw3g.swift:15:37: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            levels[levels.count - 1]++\n   \
    \                                 ^~\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7loufpti.swift:14:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:15:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:16:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:17:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:18:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:19:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:20:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:21:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:22:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:23:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_level_stack\
    \ = [Int]()\n    var paren_level_stack_pointer = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_pointer_pointer = 0\n    var paren_level_stack_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer = 0\n    var\
    \ paren_level_stack_pointer_pointer_pointer_pointer_pointer = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpcp97ysn4.swift:27:9: error: type annotation missing in pattern\n\
    \    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var levels = [Int]()\n    for paren in\
    \ paren_string.characters {\n        if paren == '(' {\n            levels.append(0)\n\
    \            max_level = max(max_level, levels[levels.count-1])\n        } else\
    \ if paren == ')' {\n            levels[levels.count-1]--\n            if levels[levels.count-1]\
    \ == 0 {\n                levels.append(0)\n                max_level = max(max_level,\
    \ levels[levels.count-1])\n            }\n        }\n    }\n    return levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpnvw3ky_9.swift:11:21: error: single-quoted string literal found,\
    \ use '\"'\n        if paren == '(' {\n                    ^~~\n             \
    \       \"(\"\n/tmp/tmpnvw3ky_9.swift:14:28: error: single-quoted string literal\
    \ found, use '\"'\n        } else if paren == ')' {\n                        \
    \   ^~~\n                           \")\"\n/tmp/tmpnvw3ky_9.swift:10:31: error:\
    \ 'characters' is unavailable: Please use String directly\n    for paren in paren_string.characters\
    \ {\n                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpnvw3ky_9.swift:15:35: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n            levels[levels.count-1]--\n     \
    \                             ^~\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = 0\n    var paren_char_next = 0\n    var paren_char_prev\
    \ = 0\n    var paren_char_prev2 = 0\n    var paren_char_next2 = 0\n    var paren_char_prev3\
    \ = 0\n    var paren_char_next3 = 0\n    var paren_char_prev4 = 0\n    var paren_char_next4\
    \ = 0\n    var paren_char_prev5 = 0\n    var paren_char_next5 = 0\n    var paren_char_prev6\
    \ = 0\n    var paren_char_next6 = 0\n    var paren_char_prev7 = 0\n    var paren_char_next7\
    \ = 0\n    var paren_char_prev8 = 0\n    var paren_char_next8 = 0\n    var paren_char_prev9\
    \ = 0\n    var paren_char_next9 = 0\n    var paren_char_prev10 = 0\n    var paren_char_next10\
    \ = 0\n    var paren_char_prev11 = 0\n    var paren_char_next11 = 0\n    var paren_char_prev12\
    \ = 0\n    var paren_char_next12 = 0\n    var paren_char_prev13 = 0\n    var paren_char_next13\
    \ = 0\n    var paren_char_prev14 = 0\n    var paren_char_next14 = 0\n    var paren_char_prev15\
    \ = 0\n    var paren_char_next15 = 0\n    var paren_char_prev16 = 0\n    var paren_char_next16\
    \ = 0\n    var paren_char_prev17 = 0\n    var paren_char_next17 = 0\n    var paren_char_prev18\
    \ = 0\n    var paren_char_next18 = 0\n    var paren_char_prev19 = 0\n    var paren_char_next19\
    \ = 0\n    var paren_char_prev20 = 0\n    var paren_char_next20 = 0\n    var paren_char_prev21\
    \ = 0\n    var paren_char_next21 = 0\n    var paren_char_prev22 = 0\n    var paren_char_next22\
    \ = 0\n    var paren_char_prev23 = 0\n    var paren_char_next23 = 0\n    var paren_char_prev24\
    \ = 0\n    var paren_char_next24 = 0\n    var paren_char_prev25 = 0\n    var paren_char_next25\
    \ = 0\n    var paren_char_prev26 = 0\n    var paren_char_next26 = 0\n    var paren_char_prev27\
    \ = 0\n    var paren_char_next27 = 0\n    var paren_char_prev28 = 0\n    var paren_char_next28\
    \ = 0\n    var paren_char_prev29 = 0\n    var paren_char_next29 = 0\n    var paren_char_prev30\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpuh_tcpfm.swift:74:9: error: type annotation missing in pattern\n\
    \    var paren\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var max_level_paren = 0\n    var level\
    \ = 0\n    var paren = 0\n    var paren_level = 0\n    var paren_paren = 0\n \
    \   var paren_paren_level = 0\n    var paren_paren_paren = 0\n    var paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren = 0\n    var paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_paren = 0\n    var paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren = 0\n    var paren_paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren = 0\n    var paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_level = 0\n\
    \    var paren_paren_paren_paren_paren_paren_paren_paren_paren_level = 0\n   \
    \ var paren_paren_paren_paren_paren_paren_paren_paren_paren_level = 0\n    var\
    \ paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level = 0\n    var\
    \ paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level = 0\n    var\
    \ paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level = 0\n    var\
    \ paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level = 0\n\
    \    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp2v8oa_hz.swift:28:9: error: invalid redeclaration of 'paren_paren_paren_paren_paren_paren_paren_paren_paren_level'\n\
    \    var paren_paren_paren_paren_paren_paren_paren_paren_paren_level = 0\n   \
    \     ^\n/tmp/tmp2v8oa_hz.swift:27:9: note: 'paren_paren_paren_paren_paren_paren_paren_paren_paren_level'\
    \ previously declared here\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n        ^\n/tmp/tmp2v8oa_hz.swift:29:9: error: invalid redeclaration of\
    \ 'paren_paren_paren_paren_paren_paren_paren_paren_paren_level'\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n        ^\n/tmp/tmp2v8oa_hz.swift:27:9: note: 'paren_paren_paren_paren_paren_paren_paren_paren_paren_level'\
    \ previously declared here\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n        ^\n/tmp/tmp2v8oa_hz.swift:31:9: error: invalid redeclaration of\
    \ 'paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level'\n    var\
    \ paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level = 0\n    \
    \    ^\n/tmp/tmp2v8oa_hz.swift:30:9: note: 'paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level'\
    \ previously declared here\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n        ^\n/tmp/tmp2v8oa_hz.swift:32:9: error: invalid redeclaration of\
    \ 'paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level'\n    var\
    \ paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level = 0\n    \
    \    ^\n/tmp/tmp2v8oa_hz.swift:30:9: note: 'paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level'\
    \ previously declared here\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n        ^\n/tmp/tmp2v8oa_hz.swift:34:9: error: invalid redeclaration of\
    \ 'paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level'\n\
    \    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n        ^\n/tmp/tmp2v8oa_hz.swift:33:9: note: 'paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level'\
    \ previously declared here\n "
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_level\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp42tzrfwg.swift:13:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp42tzrfwg.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp42tzrfwg.swift:14:9:\
    \ error: invalid redeclaration of 'paren_nesting'\n    var paren_nesting = 0\n\
    \        ^\n/tmp/tmp42tzrfwg.swift:11:9: note: 'paren_nesting' previously declared\
    \ here\n    var paren_nesting = 0\n        ^\n/tmp/tmp42tzrfwg.swift:15:9: error:\
    \ invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp42tzrfwg.swift:12:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmp42tzrfwg.swift:16:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmp42tzrfwg.swift:10:9: note: 'paren_level' previously declared\
    \ here\n    var paren_level = 0\n        ^\n/tmp/tmp42tzrfwg.swift:17:9: error:\
    \ invalid redeclaration of 'paren_nesting'\n    var paren_nesting = 0\n      \
    \  ^\n/tmp/tmp42tzrfwg.swift:11:9: note: 'paren_nesting' previously declared here\n\
    \    var paren_nesting = 0\n        ^\n/tmp/tmp42tzrfwg.swift:18:9: error: invalid\
    \ redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n        ^\n\
    /tmp/tmp42tzrfwg.swift:12:9: note: 'paren_levels' previously declared here\n \
    \   var paren_levels = [Int]()\n        ^\n/tmp/tmp42tzrfwg.swift:19:9: error:\
    \ invalid redeclaration of 'paren_level'\n    var paren_level = 0\n        ^\n\
    /tmp/tmp42tzrfwg.swift:10:9: note: 'paren_level' previously declared here\n  \
    \  var paren_level = 0\n        ^\n/tmp/tmp42tzrfwg.swift:20:9: error: invalid\
    \ redeclaration of 'paren_nesting'\n    var paren_nesting = 0\n        ^\n/tmp/tmp42tzrfwg.swift:11:9:\
    \ note: 'paren_nesting' previously declared here\n    var paren_nesting = 0\n\
    \        ^\n/tmp/tmp42tzrfwg.swift:21:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp42tzrfwg.swift:12:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp42tzrfwg.swift:"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var levels = [Int]()\n\
    \    var paren_count = 0\n    var paren_char_count = 0\n    var paren_chars =\
    \ [String]()\n    var paren_char_index = 0\n    var paren_char_length = 0\n  \
    \  var paren_char_lengths = [Int]()\n    var paren_char_length_index = 0\n   \
    \ var paren_char_length_max = 0\n    var paren_char_length_max_index = 0\n   \
    \ var paren_char_length_max_indexs = [Int]()\n    var paren_char_length_max_index\
    \ = 0\n    var paren_char_length_max_indexs = [Int]()\n    var paren_char_length_max_index\
    \ = 0\n    var paren_char_length_max_indexs = [Int]()\n    var paren_char_length_max_index\
    \ = 0\n    var paren_char_length_max_indexs = [Int]()\n    var paren_char_length_max_index\
    \ = 0\n    var paren_char_length_max_indexs = [Int]()\n    var paren_char_length_max_index\
    \ = 0\n    var paren_char_length_max_indexs = [Int]()\n    var paren_char_length_max_index\
    \ = 0\n    var paren_char_length_max_indexs = [Int]()\n    var paren_char_length_max_index\
    \ = 0\n    var paren_char_length_max_indexs = [Int]()\n    var paren_char_length_max_index\
    \ = 0\n    var paren_char_length_max_indexs = [Int]()\n    var paren_char_length_max_index\
    \ = 0\n    var paren_char_length_max_indexs = [Int]()\n    var paren_char_length_max_index\
    \ = 0\n    var paren_char_length_max_indexs = [Int]()\n    var paren_char_length_max_index\
    \ = 0\n    var paren_char_length_max_indexs = [Int]()\n    var paren_char_length_max_index\
    \ = 0\n    var paren_char_length_max_indexs = [Int]()\n    var paren_char_length_max_index\
    \ = 0\n    var paren_char_length_max_indexs = [Int]()\n    var paren_char_length_max_index\
    \ = 0\n    var paren_char_length_max_indexs = [Int]()\n    var paren_char_length_max_index\
    \ = 0\n    var paren_char_length_max_indexs = [Int]()\n    var paren_char_length_max_index\
    \ = 0\n    var paren_char_length_max_indexs = [Int]()\n    var paren_char_length_max_index\
    \ = 0\n    var paren_char_length_max_indexs = [Int]()\n    var paren_char_length_max_index\
    \ = 0\n    var paren_char_length_max_indexs = [Int]()\n    var paren_char_length_max_index\
    \ = 0\n    var paren_char_length_max_indexs = [Int]()\n    var paren_char_length_max_index\
    \ = 0\n    var paren_char_length_max_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpjjokjn25.swift:21:9: error: invalid redeclaration of 'paren_char_length_max_index'\n\
    \    var paren_char_length_max_index = 0\n        ^\n/tmp/tmpjjokjn25.swift:19:9:\
    \ note: 'paren_char_length_max_index' previously declared here\n    var paren_char_length_max_index\
    \ = 0\n        ^\n/tmp/tmpjjokjn25.swift:22:9: error: invalid redeclaration of\
    \ 'paren_char_length_max_indexs'\n    var paren_char_length_max_indexs = [Int]()\n\
    \        ^\n/tmp/tmpjjokjn25.swift:20:9: note: 'paren_char_length_max_indexs'\
    \ previously declared here\n    var paren_char_length_max_indexs = [Int]()\n \
    \       ^\n/tmp/tmpjjokjn25.swift:23:9: error: invalid redeclaration of 'paren_char_length_max_index'\n\
    \    var paren_char_length_max_index = 0\n        ^\n/tmp/tmpjjokjn25.swift:19:9:\
    \ note: 'paren_char_length_max_index' previously declared here\n    var paren_char_length_max_index\
    \ = 0\n        ^\n/tmp/tmpjjokjn25.swift:24:9: error: invalid redeclaration of\
    \ 'paren_char_length_max_indexs'\n    var paren_char_length_max_indexs = [Int]()\n\
    \        ^\n/tmp/tmpjjokjn25.swift:20:9: note: 'paren_char_length_max_indexs'\
    \ previously declared here\n    var paren_char_length_max_indexs = [Int]()\n \
    \       ^\n/tmp/tmpjjokjn25.swift:25:9: error: invalid redeclaration of 'paren_char_length_max_index'\n\
    \    var paren_char_length_max_index = 0\n        ^\n/tmp/tmpjjokjn25.swift:19:9:\
    \ note: 'paren_char_length_max_index' previously declared here\n    var paren_char_length_max_index\
    \ = 0\n        ^\n/tmp/tmpjjokjn25.swift:26:9: error: invalid redeclaration of\
    \ 'paren_char_length_max_indexs'\n    var paren_char_length_max_indexs = [Int]()\n\
    \        ^\n/tmp/tmpjjokjn25.swift:20:9: note: 'paren_char_length_max_indexs'\
    \ previously declared here\n    var paren_char_length_max_indexs = [Int]()\n \
    \       ^\n/tmp/tmpjjokjn25.swift:27:9: error: invalid redeclaration of 'paren_char_length_max_index'\n\
    \    var paren_char_length_max_index = 0\n        ^\n/tmp/tmpjjokjn25.swift:19:9:\
    \ note: 'paren_char_length_max_index' previously declared here\n    var paren_char_length_max_index\
    \ = 0\n        ^\n/tmp/tmpjjokjn25.swift:28:9: erro"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_level = 0\n    var paren_level_paren = 0\n    var paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren = 0\n    var paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren = 0\n    var paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren = 0\n   \
    \ var paren_level_paren_level_paren_level_paren_level_paren_level = 0\n    var\
    \ paren_level_paren_level_paren_level_paren_level_paren_level_paren = 0\n    var\
    \ paren_level_paren_level_paren_level_paren_level_paren_level_paren_level = 0\n\
    \    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpg_j7p4ya.swift:30:9: error: invalid redeclaration of 'paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level'\n\
    \    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n        ^\n/tmp/tmpg_j7p4ya.swift:29:9: note: 'paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level'\
    \ previously declared here\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n        ^\n/tmp/tmpg_j7p4ya.swift:32:9: error: type annotation missing\
    \ in pattern\n    var paren_level_paren_level_paren_level_paren\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_char = 0\n\
    \    var paren_char_count = 0\n    var paren_char_level = 0\n    var paren_char_start\
    \ = 0\n    var paren_char_end = 0\n    var paren_char_char = 0\n    var paren_char_char_count\
    \ = 0\n    var paren_char_char_level = 0\n    var paren_char_char_start = 0\n\
    \    var paren_char_char_end = 0\n    var paren_char_char_char = 0\n    var paren_char_char_char_count\
    \ = 0\n    var paren_char_char_char_level = 0\n    var paren_char_char_char_start\
    \ = 0\n    var paren_char_char_char_end = 0\n    var paren_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_count = 0\n    var paren_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_start = 0\n    var paren_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_count = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_end = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_level = 0\n\
    \    var paren_char_char_char_char_char_char_char_char_char_start = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpeowrt9hp.swift:57:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_char_char_char_char_char_char_\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    for c in paren_string.unicodeScalars {\n \
    \       if c == '(' {\n            paren_count += 1\n            levels.append(paren_level)\n\
    \            paren_level = 0\n        } else if c == ')' {\n            paren_count\
    \ -= 1\n            levels.append(paren_level)\n            if paren_count ==\
    \ 0 {\n                level = 0\n            }\n        } else if c == '(' {\n\
    \            paren_level += 1\n        } else if c == ')' {\n            paren_level\
    \ -= 1\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpp5o0voz_.swift:13:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpp5o0voz_.swift:17:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpp5o0voz_.swift:23:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '(' {\n                       ^~~\n\
    \                       \"(\"\n/tmp/tmpp5o0voz_.swift:25:24: error: single-quoted\
    \ string literal found, use '\"'\n        } else if c == ')' {\n             \
    \          ^~~\n                       \")\"\n/tmp/tmpp5o0voz_.swift:9:9: warning:\
    \ variable 'level' was written to, but never read\n    var level = 0\n       \
    \ ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if c == '(' {\n   \
    \         paren_count += 1\n        } else if c == ')' {\n            paren_count\
    \ -= 1\n            if paren_count == 0 {\n                levels.append(paren_level)\n\
    \            }\n        }\n        paren_level += (c == '(' ? 1 : -1)\n    }\n\
    \    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmptck7fwuu.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmptck7fwuu.swift:14:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmptck7fwuu.swift:20:30: error: single-quoted string literal\
    \ found, use '\"'\n        paren_level += (c == '(' ? 1 : -1)\n              \
    \               ^~~\n                             \"(\"\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_stack =\
    \ [String]()\n    for ch in paren_string.unicodeScalars {\n        if ch == '('\
    \ {\n            paren_stack.append(String(ch))\n            level += 1\n    \
    \    } else if ch == ')' {\n            level += 1\n            if level > max_level\
    \ {\n                max_level = level\n            }\n            level -= 1\n\
    \            paren_stack.removeLast()\n        } else if level == 0 {\n      \
    \      paren_stack.removeLast()\n        }\n    }\n    return Array(paren_stack.reversed()).map\
    \ { Int($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpe24swq8f.swift:12:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmpe24swq8f.swift:15:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n/tmp/tmpe24swq8f.swift:26:48: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n    return Array(paren_stack.reversed()).map\
    \ { Int($0) }\n                                               ^\n/tmp/tmpe24swq8f.swift:26:48:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    return Array(paren_stack.reversed()).map { Int($0) }\n          \
    \                                     ^\n                                    \
    \                   ?? <#default value#>\n/tmp/tmpe24swq8f.swift:26:48: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \    return Array(paren_stack.reversed()).map { Int($0) }\n                  \
    \                             ^\n                                            \
    \          !\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7loufpti.swift:14:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:15:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:16:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:17:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:18:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:19:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:20:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:21:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:22:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:23:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var max_level_index = 0\n    var level\
    \ = 0\n    var level_index = 0\n    var paren_level = 0\n    var paren_level_index\
    \ = 0\n    var paren_level_char = 0\n    var paren_level_char_index = 0\n    var\
    \ paren_level_char_count = 0\n    var paren_level_char_count2 = 0\n    var paren_level_char_count3\
    \ = 0\n    var paren_level_char_count4 = 0\n    var paren_level_char_count5 =\
    \ 0\n    var paren_level_char_count6 = 0\n    var paren_level_char_count7 = 0\n\
    \    var paren_level_char_count8 = 0\n    var paren_level_char_count9 = 0\n  \
    \  var paren_level_char_count10 = 0\n    var paren_level_char_count11 = 0\n  \
    \  var paren_level_char_count12 = 0\n    var paren_level_char_count13 = 0\n  \
    \  var paren_level_char_count14 = 0\n    var paren_level_char_count15 = 0\n  \
    \  var paren_level_char_count16 = 0\n    var paren_level_char_count17 = 0\n  \
    \  var paren_level_char_count18 = 0\n    var paren_level_char_count19 = 0\n  \
    \  var paren_level_char_count20 = 0\n    var paren_level_char_count21 = 0\n  \
    \  var paren_level_char_count22 = 0\n    var paren_level_char_count23 = 0\n  \
    \  var paren_level_char_count24 = 0\n    var paren_level_char_count25 = 0\n  \
    \  var paren_level_char_count26 = 0\n    var paren_level_char_count27 = 0\n  \
    \  var paren_level_char_count28 = 0\n    var paren_level_char_count29 = 0\n  \
    \  var paren_level_char_count30 = 0\n    var paren_level_char_count31 = 0\n  \
    \  var paren_level_char_count32 = 0\n    var paren_level_char_count33 = 0\n  \
    \  var paren_level_char_count34 = 0\n    var paren_level_char_count35 = 0\n  \
    \  var paren_level_char_count36 = 0\n    var paren_level_char_count37 = 0\n  \
    \  var paren_level_char_count38 = 0\n    var paren_level_char_count39 = 0\n  \
    \  var paren_level_char_count40 = 0\n    var paren_level_char_count41 = 0\n  \
    \  var paren_level_char_count42 = 0\n    var paren_level_char_count43 = 0\n  \
    \  var paren_level_char_count44 = 0\n    var paren_level_char_count45 = 0\n  \
    \  var paren_level_char_count46 = 0\n    var paren_level_char_count47 = 0\n  \
    \  var paren_level_char_count48 = 0\n    var paren_level_char_count49 = 0\n  \
    \  var paren_level_char_count50 = 0\n    var paren_level_char_count51 = 0\n  \
    \  var paren_level_char_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmphgdar94s.swift:67:9: error: type annotation missing in pattern\n\
    \    var paren_level_char_count\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    for c in paren_string.unicodeScalars {\n \
    \       if paren_count == 0 {\n            levels.append(level)\n            paren_count\
    \ = 1\n            paren_level = 0\n        }\n        switch c {\n        case\
    \ ')':\n            paren_count--\n        case ')(':\n            paren_count++\n\
    \        case ')(': // nested parens\n            levels[level] = max(levels[level],\
    \ paren_level + 1)\n            paren_count = 0\n            paren_level = 0\n\
    \        case ')(': // nested parens\n            levels[level] = max(levels[level],\
    \ paren_level + 1)\n            paren_count = 0\n            paren_level = 0\n\
    \        default:\n            paren_level++\n        }\n    }\n    return levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp9uxns0dk.swift:19:14: error: single-quoted string literal found,\
    \ use '\"'\n        case ')':\n             ^~~\n             \")\"\n/tmp/tmp9uxns0dk.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ')(':\n  \
    \           ^~~~\n             \")(\"\n/tmp/tmp9uxns0dk.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case ')(': // nested parens\n      \
    \       ^~~~\n             \")(\"\n/tmp/tmp9uxns0dk.swift:27:14: error: single-quoted\
    \ string literal found, use '\"'\n        case ')(': // nested parens\n      \
    \       ^~~~\n             \")(\"\n/tmp/tmp9uxns0dk.swift:21:14: error: expression\
    \ pattern of type 'String' cannot match values of type 'Unicode.Scalar'\n    \
    \    case ')(':\n             ^~~~\n/tmp/tmp9uxns0dk.swift:23:14: error: expression\
    \ pattern of type 'String' cannot match values of type 'Unicode.Scalar'\n    \
    \    case ')(': // nested parens\n             ^~~~\n/tmp/tmp9uxns0dk.swift:27:14:\
    \ error: expression pattern of type 'String' cannot match values of type 'Unicode.Scalar'\n\
    \        case ')(': // nested parens\n             ^~~~\n/tmp/tmp9uxns0dk.swift:20:24:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  paren_count--\n                       ^~\n/tmp/tmp9uxns0dk.swift:22:24: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            paren_count++\n\
    \                       ^~\n/tmp/tmp9uxns0dk.swift:32:24: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            paren_level++\n           \
    \            ^~\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var level\
    \ = 0\n    for ch in paren_string {\n        if ch == '(' {\n            paren_count\
    \ += 1\n        } else if ch == ')' {\n            paren_count -= 1\n        \
    \    if paren_count == 0 {\n                levels.append(level)\n           \
    \ }\n        }\n        level += 1\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpevk2tkgh.swift:12:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmpevk2tkgh.swift:14:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_max_level\
    \ = 0\n    var paren_max_level_paren = 0\n    var paren_stack = [Int]()\n    var\
    \ paren_stack_index = 0\n    var paren_stack_len = paren_stack.count\n    var\
    \ paren_stack_max_len = paren_stack_len\n    var paren_stack_max_len_paren = paren_stack_max_len\n\
    \    var paren_stack_max_len_paren_paren = 0\n    var paren_stack_max_len_paren_paren_paren\
    \ = 0\n    var paren_stack_max_len_paren_paren_paren_paren = 0\n    var paren_stack_max_len_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_stack_max_len_paren_paren_paren_paren_paren_paren = 0\n \
    \   var paren_stack_max_len_paren_paren_paren_paren_paren_paren_paren = 0\n  \
    \  var paren_stack_max_len_paren_paren_paren_paren_paren_paren_paren_paren = 0\n\
    \    var paren_stack_max_len_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_stack_max_len_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_stack_max_len_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_stack_max_len_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_stack_max_len_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_stack_max_len_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_stack_max_len_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_stack_max_len_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_stack_max_len_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmprku4og_y.swift:36:9: error: type annotation missing in pattern\n\
    \    var paren_\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var paren_level =\
    \ 0\n    var paren_max_level = 0\n    var paren_level_count = 0\n    var paren_max_level_count\
    \ = 0\n    var paren_level_count_max = 0\n    var paren_level_count_max_max =\
    \ 0\n    var paren_level_count_max_min = 0\n    var paren_level_count_min = 0\n\
    \    var paren_level_count_min_max = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpxk0gk3k6.swift:20:9: error: invalid redeclaration of 'paren_level_count_min_min'\n\
    \    var paren_level_count_min_min = 0\n        ^\n/tmp/tmpxk0gk3k6.swift:19:9:\
    \ note: 'paren_level_count_min_min' previously declared here\n    var paren_level_count_min_min\
    \ = 0\n        ^\n/tmp/tmpxk0gk3k6.swift:21:9: error: invalid redeclaration of\
    \ 'paren_level_count_min_min'\n    var paren_level_count_min_min = 0\n       \
    \ ^\n/tmp/tmpxk0gk3k6.swift:19:9: note: 'paren_level_count_min_min' previously\
    \ declared here\n    var paren_level_count_min_min = 0\n        ^\n/tmp/tmpxk0gk3k6.swift:22:9:\
    \ error: invalid redeclaration of 'paren_level_count_min_min'\n    var paren_level_count_min_min\
    \ = 0\n        ^\n/tmp/tmpxk0gk3k6.swift:19:9: note: 'paren_level_count_min_min'\
    \ previously declared here\n    var paren_level_count_min_min = 0\n        ^\n\
    /tmp/tmpxk0gk3k6.swift:23:9: error: invalid redeclaration of 'paren_level_count_min_min'\n\
    \    var paren_level_count_min_min = 0\n        ^\n/tmp/tmpxk0gk3k6.swift:19:9:\
    \ note: 'paren_level_count_min_min' previously declared here\n    var paren_level_count_min_min\
    \ = 0\n        ^\n/tmp/tmpxk0gk3k6.swift:24:9: error: invalid redeclaration of\
    \ 'paren_level_count_min_min'\n    var paren_level_count_min_min = 0\n       \
    \ ^\n/tmp/tmpxk0gk3k6.swift:19:9: note: 'paren_level_count_min_min' previously\
    \ declared here\n    var paren_level_count_min_min = 0\n        ^\n/tmp/tmpxk0gk3k6.swift:25:9:\
    \ error: invalid redeclaration of 'paren_level_count_min_min'\n    var paren_level_count_min_min\
    \ = 0\n        ^\n/tmp/tmpxk0gk3k6.swift:19:9: note: 'paren_level_count_min_min'\
    \ previously declared here\n    var paren_level_count_min_min = 0\n        ^\n\
    /tmp/tmpxk0gk3k6.swift:26:9: error: invalid redeclaration of 'paren_level_count_min_min'\n\
    \    var paren_level_count_min_min = 0\n        ^\n/tmp/tmpxk0gk3k6.swift:19:9:\
    \ note: 'paren_level_count_min_min' previously declared here\n    var paren_level_count_min_min\
    \ = 0\n        ^\n/tmp/tmpxk0gk3k6.swift:27:9: error: invalid redeclaration of\
    \ 'paren_level_count_min_min'\n    var paren_level_count_min_min = 0\n       \
    \ ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = 0\n    var paren_char_next = 0\n    var paren_char_prev\
    \ = 0\n    var paren_char_prev2 = 0\n    var paren_char_next2 = 0\n    var paren_char_next3\
    \ = 0\n    var paren_char_prev3 = 0\n    var paren_char_prev4 = 0\n    var paren_char_next4\
    \ = 0\n    var paren_char_next5 = 0\n    var paren_char_prev5 = 0\n    var paren_char_prev6\
    \ = 0\n    var paren_char_next6 = 0\n    var paren_char_next7 = 0\n    var paren_char_prev7\
    \ = 0\n    var paren_char_prev8 = 0\n    var paren_char_next8 = 0\n    var paren_char_next9\
    \ = 0\n    var paren_char_prev9 = 0\n    var paren_char_prev10 = 0\n    var paren_char_next10\
    \ = 0\n    var paren_char_next11 = 0\n    var paren_char_prev11 = 0\n    var paren_char_prev12\
    \ = 0\n    var paren_char_next12 = 0\n    var paren_char_next13 = 0\n    var paren_char_prev13\
    \ = 0\n    var paren_char_prev14 = 0\n    var paren_char_next14 = 0\n    var paren_char_next15\
    \ = 0\n    var paren_char_prev15 = 0\n    var paren_char_prev16 = 0\n    var paren_char_next16\
    \ = 0\n    var paren_char_next17 = 0\n    var paren_char_prev17 = 0\n    var paren_char_prev18\
    \ = 0\n    var paren_char_next18 = 0\n    var paren_char_next19 = 0\n    var paren_char_prev19\
    \ = 0\n    var paren_char_prev20 = 0\n    var paren_char_next20 = 0\n    var paren_char_next21\
    \ = 0\n    var paren_char_prev21 = 0\n    var paren_char_prev22 = 0\n    var paren_char_next22\
    \ = 0\n    var paren_char_next23 = 0\n    var paren_char_prev23 = 0\n    var paren_char_prev24\
    \ = 0\n    var paren_char_next24 = 0\n    var paren_char_next25 = 0\n    var paren_char_prev25\
    \ = 0\n    var paren_char_prev26 = 0\n    var paren_char_next26 = 0\n    var paren_char_next27\
    \ = 0\n    var paren_char_prev27 = 0\n    var paren_char_prev28 = 0\n    var paren_char_next28\
    \ = 0\n    var paren_char_next29 = 0\n    var paren_char_prev29 = 0\n    var paren_char_prev30\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp_yx17k2b.swift:74:9: error: type annotation missing in pattern\n\
    \    var paren\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_group = [String]()\n    var paren_group_level\
    \ = [Int]()\n    var paren_group_parens = [Int]()\n    var paren_group_parens_level\
    \ = [Int]()\n    var paren_group_parens_level_count = [Int]()\n    var paren_group_parens_level_max\
    \ = [Int]()\n    var paren_group_parens_level_max_count = [Int]()\n    var paren_group_parens_level_max_count\
    \ = [Int]()\n    var paren_group_parens_level_max_count = [Int]()\n    var paren_group_parens_level_max_count\
    \ = [Int]()\n    var paren_group_parens_level_max_count = [Int]()\n    var paren_group_parens_level_max_count\
    \ = [Int]()\n    var paren_group_parens_level_max_count = [Int]()\n    var paren_group_parens_level_max_count\
    \ = [Int]()\n    var paren_group_parens_level_max_count = [Int]()\n    var paren_group_parens_level_max_count\
    \ = [Int]()\n    var paren_group_parens_level_max_count = [Int]()\n    var paren_group_parens_level_max_count\
    \ = [Int]()\n    var paren_group_parens_level_max_count = [Int]()\n    var paren_group_parens_level_max_count\
    \ = [Int]()\n    var paren_group_parens_level_max_count = [Int]()\n    var paren_group_parens_level_max_count\
    \ = [Int]()\n    var paren_group_parens_level_max_count = [Int]()\n    var paren_group_parens_level_max_count\
    \ = [Int]()\n    var paren_group_parens_level_max_count = [Int]()\n    var paren_group_parens_level_max_count\
    \ = [Int]()\n    var paren_group_parens_level_max_count = [Int]()\n    var paren_group_parens_level_max_count\
    \ = [Int]()\n    var paren_group_parens_level_max_count = [Int]()\n    var paren_group_parens_level_max_count\
    \ = [Int]()\n    var paren_group_parens_level_max_count = [Int]()\n    var paren_group_parens_level_max_count\
    \ = [Int]()\n    var paren_group_parens_level_max_count = [Int]()\n    var paren_group_parens_level_max_count\
    \ = [Int]()\n    var paren_group_parens_level_max_count = [Int]()\n    var paren_group_parens_level_max_count\
    \ = [Int]()\n    var paren_group_paren\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpjs9_yqk3.swift:19:9: error: invalid redeclaration of 'paren_group_parens_level_max_count'\n\
    \    var paren_group_parens_level_max_count = [Int]()\n        ^\n/tmp/tmpjs9_yqk3.swift:18:9:\
    \ note: 'paren_group_parens_level_max_count' previously declared here\n    var\
    \ paren_group_parens_level_max_count = [Int]()\n        ^\n/tmp/tmpjs9_yqk3.swift:20:9:\
    \ error: invalid redeclaration of 'paren_group_parens_level_max_count'\n    var\
    \ paren_group_parens_level_max_count = [Int]()\n        ^\n/tmp/tmpjs9_yqk3.swift:18:9:\
    \ note: 'paren_group_parens_level_max_count' previously declared here\n    var\
    \ paren_group_parens_level_max_count = [Int]()\n        ^\n/tmp/tmpjs9_yqk3.swift:21:9:\
    \ error: invalid redeclaration of 'paren_group_parens_level_max_count'\n    var\
    \ paren_group_parens_level_max_count = [Int]()\n        ^\n/tmp/tmpjs9_yqk3.swift:18:9:\
    \ note: 'paren_group_parens_level_max_count' previously declared here\n    var\
    \ paren_group_parens_level_max_count = [Int]()\n        ^\n/tmp/tmpjs9_yqk3.swift:22:9:\
    \ error: invalid redeclaration of 'paren_group_parens_level_max_count'\n    var\
    \ paren_group_parens_level_max_count = [Int]()\n        ^\n/tmp/tmpjs9_yqk3.swift:18:9:\
    \ note: 'paren_group_parens_level_max_count' previously declared here\n    var\
    \ paren_group_parens_level_max_count = [Int]()\n        ^\n/tmp/tmpjs9_yqk3.swift:23:9:\
    \ error: invalid redeclaration of 'paren_group_parens_level_max_count'\n    var\
    \ paren_group_parens_level_max_count = [Int]()\n        ^\n/tmp/tmpjs9_yqk3.swift:18:9:\
    \ note: 'paren_group_parens_level_max_count' previously declared here\n    var\
    \ paren_group_parens_level_max_count = [Int]()\n        ^\n/tmp/tmpjs9_yqk3.swift:24:9:\
    \ error: invalid redeclaration of 'paren_group_parens_level_max_count'\n    var\
    \ paren_group_parens_level_max_count = [Int]()\n        ^\n/tmp/tmpjs9_yqk3.swift:18:9:\
    \ note: 'paren_group_parens_level_max_count' previously declared here\n    var\
    \ paren_group_parens_level_max_count = [Int]()\n        ^\n/tmp/tmpjs9_yqk3.swift:25:9:\
    \ error: invalid redeclaration of 'paren_group_parens_level_max_count'\n    var\
    \ paren_group_pare"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_index\
    \ = 0\n    var paren_level_stack = [Int]()\n    var paren_level_stack_index =\
    \ 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n   \
    \ var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var\
    \ paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n   \
    \ var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var\
    \ paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n   \
    \ var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var\
    \ paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpt8h67k9z.swift:17:9: error: invalid redeclaration of 'paren_level_stack_index'\n\
    \    var paren_level_stack_index = 0\n        ^\n/tmp/tmpt8h67k9z.swift:15:9:\
    \ note: 'paren_level_stack_index' previously declared here\n    var paren_level_stack_index\
    \ = 0\n        ^\n/tmp/tmpt8h67k9z.swift:18:9: error: invalid redeclaration of\
    \ 'paren_level_stack_size'\n    var paren_level_stack_size = 0\n        ^\n/tmp/tmpt8h67k9z.swift:16:9:\
    \ note: 'paren_level_stack_size' previously declared here\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmpt8h67k9z.swift:19:9: error: invalid redeclaration of\
    \ 'paren_level_stack_index'\n    var paren_level_stack_index = 0\n        ^\n\
    /tmp/tmpt8h67k9z.swift:15:9: note: 'paren_level_stack_index' previously declared\
    \ here\n    var paren_level_stack_index = 0\n        ^\n/tmp/tmpt8h67k9z.swift:20:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size'\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmpt8h67k9z.swift:16:9: note: 'paren_level_stack_size'\
    \ previously declared here\n    var paren_level_stack_size = 0\n        ^\n/tmp/tmpt8h67k9z.swift:21:9:\
    \ error: invalid redeclaration of 'paren_level_stack_index'\n    var paren_level_stack_index\
    \ = 0\n        ^\n/tmp/tmpt8h67k9z.swift:15:9: note: 'paren_level_stack_index'\
    \ previously declared here\n    var paren_level_stack_index = 0\n        ^\n/tmp/tmpt8h67k9z.swift:22:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size'\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmpt8h67k9z.swift:16:9: note: 'paren_level_stack_size'\
    \ previously declared here\n    var paren_level_stack_size = 0\n        ^\n/tmp/tmpt8h67k9z.swift:23:9:\
    \ error: invalid redeclaration of 'paren_level_stack_index'\n    var paren_level_stack_index\
    \ = 0\n        ^\n/tmp/tmpt8h67k9z.swift:15:9: note: 'paren_level_stack_index'\
    \ previously declared here\n    var paren_level_stack_index = 0\n        ^\n/tmp/tmpt8h67k9z.swift:24:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size'\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmpt8h67k9z.swift:16:9: note: 'paren_level_stack_size'\
    \ previously dec"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char = [Int]()\n    var paren_char_stack = [Int]()\n    var\
    \ paren_char_stack_index = 0\n    var paren_char_stack_size = 0\n    var paren_char_stack_ptr\
    \ = 0\n    var paren_char_stack_top = 0\n    var paren_char_stack_top_ptr = 0\n\
    \    var paren_char_stack_top_size = 0\n    var paren_char_stack_top_ptr_next\
    \ = 0\n    var paren_char_stack_top_size_next = 0\n    var paren_char_stack_top_ptr_next_ptr\
    \ = 0\n    var paren_char_stack_top_size_next_ptr = 0\n    var paren_char_stack_top_ptr_next_ptr_next\
    \ = 0\n    var paren_char_stack_top_size_next_ptr_next = 0\n    var paren_char_stack_top_ptr_next_ptr_next_ptr\
    \ = 0\n    var paren_char_stack_top_size_next_ptr_next_ptr = 0\n    var paren_char_stack_top_ptr_next_ptr_next_ptr_next\
    \ = 0\n    var paren_char_stack_top_size_next_ptr_next_ptr_next = 0\n    var paren_char_stack_top_ptr_next_ptr_next_ptr_next_ptr\
    \ = 0\n    var paren_char_stack_top_size_next_ptr_next_ptr_next_ptr = 0\n    var\
    \ paren_char_stack_top_ptr_next_ptr_next_ptr_next_ptr_next = 0\n    var paren_char_stack_top_size_next_ptr_next_ptr_next_ptr_next\
    \ = 0\n    var paren_char_stack_top_ptr_next_ptr_next_ptr_next_ptr_next_ptr =\
    \ 0\n    var paren_char_stack_top_size_next_ptr_next_ptr_next_ptr_next_ptr = 0\n\
    \    var paren_char_stack_top_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next = 0\n\
    \    var paren_char_stack_top_size_next_ptr_next_ptr_next_ptr_next_ptr_next =\
    \ 0\n    var paren_char_stack_top_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr\
    \ = 0\n    var paren_char_stack_top_size_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr\
    \ = 0\n    var paren_char_stack_top_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next\
    \ = 0\n    var paren_char_stack_top_size_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr\
    \ = 0\n    var paren_char_stack_top_ptr_next_ptr_next_ptr_next_ptr_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp0oea7u1e.swift:44:9: error: type annotation missing in pattern\n\
    \    var paren_char_stack_top_ptr_next_ptr_next_ptr_next_ptr_\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char_start = 0\n    var paren_char_end = 0\n    var paren_char_char\
    \ = 0\n    var paren_char_char_count = 0\n    var paren_char_char_level = 0\n\
    \    var paren_char_char_start = 0\n    var paren_char_char_end = 0\n    var paren_char_char_char\
    \ = 0\n    var paren_char_char_char_count = 0\n    var paren_char_char_char_level\
    \ = 0\n    var paren_char_char_char_start = 0\n    var paren_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char = 0\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_end = 0\n    var paren_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_start = 0\n\
    \    var paren_char_char_char_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpcqft1kpa.swift:58:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_char_char_\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = 0\n    var paren_char_next = 0\n    var paren_char_prev\
    \ = 0\n    var paren_char_prev2 = 0\n    var paren_char_prev3 = 0\n    var paren_char_prev4\
    \ = 0\n    var paren_char_prev5 = 0\n    var paren_char_prev6 = 0\n    var paren_char_prev7\
    \ = 0\n    var paren_char_prev8 = 0\n    var paren_char_prev9 = 0\n    var paren_char_prev10\
    \ = 0\n    var paren_char_prev11 = 0\n    var paren_char_prev12 = 0\n    var paren_char_prev13\
    \ = 0\n    var paren_char_prev14 = 0\n    var paren_char_prev15 = 0\n    var paren_char_prev16\
    \ = 0\n    var paren_char_prev17 = 0\n    var paren_char_prev18 = 0\n    var paren_char_prev19\
    \ = 0\n    var paren_char_prev20 = 0\n    var paren_char_prev21 = 0\n    var paren_char_prev22\
    \ = 0\n    var paren_char_prev23 = 0\n    var paren_char_prev24 = 0\n    var paren_char_prev25\
    \ = 0\n    var paren_char_prev26 = 0\n    var paren_char_prev27 = 0\n    var paren_char_prev28\
    \ = 0\n    var paren_char_prev29 = 0\n    var paren_char_prev30 = 0\n    var paren_char_prev31\
    \ = 0\n    var paren_char_prev32 = 0\n    var paren_char_prev33 = 0\n    var paren_char_prev34\
    \ = 0\n    var paren_char_prev35 = 0\n    var paren_char_prev36 = 0\n    var paren_char_prev37\
    \ = 0\n    var paren_char_prev38 = 0\n    var paren_char_prev39 = 0\n    var paren_char_prev40\
    \ = 0\n    var paren_char_prev41 = 0\n    var paren_char_prev42 = 0\n    var paren_char_prev43\
    \ = 0\n    var paren_char_prev44 = 0\n    var paren_char_prev45 = 0\n    var paren_char_prev46\
    \ = 0\n    var paren_char_prev47 = 0\n    var paren_char_prev48 = 0\n    var paren_char_prev49\
    \ = 0\n    var paren_char_prev50 = 0\n    var paren_char_prev51 = 0\n    var paren_char_prev52\
    \ = 0\n    var paren_char_prev53 = 0\n    var paren_char_prev54 = 0\n    var paren_char_prev55\
    \ = 0\n    var paren_char_prev56 = 0\n    var paren_char_prev57 = 0\n    var paren_char_prev58\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpaxfgo1ow.swift:74:9: error: type annotation missing in pattern\n\
    \    var paren\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_groups = [String]()\n    var paren_group_index\
    \ = 0\n    var paren_group_stack = [String]()\n    var paren_group_stack_pointer\
    \ = 0\n    var paren_group_stack_index = 0\n    var paren_group_stack_max_index\
    \ = 0\n    var paren_group_stack_max_pointer = 0\n    var paren_group_stack_max_pointer_index\
    \ = 0\n    var paren_group_stack_max_pointer_level = 0\n    var paren_group_stack_max_pointer_level_index\
    \ = 0\n    var paren_group_stack_max_pointer_level_pointer = 0\n    var paren_group_stack_max_pointer_level_pointer_index\
    \ = 0\n    var paren_group_stack_max_pointer_level_pointer_pointer = 0\n    var\
    \ paren_group_stack_max_pointer_level_pointer_pointer_index = 0\n    var paren_group_stack_max_pointer_level_pointer_pointer_pointer\
    \ = 0\n    var paren_group_stack_max_pointer_level_pointer_pointer_pointer_index\
    \ = 0\n    var paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_index\
    \ = 0\n    var paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_index\
    \ = 0\n    var paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_index\
    \ = 0\n    var paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_pointer_index\
    \ = 0\n    var paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_pointer_index\
    \ = 0\n    var paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_pointer_pointer_index\
    \ = 0\n    var paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_pointer_pointer_index\
    \ = 0\n    var paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_pointer_pointer_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmplf8il_lg.swift:31:9: error: invalid redeclaration of 'paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_index'\n\
    \    var paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_index\
    \ = 0\n        ^\n/tmp/tmplf8il_lg.swift:29:9: note: 'paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_index'\
    \ previously declared here\n    var paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_index\
    \ = 0\n        ^\n/tmp/tmplf8il_lg.swift:32:9: error: invalid redeclaration of\
    \ 'paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_pointer'\n\
    \    var paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n        ^\n/tmp/tmplf8il_lg.swift:30:9: note: 'paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_pointer'\
    \ previously declared here\n    var paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n        ^\n/tmp/tmplf8il_lg.swift:33:9: error: invalid redeclaration of\
    \ 'paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_index'\n\
    \    var paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_index\
    \ = 0\n        ^\n/tmp/tmplf8il_lg.swift:29:9: note: 'paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_index'\
    \ previously declared here\n    var paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_index\
    \ = 0\n        ^\n/tmp/tmplf8il_lg.swift:34:9: error: invalid redeclaration of\
    \ 'paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_pointer'\n\
    \    var paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n        ^\n/tmp/tmplf8il_lg.swift:30:9: note: 'paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_pointer'\
    \ previously declared here\n    var paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n        ^\n/tmp/tmplf8il_lg.swift:37:9: error: invalid redeclaration of\
    \ 'paren_group_stack_max_pointer_level_pointer_pointer_pointer_pointer_pointer_index'\n\
    \    var paren_group_stack_m"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char = \"\"\n    var paren_char_index = 0\n    var paren_char_length\
    \ = 0\n    var paren_char_char_length = 0\n    var paren_char_char = \"\"\n  \
    \  var paren_char_char_char = \"\"\n    var paren_char_char_char_length = 0\n\
    \    var paren_char_char_char_char = \"\"\n    var paren_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char = \"\"\n    var paren_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char = \"\"\n    var paren_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char = \"\"\n    var paren_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char = \"\"\n    var paren_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char = \"\"\n   \
    \ var paren_char_char_char_char_char_char_char_char_char_length = 0\n    var paren_char_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n    var paren_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char =\
    \ \"\"\n    var paren_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpwmt0dtii.swift:44:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level =\
    \ 0\n    var paren_nesting = 0\n    var paren_nesting_level = 0\n    var paren_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpr62e0qid.swift:19:9: error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpr62e0qid.swift:18:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpr62e0qid.swift:20:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpr62e0qid.swift:18:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpr62e0qid.swift:21:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpr62e0qid.swift:18:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpr62e0qid.swift:22:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpr62e0qid.swift:18:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpr62e0qid.swift:23:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpr62e0qid.swift:18:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpr62e0qid.swift:24:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpr62e0qid.swift:18:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nestin"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_level_count\
    \ = 0\n    var paren_level_max_count = 0\n    var paren_level_max_level = 0\n\
    \    var paren_level_max_level_count = 0\n    var paren_level_max_level_count_index\
    \ = 0\n    var paren_level_max_level_count_index2 = 0\n    var paren_level_max_level_count_index3\
    \ = 0\n    var paren_level_max_level_count_index4 = 0\n    var paren_level_max_level_count_index5\
    \ = 0\n    var paren_level_max_level_count_index6 = 0\n    var paren_level_max_level_count_index7\
    \ = 0\n    var paren_level_max_level_count_index8 = 0\n    var paren_level_max_level_count_index9\
    \ = 0\n    var paren_level_max_level_count_index10 = 0\n    var paren_level_max_level_count_index11\
    \ = 0\n    var paren_level_max_level_count_index12 = 0\n    var paren_level_max_level_count_index13\
    \ = 0\n    var paren_level_max_level_count_index14 = 0\n    var paren_level_max_level_count_index15\
    \ = 0\n    var paren_level_max_level_count_index16 = 0\n    var paren_level_max_level_count_index17\
    \ = 0\n    var paren_level_max_level_count_index18 = 0\n    var paren_level_max_level_count_index19\
    \ = 0\n    var paren_level_max_level_count_index20 = 0\n    var paren_level_max_level_count_index21\
    \ = 0\n    var paren_level_max_level_count_index22 = 0\n    var paren_level_max_level_count_index23\
    \ = 0\n    var paren_level_max_level_count_index24 = 0\n    var paren_level_max_level_count_index25\
    \ = 0\n    var paren_level_max_level_count_index26 = 0\n    var paren_level_max_level_count_index27\
    \ = 0\n    var paren_level_max_level_count_index28 = 0\n    var paren_level_max_level_count_index29\
    \ = 0\n    var paren_level_max_level_count_index30 = 0\n    var paren_level_max_level_count_index31\
    \ = 0\n    var paren_level_max_level_count_index32 = 0\n    var paren_level_max_level_count_index33\
    \ = 0\n    var paren_level_max_level_count_index34 = 0\n    var paren_level_max_level_count_index35\
    \ = 0\n    var paren_level_max_level_count_index36 = 0\n    var paren_level_max_level_count_index37\
    \ = 0\n    var paren_level_max_level_count_index38 = 0\n    var paren_level_max_level_count_index39\
    \ = 0\n    var paren_level_max_level_count_index40 = 0\n    var paren_level_max_level_count_index41\
    \ = 0\n    var paren_level_max_level_count_index42 = 0\n    var paren_level_max_level_count_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmplvkm7l0n.swift:56:9: error: type annotation missing in pattern\n\
    \    var paren_level_max_level_count_index\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_levels_size = 0\n    var paren_levels_sizes = [Int]()\n\
    \    var paren_levels_sizes_size = 0\n    var paren_levels_sizes_sizes = [Int]()\n\
    \    var paren_levels_sizes_sizes_size = 0\n    var paren_levels_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_size = 0\n    var paren_levels_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_size = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_size = 0\n   \
    \ var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes = [Int]()\n\
    \    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size = 0\n   \
    \ var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes = [Int]()\n\
    \    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size = 0\n\
    \    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes =\
    \ [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpupjri_sg.swift:34:96: error: expected member name or constructor\
    \ call after type name\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]\n                                                                  \
    \                             ^\n/tmp/tmpupjri_sg.swift:34:100: note: add arguments\
    \ after the type to construct a value of the type\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]\n                                                                  \
    \                                 ^\n                                        \
    \                                                            ()\n/tmp/tmpupjri_sg.swift:34:100:\
    \ note: use '.self' to reference the type object\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]\n                                                                  \
    \                                 ^\n                                        \
    \                                                            .self\n/tmp/tmpupjri_sg.swift:8:9:\
    \ warning: initialization of variable 'levels' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var levels = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmpupjri_sg.swift:9:9: warning: initialization of variable 'paren_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpupjri_sg.swift:10:9:\
    \ warning: initialization of variable 'paren_levels' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels = [Int]()\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpupjri_sg.swift:11:9: warning: initialization\
    \ of variable 'paren_levels_size' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_levels_size = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpupjri_sg.swift:12:9: warning: initialization of variable 'paren_levels_sizes'\
    \ was never used; consider replacing with assignment to '_"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level =\
    \ 0\n    var paren_level_stack = [Int]()\n    var paren_level_stack_ptr = 0\n\
    \    var paren_level_stack_len = 0\n    var paren_level_stack_ptr_max = 0\n  \
    \  var paren_level_stack_len_p = 0\n    var paren_level_stack_ptr_max_p = 0\n\
    \    var paren_level_stack_ptr_max_p_len = 0\n    var paren_level_stack_ptr_max_p_len_p\
    \ = 0\n    var paren_level_stack_ptr_max_p_len_p_index = 0\n    var paren_level_stack_ptr_max_p_len_p_index\
    \ = 0\n    var paren_level_stack_ptr_max_p_len_p_index = 0\n    var paren_level_stack_ptr_max_p_len_p_index\
    \ = 0\n    var paren_level_stack_ptr_max_p_len_p_index = 0\n    var paren_level_stack_ptr_max_p_len_p_index\
    \ = 0\n    var paren_level_stack_ptr_max_p_len_p_index = 0\n    var paren_level_stack_ptr_max_p_len_p_index\
    \ = 0\n    var paren_level_stack_ptr_max_p_len_p_index = 0\n    var paren_level_stack_ptr_max_p_len_p_index\
    \ = 0\n    var paren_level_stack_ptr_max_p_len_p_index = 0\n    var paren_level_stack_ptr_max_p_len_p_index\
    \ = 0\n    var paren_level_stack_ptr_max_p_len_p_index = 0\n    var paren_level_stack_ptr_max_p_len_p_index\
    \ = 0\n    var paren_level_stack_ptr_max_p_len_p_index = 0\n    var paren_level_stack_ptr_max_p_len_p_index\
    \ = 0\n    var paren_level_stack_ptr_max_p_len_p_index = 0\n    var paren_level_stack_ptr_max_p_len_p_index\
    \ = 0\n    var paren_level_stack_ptr_max_p_len_p_index = 0\n    var paren_level_stack_ptr_max_p_len_p_index\
    \ = 0\n    var paren_level_stack_ptr_max_p_len_p_index = 0\n    var paren_level_stack_ptr_max_p_len_p_index\
    \ = 0\n    var paren_level_stack_ptr_max_p_len_p_index = 0\n    var paren_level_stack_ptr_max_p_len_p_index\
    \ = 0\n    var paren_level_stack_ptr_max_p_len_p_index = 0\n    var paren_level_stack_ptr_max_p_len_p_index\
    \ = 0\n    var paren_level_stack_ptr_max_p_len_p_index = 0\n    var paren_level_stack_ptr_max_p_len_p_index\
    \ = 0\n    var paren_level_stack_ptr_max_p_len_p_index = 0\n    var paren_level_stack_ptr_max_p_len\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpkple6oep.swift:20:9: error: invalid redeclaration of 'paren_level_stack_ptr_max_p_len_p_index'\n\
    \    var paren_level_stack_ptr_max_p_len_p_index = 0\n        ^\n/tmp/tmpkple6oep.swift:19:9:\
    \ note: 'paren_level_stack_ptr_max_p_len_p_index' previously declared here\n \
    \   var paren_level_stack_ptr_max_p_len_p_index = 0\n        ^\n/tmp/tmpkple6oep.swift:21:9:\
    \ error: invalid redeclaration of 'paren_level_stack_ptr_max_p_len_p_index'\n\
    \    var paren_level_stack_ptr_max_p_len_p_index = 0\n        ^\n/tmp/tmpkple6oep.swift:19:9:\
    \ note: 'paren_level_stack_ptr_max_p_len_p_index' previously declared here\n \
    \   var paren_level_stack_ptr_max_p_len_p_index = 0\n        ^\n/tmp/tmpkple6oep.swift:22:9:\
    \ error: invalid redeclaration of 'paren_level_stack_ptr_max_p_len_p_index'\n\
    \    var paren_level_stack_ptr_max_p_len_p_index = 0\n        ^\n/tmp/tmpkple6oep.swift:19:9:\
    \ note: 'paren_level_stack_ptr_max_p_len_p_index' previously declared here\n \
    \   var paren_level_stack_ptr_max_p_len_p_index = 0\n        ^\n/tmp/tmpkple6oep.swift:23:9:\
    \ error: invalid redeclaration of 'paren_level_stack_ptr_max_p_len_p_index'\n\
    \    var paren_level_stack_ptr_max_p_len_p_index = 0\n        ^\n/tmp/tmpkple6oep.swift:19:9:\
    \ note: 'paren_level_stack_ptr_max_p_len_p_index' previously declared here\n \
    \   var paren_level_stack_ptr_max_p_len_p_index = 0\n        ^\n/tmp/tmpkple6oep.swift:24:9:\
    \ error: invalid redeclaration of 'paren_level_stack_ptr_max_p_len_p_index'\n\
    \    var paren_level_stack_ptr_max_p_len_p_index = 0\n        ^\n/tmp/tmpkple6oep.swift:19:9:\
    \ note: 'paren_level_stack_ptr_max_p_len_p_index' previously declared here\n \
    \   var paren_level_stack_ptr_max_p_len_p_index = 0\n        ^\n/tmp/tmpkple6oep.swift:25:9:\
    \ error: invalid redeclaration of 'paren_level_stack_ptr_max_p_len_p_index'\n\
    \    var paren_level_stack_ptr_max_p_len_p_index = 0\n        ^\n/tmp/tmpkple6oep.swift:19:9:\
    \ note: 'paren_level_stack_ptr_max_p_len_p_index' previously declared here\n \
    \   var paren_level_stack_ptr_max_p_len_p_index = 0\n        ^\n/tmp/tmpkple6oep.swift:26:9:\
    \ error: invalid redeclaration of 'paren_level_"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var levels = [Int]()\n\
    \    var paren_count = 0\n    var paren_level = 0\n    var paren_levels = [Int]()\n\
    \    var paren_levels_count = 0\n    var paren_levels_index = 0\n    var paren_levels_index2\
    \ = 0\n    var paren_levels_index3 = 0\n    var paren_levels_index4 = 0\n    var\
    \ paren_levels_index5 = 0\n    var paren_levels_index6 = 0\n    var paren_levels_index7\
    \ = 0\n    var paren_levels_index8 = 0\n    var paren_levels_index9 = 0\n    var\
    \ paren_levels_index10 = 0\n    var paren_levels_index11 = 0\n    var paren_levels_index12\
    \ = 0\n    var paren_levels_index13 = 0\n    var paren_levels_index14 = 0\n  \
    \  var paren_levels_index15 = 0\n    var paren_levels_index16 = 0\n    var paren_levels_index17\
    \ = 0\n    var paren_levels_index18 = 0\n    var paren_levels_index19 = 0\n  \
    \  var paren_levels_index20 = 0\n    var paren_levels_index21 = 0\n    var paren_levels_index22\
    \ = 0\n    var paren_levels_index23 = 0\n    var paren_levels_index24 = 0\n  \
    \  var paren_levels_index25 = 0\n    var paren_levels_index26 = 0\n    var paren_levels_index27\
    \ = 0\n    var paren_levels_index28 = 0\n    var paren_levels_index29 = 0\n  \
    \  var paren_levels_index30 = 0\n    var paren_levels_index31 = 0\n    var paren_levels_index32\
    \ = 0\n    var paren_levels_index33 = 0\n    var paren_levels_index34 = 0\n  \
    \  var paren_levels_index35 = 0\n    var paren_levels_index36 = 0\n    var paren_levels_index37\
    \ = 0\n    var paren_levels_index38 = 0\n    var paren_levels_index39 = 0\n  \
    \  var paren_levels_index40 = 0\n    var paren_levels_index41 = 0\n    var paren_levels_index42\
    \ = 0\n    var paren_levels_index43 = 0\n    var paren_levels_index44 = 0\n  \
    \  var paren_levels_index45 = 0\n    var paren_levels_index46 = 0\n    var paren_levels_index47\
    \ = 0\n    var paren_levels_index48 = 0\n    var paren_levels_index49 = 0\n  \
    \  var paren_levels_index50 = 0\n    var paren_levels_index51 = 0\n    var paren_levels_index52\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpm01b07cn.swift:67:9: error: type annotation missing in pattern\n\
    \    var paren\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    for c in paren_string.characters {\n        if c == '(' {\n       \
    \     paren_count += 1\n            levels.append(paren_level)\n        } else\
    \ if c == ')' {\n            paren_count -= 1\n            levels.append(paren_level)\n\
    \            if paren_count == 0 {\n                levels.append(paren_level)\n\
    \            }\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpugeqn8o0.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpugeqn8o0.swift:15:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpugeqn8o0.swift:11:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpugeqn8o0.swift:10:9: warning: variable 'paren_level' was never mutated;\
    \ consider changing to 'let' constant\n    var paren_level = 0\n    ~~~ ^\n  \
    \  let\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpj7h88f0g.swift:79:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpj7h88f0g.swift:14:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpj7h88f0g.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpj7h88f0g.swift:15:9:\
    \ error: invalid redeclaration of 'paren_start_index'\n    var paren_start_index\
    \ = 0\n        ^\n/tmp/tmpj7h88f0g.swift:11:9: note: 'paren_start_index' previously\
    \ declared here\n    var paren_start_index = 0\n        ^\n/tmp/tmpj7h88f0g.swift:16:9:\
    \ error: invalid redeclaration of 'paren_end_index'\n    var paren_end_index =\
    \ 0\n        ^\n/tmp/tmpj7h88f0g.swift:12:9: note: 'paren_end_index' previously\
    \ declared here\n    var paren_end_index = 0\n        ^\n/tmp/tmpj7h88f0g.swift:17:9:\
    \ error: invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n\
    \        ^\n/tmp/tmpj7h88f0g.swift:13:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmpj7h88f0g.swift:18:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmpj7h88f0g.swift:10:9: note: 'paren_level' previously declared\
    \ here\n    var paren_level = 0\n        ^\n/tmp/tmpj7h88f0g.swift:19:9: error:\
    \ invalid redeclaration of 'paren_start_index'\n    var paren_start_index = 0\n\
    \        ^\n/tmp/tmpj7h88f0g.swift:11:9: note: 'paren_start_index' previously\
    \ declared here\n    var paren_start_index = 0\n        ^\n/tmp/tmpj7h88f0g.swift:20:9:\
    \ error: invalid redeclaration of 'paren_end_index'\n    var paren_end_index =\
    \ 0\n        ^\n/tmp/tmpj7h88f0g.swift:12:9: note: 'paren_end_index' previously\
    \ declared here\n    var paren_end_index = 0\n        ^\n/tmp/tmpj7h88f0g.swift:21:9:\
    \ error: invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n\
    \        ^\n/tmp/tmpj7h88f0g.swift:13:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmpj7h88f0g.swift:22:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmpj7h88f0g.swi"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char_start = 0\n    var paren_char_end = 0\n    var paren_char_char\
    \ = 0\n    var paren_char_char_count = 0\n    var paren_char_char_level = 0\n\
    \    var paren_char_char_start = 0\n    var paren_char_char_end = 0\n    var paren_char_char_char\
    \ = 0\n    var paren_char_char_char_count = 0\n    var paren_char_char_char_level\
    \ = 0\n    var paren_char_char_char_start = 0\n    var paren_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char = 0\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_end = 0\n    var paren_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_start = 0\n\
    \    var paren_char_char_char_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpcqft1kpa.swift:58:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_char_char_\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_string = \"\
    \"\n    for c in paren_string.unicodeScalars {\n        if parens_count == 0 {\n\
    \            parens_string = c.value\n        } else {\n            parens_string\
    \ = parens_string + c.value\n        }\n        parens_count += 1\n        if\
    \ parens_count == 2 {\n            if parens_string == \"()\" {\n            \
    \    level += 1\n                parens = 0\n                max_level_parens\
    \ = level\n            } else {\n                level -= 1\n                parens\
    \ = 0\n                max_level_parens = level\n            }\n            parens_count\
    \ = 0\n            parens_string = \"\"\n        }\n    }\n    if parens_count\
    \ > 0 {\n        level -= 1\n    }\n    if parens_count > 0 {\n        max_level_parens\
    \ = level\n    }\n    return [max_level_parens]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp15kw0l25.swift:16:31: error: cannot assign value of type 'UInt32'\
    \ to type 'String'\n            parens_string = c.value\n                    \
    \        ~~^~~~~\n/tmp/tmp15kw0l25.swift:18:47: error: cannot convert value of\
    \ type 'UInt32' to expected argument type 'String'\n            parens_string\
    \ = parens_string + c.value\n                                              ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_levels_size = 0\n    var paren_levels_count = 0\n   \
    \ var paren_levels_start = 0\n    var paren_levels_end = 0\n    var paren_levels_index\
    \ = 0\n    var paren_levels_size_index = 0\n    var paren_levels_count = 0\n \
    \   var paren_levels_size = 0\n    var paren_levels_index = 0\n    var paren_levels_end\
    \ = 0\n    var paren_levels_size_index = 0\n    var paren_levels_count = 0\n \
    \   var paren_levels_size = 0\n    var paren_levels_index = 0\n    var paren_levels_end\
    \ = 0\n    var paren_levels_size_index = 0\n    var paren_levels_count = 0\n \
    \   var paren_levels_size = 0\n    var paren_levels_index = 0\n    var paren_levels_end\
    \ = 0\n    var paren_levels_size_index = 0\n    var paren_levels_count = 0\n \
    \   var paren_levels_size = 0\n    var paren_levels_index = 0\n    var paren_levels_end\
    \ = 0\n    var paren_levels_size_index = 0\n    var paren_levels_count = 0\n \
    \   var paren_levels_size = 0\n    var paren_levels_index = 0\n    var paren_levels_end\
    \ = 0\n    var paren_levels_size_index = 0\n    var paren_levels_count = 0\n \
    \   var paren_levels_size = 0\n    var paren_levels_index = 0\n    var paren_levels_end\
    \ = 0\n    var paren_levels_size_index = 0\n    var paren_levels_count = 0\n \
    \   var paren_levels_size = 0\n    var paren_levels_index = 0\n    var paren_levels_end\
    \ = 0\n    var paren_levels_size_index = 0\n    var paren_levels_count = 0\n \
    \   var paren_levels_size = 0\n    var paren_levels_index = 0\n    var paren_levels_end\
    \ = 0\n    var paren_levels_size_index = 0\n    var paren_levels_count = 0\n \
    \   var paren_levels_size = 0\n    var paren_levels_index = 0\n    var paren_levels_end\
    \ = 0\n    var paren_levels_size_index = 0\n    var paren_levels_count = 0\n \
    \   var paren_levels_size = 0\n    var paren_levels_index = 0\n    var paren_levels_end\
    \ = 0\n    var paren_levels_size_index = 0\n    var paren_levels_count = 0\n \
    \   var paren_levels_size = 0\n    var paren_levels_index = 0\n    var paren\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpu_hg5jeg.swift:20:9: error: invalid redeclaration of 'paren_levels_count'\n\
    \    var paren_levels_count = 0\n        ^\n/tmp/tmpu_hg5jeg.swift:15:9: note:\
    \ 'paren_levels_count' previously declared here\n    var paren_levels_count =\
    \ 0\n        ^\n/tmp/tmpu_hg5jeg.swift:21:9: error: invalid redeclaration of 'paren_levels_size'\n\
    \    var paren_levels_size = 0\n        ^\n/tmp/tmpu_hg5jeg.swift:14:9: note:\
    \ 'paren_levels_size' previously declared here\n    var paren_levels_size = 0\n\
    \        ^\n/tmp/tmpu_hg5jeg.swift:22:9: error: invalid redeclaration of 'paren_levels_index'\n\
    \    var paren_levels_index = 0\n        ^\n/tmp/tmpu_hg5jeg.swift:18:9: note:\
    \ 'paren_levels_index' previously declared here\n    var paren_levels_index =\
    \ 0\n        ^\n/tmp/tmpu_hg5jeg.swift:23:9: error: invalid redeclaration of 'paren_levels_end'\n\
    \    var paren_levels_end = 0\n        ^\n/tmp/tmpu_hg5jeg.swift:17:9: note: 'paren_levels_end'\
    \ previously declared here\n    var paren_levels_end = 0\n        ^\n/tmp/tmpu_hg5jeg.swift:24:9:\
    \ error: invalid redeclaration of 'paren_levels_size_index'\n    var paren_levels_size_index\
    \ = 0\n        ^\n/tmp/tmpu_hg5jeg.swift:19:9: note: 'paren_levels_size_index'\
    \ previously declared here\n    var paren_levels_size_index = 0\n        ^\n/tmp/tmpu_hg5jeg.swift:25:9:\
    \ error: invalid redeclaration of 'paren_levels_count'\n    var paren_levels_count\
    \ = 0\n        ^\n/tmp/tmpu_hg5jeg.swift:15:9: note: 'paren_levels_count' previously\
    \ declared here\n    var paren_levels_count = 0\n        ^\n/tmp/tmpu_hg5jeg.swift:26:9:\
    \ error: invalid redeclaration of 'paren_levels_size'\n    var paren_levels_size\
    \ = 0\n        ^\n/tmp/tmpu_hg5jeg.swift:14:9: note: 'paren_levels_size' previously\
    \ declared here\n    var paren_levels_size = 0\n        ^\n/tmp/tmpu_hg5jeg.swift:27:9:\
    \ error: invalid redeclaration of 'paren_levels_index'\n    var paren_levels_index\
    \ = 0\n        ^\n/tmp/tmpu_hg5jeg.swift:18:9: note: 'paren_levels_index' previously\
    \ declared here\n    var paren_levels_index = 0\n        ^\n/tmp/tmpu_hg5jeg.swift:28:9:\
    \ error: invalid redeclaration of 'paren_levels_end'\n    "
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_level = 0\n    var paren_level_paren = 0\n    var paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren = 0\n    var paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren = 0\n    var paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren = 0\n   \
    \ var paren_level_paren_level_paren_level_paren_level_paren_level = 0\n    var\
    \ paren_level_paren_level_paren_level_paren_level_paren_level_paren = 0\n    var\
    \ paren_level_paren_level_paren_level_paren_level_paren_level_paren_level = 0\n\
    \    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpg_j7p4ya.swift:30:9: error: invalid redeclaration of 'paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level'\n\
    \    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n        ^\n/tmp/tmpg_j7p4ya.swift:29:9: note: 'paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level'\
    \ previously declared here\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n        ^\n/tmp/tmpg_j7p4ya.swift:32:9: error: type annotation missing\
    \ in pattern\n    var paren_level_paren_level_paren_level_paren\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_string = \"\
    \"\n    for c in paren_string.unicodeScalars {\n        if c == '(' {\n      \
    \      parens_count += 1\n            parens_level = 0\n        } else if c ==\
    \ ')' {\n            parens_count -= 1\n            if parens_count < 0 {\n  \
    \              parens_level = 0\n            }\n        }\n        if parens_level\
    \ == 0 {\n            levels.append(level)\n        }\n        parens_level +=\
    \ parens_count\n        parens += parens_count\n        level += parens_level\n\
    \    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmply5a2fws.swift:15:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmply5a2fws.swift:18:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmply5a2fws.swift:13:9: warning: initialization of variable\
    \ 'parens_string' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var parens_string = \"\"\n    ~~~~^~~~~~~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_count = 0\n    var\
    \ paren_levels_index = 0\n    var paren_levels_index2 = 0\n    var paren_levels_index3\
    \ = 0\n    var paren_levels_index4 = 0\n    var paren_levels_index5 = 0\n    var\
    \ paren_levels_index6 = 0\n    var paren_levels_index7 = 0\n    var paren_levels_index8\
    \ = 0\n    var paren_levels_index9 = 0\n    var paren_levels_index10 = 0\n   \
    \ var paren_levels_index11 = 0\n    var paren_levels_index12 = 0\n    var paren_levels_index13\
    \ = 0\n    var paren_levels_index14 = 0\n    var paren_levels_index15 = 0\n  \
    \  var paren_levels_index16 = 0\n    var paren_levels_index17 = 0\n    var paren_levels_index18\
    \ = 0\n    var paren_levels_index19 = 0\n    var paren_levels_index20 = 0\n  \
    \  var paren_levels_index21 = 0\n    var paren_levels_index22 = 0\n    var paren_levels_index23\
    \ = 0\n    var paren_levels_index24 = 0\n    var paren_levels_index25 = 0\n  \
    \  var paren_levels_index26 = 0\n    var paren_levels_index27 = 0\n    var paren_levels_index28\
    \ = 0\n    var paren_levels_index29 = 0\n    var paren_levels_index30 = 0\n  \
    \  var paren_levels_index31 = 0\n    var paren_levels_index32 = 0\n    var paren_levels_index33\
    \ = 0\n    var paren_levels_index34 = 0\n    var paren_levels_index35 = 0\n  \
    \  var paren_levels_index36 = 0\n    var paren_levels_index37 = 0\n    var paren_levels_index38\
    \ = 0\n    var paren_levels_index39 = 0\n    var paren_levels_index40 = 0\n  \
    \  var paren_levels_index41 = 0\n    var paren_levels_index42 = 0\n    var paren_levels_index43\
    \ = 0\n    var paren_levels_index44 = 0\n    var paren_levels_index45 = 0\n  \
    \  var paren_levels_index46 = 0\n    var paren_levels_index47 = 0\n    var paren_levels_index48\
    \ = 0\n    var paren_levels_index49 = 0\n    var paren_levels_index50 = 0\n  \
    \  var paren_levels_index51 = 0\n    var paren_levels_index52 = 0\n    var paren_levels_index53\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpaykl7trj.swift:66:9: error: type annotation missing in pattern\n\
    \    var paren\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_level = 0\n    var paren_char_start = 0\n    var paren_char_end\
    \ = 0\n    var paren_char_char_count = 0\n    var paren_char_char_level = 0\n\
    \    var paren_char_char_start = 0\n    var paren_char_char_end = 0\n    var paren_char_char_char_count\
    \ = 0\n    var paren_char_char_char_level = 0\n    var paren_char_char_char_start\
    \ = 0\n    var paren_char_char_char_end = 0\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_count = 0\n\
    \    var paren_char_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_count =\
    \ 0\n    var paren_char_char_char_char_char_char_char_char_char_char_level = 0\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_start = 0\n \
    \   var paren_char_char_char_char_char_char_char_char_char_char_end = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_char_char_count = 0\n   \
    \ var paren_char_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpmtw7f9bp.swift:54:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if paren_count == 0\
    \ {\n            levels.append(paren_level)\n        }\n        if c == paren\
    \ {\n            paren_count += 1\n        } else {\n            paren_count =\
    \ 0\n            paren_level -= 1\n        }\n    }\n    return levels\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpn_jrb2a5.swift:15:17: error: cannot find 'paren' in scope\n   \
    \     if c == paren {\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_stack = [Int]()\n\
    \    var paren_stack_size = -1\n    var paren_stack_pos = -1\n    var paren_stack_len\
    \ = -1\n    var paren_stack_last_pos = -1\n    var paren_stack_last_len = -1\n\
    \    var paren_stack_last_level = -1\n    var paren_stack_last_level_count = -1\n\
    \    var paren_stack_last_level_len = -1\n    var paren_stack_last_level_pos =\
    \ -1\n    var paren_stack_last_level_len = -1\n    var paren_stack_last_level_last_pos\
    \ = -1\n    var paren_stack_last_level_last_len = -1\n    var paren_stack_last_level_last_level\
    \ = -1\n    var paren_stack_last_level_last_level_count = -1\n    var paren_stack_last_level_last_level_len\
    \ = -1\n    var paren_stack_last_level_last_level_pos = -1\n    var paren_stack_last_level_last_level_len\
    \ = -1\n    var paren_stack_last_level_last_level_last_pos = -1\n    var paren_stack_last_level_last_level_last_len\
    \ = -1\n    var paren_stack_last_level_last_level_last_level = -1\n    var paren_stack_last_level_last_level_last_level_count\
    \ = -1\n    var paren_stack_last_level_last_level_last_level_len = -1\n    var\
    \ paren_stack_last_level_last_level_last_level_pos = -1\n    var paren_stack_last_level_last_level_last_level_len\
    \ = -1\n    var paren_stack_last_level_last_level_last_level_last_pos = -1\n \
    \   var paren_stack_last_level_last_level_last_level_last_len = -1\n    var paren_stack_last_level_last_level_last_level_last_level\
    \ = -1\n    var paren_stack_last_level_last_level_last_level_last_level_count\
    \ = -1\n    var paren_stack_last_level_last_level_last_level_last_level_len =\
    \ -1\n    var paren_stack_last_level_last_level_last_level_last_level_pos = -1\n\
    \    var paren_stack_last_level_last_level_last_level_last_level_len = -1\n  \
    \  var paren_stack_last_level_last_level_last_level_last_level_last_pos = -1\n\
    \    var paren_stack_last_level_last_level_last_level_last_level_last_len = -1\n\
    \    var paren_stack_last_level_last_level_last_level_last_level_last_level =\
    \ -1\n    var paren_stack_last_level_last_level_last_level_last_level_last_level_count\
    \ = -1\n    var paren_stack_last_level_last_level_last_level_last_level_last_level_len\
    \ = -1\n    var paren_stack_last_level_last_level_last_level_last_level_last_level_pos\
    \ = -1\n    var paren_stack_last_level_last_level_last_level_last_level_last_level_len\
    \ = -1\n    var paren_stack_last_level_last_level_last_level_last_level_\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp1jxqzvrh.swift:23:9: error: invalid redeclaration of 'paren_stack_last_level_len'\n\
    \    var paren_stack_last_level_len = -1\n        ^\n/tmp/tmp1jxqzvrh.swift:21:9:\
    \ note: 'paren_stack_last_level_len' previously declared here\n    var paren_stack_last_level_len\
    \ = -1\n        ^\n/tmp/tmp1jxqzvrh.swift:30:9: error: invalid redeclaration of\
    \ 'paren_stack_last_level_last_level_len'\n    var paren_stack_last_level_last_level_len\
    \ = -1\n        ^\n/tmp/tmp1jxqzvrh.swift:28:9: note: 'paren_stack_last_level_last_level_len'\
    \ previously declared here\n    var paren_stack_last_level_last_level_len = -1\n\
    \        ^\n/tmp/tmp1jxqzvrh.swift:37:9: error: invalid redeclaration of 'paren_stack_last_level_last_level_last_level_len'\n\
    \    var paren_stack_last_level_last_level_last_level_len = -1\n        ^\n/tmp/tmp1jxqzvrh.swift:35:9:\
    \ note: 'paren_stack_last_level_last_level_last_level_len' previously declared\
    \ here\n    var paren_stack_last_level_last_level_last_level_len = -1\n      \
    \  ^\n/tmp/tmp1jxqzvrh.swift:44:9: error: invalid redeclaration of 'paren_stack_last_level_last_level_last_level_last_level_len'\n\
    \    var paren_stack_last_level_last_level_last_level_last_level_len = -1\n  \
    \      ^\n/tmp/tmp1jxqzvrh.swift:42:9: note: 'paren_stack_last_level_last_level_last_level_last_level_len'\
    \ previously declared here\n    var paren_stack_last_level_last_level_last_level_last_level_len\
    \ = -1\n        ^\n/tmp/tmp1jxqzvrh.swift:51:9: error: invalid redeclaration of\
    \ 'paren_stack_last_level_last_level_last_level_last_level_last_level_len'\n \
    \   var paren_stack_last_level_last_level_last_level_last_level_last_level_len\
    \ = -1\n        ^\n/tmp/tmp1jxqzvrh.swift:49:9: note: 'paren_stack_last_level_last_level_last_level_last_level_last_level_len'\
    \ previously declared here\n    var paren_stack_last_level_last_level_last_level_last_level_last_level_len\
    \ = -1\n        ^\n/tmp/tmp1jxqzvrh.swift:52:9: error: type annotation missing\
    \ in pattern\n    var paren_stack_last_level_last_level_last_level_last_level_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7loufpti.swift:14:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:15:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:16:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:17:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:18:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:19:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:20:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:21:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:22:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:23:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var paren_count =\
    \ 0\n    var paren_level = 0\n    var paren_group = 0\n    var paren_group_size\
    \ = 0\n    var paren_group_level = 0\n    var paren_group_start = 0\n    var paren_group_end\
    \ = 0\n    var paren_group_content = \"\"\n    var paren_group_content_index =\
    \ 0\n    var paren_group_content_length = 0\n    var paren_group_content_char\
    \ = \"\"\n    var paren_group_content_char_length = 0\n    var paren_group_content_char_offset\
    \ = 0\n    var paren_group_content_char_offset_end = 0\n    var paren_group_content_char_offset_start\
    \ = 0\n    var paren_group_content_char_offset_start = 0\n    var paren_group_content_char_offset_end\
    \ = 0\n    var paren_group_content_char_offset_start = 0\n    var paren_group_content_char_offset_end\
    \ = 0\n    var paren_group_content_char_offset_start = 0\n    var paren_group_content_char_offset_end\
    \ = 0\n    var paren_group_content_char_offset_start = 0\n    var paren_group_content_char_offset_end\
    \ = 0\n    var paren_group_content_char_offset_start = 0\n    var paren_group_content_char_offset_end\
    \ = 0\n    var paren_group_content_char_offset_start = 0\n    var paren_group_content_char_offset_end\
    \ = 0\n    var paren_group_content_char_offset_start = 0\n    var paren_group_content_char_offset_end\
    \ = 0\n    var paren_group_content_char_offset_start = 0\n    var paren_group_content_char_offset_end\
    \ = 0\n    var paren_group_content_char_offset_start = 0\n    var paren_group_content_char_offset_end\
    \ = 0\n    var paren_group_content_char_offset_start = 0\n    var paren_group_content_char_offset_end\
    \ = 0\n    var paren_group_content_char_offset_start = 0\n    var paren_group_content_char_offset_end\
    \ = 0\n    var paren_group_content_char_offset_start = 0\n    var paren_group_content_char_offset_end\
    \ = 0\n    var paren_group_content_char_offset_start = 0\n    var paren_group_content_char_offset_end\
    \ = 0\n    var paren_group_content_char_offset_start = 0\n    var paren_group_content_char_offset_end\
    \ = 0\n    var paren_group_content_char_offset_start = 0\n    var paren_group_content_char_offset_end\
    \ = 0\n    var paren_group_content_char_offset_start = 0\n    var paren_group_content_char_offset_end\
    \ = 0\n    var paren_group_content_char_offset_start = 0\n    var paren_group_content_char_offset_end\
    \ = 0\n    var paren_group_content_char_offset_start = 0\n    var paren_group_content_char_offset_end\
    \ = 0\n    var paren_group_content_char_offset_start = 0\n    var paren_group_content_char_offset_end\
    \ = 0\n    var paren_group_content_char_offset_start = 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp3wqq3l9r.swift:25:9: error: invalid redeclaration of 'paren_group_content_char_offset_start'\n\
    \    var paren_group_content_char_offset_start = 0\n        ^\n/tmp/tmp3wqq3l9r.swift:24:9:\
    \ note: 'paren_group_content_char_offset_start' previously declared here\n   \
    \ var paren_group_content_char_offset_start = 0\n        ^\n/tmp/tmp3wqq3l9r.swift:26:9:\
    \ error: invalid redeclaration of 'paren_group_content_char_offset_end'\n    var\
    \ paren_group_content_char_offset_end = 0\n        ^\n/tmp/tmp3wqq3l9r.swift:23:9:\
    \ note: 'paren_group_content_char_offset_end' previously declared here\n    var\
    \ paren_group_content_char_offset_end = 0\n        ^\n/tmp/tmp3wqq3l9r.swift:27:9:\
    \ error: invalid redeclaration of 'paren_group_content_char_offset_start'\n  \
    \  var paren_group_content_char_offset_start = 0\n        ^\n/tmp/tmp3wqq3l9r.swift:24:9:\
    \ note: 'paren_group_content_char_offset_start' previously declared here\n   \
    \ var paren_group_content_char_offset_start = 0\n        ^\n/tmp/tmp3wqq3l9r.swift:28:9:\
    \ error: invalid redeclaration of 'paren_group_content_char_offset_end'\n    var\
    \ paren_group_content_char_offset_end = 0\n        ^\n/tmp/tmp3wqq3l9r.swift:23:9:\
    \ note: 'paren_group_content_char_offset_end' previously declared here\n    var\
    \ paren_group_content_char_offset_end = 0\n        ^\n/tmp/tmp3wqq3l9r.swift:29:9:\
    \ error: invalid redeclaration of 'paren_group_content_char_offset_start'\n  \
    \  var paren_group_content_char_offset_start = 0\n        ^\n/tmp/tmp3wqq3l9r.swift:24:9:\
    \ note: 'paren_group_content_char_offset_start' previously declared here\n   \
    \ var paren_group_content_char_offset_start = 0\n        ^\n/tmp/tmp3wqq3l9r.swift:30:9:\
    \ error: invalid redeclaration of 'paren_group_content_char_offset_end'\n    var\
    \ paren_group_content_char_offset_end = 0\n        ^\n/tmp/tmp3wqq3l9r.swift:23:9:\
    \ note: 'paren_group_content_char_offset_end' previously declared here\n    var\
    \ paren_group_content_char_offset_end = 0\n        ^\n/tmp/tmp3wqq3l9r.swift:31:9:\
    \ error: invalid redeclaration of 'paren_group_content_char_offset_start'\n  \
    \  var paren_group_content_char_offset_start"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7loufpti.swift:14:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:15:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:16:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:17:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:18:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:19:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:20:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:21:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:22:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:23:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_paren\
    \ = 0\n    var paren_level_paren_count = 0\n    var paren_level_paren_level =\
    \ 0\n    var paren_level_paren_level_paren = 0\n    var paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level = 0\n    var paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_count = 0\n    var paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren = 0\n   \
    \ var paren_level_paren_level_paren_level_paren_level_paren_count = 0\n    var\
    \ paren_level_paren_level_paren_level_paren_level_paren_level = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpzjxf93cn.swift:37:9: error: type annotation missing in pattern\n\
    \    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level =\
    \ 0\n    var paren_levels = [Int]()\n    var paren_levels_size = 0\n    var paren_levels_sizes\
    \ = [Int]()\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index_max\
    \ = 0\n    var paren_levels_sizes_index_max_index = 0\n    var paren_levels_sizes_index_min\
    \ = 0\n    var paren_levels_sizes_index_min_index = 0\n    var paren_levels_sizes_index_current\
    \ = 0\n    var paren_levels_sizes_index_current_index = 0\n    var paren_levels_sizes_index_next\
    \ = 0\n    var paren_levels_sizes_index_next_index = 0\n    var paren_levels_sizes_index_prev\
    \ = 0\n    var paren_levels_sizes_index_prev_index = 0\n    var paren_levels_sizes_index_current\
    \ = 0\n    var paren_levels_sizes_index_current_index = 0\n    var paren_levels_sizes_index_next\
    \ = 0\n    var paren_levels_sizes_index_next_index = 0\n    var paren_levels_sizes_index_prev\
    \ = 0\n    var paren_levels_sizes_index_prev_index = 0\n    var paren_levels_sizes_index_current\
    \ = 0\n    var paren_levels_sizes_index_current_index = 0\n    var paren_levels_sizes_index_next\
    \ = 0\n    var paren_levels_sizes_index_next_index = 0\n    var paren_levels_sizes_index_prev\
    \ = 0\n    var paren_levels_sizes_index_prev_index = 0\n    var paren_levels_sizes_index_current\
    \ = 0\n    var paren_levels_sizes_index_current_index = 0\n    var paren_levels_sizes_index_next\
    \ = 0\n    var paren_levels_sizes_index_next_index = 0\n    var paren_levels_sizes_index_prev\
    \ = 0\n    var paren_levels_sizes_index_prev_index = 0\n    var paren_levels_sizes_index_current\
    \ = 0\n    var paren_levels_sizes_index_current_index = 0\n    var paren_levels_sizes_index_next\
    \ = 0\n    var paren_levels_sizes_index_next_index = 0\n    var paren_levels_sizes_index_prev\
    \ = 0\n    var paren_levels_sizes_index_prev_index = 0\n    var paren_levels_sizes_index_current\
    \ = 0\n    var paren_levels_sizes_index_current_index = 0\n    var paren_levels_sizes_index_next\
    \ = 0\n    var paren_levels_sizes_index_next_index = 0\n    var paren_levels_sizes_index_prev\
    \ = 0\n    var paren_levels_sizes_index_prev_index = 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmplrt60gd_.swift:25:9: error: invalid redeclaration of 'paren_levels_sizes_index_current'\n\
    \    var paren_levels_sizes_index_current = 0\n        ^\n/tmp/tmplrt60gd_.swift:19:9:\
    \ note: 'paren_levels_sizes_index_current' previously declared here\n    var paren_levels_sizes_index_current\
    \ = 0\n        ^\n/tmp/tmplrt60gd_.swift:26:9: error: invalid redeclaration of\
    \ 'paren_levels_sizes_index_current_index'\n    var paren_levels_sizes_index_current_index\
    \ = 0\n        ^\n/tmp/tmplrt60gd_.swift:20:9: note: 'paren_levels_sizes_index_current_index'\
    \ previously declared here\n    var paren_levels_sizes_index_current_index = 0\n\
    \        ^\n/tmp/tmplrt60gd_.swift:27:9: error: invalid redeclaration of 'paren_levels_sizes_index_next'\n\
    \    var paren_levels_sizes_index_next = 0\n        ^\n/tmp/tmplrt60gd_.swift:21:9:\
    \ note: 'paren_levels_sizes_index_next' previously declared here\n    var paren_levels_sizes_index_next\
    \ = 0\n        ^\n/tmp/tmplrt60gd_.swift:28:9: error: invalid redeclaration of\
    \ 'paren_levels_sizes_index_next_index'\n    var paren_levels_sizes_index_next_index\
    \ = 0\n        ^\n/tmp/tmplrt60gd_.swift:22:9: note: 'paren_levels_sizes_index_next_index'\
    \ previously declared here\n    var paren_levels_sizes_index_next_index = 0\n\
    \        ^\n/tmp/tmplrt60gd_.swift:29:9: error: invalid redeclaration of 'paren_levels_sizes_index_prev'\n\
    \    var paren_levels_sizes_index_prev = 0\n        ^\n/tmp/tmplrt60gd_.swift:23:9:\
    \ note: 'paren_levels_sizes_index_prev' previously declared here\n    var paren_levels_sizes_index_prev\
    \ = 0\n        ^\n/tmp/tmplrt60gd_.swift:30:9: error: invalid redeclaration of\
    \ 'paren_levels_sizes_index_prev_index'\n    var paren_levels_sizes_index_prev_index\
    \ = 0\n        ^\n/tmp/tmplrt60gd_.swift:24:9: note: 'paren_levels_sizes_index_prev_index'\
    \ previously declared here\n    var paren_levels_sizes_index_prev_index = 0\n\
    \        ^\n/tmp/tmplrt60gd_.swift:31:9: error: invalid redeclaration of 'paren_levels_sizes_index_current'\n\
    \    var paren_levels_sizes_index_current = 0\n        ^\n/tmp/tmplrt60gd_.swift:19:9:\
    \ note: 'paren_levels_sizes_index_curren"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for c in paren_string.characters {\n        if c == '(' {\n       \
    \     paren_count++\n            levels[level] = paren_count\n            level++\n\
    \        } else if c == ')' {\n            levels[level] = paren_count\n     \
    \       level--\n            paren_count--\n        }\n    }\n    return levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpiacp0v9c.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpiacp0v9c.swift:16:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpiacp0v9c.swift:11:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpiacp0v9c.swift:13:24: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            paren_count++\n                       ^~\n\
    /tmp/tmpiacp0v9c.swift:15:18: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n            level++\n                 ^~\n/tmp/tmpiacp0v9c.swift:18:18:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  level--\n                 ^~\n/tmp/tmpiacp0v9c.swift:19:24: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n            paren_count--\n  \
    \                     ^~\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_parens\
    \ = 0\n    var paren_strings = paren_string.split(\" \").map(String::trim)\n \
    \   for paren_string in paren_strings {\n        if paren_string == \"\" {\n \
    \           continue\n        }\n        paren_count += 1\n        if paren_count\
    \ == 1 {\n            paren_level_parens += 1\n        }\n        if paren_level_parens\
    \ > max_level_parens {\n            max_level_parens = paren_level_parens\n  \
    \          max_level = level\n        }\n        level += 1\n    }\n    return\
    \ Array(max_level..<max_level + max_level_parens)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpz54fx9ia.swift:14:60: error: expected expression in list of expressions\n\
    \    var paren_strings = paren_string.split(\" \").map(String::trim)\n       \
    \                                                    ^\n/tmp/tmpz54fx9ia.swift:14:38:\
    \ error: no exact matches in call to instance method 'split'\n    var paren_strings\
    \ = paren_string.split(\" \").map(String::trim)\n                            \
    \         ^\n/tmp/tmpz54fx9ia.swift:14:38: note: found candidate with type '(String.Element,\
    \ Int, Bool) -> [ArraySlice<String.Element>]' (aka '(Character, Int, Bool) ->\
    \ Array<ArraySlice<Character>>')\n    var paren_strings = paren_string.split(\"\
    \ \").map(String::trim)\n                                     ^\n/tmp/tmpz54fx9ia.swift:14:38:\
    \ note: found candidate with type '(String.Element, Int, Bool) -> [String.SubSequence]'\
    \ (aka '(Character, Int, Bool) -> Array<Substring>')\n    var paren_strings =\
    \ paren_string.split(\" \").map(String::trim)\n                              \
    \       ^\n/tmp/tmpz54fx9ia.swift:14:65: error: missing argument for parameter\
    \ #1 in call\n    var paren_strings = paren_string.split(\" \").map(String::trim)\n\
    \                                                                ^\n         \
    \                                                       <#(ArraySlice<String.Element>)\
    \ throws -> _#>\nSwift.Collection:2:28: note: 'map' declared here\n    @inlinable\
    \ public func map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]\n\
    \                           ^\n/tmp/tmpz54fx9ia.swift:14:38: error: generic parameter\
    \ 'T' could not be inferred\n    var paren_strings = paren_string.split(\" \"\
    ).map(String::trim)\n                                     ^\nSwift.Collection:2:28:\
    \ note: in call to function 'map'\n    @inlinable public func map<T>(_ transform:\
    \ (Self.Element) throws -> T) rethrows -> [T]\n                           ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_level = 0\n    var paren_level_paren = 0\n    var paren_level_count\
    \ = 0\n    var paren_level_count_paren = 0\n    var paren_level_count_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren = 0\n    var paren_level_count_paren_paren_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren_paren_paren = 0\n    var paren_level_count_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren = 0\n\
    \    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren = 0\n\
    \    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpnzywwlrc.swift:29:9: error: invalid redeclaration of 'paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren'\n\
    \    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n        ^\n/tmp/tmpnzywwlrc.swift:28:9: note: 'paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren'\
    \ previously declared here\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n        ^\n/tmp/tmpnzywwlrc.swift:32:9: error: type annotation missing\
    \ in pattern\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_stack\
    \ = [Int]()\n    var paren_level_stack_index = 0\n    var paren_level_stack_string\
    \ = \"\"\n    var paren_level_stack_string_index = 0\n    var paren_level_stack_string_count\
    \ = 0\n    var paren_level_stack_string = \"\"\n    var paren_level_stack_string_index\
    \ = 0\n    var paren_level_stack_string_count = 0\n    var paren_level_stack_string\
    \ = \"\"\n    var paren_level_stack_string_index = 0\n    var paren_level_stack_string_count\
    \ = 0\n    var paren_level_stack_string = \"\"\n    var paren_level_stack_string_index\
    \ = 0\n    var paren_level_stack_string_count = 0\n    var paren_level_stack_string\
    \ = \"\"\n    var paren_level_stack_string_index = 0\n    var paren_level_stack_string_count\
    \ = 0\n    var paren_level_stack_string = \"\"\n    var paren_level_stack_string_index\
    \ = 0\n    var paren_level_stack_string_count = 0\n    var paren_level_stack_string\
    \ = \"\"\n    var paren_level_stack_string_index = 0\n    var paren_level_stack_string_count\
    \ = 0\n    var paren_level_stack_string = \"\"\n    var paren_level_stack_string_index\
    \ = 0\n    var paren_level_stack_string_count = 0\n    var paren_level_stack_string\
    \ = \"\"\n    var paren_level_stack_string_index = 0\n    var paren_level_stack_string_count\
    \ = 0\n    var paren_level_stack_string = \"\"\n    var paren_level_stack_string_index\
    \ = 0\n    var paren_level_stack_string_count = 0\n    var paren_level_stack_string\
    \ = \"\"\n    var paren_level_stack_string_index = 0\n    var paren_level_stack_string_count\
    \ = 0\n    var paren_level_stack_string = \"\"\n    var paren_level_stack_string_index\
    \ = 0\n    var paren_level_stack_string_count = 0\n    var paren_level_stack_string\
    \ = \"\"\n    var paren_level_stack_string_index = 0\n    var paren_level_stack_string_count\
    \ = 0\n    var paren_level_stack_string = \"\"\n    var paren_level_stack_string_index\
    \ = 0\n    var paren_level_stack_string_count = 0\n    var paren_level_stack_string\
    \ = \"\"\n    var paren_level_stack_string_index = 0\n    var paren_level_stack_string_count\
    \ = 0\n    var paren_level_stack_string = \"\"\n    var paren_level_stack_string_index\
    \ = 0\n    var paren_level_stack_string_count = 0\n    var paren_level_stack_string\
    \ = \"\"\n    var paren_level_stack_string_index = 0\n    var paren_level_stack_string_count\
    \ = 0\n    var paren_level_stack_string = \"\"\n    var paren_level_stack_string_index\
    \ = 0\n    var paren_level_stack_string_count = 0\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp4wr45xjf.swift:18:9: error: invalid redeclaration of 'paren_level_stack_string'\n\
    \    var paren_level_stack_string = \"\"\n        ^\n/tmp/tmp4wr45xjf.swift:15:9:\
    \ note: 'paren_level_stack_string' previously declared here\n    var paren_level_stack_string\
    \ = \"\"\n        ^\n/tmp/tmp4wr45xjf.swift:19:9: error: invalid redeclaration\
    \ of 'paren_level_stack_string_index'\n    var paren_level_stack_string_index\
    \ = 0\n        ^\n/tmp/tmp4wr45xjf.swift:16:9: note: 'paren_level_stack_string_index'\
    \ previously declared here\n    var paren_level_stack_string_index = 0\n     \
    \   ^\n/tmp/tmp4wr45xjf.swift:20:9: error: invalid redeclaration of 'paren_level_stack_string_count'\n\
    \    var paren_level_stack_string_count = 0\n        ^\n/tmp/tmp4wr45xjf.swift:17:9:\
    \ note: 'paren_level_stack_string_count' previously declared here\n    var paren_level_stack_string_count\
    \ = 0\n        ^\n/tmp/tmp4wr45xjf.swift:21:9: error: invalid redeclaration of\
    \ 'paren_level_stack_string'\n    var paren_level_stack_string = \"\"\n      \
    \  ^\n/tmp/tmp4wr45xjf.swift:15:9: note: 'paren_level_stack_string' previously\
    \ declared here\n    var paren_level_stack_string = \"\"\n        ^\n/tmp/tmp4wr45xjf.swift:22:9:\
    \ error: invalid redeclaration of 'paren_level_stack_string_index'\n    var paren_level_stack_string_index\
    \ = 0\n        ^\n/tmp/tmp4wr45xjf.swift:16:9: note: 'paren_level_stack_string_index'\
    \ previously declared here\n    var paren_level_stack_string_index = 0\n     \
    \   ^\n/tmp/tmp4wr45xjf.swift:23:9: error: invalid redeclaration of 'paren_level_stack_string_count'\n\
    \    var paren_level_stack_string_count = 0\n        ^\n/tmp/tmp4wr45xjf.swift:17:9:\
    \ note: 'paren_level_stack_string_count' previously declared here\n    var paren_level_stack_string_count\
    \ = 0\n        ^\n/tmp/tmp4wr45xjf.swift:24:9: error: invalid redeclaration of\
    \ 'paren_level_stack_string'\n    var paren_level_stack_string = \"\"\n      \
    \  ^\n/tmp/tmp4wr45xjf.swift:15:9: note: 'paren_level_stack_string' previously\
    \ declared here\n    var paren_level_stack_string = \"\"\n        ^\n/tmp/tmp4wr45xjf.swift:25:9:\
    \ error: invalid redeclaration of 'p"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp3qv6k77q.swift:12:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp3qv6k77q.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp3qv6k77q.swift:13:9:\
    \ error: invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n\
    \        ^\n/tmp/tmp3qv6k77q.swift:11:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmp3qv6k77q.swift:14:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmp3qv6k77q.swift:10:9: note: 'paren_level' previously declared\
    \ here\n    var paren_level = 0\n        ^\n/tmp/tmp3qv6k77q.swift:15:9: error:\
    \ invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp3qv6k77q.swift:11:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmp3qv6k77q.swift:16:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmp3qv6k77q.swift:10:9: note: 'paren_level' previously declared\
    \ here\n    var paren_level = 0\n        ^\n/tmp/tmp3qv6k77q.swift:17:9: error:\
    \ invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp3qv6k77q.swift:11:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmp3qv6k77q.swift:18:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmp3qv6k77q.swift:10:9: note: 'paren_level' previously declared\
    \ here\n    var paren_level = 0\n        ^\n/tmp/tmp3qv6k77q.swift:19:9: error:\
    \ invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp3qv6k77q.swift:11:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmp3qv6k77q.swift:20:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmp3qv6k77q.swift:10:9: note: 'paren_level' previously declared\
    \ here\n    var paren_level = 0\n        ^\n/tmp/tmp3qv6k77q.swift:21:9: er"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var max_level_paren_count = 0\n    var\
    \ paren_count = 0\n    var level = 0\n    var level_paren_count = 0\n    var paren_stack\
    \ = [Int]()\n    var paren_stack_pointer = 0\n    var paren_stack_pointer_max\
    \ = 0\n    var paren_stack_pointer_max_index = 0\n    var paren_stack_pointer_max_index2\
    \ = 0\n    var paren_stack_pointer_max_index3 = 0\n    var paren_stack_pointer_max_index4\
    \ = 0\n    var paren_stack_pointer_max_index5 = 0\n    var paren_stack_pointer_max_index6\
    \ = 0\n    var paren_stack_pointer_max_index7 = 0\n    var paren_stack_pointer_max_index8\
    \ = 0\n    var paren_stack_pointer_max_index9 = 0\n    var paren_stack_pointer_max_index10\
    \ = 0\n    var paren_stack_pointer_max_index11 = 0\n    var paren_stack_pointer_max_index12\
    \ = 0\n    var paren_stack_pointer_max_index13 = 0\n    var paren_stack_pointer_max_index14\
    \ = 0\n    var paren_stack_pointer_max_index15 = 0\n    var paren_stack_pointer_max_index16\
    \ = 0\n    var paren_stack_pointer_max_index17 = 0\n    var paren_stack_pointer_max_index18\
    \ = 0\n    var paren_stack_pointer_max_index19 = 0\n    var paren_stack_pointer_max_index20\
    \ = 0\n    var paren_stack_pointer_max_index21 = 0\n    var paren_stack_pointer_max_index22\
    \ = 0\n    var paren_stack_pointer_max_index23 = 0\n    var paren_stack_pointer_max_index24\
    \ = 0\n    var paren_stack_pointer_max_index25 = 0\n    var paren_stack_pointer_max_index26\
    \ = 0\n    var paren_stack_pointer_max_index27 = 0\n    var paren_stack_pointer_max_index28\
    \ = 0\n    var paren_stack_pointer_max_index29 = 0\n    var paren_stack_pointer_max_index30\
    \ = 0\n    var paren_stack_pointer_max_index31 = 0\n    var paren_stack_pointer_max_index32\
    \ = 0\n    var paren_stack_pointer_max_index33 = 0\n    var paren_stack_pointer_max_index34\
    \ = 0\n    var paren_stack_pointer_max_index35 = 0\n    var paren_stack_pointer_max_index36\
    \ = 0\n    var paren_stack_pointer_max_index37 = 0\n    var paren_stack_pointer_max_index38\
    \ = 0\n    var paren_stack_pointer_max_index39 = 0\n    var paren_stack_pointer_max_index40\
    \ = 0\n    var paren_stack_pointer_max_index41 = 0\n    var paren_stack_pointer_max_index42\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp4hu8n4yn.swift:8:9: warning: initialization of variable 'max_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var max_level = 0\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmp4hu8n4yn.swift:9:9: warning:\
    \ initialization of variable 'max_level_paren_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var max_level_paren_count\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4hu8n4yn.swift:10:9: warning:\
    \ initialization of variable 'paren_count' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_count = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp4hu8n4yn.swift:11:9: warning: initialization of variable 'level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmp4hu8n4yn.swift:12:9: warning:\
    \ initialization of variable 'level_paren_count' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var level_paren_count = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4hu8n4yn.swift:13:9: warning: initialization of variable 'paren_stack'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_stack = [Int]()\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp4hu8n4yn.swift:14:9:\
    \ warning: initialization of variable 'paren_stack_pointer' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_stack_pointer\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4hu8n4yn.swift:15:9: warning:\
    \ initialization of variable 'paren_stack_pointer_max' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_stack_pointer_max\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4hu8n4yn.swift:16:9: warning:\
    \ initialization of variable 'paren_stack_pointer_max_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_stack_pointer_max_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4hu8n4yn.swift:17:9:\
    \ warning: initialization of variable 'paren_stack_pointer_ma"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp8vm9q4o2.swift:15:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:16:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp8vm9q4o2.swift:12:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:17:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:13:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp8vm9q4o2.swift:18:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp8vm9q4o2.swift:14:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp8vm9q4o2.swift:19:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:20:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp8vm9q4o2.swift:12:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:21:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:13:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp8vm9q4o2.swift:22:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp8vm9q4o2.swift:14:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp8vm9q4o2.swift:23:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp8vm9q4o2.swift:24:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_level = 0\n    var paren_level_paren = 0\n    var paren_level_stack\
    \ = [Int]()\n    var paren_level_stack_paren = [Int]()\n    var paren_level_stack_paren_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack = [Int]()\n    var paren_level_stack_paren_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack = [Int]()\n\
    \    var paren_level_stack_paren_stack_stack_stack_stack_stack = [Int]()\n   \
    \ var paren_level_stack_paren_stack_stack_stack_stack_stack_stack = [Int]()\n\
    \    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack = [Int]()\n\
    \    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmprhvq_snn.swift:28:9: error: invalid redeclaration of 'paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack'\n\
    \    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n        ^\n/tmp/tmprhvq_snn.swift:27:9: note: 'paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack'\
    \ previously declared here\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n        ^\n/tmp/tmprhvq_snn.swift:32:9: error: invalid redeclaration\
    \ of 'paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack'\n\
    \    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n        ^\n/tmp/tmprhvq_snn.swift:31:9: note: 'paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack'\
    \ previously declared here\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n        ^\n/tmp/tmprhvq_snn.swift:33:9: error: invalid redeclaration\
    \ of 'paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack'\n\
    \    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n        ^\n/tmp/tmprhvq_snn.swift:31:9: note: 'paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack'\
    \ previously declared here\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n        ^\n/tmp/tmprhvq_snn.swift:35:9: error: type annotation missing\
    \ in pattern\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stac"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_char = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_level = 0\n    var paren_char_char = 0\n    var paren_char_char_count\
    \ = 0\n    var paren_char_char_level = 0\n    var paren_char_char_char = 0\n \
    \   var paren_char_char_char_count = 0\n    var paren_char_char_char_level = 0\n\
    \    var paren_char_char_char_char = 0\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_level = 0\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char =\
    \ 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp0ntu3l7w.swift:50:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_char = 0\n\
    \    var paren_char_count = 0\n    var paren_char_count_prev = 0\n    var paren_char_count_next\
    \ = 0\n    var paren_char_count_next2 = 0\n    var paren_char_count_next3 = 0\n\
    \    var paren_char_count_next4 = 0\n    var paren_char_count_next5 = 0\n    var\
    \ paren_char_count_next6 = 0\n    var paren_char_count_next7 = 0\n    var paren_char_count_next8\
    \ = 0\n    var paren_char_count_next9 = 0\n    var paren_char_count_next10 = 0\n\
    \    var paren_char_count_next11 = 0\n    var paren_char_count_next12 = 0\n  \
    \  var paren_char_count_next13 = 0\n    var paren_char_count_next14 = 0\n    var\
    \ paren_char_count_next15 = 0\n    var paren_char_count_next16 = 0\n    var paren_char_count_next17\
    \ = 0\n    var paren_char_count_next18 = 0\n    var paren_char_count_next19 =\
    \ 0\n    var paren_char_count_next20 = 0\n    var paren_char_count_next21 = 0\n\
    \    var paren_char_count_next22 = 0\n    var paren_char_count_next23 = 0\n  \
    \  var paren_char_count_next24 = 0\n    var paren_char_count_next25 = 0\n    var\
    \ paren_char_count_next26 = 0\n    var paren_char_count_next27 = 0\n    var paren_char_count_next28\
    \ = 0\n    var paren_char_count_next29 = 0\n    var paren_char_count_next30 =\
    \ 0\n    var paren_char_count_next31 = 0\n    var paren_char_count_next32 = 0\n\
    \    var paren_char_count_next33 = 0\n    var paren_char_count_next34 = 0\n  \
    \  var paren_char_count_next35 = 0\n    var paren_char_count_next36 = 0\n    var\
    \ paren_char_count_next37 = 0\n    var paren_char_count_next38 = 0\n    var paren_char_count_next39\
    \ = 0\n    var paren_char_count_next40 = 0\n    var paren_char_count_next41 =\
    \ 0\n    var paren_char_count_next42 = 0\n    var paren_char_count_next43 = 0\n\
    \    var paren_char_count_next44 = 0\n    var paren_char_count_next45 = 0\n  \
    \  var paren_char_count_next46 = 0\n    var paren_char_count_next47 = 0\n    var\
    \ paren_char_count_next48 = 0\n    var paren_char_count_next49 = 0\n    var paren_char_count_next50\
    \ = 0\n    var paren_char_count_next51 = 0\n    var paren_char_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpvi4e29p2.swift:67:9: error: type annotation missing in pattern\n\
    \    var paren_char_\n        ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var levels = [Int]()\n\
    \    var paren_count = 0\n    for char in paren_string.characters {\n        if\
    \ char == '(' {\n            paren_count += 1\n            level = 0\n       \
    \ } else if char == ')' {\n            paren_count -= 1\n            if paren_count\
    \ == 0 {\n                levels[level] = level\n                level += 1\n\
    \            }\n        }\n    }\n    for level in levels {\n        if level\
    \ > max_level {\n            max_level = level\n        }\n    }\n    return max_level\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpowu1ejzv.swift:13:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmpowu1ejzv.swift:16:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmpowu1ejzv.swift:12:30: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in paren_string.characters\
    \ {\n                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpowu1ejzv.swift:29:12: error: cannot convert return\
    \ expression of type 'Int' to return type '[Int]'\n    return max_level\n    \
    \       ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var paren_level =\
    \ 0\n    var paren_levels = [Int]()\n    var paren_levels_len = 0\n    var paren_levels_lens\
    \ = [Int]()\n    var paren_levels_lens_len = 0\n    var paren_levels_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_len = 0\n    var paren_levels_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n\
    \    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: '/tmp/tmpkg8rlj_b.swift:36:1: error: expected expression in container literal

    }

    ^

    '
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char = \"\"\n    var paren_chars = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_indexes = []\n    var\
    \ paren_char_index = 0\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_indexes = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_indexes = []\n    var\
    \ paren_char_index = 0\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_indexes = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_indexes = []\n    var\
    \ paren_char_index = 0\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_indexes = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_indexes = []\n    var\
    \ paren_char_index = 0\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_indexes = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_indexes = []\n    var\
    \ paren_char_index = 0\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_indexes = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_indexes = []\n    var\
    \ paren_char_index = 0\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_indexes = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpjh72enni.swift:78:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpjh72enni.swift:15:23: error: empty collection literal requires an\
    \ explicit type\n    var paren_chars = []\n                      ^~\n/tmp/tmpjh72enni.swift:16:30:\
    \ error: empty collection literal requires an explicit type\n    var paren_char_indexes\
    \ = []\n                             ^~\n/tmp/tmpjh72enni.swift:17:9: error: invalid\
    \ redeclaration of 'paren_char_index'\n    var paren_char_index = 0\n        ^\n\
    /tmp/tmpjh72enni.swift:13:9: note: 'paren_char_index' previously declared here\n\
    \    var paren_char_index = 0\n        ^\n/tmp/tmpjh72enni.swift:18:30: error:\
    \ empty collection literal requires an explicit type\n    var paren_char_indexes\
    \ = []\n                             ^~\n/tmp/tmpjh72enni.swift:18:9: error: invalid\
    \ redeclaration of 'paren_char_indexes'\n    var paren_char_indexes = []\n   \
    \     ^\n/tmp/tmpjh72enni.swift:16:9: note: 'paren_char_indexes' previously declared\
    \ here\n    var paren_char_indexes = []\n        ^\n/tmp/tmpjh72enni.swift:19:9:\
    \ error: invalid redeclaration of 'paren_char_index'\n    var paren_char_index\
    \ = 0\n        ^\n/tmp/tmpjh72enni.swift:13:9: note: 'paren_char_index' previously\
    \ declared here\n    var paren_char_index = 0\n        ^\n/tmp/tmpjh72enni.swift:20:30:\
    \ error: empty collection literal requires an explicit type\n    var paren_char_indexes\
    \ = []\n                             ^~\n/tmp/tmpjh72enni.swift:20:9: error: invalid\
    \ redeclaration of 'paren_char_indexes'\n    var paren_char_indexes = []\n   \
    \     ^\n/tmp/tmpjh72enni.swift:16:9: note: 'paren_char_indexes' previously declared\
    \ here\n    var paren_char_indexes = []\n        ^\n/tmp/tmpjh72enni.swift:21:9:\
    \ error: invalid redeclaration of 'paren_char_index'\n    var paren_char_index\
    \ = 0\n        ^\n/tmp/tmpjh72enni.swift:13:9: note: 'paren_char_index' previously\
    \ declared here\n    var paren_char_index = 0\n        ^\n/tmp/tmpjh72enni.swift:22:30:\
    \ error: empty collection literal requires an explicit type\n    var paren_char_indexes\
    \ = []\n                             ^~\n/tmp/tmpjh72enni.swift:22:"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_count =\
    \ 0\n    var paren_level = 0\n    var paren_char = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_level = 0\n    var paren_char_char = 0\n    var paren_char_char_count\
    \ = 0\n    var paren_char_char_level = 0\n    var paren_char_char_char = 0\n \
    \   var paren_char_char_char_count = 0\n    var paren_char_char_char_level = 0\n\
    \    var paren_char_char_char_char = 0\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_level = 0\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char =\
    \ 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmparffuukd.swift:50:9: error: invalid redeclaration of 'paren_char_char_char_char_char_char_char_char_char_char_char_char_level'\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n        ^\n/tmp/tmparffuukd.swift:47:9: note: 'paren_char_char_char_char_char_char_char_char_char_char_char_char_level'\
    \ previously declared here\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n        ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7loufpti.swift:14:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:15:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:16:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:17:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:18:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:19:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:20:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:21:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:22:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:23:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_count\
    \ = 0\n    var paren_level_paren = 0\n    var paren_level_paren_count = 0\n  \
    \  var paren_level_paren_paren = 0\n    var paren_level_paren_paren_count = 0\n\
    \    var paren_level_paren_paren_paren = 0\n    var paren_level_paren_paren_paren_count\
    \ = 0\n    var paren_level_paren_paren_paren_paren = 0\n    var paren_level_paren_paren_paren_paren_count\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren = 0\n    var paren_level_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren = 0\n   \
    \ var paren_level_paren_paren_paren_paren_paren_paren_paren_count = 0\n    var\
    \ paren_level_paren_paren_paren_paren_paren_paren_paren_paren = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpob_2e7lg.swift:31:9: error: invalid redeclaration of 'paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_count'\n\
    \    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n        ^\n/tmp/tmpob_2e7lg.swift:30:9: note: 'paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_count'\
    \ previously declared here\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n        ^\n/tmp/tmpob_2e7lg.swift:34:9: error: invalid redeclaration of\
    \ 'paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_count'\n\
    \    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n        ^\n/tmp/tmpob_2e7lg.swift:33:9: note: 'paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_count'\
    \ previously declared here\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n        ^\n/tmp/tmpob_2e7lg.swift:38:9: error: type annotation missing\
    \ in pattern\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_stack = [Int]()\n    var paren_stack_ptr = 0\n    var paren_stack_top\
    \ = -1\n    var paren_stack_top2 = -1\n    var paren_stack_top3 = -1\n    var\
    \ paren_stack_top4 = -1\n    var paren_stack_top5 = -1\n    var paren_stack_top6\
    \ = -1\n    var paren_stack_top7 = -1\n    var paren_stack_top8 = -1\n    var\
    \ paren_stack_top9 = -1\n    var paren_stack_top10 = -1\n    var paren_stack_top11\
    \ = -1\n    var paren_stack_top12 = -1\n    var paren_stack_top13 = -1\n    var\
    \ paren_stack_top14 = -1\n    var paren_stack_top15 = -1\n    var paren_stack_top16\
    \ = -1\n    var paren_stack_top17 = -1\n    var paren_stack_top18 = -1\n    var\
    \ paren_stack_top19 = -1\n    var paren_stack_top20 = -1\n    var paren_stack_top21\
    \ = -1\n    var paren_stack_top22 = -1\n    var paren_stack_top23 = -1\n    var\
    \ paren_stack_top24 = -1\n    var paren_stack_top25 = -1\n    var paren_stack_top26\
    \ = -1\n    var paren_stack_top27 = -1\n    var paren_stack_top28 = -1\n    var\
    \ paren_stack_top29 = -1\n    var paren_stack_top30 = -1\n    var paren_stack_top31\
    \ = -1\n    var paren_stack_top32 = -1\n    var paren_stack_top33 = -1\n    var\
    \ paren_stack_top34 = -1\n    var paren_stack_top35 = -1\n    var paren_stack_top36\
    \ = -1\n    var paren_stack_top37 = -1\n    var paren_stack_top38 = -1\n    var\
    \ paren_stack_top39 = -1\n    var paren_stack_top40 = -1\n    var paren_stack_top41\
    \ = -1\n    var paren_stack_top42 = -1\n    var paren_stack_top43 = -1\n    var\
    \ paren_stack_top44 = -1\n    var paren_stack_top45 = -1\n    var paren_stack_top46\
    \ = -1\n    var paren_stack_top47 = -1\n    var paren_stack_top48 = -1\n    var\
    \ paren_stack_top49 = -1\n    var paren_stack_top50 = -1\n    var paren_stack_top51\
    \ = -1\n    var paren_stack_top52 = -1\n    var paren_stack_top53 = -1\n    var\
    \ paren_stack_top54 = -1\n    var paren_stack_top55 = -1\n    var paren_stack_top56\
    \ = -1\n    var paren_stack_top\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpdg_0vv21.swift:72:9: error: type annotation missing in pattern\n\
    \    var paren_stack_top\n        ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_paren\
    \ = 0\n    var paren_level_paren_count = 0\n    var paren_level_paren_level =\
    \ 0\n    var paren_level_paren_level_paren = 0\n    var paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level = 0\n    var paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_count = 0\n    var paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren = 0\n   \
    \ var paren_level_paren_level_paren_level_paren_level_paren_count = 0\n    var\
    \ paren_level_paren_level_paren_level_paren_level_paren_level = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpz7a9qw7p.swift:37:9: error: type annotation missing in pattern\n\
    \    var paren_level_paren_level_paren_level_paren_level_paren_level_paren\n \
    \       ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_parens\
    \ = 0\n    var paren_level_parens_count = 0\n    var paren_level_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_max = 0\n    var paren_level_parens_count_max_min\
    \ = 0\n    var paren_level_parens_count_max_min_index = 0\n    var paren_level_parens_count_max_min_count\
    \ = 0\n    var paren_level_parens_count_max_min_count_max = 0\n    var paren_level_parens_count_max_min_count_min\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index = 0\n    var paren_level_parens_count_max_min_count_min_count\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_count_max = 0\n    var\
    \ paren_level_parens_count_max_min_count_min_count_min = 0\n    var paren_level_parens_count_max_min_count_min_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_count_min_count = 0\n\
    \    var paren_level_parens_count_max_min_count_min_count_min_count_max = 0\n\
    \    var paren_level_parens_count_max_min_count_min_count_min_count_min = 0\n\
    \    var paren_level_parens_count_max_min_count_min_count_min_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_count_min_count_min_count\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_count_min_count_count_max\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_count_min_count_count_min\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_count_min_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_count_min_count_min_count_max\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_count_min_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_count_min_count_min_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_count_min_count_min_count_count_max\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_count_min_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_count_min_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_count_min_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_count_min_index = 0\n\
    \    var paren_level_parens_count_max_min_count_min_index = 0\n    var paren_level_parens_count_max_min_index\
    \ = 0\n    var paren_level_parens_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpk07gbnc3.swift:34:9: error: invalid redeclaration of 'paren_level_parens_count_max_min_count_min_count_min_count_min_index'\n\
    \    var paren_level_parens_count_max_min_count_min_count_min_count_min_index\
    \ = 0\n        ^\n/tmp/tmpk07gbnc3.swift:30:9: note: 'paren_level_parens_count_max_min_count_min_count_min_count_min_index'\
    \ previously declared here\n    var paren_level_parens_count_max_min_count_min_count_min_count_min_index\
    \ = 0\n        ^\n/tmp/tmpk07gbnc3.swift:36:9: error: invalid redeclaration of\
    \ 'paren_level_parens_count_max_min_count_min_count_min_count_min_index'\n   \
    \ var paren_level_parens_count_max_min_count_min_count_min_count_min_index = 0\n\
    \        ^\n/tmp/tmpk07gbnc3.swift:30:9: note: 'paren_level_parens_count_max_min_count_min_count_min_count_min_index'\
    \ previously declared here\n    var paren_level_parens_count_max_min_count_min_count_min_count_min_index\
    \ = 0\n        ^\n/tmp/tmpk07gbnc3.swift:39:9: error: invalid redeclaration of\
    \ 'paren_level_parens_count_max_min_count_min_count_min_count_min_index'\n   \
    \ var paren_level_parens_count_max_min_count_min_count_min_count_min_index = 0\n\
    \        ^\n/tmp/tmpk07gbnc3.swift:30:9: note: 'paren_level_parens_count_max_min_count_min_count_min_count_min_index'\
    \ previously declared here\n    var paren_level_parens_count_max_min_count_min_count_min_count_min_index\
    \ = 0\n        ^\n/tmp/tmpk07gbnc3.swift:40:9: error: invalid redeclaration of\
    \ 'paren_level_parens_count_max_min_count_min_count_min_count_min_index'\n   \
    \ var paren_level_parens_count_max_min_count_min_count_min_count_min_index = 0\n\
    \        ^\n/tmp/tmpk07gbnc3.swift:30:9: note: 'paren_level_parens_count_max_min_count_min_count_min_count_min_index'\
    \ previously declared here\n    var paren_level_parens_count_max_min_count_min_count_min_count_min_index\
    \ = 0\n        ^\n/tmp/tmpk07gbnc3.swift:41:9: error: invalid redeclaration of\
    \ 'paren_level_parens_count_max_min_count_min_count_min_count_min_index'\n   \
    \ var paren_level_parens_count_max_min_count_min_count_min_count_min_index = 0\n\
    \        ^\n/tmp/tmpk07gbnc3.swift:30:9: note: 'paren_lev"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level =\
    \ 0\n    var paren_levels = [Int]()\n    var paren_level_stack = [Int]()\n   \
    \ var paren_level_stack_pointer = 0\n    var paren_level_stack_pointer_max = paren_level_stack.count\n\
    \    var paren_level_stack_pointer_max_index = paren_level_stack_pointer_max -\
    \ 1\n    var paren_level_stack_pointer_max_value = paren_level_stack_pointer_max\n\
    \    var paren_level_stack_pointer_max_value_minus_1 = paren_level_stack_pointer_max_value\
    \ - 1\n    var paren_level_stack_pointer_max_value_minus_2 = paren_level_stack_pointer_max_value\
    \ - 2\n    var paren_level_stack_pointer_max_value_minus_3 = paren_level_stack_pointer_max_value\
    \ - 3\n    var paren_level_stack_pointer_max_value_minus_4 = paren_level_stack_pointer_max_value\
    \ - 4\n    var paren_level_stack_pointer_max_value_minus_5 = paren_level_stack_pointer_max_value\
    \ - 5\n    var paren_level_stack_pointer_max_value_minus_6 = paren_level_stack_pointer_max_value\
    \ - 6\n    var paren_level_stack_pointer_max_value_minus_7 = paren_level_stack_pointer_max_value\
    \ - 7\n    var paren_level_stack_pointer_max_value_minus_8 = paren_level_stack_pointer_max_value\
    \ - 8\n    var paren_level_stack_pointer_max_value_minus_9 = paren_level_stack_pointer_max_value\
    \ - 9\n    var paren_level_stack_pointer_max_value_minus_10 = paren_level_stack_pointer_max_value\
    \ - 10\n    var paren_level_stack_pointer_max_value_minus_11 = paren_level_stack_pointer_max_value\
    \ - 11\n    var paren_level_stack_pointer_max_value_minus_12 = paren_level_stack_pointer_max_value\
    \ - 12\n    var paren_level_stack_pointer_max_value_minus_13 = paren_level_stack_pointer_max_value\
    \ - 13\n    var paren_level_stack_pointer_max_value_minus_14 = paren_level_stack_pointer_max_value\
    \ - 14\n    var paren_level_stack_pointer_max_value_minus_15 = paren_level_stack_pointer_max_value\
    \ - 15\n    var paren_level_stack_pointer_max_value_minus_16 = paren_level_stack_pointer_max_value\
    \ - 16\n    var paren_level_stack_pointer_max_value_minus_17 = paren_level_stack_pointer_max_value\
    \ - 17\n    var paren_level_stack_pointer_max_value_minus_18 = paren_level_stack_pointer_max_value\
    \ - 18\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpudpsiaqi.swift:35:9: error: type annotation missing in pattern\n\
    \    var paren\n        ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for c in paren_string.characters {\n        if c == '(' {\n       \
    \     paren_count++\n            levels[level] = paren_count\n            level++\n\
    \        } else if c == ')' {\n            levels[level] = paren_count\n     \
    \       level--\n            paren_count--\n        } else if c == ' ' {\n   \
    \         levels[level] = paren_count\n        }\n    }\n    return levels\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6ao5inm5.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmp6ao5inm5.swift:16:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmp6ao5inm5.swift:20:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == ' ' {\n                       ^~~\n\
    \                       \" \"\n/tmp/tmp6ao5inm5.swift:11:27: error: 'characters'\
    \ is unavailable: Please use String directly\n    for c in paren_string.characters\
    \ {\n                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp6ao5inm5.swift:13:24: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            paren_count++\n                \
    \       ^~\n/tmp/tmp6ao5inm5.swift:15:18: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n            level++\n                 ^~\n/tmp/tmp6ao5inm5.swift:18:18:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  level--\n                 ^~\n/tmp/tmp6ao5inm5.swift:19:24: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n            paren_count--\n  \
    \                     ^~\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7loufpti.swift:14:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:15:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:16:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:17:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:18:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:19:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:20:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:21:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:22:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:23:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char_char_count = 0\n    var paren_char_char_level = 0\n\
    \    var paren_char_char_char_count = 0\n    var paren_char_char_char_level =\
    \ 0\n    var paren_char_char_char_char_count = 0\n    var paren_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_count = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_level = 0\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_count = 0\n \
    \   var paren_char_char_char_char_char_char_char_char_char_char_level = 0\n  \
    \  var paren_char_char_char_char_char_char_char_char_char_char_char_count = 0\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_char_level =\
    \ 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpeqme3u6w.swift:44:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_max_level\
    \ = 0\n    var paren_max_level_paren = 0\n    var paren_stack = [String]()\n \
    \   var paren_stack_string = \"\"\n    var paren_stack_string_count = 0\n    var\
    \ paren_stack_level = 0\n    var paren_stack_max_level = 0\n    var paren_stack_max_level_paren\
    \ = 0\n    var paren_stack_paren_count = 0\n    var paren_stack_paren_level =\
    \ 0\n    var paren_stack_paren_max_level = 0\n    var paren_stack_paren_max_level_paren\
    \ = 0\n    var paren_stack_paren_stack = [String]()\n    var paren_stack_paren_stack_string\
    \ = \"\"\n    var paren_stack_paren_stack_string_count = 0\n    var paren_stack_paren_stack_level\
    \ = 0\n    var paren_stack_paren_stack_max_level = 0\n    var paren_stack_paren_stack_max_level_paren\
    \ = 0\n    var paren_stack_paren_stack_paren_count = 0\n    var paren_stack_paren_stack_paren_level\
    \ = 0\n    var paren_stack_paren_stack_paren_max_level = 0\n    var paren_stack_paren_stack_paren_max_level_paren\
    \ = 0\n    var paren_stack_paren_stack_paren_stack = [String]()\n    var paren_stack_paren_stack_paren_stack_string\
    \ = \"\"\n    var paren_stack_paren_stack_paren_stack_string_count = 0\n    var\
    \ paren_stack_paren_stack_paren_stack_level = 0\n    var paren_stack_paren_stack_paren_stack_max_level\
    \ = 0\n    var paren_stack_paren_stack_paren_stack_max_level_paren = 0\n    var\
    \ paren_stack_paren_stack_paren_stack_paren_count = 0\n    var paren_stack_paren_stack_paren_stack_paren_level\
    \ = 0\n    var paren_stack_paren_stack_paren_stack_paren_max_level = 0\n    var\
    \ paren_stack_paren_stack_paren_stack_paren_max_level_paren = 0\n    var paren_stack_paren_stack_paren_stack_paren_stack\
    \ = [String]()\n    var paren_stack_paren_stack_paren_stack_paren_stack_string\
    \ = \"\"\n    var paren_stack_paren_stack_paren_stack_paren_stack_string_count\
    \ = 0\n    var paren_stack_paren_stack_paren_stack_paren_stack_level = 0\n   \
    \ var paren_stack_paren_stack_paren_stack_paren_stack_max_level = 0\n    var paren_stack_paren_stack_paren_stack_paren_stack_max_level_paren\
    \ = 0\n    var paren_stack_paren_stack_paren_stack_paren_stack_paren_count = 0\n\
    \    var paren_stack_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpgtcbyd31.swift:52:9: error: type annotation missing in pattern\n\
    \    var paren_stack_\n        ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = 0\n    var paren_char_next = 0\n    var paren_char_prev\
    \ = 0\n    var paren_char_prev2 = 0\n    var paren_char_next2 = 0\n    var paren_char_prev3\
    \ = 0\n    var paren_char_next3 = 0\n    var paren_char_prev4 = 0\n    var paren_char_next4\
    \ = 0\n    var paren_char_prev5 = 0\n    var paren_char_next5 = 0\n    var paren_char_prev6\
    \ = 0\n    var paren_char_next6 = 0\n    var paren_char_prev7 = 0\n    var paren_char_next7\
    \ = 0\n    var paren_char_prev8 = 0\n    var paren_char_next8 = 0\n    var paren_char_prev9\
    \ = 0\n    var paren_char_next9 = 0\n    var paren_char_prev10 = 0\n    var paren_char_next10\
    \ = 0\n    var paren_char_prev11 = 0\n    var paren_char_next11 = 0\n    var paren_char_prev12\
    \ = 0\n    var paren_char_next12 = 0\n    var paren_char_prev13 = 0\n    var paren_char_next13\
    \ = 0\n    var paren_char_prev14 = 0\n    var paren_char_next14 = 0\n    var paren_char_prev15\
    \ = 0\n    var paren_char_next15 = 0\n    var paren_char_prev16 = 0\n    var paren_char_next16\
    \ = 0\n    var paren_char_prev17 = 0\n    var paren_char_next17 = 0\n    var paren_char_prev18\
    \ = 0\n    var paren_char_next18 = 0\n    var paren_char_prev19 = 0\n    var paren_char_next19\
    \ = 0\n    var paren_char_prev20 = 0\n    var paren_char_next20 = 0\n    var paren_char_prev21\
    \ = 0\n    var paren_char_next21 = 0\n    var paren_char_prev22 = 0\n    var paren_char_next22\
    \ = 0\n    var paren_char_prev23 = 0\n    var paren_char_next23 = 0\n    var paren_char_prev24\
    \ = 0\n    var paren_char_next24 = 0\n    var paren_char_prev25 = 0\n    var paren_char_next25\
    \ = 0\n    var paren_char_prev26 = 0\n    var paren_char_next26 = 0\n    var paren_char_prev27\
    \ = 0\n    var paren_char_next27 = 0\n    var paren_char_prev28 = 0\n    var paren_char_next28\
    \ = 0\n    var paren_char_prev29 = 0\n    var paren_char_next29 = 0\n    var paren_char_prev30\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpuh_tcpfm.swift:74:9: error: type annotation missing in pattern\n\
    \    var paren\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char_start = 0\n    var paren_char_end = 0\n    var paren_char_char\
    \ = 0\n    var paren_char_char_count = 0\n    var paren_char_char_level = 0\n\
    \    var paren_char_char_start = 0\n    var paren_char_char_end = 0\n    var paren_char_char_char\
    \ = 0\n    var paren_char_char_char_count = 0\n    var paren_char_char_char_level\
    \ = 0\n    var paren_char_char_char_start = 0\n    var paren_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char = 0\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_end = 0\n    var paren_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_start = 0\n\
    \    var paren_char_char_char_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpcqft1kpa.swift:58:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_char_char_\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_char = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_level = 0\n    var paren_char_char_level = 0\n    var\
    \ paren_char_char_level_count = 0\n    var paren_char_char_level_char_count =\
    \ 0\n    var paren_char_char_level_char = 0\n    var paren_char_char_level_char_count\
    \ = 0\n    var paren_char_char_level_char_char = 0\n    var paren_char_char_level_char_char_count\
    \ = 0\n    var paren_char_char_level_char_char_char = 0\n    var paren_char_char_level_char_char_char_count\
    \ = 0\n    var paren_char_char_level_char_char_char_char = 0\n    var paren_char_char_level_char_char_char_char_count\
    \ = 0\n    var paren_char_char_level_char_char_char_char_char = 0\n    var paren_char_char_level_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_level_char_char_char_char_char_char = 0\n    var\
    \ paren_char_char_level_char_char_char_char_char_char_count = 0\n    var paren_char_char_level_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_level_char_char_char_char_char_char_count = 0\n\
    \    var paren_char_char_level_char_char_char_char_char_char_char = 0\n    var\
    \ paren_char_char_level_char_char_char_char_char_char_count = 0\n    var paren_char_char_level_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_level_char_char_char_char_char_char_count = 0\n\
    \    var paren_char_char_level_char_char_char_char_char_char_char = 0\n    var\
    \ paren_char_char_level_char_char_char_char_char_char_char_count = 0\n    var\
    \ paren_char_char_level_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_level_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_level_char_char_char_char_char_char_char_char =\
    \ 0\n    var paren_char_char_level_char_char_char_char_char_char_char_count =\
    \ 0\n    var paren_char_char_level_char_char_char_char_char_char_char_char = 0\n\
    \    var paren_char_char_level_char_char_char_char_char_char_char_char_count =\
    \ 0\n    var paren_char_char_level_char_char_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_level_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_level_char_char_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_level_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_level_char_char_char_char_char_char_char_\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp4hr6k8tm.swift:19:9: error: invalid redeclaration of 'paren_char_char_level_char_count'\n\
    \    var paren_char_char_level_char_count = 0\n        ^\n/tmp/tmp4hr6k8tm.swift:17:9:\
    \ note: 'paren_char_char_level_char_count' previously declared here\n    var paren_char_char_level_char_count\
    \ = 0\n        ^\n/tmp/tmp4hr6k8tm.swift:31:9: error: invalid redeclaration of\
    \ 'paren_char_char_level_char_char_char_char_char_char_count'\n    var paren_char_char_level_char_char_char_char_char_char_count\
    \ = 0\n        ^\n/tmp/tmp4hr6k8tm.swift:29:9: note: 'paren_char_char_level_char_char_char_char_char_char_count'\
    \ previously declared here\n    var paren_char_char_level_char_char_char_char_char_char_count\
    \ = 0\n        ^\n/tmp/tmp4hr6k8tm.swift:32:9: error: invalid redeclaration of\
    \ 'paren_char_char_level_char_char_char_char_char_char_char'\n    var paren_char_char_level_char_char_char_char_char_char_char\
    \ = 0\n        ^\n/tmp/tmp4hr6k8tm.swift:30:9: note: 'paren_char_char_level_char_char_char_char_char_char_char'\
    \ previously declared here\n    var paren_char_char_level_char_char_char_char_char_char_char\
    \ = 0\n        ^\n/tmp/tmp4hr6k8tm.swift:33:9: error: invalid redeclaration of\
    \ 'paren_char_char_level_char_char_char_char_char_char_count'\n    var paren_char_char_level_char_char_char_char_char_char_count\
    \ = 0\n        ^\n/tmp/tmp4hr6k8tm.swift:29:9: note: 'paren_char_char_level_char_char_char_char_char_char_count'\
    \ previously declared here\n    var paren_char_char_level_char_char_char_char_char_char_count\
    \ = 0\n        ^\n/tmp/tmp4hr6k8tm.swift:34:9: error: invalid redeclaration of\
    \ 'paren_char_char_level_char_char_char_char_char_char_char'\n    var paren_char_char_level_char_char_char_char_char_char_char\
    \ = 0\n        ^\n/tmp/tmp4hr6k8tm.swift:30:9: note: 'paren_char_char_level_char_char_char_char_char_char_char'\
    \ previously declared here\n    var paren_char_char_level_char_char_char_char_char_char_char\
    \ = 0\n        ^\n/tmp/tmp4hr6k8tm.swift:35:9: error: invalid redeclaration of\
    \ 'paren_char_char_level_char_char_char_char_char_char_count'\n    var paren_char_char_level_"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_groups = [String]()\n    var paren_group_index\
    \ = 0\n    var paren_group_count = 0\n    var paren_group_start = 0\n    var paren_group_end\
    \ = 0\n    var paren_group_length = 0\n    var paren_group_length_index = 0\n\
    \    var paren_group_length_start = 0\n    var paren_group_length_end = 0\n  \
    \  var paren_group_length_length = 0\n    var paren_group_length_length_index\
    \ = 0\n    var paren_group_length_length_start = 0\n    var paren_group_length_length_end\
    \ = 0\n    var paren_group_length_length_length = 0\n    var paren_group_length_length_length_index\
    \ = 0\n    var paren_group_length_length_length_start = 0\n    var paren_group_length_length_length_end\
    \ = 0\n    var paren_group_length_length_length_length = 0\n    var paren_group_length_length_length_length_index\
    \ = 0\n    var paren_group_length_length_length_length_start = 0\n    var paren_group_length_length_length_length_end\
    \ = 0\n    var paren_group_length_length_length_length_length = 0\n    var paren_group_length_length_length_length_length_index\
    \ = 0\n    var paren_group_length_length_length_length_length_start = 0\n    var\
    \ paren_group_length_length_length_length_length_end = 0\n    var paren_group_length_length_length_length_length_length\
    \ = 0\n    var paren_group_length_length_length_length_length_length_index = 0\n\
    \    var paren_group_length_length_length_length_length_length_start = 0\n   \
    \ var paren_group_length_length_length_length_length_length_end = 0\n    var paren_group_length_length_length_length_length_length_length\
    \ = 0\n    var paren_group_length_length_length_length_length_length_length_index\
    \ = 0\n    var paren_group_length_length_length_length_length_length_length_start\
    \ = 0\n    var paren_group_length_length_length_length_length_length_length_end\
    \ = 0\n    var paren_group_length_length_length_length_length_length_length_length\
    \ = 0\n    var paren_group_length_length_length_length_length_length_length_length_index\
    \ = 0\n    var paren_group_length_length_length_length_length_length_length_length_start\
    \ = 0\n    var paren_group_length_length_length_length_length_length_length_length_end\
    \ = 0\n    var paren_group_length_length_length_length_length_length_length_length_length\
    \ = 0\n    var paren_group_length_length_length_length_length_length_length_length_length_index\
    \ = 0\n    var paren_group_length_length_length_length_length_length_length_length_length_length_start\
    \ = 0\n    var paren_group_length_length_length_length_length_length_length_length_length_end\
    \ = 0\n    var paren_group_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    var paren_group_length_length_length_length_length_length_length_length_length_length_index\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpaerzfzns.swift:8:9: warning: initialization of variable 'level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpaerzfzns.swift:9:9: warning:\
    \ initialization of variable 'max_level' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var max_level = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpaerzfzns.swift:10:9: warning: initialization of variable 'max_level_parens'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var max_level_parens = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaerzfzns.swift:11:9:\
    \ warning: initialization of variable 'paren_count' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_count = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpaerzfzns.swift:12:9: warning: initialization of variable 'paren_groups'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_groups = [String]()\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpaerzfzns.swift:13:9:\
    \ warning: initialization of variable 'paren_group_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_group_index =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaerzfzns.swift:14:9: warning: initialization\
    \ of variable 'paren_group_count' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_group_count = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpaerzfzns.swift:15:9: warning: initialization of variable 'paren_group_start'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_group_start = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaerzfzns.swift:16:9:\
    \ warning: initialization of variable 'paren_group_end' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_group_end = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpaerzfzns.swift:17:9: warning: initialization\
    \ of variable 'paren_group_length' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    "
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_count =\
    \ 0\n    var paren_level = 0\n    var paren_stack = [String]()\n    var paren_levels\
    \ = [Int]()\n    var paren_levels_size = 0\n    var paren_levels_index = 0\n \
    \   var paren_levels_size_index = 0\n    var paren_levels_sizes = [Int]()\n  \
    \  var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index = 0\n  \
    \  var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index = 0\n  \
    \  var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index = 0\n  \
    \  var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index = 0\n  \
    \  var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index = 0\n  \
    \  var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index = 0\n  \
    \  var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index = 0\n  \
    \  var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index = 0\n  \
    \  var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index = 0\n  \
    \  var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index = 0\n  \
    \  var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index = 0\n  \
    \  var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index = 0\n  \
    \  var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index = 0\n  \
    \  var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index = 0\n  \
    \  var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index = 0\n  \
    \  var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index = 0\n  \
    \  var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index = 0\n  \
    \  var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index = 0\n  \
    \  var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index = 0\n  \
    \  var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index = 0\n  \
    \  var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index = 0\n  \
    \  var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp8epwxe0c.swift:19:9: error: invalid redeclaration of 'paren_levels_sizes_index'\n\
    \    var paren_levels_sizes_index = 0\n        ^\n/tmp/tmp8epwxe0c.swift:18:9:\
    \ note: 'paren_levels_sizes_index' previously declared here\n    var paren_levels_sizes_index\
    \ = 0\n        ^\n/tmp/tmp8epwxe0c.swift:20:9: error: invalid redeclaration of\
    \ 'paren_levels_sizes_index'\n    var paren_levels_sizes_index = 0\n        ^\n\
    /tmp/tmp8epwxe0c.swift:18:9: note: 'paren_levels_sizes_index' previously declared\
    \ here\n    var paren_levels_sizes_index = 0\n        ^\n/tmp/tmp8epwxe0c.swift:21:9:\
    \ error: invalid redeclaration of 'paren_levels_sizes_index'\n    var paren_levels_sizes_index\
    \ = 0\n        ^\n/tmp/tmp8epwxe0c.swift:18:9: note: 'paren_levels_sizes_index'\
    \ previously declared here\n    var paren_levels_sizes_index = 0\n        ^\n\
    /tmp/tmp8epwxe0c.swift:22:9: error: invalid redeclaration of 'paren_levels_sizes_index'\n\
    \    var paren_levels_sizes_index = 0\n        ^\n/tmp/tmp8epwxe0c.swift:18:9:\
    \ note: 'paren_levels_sizes_index' previously declared here\n    var paren_levels_sizes_index\
    \ = 0\n        ^\n/tmp/tmp8epwxe0c.swift:23:9: error: invalid redeclaration of\
    \ 'paren_levels_sizes_index'\n    var paren_levels_sizes_index = 0\n        ^\n\
    /tmp/tmp8epwxe0c.swift:18:9: note: 'paren_levels_sizes_index' previously declared\
    \ here\n    var paren_levels_sizes_index = 0\n        ^\n/tmp/tmp8epwxe0c.swift:24:9:\
    \ error: invalid redeclaration of 'paren_levels_sizes_index'\n    var paren_levels_sizes_index\
    \ = 0\n        ^\n/tmp/tmp8epwxe0c.swift:18:9: note: 'paren_levels_sizes_index'\
    \ previously declared here\n    var paren_levels_sizes_index = 0\n        ^\n\
    /tmp/tmp8epwxe0c.swift:25:9: error: invalid redeclaration of 'paren_levels_sizes_index'\n\
    \    var paren_levels_sizes_index = 0\n        ^\n/tmp/tmp8epwxe0c.swift:18:9:\
    \ note: 'paren_levels_sizes_index' previously declared here\n    var paren_levels_sizes_index\
    \ = 0\n        ^\n/tmp/tmp8epwxe0c.swift:26:9: error: invalid redeclaration of\
    \ 'paren_levels_sizes_index'\n    var paren_levels_sizes_index = 0\n        ^\n\
    /tmp/tmp8epwxe0c.swift:18:9: n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7loufpti.swift:14:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:15:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:16:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:17:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:18:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:19:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:20:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:21:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:22:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:23:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    var paren_level = 0\n    var paren_char = 0\n    var paren_char_count = 0\n\
    \    var paren_char_index = 0\n    var paren_char_length = 0\n    var paren_char_length_count\
    \ = 0\n    var paren_char_length_index = 0\n    var paren_char_length_char = 0\n\
    \    var paren_char_length_char_count = 0\n    var paren_char_length_char_index\
    \ = 0\n    var paren_char_length_char_length = 0\n    var paren_char_length_char_length_count\
    \ = 0\n    var paren_char_length_char_length_index = 0\n    var paren_char_length_char_length_char\
    \ = 0\n    var paren_char_length_char_length_char_count = 0\n    var paren_char_length_char_length_char_index\
    \ = 0\n    var paren_char_length_char_length_char_length = 0\n    var paren_char_length_char_length_char_length_count\
    \ = 0\n    var paren_char_length_char_length_char_length_index = 0\n    var paren_char_length_char_length_char_length_char\
    \ = 0\n    var paren_char_length_char_length_char_length_char_count = 0\n    var\
    \ paren_char_length_char_length_char_length_char_index = 0\n    var paren_char_length_char_length_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_count = 0\n\
    \    var paren_char_length_char_length_char_length_char_length_index = 0\n   \
    \ var paren_char_length_char_length_char_length_char_length_char = 0\n    var\
    \ paren_char_length_char_length_char_length_char_length_count = 0\n    var paren_char_length_char_length_char_length_char_length_index\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_count\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_index\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_count\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_index\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_count\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_index\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_count\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char\
    \ = 0\n    var paren_char_length_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp5zspzk93.swift:37:9: error: invalid redeclaration of 'paren_char_length_char_length_char_length_char_length_count'\n\
    \    var paren_char_length_char_length_char_length_char_length_count = 0\n   \
    \     ^\n/tmp/tmp5zspzk93.swift:34:9: note: 'paren_char_length_char_length_char_length_char_length_count'\
    \ previously declared here\n    var paren_char_length_char_length_char_length_char_length_count\
    \ = 0\n        ^\n/tmp/tmp5zspzk93.swift:38:9: error: invalid redeclaration of\
    \ 'paren_char_length_char_length_char_length_char_length_index'\n    var paren_char_length_char_length_char_length_char_length_index\
    \ = 0\n        ^\n/tmp/tmp5zspzk93.swift:35:9: note: 'paren_char_length_char_length_char_length_char_length_index'\
    \ previously declared here\n    var paren_char_length_char_length_char_length_char_length_index\
    \ = 0\n        ^\n/tmp/tmp5zspzk93.swift:42:9: error: invalid redeclaration of\
    \ 'paren_char_length_char_length_char_length_char_length_char_length'\n    var\
    \ paren_char_length_char_length_char_length_char_length_char_length = 0\n    \
    \    ^\n/tmp/tmp5zspzk93.swift:39:9: note: 'paren_char_length_char_length_char_length_char_length_char_length'\
    \ previously declared here\n    var paren_char_length_char_length_char_length_char_length_char_length\
    \ = 0\n        ^\n/tmp/tmp5zspzk93.swift:43:9: error: invalid redeclaration of\
    \ 'paren_char_length_char_length_char_length_char_length_char_count'\n    var\
    \ paren_char_length_char_length_char_length_char_length_char_count = 0\n     \
    \   ^\n/tmp/tmp5zspzk93.swift:40:9: note: 'paren_char_length_char_length_char_length_char_length_char_count'\
    \ previously declared here\n    var paren_char_length_char_length_char_length_char_length_char_count\
    \ = 0\n        ^\n/tmp/tmp5zspzk93.swift:44:9: error: invalid redeclaration of\
    \ 'paren_char_length_char_length_char_length_char_length_char_index'\n    var\
    \ paren_char_length_char_length_char_length_char_length_char_index = 0\n     \
    \   ^\n/tmp/tmp5zspzk93.swift:41:9: note: 'paren_char_length_char_length_char_length_char_length_char_index'\
    \ previously declared here\n    var paren_char_length_"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = 0\n    var paren_char_next = 0\n    var paren_char_prev\
    \ = 0\n    var paren_char_prev2 = 0\n    var paren_char_next2 = 0\n    var paren_char_prev3\
    \ = 0\n    var paren_char_next3 = 0\n    var paren_char_prev4 = 0\n    var paren_char_next4\
    \ = 0\n    var paren_char_prev5 = 0\n    var paren_char_next5 = 0\n    var paren_char_prev6\
    \ = 0\n    var paren_char_next6 = 0\n    var paren_char_prev7 = 0\n    var paren_char_next7\
    \ = 0\n    var paren_char_prev8 = 0\n    var paren_char_next8 = 0\n    var paren_char_prev9\
    \ = 0\n    var paren_char_next9 = 0\n    var paren_char_prev10 = 0\n    var paren_char_next10\
    \ = 0\n    var paren_char_prev11 = 0\n    var paren_char_next11 = 0\n    var paren_char_prev12\
    \ = 0\n    var paren_char_next12 = 0\n    var paren_char_prev13 = 0\n    var paren_char_next13\
    \ = 0\n    var paren_char_prev14 = 0\n    var paren_char_next14 = 0\n    var paren_char_prev15\
    \ = 0\n    var paren_char_next15 = 0\n    var paren_char_prev16 = 0\n    var paren_char_next16\
    \ = 0\n    var paren_char_prev17 = 0\n    var paren_char_next17 = 0\n    var paren_char_prev18\
    \ = 0\n    var paren_char_next18 = 0\n    var paren_char_prev19 = 0\n    var paren_char_next19\
    \ = 0\n    var paren_char_prev20 = 0\n    var paren_char_next20 = 0\n    var paren_char_prev21\
    \ = 0\n    var paren_char_next21 = 0\n    var paren_char_prev22 = 0\n    var paren_char_next22\
    \ = 0\n    var paren_char_prev23 = 0\n    var paren_char_next23 = 0\n    var paren_char_prev24\
    \ = 0\n    var paren_char_next24 = 0\n    var paren_char_prev25 = 0\n    var paren_char_next25\
    \ = 0\n    var paren_char_prev26 = 0\n    var paren_char_next26 = 0\n    var paren_char_prev27\
    \ = 0\n    var paren_char_next27 = 0\n    var paren_char_prev28 = 0\n    var paren_char_next28\
    \ = 0\n    var paren_char_prev29 = 0\n    var paren_char_next29 = 0\n    var paren_char_prev30\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpuh_tcpfm.swift:74:9: error: type annotation missing in pattern\n\
    \    var paren\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_paren\
    \ = 0\n    var paren_level_paren_count = 0\n    var paren_level_paren_level =\
    \ 0\n    var paren_level_paren_level_paren = 0\n    var paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level = 0\n    var paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_count = 0\n    var paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren = 0\n   \
    \ var paren_level_paren_level_paren_level_paren_level_paren_count = 0\n    var\
    \ paren_level_paren_level_paren_level_paren_level_paren_level = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpz7a9qw7p.swift:37:9: error: type annotation missing in pattern\n\
    \    var paren_level_paren_level_paren_level_paren_level_paren_level_paren\n \
    \       ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_count =\
    \ 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_stack = [Int]()\n    var paren_stack_pointer = 0\n    var paren_stack_pointer_max\
    \ = 0\n    var paren_stack_pointer_max_index = 0\n    var paren_stack_pointer_max_value\
    \ = 0\n    var paren_stack_pointer_max_value_index = 0\n    var paren_stack_pointer_max_value_count\
    \ = 0\n    var paren_stack_pointer_max_value_count_index = 0\n    var paren_stack_pointer_max_value_count_value\
    \ = 0\n    var paren_stack_pointer_max_value_count_value_index = 0\n    var paren_stack_pointer_max_value_count_value_count\
    \ = 0\n    var paren_stack_pointer_max_value_count_value_count_index = 0\n   \
    \ var paren_stack_pointer_max_value_count_value_count_value = 0\n    var paren_stack_pointer_max_value_count_value_count_value_index\
    \ = 0\n    var paren_stack_pointer_max_value_count_value_count_value_count = 0\n\
    \    var paren_stack_pointer_max_value_count_value_count_value_index = 0\n   \
    \ var paren_stack_pointer_max_value_count_value_count_value_count_index = 0\n\
    \    var paren_stack_pointer_max_value_count_value_count_value_count_value = 0\n\
    \    var paren_stack_pointer_max_value_count_value_count_value_index = 0\n   \
    \ var paren_stack_pointer_max_value_count_value_count_value_count_value = 0\n\
    \    var paren_stack_pointer_max_value_count_value_count_value_index = 0\n   \
    \ var paren_stack_pointer_max_value_count_value_count_value_count_value = 0\n\
    \    var paren_stack_pointer_max_value_count_value_count_value_index = 0\n   \
    \ var paren_stack_pointer_max_value_count_value_count_value_count_value = 0\n\
    \    var paren_stack_pointer_max_value_count_value_count_value_index = 0\n   \
    \ var paren_stack_pointer_max_value_count_value_count_value_count_value = 0\n\
    \    var paren_stack_pointer_max_value_count_value_count_value_index = 0\n   \
    \ var paren_stack_pointer_max_value_count_value_count_value_count_value = 0\n\
    \    var paren_stack_pointer_max_value_count_value_count_value_index = 0\n   \
    \ var paren_stack_pointer_max_value_count_value_count_value_count_value = 0\n\
    \    var paren_stack_pointer_max_value_count_value_count_value_index = 0\n   \
    \ var paren_stack_pointer_max_value_count_value_count_value_count_value = 0\n\
    \    var paren_stack_pointer_max_value_count_value_count_value_index = 0\n   \
    \ var paren_stack_pointer_max_value_count_value_count_value_count_value = 0\n\
    \    var paren_stack_pointer_max_value_count_value_count_value_index\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpbkhnhr8l.swift:29:9: error: invalid redeclaration of 'paren_stack_pointer_max_value_count_value_count_value_index'\n\
    \    var paren_stack_pointer_max_value_count_value_count_value_index = 0\n   \
    \     ^\n/tmp/tmpbkhnhr8l.swift:27:9: note: 'paren_stack_pointer_max_value_count_value_count_value_index'\
    \ previously declared here\n    var paren_stack_pointer_max_value_count_value_count_value_index\
    \ = 0\n        ^\n/tmp/tmpbkhnhr8l.swift:32:9: error: invalid redeclaration of\
    \ 'paren_stack_pointer_max_value_count_value_count_value_index'\n    var paren_stack_pointer_max_value_count_value_count_value_index\
    \ = 0\n        ^\n/tmp/tmpbkhnhr8l.swift:27:9: note: 'paren_stack_pointer_max_value_count_value_count_value_index'\
    \ previously declared here\n    var paren_stack_pointer_max_value_count_value_count_value_index\
    \ = 0\n        ^\n/tmp/tmpbkhnhr8l.swift:33:9: error: invalid redeclaration of\
    \ 'paren_stack_pointer_max_value_count_value_count_value_count_value'\n    var\
    \ paren_stack_pointer_max_value_count_value_count_value_count_value = 0\n    \
    \    ^\n/tmp/tmpbkhnhr8l.swift:31:9: note: 'paren_stack_pointer_max_value_count_value_count_value_count_value'\
    \ previously declared here\n    var paren_stack_pointer_max_value_count_value_count_value_count_value\
    \ = 0\n        ^\n/tmp/tmpbkhnhr8l.swift:34:9: error: invalid redeclaration of\
    \ 'paren_stack_pointer_max_value_count_value_count_value_index'\n    var paren_stack_pointer_max_value_count_value_count_value_index\
    \ = 0\n        ^\n/tmp/tmpbkhnhr8l.swift:27:9: note: 'paren_stack_pointer_max_value_count_value_count_value_index'\
    \ previously declared here\n    var paren_stack_pointer_max_value_count_value_count_value_index\
    \ = 0\n        ^\n/tmp/tmpbkhnhr8l.swift:35:9: error: invalid redeclaration of\
    \ 'paren_stack_pointer_max_value_count_value_count_value_count_value'\n    var\
    \ paren_stack_pointer_max_value_count_value_count_value_count_value = 0\n    \
    \    ^\n/tmp/tmpbkhnhr8l.swift:31:9: note: 'paren_stack_pointer_max_value_count_value_count_value_count_value'\
    \ previously declared here\n    var paren_stack_pointer_max_value_count"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var level\
    \ = 0\n    for ch in paren_string {\n        if ch == '(' {\n            paren_count++\n\
    \            levels.append(level)\n        } else if ch == ')' {\n           \
    \ levels[level] = levels[level] - 1\n            levels[level] = levels[level]\
    \ + 1\n            if levels[level] == 0 {\n                levels[level] = level\
    \ + 1\n            }\n        }\n        level++\n    }\n    return levels\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpakplcswp.swift:12:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmpakplcswp.swift:15:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n/tmp/tmpakplcswp.swift:13:24: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            paren_count++\n           \
    \            ^~\n/tmp/tmpakplcswp.swift:22:14: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    for c in paren_string.characters {\n        if c == '(' {\n            levels[level]\
    \ = parens\n            parens += 1\n        } else if c == ')' {\n          \
    \  levels[level] = parens\n            parens -= 1\n            if parens == 0\
    \ {\n                levels[level] = -1\n                level += 1\n        \
    \    }\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp8xnwzko8.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmp8xnwzko8.swift:15:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmp8xnwzko8.swift:11:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    for c in paren_string.unicodeScalars\
    \ {\n        if c == '(' {\n            paren_count += 1\n            paren_level\
    \ += 1\n        } else if c == ')' {\n            paren_count -= 1\n         \
    \   paren_level -= 1\n            if paren_level == 0 {\n                levels.append(paren_start)\n\
    \                levels.append(paren_start + paren_count)\n            }\n   \
    \     }\n        paren_start = paren_start + 1\n    }\n    return levels\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpjmmeu1u8.swift:14:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpjmmeu1u8.swift:17:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpjmmeu1u8.swift:9:9: warning: initialization of variable\
    \ 'level' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var level = 0\n    ~~~~^~~~~\n    _\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var paren_stack = [String]()\n    var paren_level\
    \ = [Int]()\n    var paren_level_stack = [Int]()\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index2 =\
    \ 0\n    var paren_level_stack_size2 = 0\n    var paren_level_stack_index3 = 0\n\
    \    var paren_level_stack_size3 = 0\n    var paren_level_stack_index4 = 0\n \
    \   var paren_level_stack_size4 = 0\n    var paren_level_stack_index5 = 0\n  \
    \  var paren_level_stack_size5 = 0\n    var paren_level_stack_index6 = 0\n   \
    \ var paren_level_stack_size6 = 0\n    var paren_level_stack_index7 = 0\n    var\
    \ paren_level_stack_size7 = 0\n    var paren_level_stack_index8 = 0\n    var paren_level_stack_size8\
    \ = 0\n    var paren_level_stack_index9 = 0\n    var paren_level_stack_size9 =\
    \ 0\n    var paren_level_stack_index10 = 0\n    var paren_level_stack_size10 =\
    \ 0\n    var paren_level_stack_index11 = 0\n    var paren_level_stack_size11 =\
    \ 0\n    var paren_level_stack_index12 = 0\n    var paren_level_stack_size12 =\
    \ 0\n    var paren_level_stack_index13 = 0\n    var paren_level_stack_size13 =\
    \ 0\n    var paren_level_stack_index14 = 0\n    var paren_level_stack_size14 =\
    \ 0\n    var paren_level_stack_index15 = 0\n    var paren_level_stack_size15 =\
    \ 0\n    var paren_level_stack_index16 = 0\n    var paren_level_stack_size16 =\
    \ 0\n    var paren_level_stack_index17 = 0\n    var paren_level_stack_size17 =\
    \ 0\n    var paren_level_stack_index18 = 0\n    var paren_level_stack_size18 =\
    \ 0\n    var paren_level_stack_index19 = 0\n    var paren_level_stack_size19 =\
    \ 0\n    var paren_level_stack_index20 = 0\n    var paren_level_stack_size20 =\
    \ 0\n    var paren_level_stack_index21 = 0\n    var paren_level_stack_size21 =\
    \ 0\n    var paren_level_stack_index22 = 0\n    var paren_level_stack_size22 =\
    \ 0\n    var paren_level_stack_index23 = 0\n    var paren_level_stack_size23 =\
    \ 0\n    var paren_level_stack_index24 = 0\n    var paren_level_stack_size24 =\
    \ 0\n    var paren_level_stack_index25 = 0\n    var paren_level_stack_size25 =\
    \ 0\n    var paren_level_stack_index26 = 0\n    var paren_level_stack_size26 =\
    \ 0\n    var paren_level_stack_index27 = 0\n    var paren_level_stack\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpc35c918p.swift:65:9: error: type annotation missing in pattern\n\
    \    var paren_level_stack\n        ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_count =\
    \ 0\n    var paren_level = 0\n    var paren_stack = [Int]()\n    var paren_stack_level\
    \ = 0\n    var paren_stack_max_level = 0\n    var paren_stack_max_level_char =\
    \ \"\"\n    var paren_stack_max_level_char_count = 0\n    var paren_stack_max_level_char_index\
    \ = 0\n    var paren_stack_max_level_char_length = 0\n    var paren_stack_max_level_char_length_index\
    \ = 0\n    var paren_stack_max_level_char_length_count = 0\n    var paren_stack_max_level_char_length_index_count\
    \ = 0\n    var paren_stack_max_level_char_length_index_count_index = 0\n    var\
    \ paren_stack_max_level_char_length_index_count_index_count = 0\n    var paren_stack_max_level_char_length_index_count_index_count_index\
    \ = 0\n    var paren_stack_max_level_char_length_index_count_index_count_index_count\
    \ = 0\n    var paren_stack_max_level_char_length_index_count_index_count_index_count_index\
    \ = 0\n    var paren_stack_max_level_char_length_index_count_index_count_index_count_index_count\
    \ = 0\n    var paren_stack_max_level_char_length_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var paren_stack_max_level_char_length_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n    var paren_stack_max_level_char_length_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var paren_stack_max_level_char_length_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n    var paren_stack_max_level_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var paren_stack_max_level_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n    var paren_stack_max_level_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var paren_stack_max_level_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n    var paren_stack_max_level_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var paren_stack_max_level_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n    var paren_stack_max_level_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var paren_stack_max_level_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var paren_stack_max_level_char_length_index_count_index_count_\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmphcr03uwa.swift:40:9: error: type annotation missing in pattern\n\
    \    var paren_stack_max_level_char_length_index_count_index_count_\n        ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_level = 0\n    var paren_max_level = 0\n    var paren_max_level_paren\
    \ = 0\n    var paren_level_paren = 0\n    var paren_level_paren_paren = 0\n  \
    \  var paren_level_paren_paren_paren = 0\n    var paren_level_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren = 0\n    var paren_level_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren = 0\n   \
    \ var paren_level_paren_paren_paren_paren_paren_paren_paren_paren = 0\n    var\
    \ paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren = 0\n    var\
    \ paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren = 0\n\
    \    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpywoxg_pj.swift:33:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpywoxg_pj.swift:8:9: warning: initialization of variable 'level' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpywoxg_pj.swift:9:9: warning: initialization\
    \ of variable 'max_level' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var max_level = 0\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpywoxg_pj.swift:10:9:\
    \ warning: initialization of variable 'max_level_paren' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var max_level_paren = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpywoxg_pj.swift:11:9: warning: initialization\
    \ of variable 'paren_level' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_level = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmpywoxg_pj.swift:12:9: warning: initialization of variable 'paren_max_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_max_level = 0\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpywoxg_pj.swift:13:9:\
    \ warning: initialization of variable 'paren_max_level_paren' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var paren_max_level_paren\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpywoxg_pj.swift:14:9: warning:\
    \ initialization of variable 'paren_level_paren' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_level_paren = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpywoxg_pj.swift:15:9: warning: initialization of variable 'paren_level_paren_paren'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level_paren_paren = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~\n    _\n\
    /tmp/tmpywoxg_pj.swift:16:9: warning: initialization of variable 'paren_level_paren_paren_paren'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level_paren_paren_paren = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpywoxg_pj.swift:"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char_start = 0\n    var paren_char_end = 0\n    var paren_char_char\
    \ = 0\n    var paren_char_char_count = 0\n    var paren_char_char_level = 0\n\
    \    var paren_char_char_start = 0\n    var paren_char_char_end = 0\n    var paren_char_char_char\
    \ = 0\n    var paren_char_char_char_count = 0\n    var paren_char_char_char_level\
    \ = 0\n    var paren_char_char_char_start = 0\n    var paren_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char = 0\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_end = 0\n    var paren_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_start = 0\n\
    \    var paren_char_char_char_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpcqft1kpa.swift:58:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_char_char_\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char_start = 0\n    var paren_char_end = 0\n    var paren_char_char\
    \ = 0\n    var paren_char_char_count = 0\n    var paren_char_char_level = 0\n\
    \    var paren_char_char_start = 0\n    var paren_char_char_end = 0\n    var paren_char_char_char\
    \ = 0\n    var paren_char_char_char_count = 0\n    var paren_char_char_char_level\
    \ = 0\n    var paren_char_char_char_start = 0\n    var paren_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char = 0\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_end = 0\n    var paren_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_start = 0\n\
    \    var paren_char_char_char_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpcqft1kpa.swift:58:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_char_char_\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if c == '(' {\n   \
    \         paren_count += 1\n            levels.append(level)\n        } else if\
    \ c == ')' {\n            levels[level] = levels[level] - 1\n            levels[level]\
    \ = max(levels[level], 0)\n            levels[level] = min(levels[level], paren_count)\n\
    \            paren_count = 0\n        }\n        level += 1\n    }\n    return\
    \ levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpdklie3qi.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpdklie3qi.swift:15:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_count = 0\n    var paren_count_paren = 0\n    var paren_count_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren = 0\n    var paren_count_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren = 0\n    var paren_count_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren = 0\n   \
    \ var paren_count_paren_paren_paren_paren_paren_paren_paren_paren = 0\n    var\
    \ paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren = 0\n    var\
    \ paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren = 0\n\
    \    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpwmqc_ftf.swift:26:9: error: invalid redeclaration of 'paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren'\n\
    \    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n        ^\n/tmp/tmpwmqc_ftf.swift:25:9: note: 'paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren'\
    \ previously declared here\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n        ^\n/tmp/tmpwmqc_ftf.swift:28:9: error: invalid redeclaration of\
    \ 'paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren'\n\
    \    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n        ^\n/tmp/tmpwmqc_ftf.swift:27:9: note: 'paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren'\
    \ previously declared here\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n        ^\n/tmp/tmpwmqc_ftf.swift:29:9: error: invalid redeclaration of\
    \ 'paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren'\n\
    \    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n        ^\n/tmp/tmpwmqc_ftf.swift:27:9: note: 'paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren'\
    \ previously declared here\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n        ^\n/tmp/tmpwmqc_ftf.swift:31:9: error: type annotation missing\
    \ in pattern\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_stack = [Int]()\n\
    \    var paren_stack_index = 0\n    var paren_stack_max = 0\n    var paren_stack_max_index\
    \ = 0\n    var paren_stack_max_count = 0\n    var paren_stack_max_count_index\
    \ = 0\n    var paren_stack_max_count_count = 0\n    var paren_stack_max_count_index\
    \ = 0\n    var paren_stack_max_count_count_index = 0\n    var paren_stack_max_count_count_count_index\
    \ = 0\n    var paren_stack_max_count_count_count_index = 0\n    var paren_stack_max_count_count_count_index\
    \ = 0\n    var paren_stack_max_count_count_count_index = 0\n    var paren_stack_max_count_count_count_index\
    \ = 0\n    var paren_stack_max_count_count_count_count_index = 0\n    var paren_stack_max_count_count_count_count_index\
    \ = 0\n    var paren_stack_max_count_count_count_count_index = 0\n    var paren_stack_max_count_count_count_count_index\
    \ = 0\n    var paren_stack_max_count_count_count_count_index = 0\n    var paren_stack_max_count_count_count_count_index\
    \ = 0\n    var paren_stack_max_count_count_count_count_index = 0\n    var paren_stack_max_count_count_count_count_index\
    \ = 0\n    var paren_stack_max_count_count_count_count_index = 0\n    var paren_stack_max_count_count_count_count_index\
    \ = 0\n    var paren_stack_max_count_count_count_count_index = 0\n    var paren_stack_max_count_count_count_count_index\
    \ = 0\n    var paren_stack_max_count_count_count_count_index = 0\n    var paren_stack_max_count_count_count_count_index\
    \ = 0\n    var paren_stack_max_count_count_count_count_index = 0\n    var paren_stack_max_count_count_count_count_index\
    \ = 0\n    var paren_stack_max_count_count_count_count_index = 0\n    var paren_stack_max_count_count_count_count_index\
    \ = 0\n    var paren_stack_max_count_count_count_count_index = 0\n    var paren_stack_max_count_count_count_count_count_index\
    \ = 0\n    var paren_stack_max_count_count_count_count_count_index = 0\n    var\
    \ paren_stack_max_count_count_count_count_count_index = 0\n    var paren_stack_max_count_count_count_count_count_index\
    \ = 0\n    var paren_stack_max_count_count_count_count_count_index = 0\n    var\
    \ paren_stack_max_count_count_count_count_count_index = 0\n    var paren_stack_max_count_count_count_count_count_index\
    \ = 0\n    var paren_stack_max_count_count_count_count_count_index = 0\n    var\
    \ paren_stack_max_count_count_count_count_count_index = 0\n    var paren_stack_max_count_count_count_count_count_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpq850i4hy.swift:20:9: error: invalid redeclaration of 'paren_stack_max_count_index'\n\
    \    var paren_stack_max_count_index = 0\n        ^\n/tmp/tmpq850i4hy.swift:18:9:\
    \ note: 'paren_stack_max_count_index' previously declared here\n    var paren_stack_max_count_index\
    \ = 0\n        ^\n/tmp/tmpq850i4hy.swift:23:9: error: invalid redeclaration of\
    \ 'paren_stack_max_count_count_count_index'\n    var paren_stack_max_count_count_count_index\
    \ = 0\n        ^\n/tmp/tmpq850i4hy.swift:22:9: note: 'paren_stack_max_count_count_count_index'\
    \ previously declared here\n    var paren_stack_max_count_count_count_index =\
    \ 0\n        ^\n/tmp/tmpq850i4hy.swift:24:9: error: invalid redeclaration of 'paren_stack_max_count_count_count_index'\n\
    \    var paren_stack_max_count_count_count_index = 0\n        ^\n/tmp/tmpq850i4hy.swift:22:9:\
    \ note: 'paren_stack_max_count_count_count_index' previously declared here\n \
    \   var paren_stack_max_count_count_count_index = 0\n        ^\n/tmp/tmpq850i4hy.swift:25:9:\
    \ error: invalid redeclaration of 'paren_stack_max_count_count_count_index'\n\
    \    var paren_stack_max_count_count_count_index = 0\n        ^\n/tmp/tmpq850i4hy.swift:22:9:\
    \ note: 'paren_stack_max_count_count_count_index' previously declared here\n \
    \   var paren_stack_max_count_count_count_index = 0\n        ^\n/tmp/tmpq850i4hy.swift:26:9:\
    \ error: invalid redeclaration of 'paren_stack_max_count_count_count_index'\n\
    \    var paren_stack_max_count_count_count_index = 0\n        ^\n/tmp/tmpq850i4hy.swift:22:9:\
    \ note: 'paren_stack_max_count_count_count_index' previously declared here\n \
    \   var paren_stack_max_count_count_count_index = 0\n        ^\n/tmp/tmpq850i4hy.swift:28:9:\
    \ error: invalid redeclaration of 'paren_stack_max_count_count_count_count_index'\n\
    \    var paren_stack_max_count_count_count_count_index = 0\n        ^\n/tmp/tmpq850i4hy.swift:27:9:\
    \ note: 'paren_stack_max_count_count_count_count_index' previously declared here\n\
    \    var paren_stack_max_count_count_count_count_index = 0\n        ^\n/tmp/tmpq850i4hy.swift:29:9:\
    \ error: invalid redeclaration of 'paren_stack_max_count_count_count_co"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level =\
    \ 0\n    var paren_level_stack = [Int]()\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_pointer = 0\n \
    \   var paren_level_stack_pointer_pointer = 0\n    var paren_level_stack_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer = 0\n    var\
    \ paren_level_stack_pointer_pointer_pointer_pointer_pointer = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp5ke8o26j.swift:27:9: error: type annotation missing in pattern\n\
    \    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7loufpti.swift:14:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:15:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:16:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:17:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:18:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:19:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:20:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:21:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:22:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:23:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var level\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_levels = [Int]()\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_len = 0\n    var paren_levels_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpdelb_zju.swift:18:9: error: invalid redeclaration of 'paren_levels_len'\n\
    \    var paren_levels_len = 0\n        ^\n/tmp/tmpdelb_zju.swift:15:9: note: 'paren_levels_len'\
    \ previously declared here\n    var paren_levels_len = 0\n        ^\n/tmp/tmpdelb_zju.swift:19:9:\
    \ error: invalid redeclaration of 'paren_levels_start'\n    var paren_levels_start\
    \ = 0\n        ^\n/tmp/tmpdelb_zju.swift:16:9: note: 'paren_levels_start' previously\
    \ declared here\n    var paren_levels_start = 0\n        ^\n/tmp/tmpdelb_zju.swift:20:9:\
    \ error: invalid redeclaration of 'paren_levels_end'\n    var paren_levels_end\
    \ = 0\n        ^\n/tmp/tmpdelb_zju.swift:17:9: note: 'paren_levels_end' previously\
    \ declared here\n    var paren_levels_end = 0\n        ^\n/tmp/tmpdelb_zju.swift:21:9:\
    \ error: invalid redeclaration of 'paren_levels_len'\n    var paren_levels_len\
    \ = 0\n        ^\n/tmp/tmpdelb_zju.swift:15:9: note: 'paren_levels_len' previously\
    \ declared here\n    var paren_levels_len = 0\n        ^\n/tmp/tmpdelb_zju.swift:22:9:\
    \ error: invalid redeclaration of 'paren_levels_start'\n    var paren_levels_start\
    \ = 0\n        ^\n/tmp/tmpdelb_zju.swift:16:9: note: 'paren_levels_start' previously\
    \ declared here\n    var paren_levels_start = 0\n        ^\n/tmp/tmpdelb_zju.swift:23:9:\
    \ error: invalid redeclaration of 'paren_levels_end'\n    var paren_levels_end\
    \ = 0\n        ^\n/tmp/tmpdelb_zju.swift:17:9: note: 'paren_levels_end' previously\
    \ declared here\n    var paren_levels_end = 0\n        ^\n/tmp/tmpdelb_zju.swift:24:9:\
    \ error: invalid redeclaration of 'paren_levels_len'\n    var paren_levels_len\
    \ = 0\n        ^\n/tmp/tmpdelb_zju.swift:15:9: note: 'paren_levels_len' previously\
    \ declared here\n    var paren_levels_len = 0\n        ^\n/tmp/tmpdelb_zju.swift:25:9:\
    \ error: invalid redeclaration of 'paren_levels_start'\n    var paren_levels_start\
    \ = 0\n        ^\n/tmp/tmpdelb_zju.swift:16:9: note: 'paren_levels_start' previously\
    \ declared here\n    var paren_levels_start = 0\n        ^\n/tmp/tmpdelb_zju.swift:26:9:\
    \ error: invalid redeclaration of 'paren_levels_end'\n    var paren_levels_end\
    \ = 0\n        ^\n/tmp/tmpd"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_level = 0\n    var paren_level_paren = 0\n    var paren_level_count\
    \ = 0\n    var paren_level_count_paren = 0\n    var paren_level_count_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren = 0\n    var paren_level_count_paren_paren_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren_paren_paren = 0\n    var paren_level_count_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren = 0\n\
    \    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren = 0\n\
    \    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpnzywwlrc.swift:29:9: error: invalid redeclaration of 'paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren'\n\
    \    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n        ^\n/tmp/tmpnzywwlrc.swift:28:9: note: 'paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren'\
    \ previously declared here\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n        ^\n/tmp/tmpnzywwlrc.swift:32:9: error: type annotation missing\
    \ in pattern\n    var paren_level_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for ch in paren_string.unicodeScalars {\n        if ch == '(' {\n \
    \           paren_count += 1\n            levels.append(level)\n        } else\
    \ if ch == ')' {\n            paren_count -= 1\n            if paren_count ==\
    \ 0 {\n                levels.append(level)\n            }\n        }\n      \
    \  level += 1\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpcgfji2d2.swift:12:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmpcgfji2d2.swift:15:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = -1\n    var paren_end = -1\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_start = -1\n    var paren_end\
    \ = -1\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = -1\n    var paren_end = -1\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = -1\n    var paren_end = -1\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_start = -1\n    var paren_end\
    \ = -1\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = -1\n    var paren_end = -1\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = -1\n    var paren_end = -1\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_start = -1\n    var paren_end\
    \ = -1\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = -1\n    var paren_end = -1\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = -1\n    var paren_end = -1\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_start = -1\n    var paren_end\
    \ = -1\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = -1\n    var paren_end = -1\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = -1\n    var paren_end = -1\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_start = -1\n    var paren_end\
    \ = -1\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = -1\n    var paren_end = -1\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = -1\n    var paren_end = -1\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_start = -1\n    var paren_end\
    \ = -1\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = -1\n    var paren_end = -1\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = -1\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpvuptzety.swift:14:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpvuptzety.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpvuptzety.swift:15:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = -1\n  \
    \      ^\n/tmp/tmpvuptzety.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = -1\n        ^\n/tmp/tmpvuptzety.swift:16:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = -1\n        ^\n/tmp/tmpvuptzety.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = -1\n       \
    \ ^\n/tmp/tmpvuptzety.swift:17:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpvuptzety.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpvuptzety.swift:18:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpvuptzety.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpvuptzety.swift:19:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = -1\n  \
    \      ^\n/tmp/tmpvuptzety.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = -1\n        ^\n/tmp/tmpvuptzety.swift:20:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = -1\n        ^\n/tmp/tmpvuptzety.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = -1\n       \
    \ ^\n/tmp/tmpvuptzety.swift:21:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpvuptzety.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpvuptzety.swift:22:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpvuptzety.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpvuptzety.swift:23:9:\
    \ error: invalid redeclaration of 'paren_sta"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_end_count\
    \ = 0\n    var paren_end_level = 0\n    var paren_end_index = 0\n    var paren_start_count\
    \ = 0\n    var paren_start_level = 0\n    var paren_start_index = 0\n    var paren_end_count\
    \ = 0\n    var paren_end_level = 0\n    var paren_end_index = 0\n    var paren_start_count\
    \ = 0\n    var paren_start_level = 0\n    var paren_start_index = 0\n    var paren_end_count\
    \ = 0\n    var paren_end_level = 0\n    var paren_end_index = 0\n    var paren_start_count\
    \ = 0\n    var paren_start_level = 0\n    var paren_start_index = 0\n    var paren_end_count\
    \ = 0\n    var paren_end_level = 0\n    var paren_end_index = 0\n    var paren_start_count\
    \ = 0\n    var paren_start_level = 0\n    var paren_start_index = 0\n    var paren_end_count\
    \ = 0\n    var paren_end_level = 0\n    var paren_end_index = 0\n    var paren_start_count\
    \ = 0\n    var paren_start_level = 0\n    var paren_start_index = 0\n    var paren_end_count\
    \ = 0\n    var paren_end_level = 0\n    var paren_end_index = 0\n    var paren_start_count\
    \ = 0\n    var paren_start_level = 0\n    var paren_start_index = 0\n    var paren_end_count\
    \ = 0\n    var paren_end_level = 0\n    var paren_end_index = 0\n    var paren_start_count\
    \ = 0\n    var paren_start_level = 0\n    var paren_start_index = 0\n    var paren_end_count\
    \ = 0\n    var paren_end_level = 0\n    var paren_end_index = 0\n    var paren_start_count\
    \ = 0\n    var paren_start_level = 0\n    var paren_start_index = 0\n    var paren_end_count\
    \ = 0\n    var paren_end_level = 0\n    var paren_end_index = 0\n    var paren_start_count\
    \ = 0\n    var paren_start_level = 0\n    var paren_start_index = 0\n    var paren_end_count\
    \ = 0\n    var paren_end_level = 0\n    var paren_end_index = 0\n    var paren_start_count\
    \ = 0\n    var paren_start_level = 0\n    var paren_start_index = 0\n    var paren_end_count\
    \ = 0\n    var paren_end_level = 0\n    var paren_end_index = 0\n    var paren_start_count\
    \ = 0\n    var paren_start_level = 0\n    var paren_start_index = 0\n    var paren_end_count\
    \ = 0\n    var paren_end_level = 0\n    var paren_end_index = 0\n    var paren_start_count\
    \ = 0\n    var paren_start_level = 0\n    var paren_start_index = 0\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7rbx5wvu.swift:15:9: error: invalid redeclaration of 'paren_end_index'\n\
    \    var paren_end_index = 0\n        ^\n/tmp/tmp7rbx5wvu.swift:12:9: note: 'paren_end_index'\
    \ previously declared here\n    var paren_end_index = 0\n        ^\n/tmp/tmp7rbx5wvu.swift:18:9:\
    \ error: invalid redeclaration of 'paren_start_index'\n    var paren_start_index\
    \ = 0\n        ^\n/tmp/tmp7rbx5wvu.swift:11:9: note: 'paren_start_index' previously\
    \ declared here\n    var paren_start_index = 0\n        ^\n/tmp/tmp7rbx5wvu.swift:19:9:\
    \ error: invalid redeclaration of 'paren_end_count'\n    var paren_end_count =\
    \ 0\n        ^\n/tmp/tmp7rbx5wvu.swift:13:9: note: 'paren_end_count' previously\
    \ declared here\n    var paren_end_count = 0\n        ^\n/tmp/tmp7rbx5wvu.swift:20:9:\
    \ error: invalid redeclaration of 'paren_end_level'\n    var paren_end_level =\
    \ 0\n        ^\n/tmp/tmp7rbx5wvu.swift:14:9: note: 'paren_end_level' previously\
    \ declared here\n    var paren_end_level = 0\n        ^\n/tmp/tmp7rbx5wvu.swift:21:9:\
    \ error: invalid redeclaration of 'paren_end_index'\n    var paren_end_index =\
    \ 0\n        ^\n/tmp/tmp7rbx5wvu.swift:12:9: note: 'paren_end_index' previously\
    \ declared here\n    var paren_end_index = 0\n        ^\n/tmp/tmp7rbx5wvu.swift:22:9:\
    \ error: invalid redeclaration of 'paren_start_count'\n    var paren_start_count\
    \ = 0\n        ^\n/tmp/tmp7rbx5wvu.swift:16:9: note: 'paren_start_count' previously\
    \ declared here\n    var paren_start_count = 0\n        ^\n/tmp/tmp7rbx5wvu.swift:23:9:\
    \ error: invalid redeclaration of 'paren_start_level'\n    var paren_start_level\
    \ = 0\n        ^\n/tmp/tmp7rbx5wvu.swift:17:9: note: 'paren_start_level' previously\
    \ declared here\n    var paren_start_level = 0\n        ^\n/tmp/tmp7rbx5wvu.swift:24:9:\
    \ error: invalid redeclaration of 'paren_start_index'\n    var paren_start_index\
    \ = 0\n        ^\n/tmp/tmp7rbx5wvu.swift:11:9: note: 'paren_start_index' previously\
    \ declared here\n    var paren_start_index = 0\n        ^\n/tmp/tmp7rbx5wvu.swift:25:9:\
    \ error: invalid redeclaration of 'paren_end_count'\n    var paren_end_count =\
    \ 0\n        ^\n/tmp/tmp7rbx5wvu.swift:13:9: note: "
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var paren_count =\
    \ 0\n    var paren_level = 0\n    var paren_max_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_max_levels = [Int]()\n    var paren_levels_string =\
    \ \"\"\n    var paren_max_levels_string = \"\"\n    var paren_levels_string_index\
    \ = 0\n    var paren_max_levels_string_index = 0\n    var paren_levels_string_indexes\
    \ = [Int]()\n    var paren_max_levels_string_indexes = [Int]()\n    var paren_levels_string_indexes_string\
    \ = \"\"\n    var paren_max_levels_string_indexes_string = \"\"\n    var paren_levels_string_indexes_string_index\
    \ = 0\n    var paren_max_levels_string_indexes_string_index = 0\n    var paren_levels_string_indexes_string_indexes\
    \ = [Int]()\n    var paren_max_levels_string_indexes_string_indexes = [Int]()\n\
    \    var paren_levels_string_indexes_string_indexes_string = \"\"\n    var paren_max_levels_string_indexes_string_indexes_string\
    \ = \"\"\n    var paren_levels_string_indexes_string_indexes_string_index = 0\n\
    \    var paren_max_levels_string_indexes_string_indexes_string_index = 0\n   \
    \ var paren_levels_string_indexes_string_indexes_string_indexes = [Int]()\n  \
    \  var paren_max_levels_string_indexes_string_indexes_string_indexes = [Int]()\n\
    \    var paren_levels_string_indexes_string_indexes_string_indexes_string = \"\
    \"\n    var paren_max_levels_string_indexes_string_indexes_string_indexes_string\
    \ = \"\"\n    var paren_levels_string_indexes_string_indexes_string_indexes_string_index\
    \ = 0\n    var paren_max_levels_string_indexes_string_indexes_string_indexes_string_index\
    \ = 0\n    var paren_levels_string_indexes_string_indexes_string_indexes_string_indexes\
    \ = [Int]()\n    var paren_max_levels_string_indexes_string_indexes_string_indexes_string_indexes\
    \ = [Int]()\n    var paren_levels_string_indexes_string_indexes_string_indexes_string_indexes_string\
    \ = \"\"\n    var paren_max_levels_string_indexes_string_indexes_string_indexes_string_indexes_string\
    \ = \"\"\n    var paren_levels_string_indexes_string_indexes_string_indexes_string_indexes_string_index\
    \ = 0\n    var paren_max_levels_string_indexes_string_indexes_string_indexes_string_indexes_string_index\
    \ = 0\n    var paren_levels_string_indexes_string_indexes_string_indexes_string_indexes_string_indexes\
    \ = [Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpzu22wtmo.swift:43:103: error: expected ']' in container literal\
    \ expression\n    var paren_levels_string_indexes_string_indexes_string_indexes_string_indexes_string_indexes\
    \ = [Int\n                                                                   \
    \                                   ^\n/tmp/tmpzu22wtmo.swift:43:99: note: to\
    \ match this opening '['\n    var paren_levels_string_indexes_string_indexes_string_indexes_string_indexes_string_indexes\
    \ = [Int\n                                                                   \
    \                               ^\n/tmp/tmpzu22wtmo.swift:43:99: error: expected\
    \ member name or constructor call after type name\n    var paren_levels_string_indexes_string_indexes_string_indexes_string_indexes_string_indexes\
    \ = [Int\n                                                                   \
    \                               ^\n/tmp/tmpzu22wtmo.swift:43:100: note: add arguments\
    \ after the type to construct a value of the type\n    var paren_levels_string_indexes_string_indexes_string_indexes_string_indexes_string_indexes\
    \ = [Int\n                                                                   \
    \                                ^\n                                         \
    \                                                             ()\n/tmp/tmpzu22wtmo.swift:43:100:\
    \ note: use '.self' to reference the type object\n    var paren_levels_string_indexes_string_indexes_string_indexes_string_indexes_string_indexes\
    \ = [Int\n                                                                   \
    \                                ^\n                                         \
    \                                                             .self\n/tmp/tmpzu22wtmo.swift:8:9:\
    \ warning: initialization of variable 'level' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var level = 0\n    ~~~~^~~~~\n  \
    \  _\n/tmp/tmpzu22wtmo.swift:9:9: warning: initialization of variable 'max_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var max_level = 0\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpzu22wtmo.swi"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char_start = 0\n    var paren_char_end = 0\n    var paren_char_char\
    \ = 0\n    var paren_char_char_count = 0\n    var paren_char_char_level = 0\n\
    \    var paren_char_char_start = 0\n    var paren_char_char_end = 0\n    var paren_char_char_char\
    \ = 0\n    var paren_char_char_char_count = 0\n    var paren_char_char_char_level\
    \ = 0\n    var paren_char_char_char_start = 0\n    var paren_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char = 0\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_end = 0\n    var paren_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_start = 0\n\
    \    var paren_char_char_char_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpcqft1kpa.swift:58:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_char_char_\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_string = \"\
    \"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7dknsimn.swift:14:9: error: invalid redeclaration of 'parens_count'\n\
    \    var parens_count = 0\n        ^\n/tmp/tmp7dknsimn.swift:12:9: note: 'parens_count'\
    \ previously declared here\n    var parens_count = 0\n        ^\n/tmp/tmp7dknsimn.swift:15:9:\
    \ error: invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\
    \n        ^\n/tmp/tmp7dknsimn.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmp7dknsimn.swift:16:9:\
    \ error: invalid redeclaration of 'parens_count'\n    var parens_count = 0\n \
    \       ^\n/tmp/tmp7dknsimn.swift:12:9: note: 'parens_count' previously declared\
    \ here\n    var parens_count = 0\n        ^\n/tmp/tmp7dknsimn.swift:17:9: error:\
    \ invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\n   \
    \     ^\n/tmp/tmp7dknsimn.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmp7dknsimn.swift:18:9:\
    \ error: invalid redeclaration of 'parens_count'\n    var parens_count = 0\n \
    \       ^\n/tmp/tmp7dknsimn.swift:12:9: note: 'parens_count' previously declared\
    \ here\n    var parens_count = 0\n        ^\n/tmp/tmp7dknsimn.swift:19:9: error:\
    \ invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\n   \
    \     ^\n/tmp/tmp7dknsimn.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmp7dknsimn.swift:20:9:\
    \ error: invalid redeclaration of 'parens_count'\n    var parens_count = 0\n \
    \       ^\n/tmp/tmp7dknsimn.swift:12:9: note: 'parens_count' previously declared\
    \ here\n    var parens_count = 0\n        ^\n/tmp/tmp7dknsimn.swift:21:9: error:\
    \ invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\n   \
    \     ^\n/tmp/tmp7dknsimn.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmp7dknsimn.swift:22:9:\
    \ error: invalid redeclaration of 'parens_count'\n    var parens_count = 0\n \
    \       ^\n/tmp/tmp7dknsimn.swift:12:9: note: 'parens_count' previously declared\
    \ here\n    var parens_count = 0\n        ^\n/tmp/tmp7dknsimn.swift:23:9: error:"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpy6zu2p4m.swift:16:9: error: invalid redeclaration of 'paren_start_index'\n\
    \    var paren_start_index = 0\n        ^\n/tmp/tmpy6zu2p4m.swift:14:9: note:\
    \ 'paren_start_index' previously declared here\n    var paren_start_index = 0\n\
    \        ^\n/tmp/tmpy6zu2p4m.swift:17:9: error: invalid redeclaration of 'paren_end_index'\n\
    \    var paren_end_index = 0\n        ^\n/tmp/tmpy6zu2p4m.swift:15:9: note: 'paren_end_index'\
    \ previously declared here\n    var paren_end_index = 0\n        ^\n/tmp/tmpy6zu2p4m.swift:18:9:\
    \ error: invalid redeclaration of 'paren_start_index'\n    var paren_start_index\
    \ = 0\n        ^\n/tmp/tmpy6zu2p4m.swift:14:9: note: 'paren_start_index' previously\
    \ declared here\n    var paren_start_index = 0\n        ^\n/tmp/tmpy6zu2p4m.swift:19:9:\
    \ error: invalid redeclaration of 'paren_end_index'\n    var paren_end_index =\
    \ 0\n        ^\n/tmp/tmpy6zu2p4m.swift:15:9: note: 'paren_end_index' previously\
    \ declared here\n    var paren_end_index = 0\n        ^\n/tmp/tmpy6zu2p4m.swift:20:9:\
    \ error: invalid redeclaration of 'paren_start_index'\n    var paren_start_index\
    \ = 0\n        ^\n/tmp/tmpy6zu2p4m.swift:14:9: note: 'paren_start_index' previously\
    \ declared here\n    var paren_start_index = 0\n        ^\n/tmp/tmpy6zu2p4m.swift:21:9:\
    \ error: invalid redeclaration of 'paren_end_index'\n    var paren_end_index =\
    \ 0\n        ^\n/tmp/tmpy6zu2p4m.swift:15:9: note: 'paren_end_index' previously\
    \ declared here\n    var paren_end_index = 0\n        ^\n/tmp/tmpy6zu2p4m.swift:22:9:\
    \ error: invalid redeclaration of 'paren_start_index'\n    var paren_start_index\
    \ = 0\n        ^\n/tmp/tmpy6zu2p4m.swift:14:9: note: 'paren_start_index' previously\
    \ declared here\n    var paren_start_index = 0\n        ^\n/tmp/tmpy6zu2p4m.swift:23:9:\
    \ error: invalid redeclaration of 'paren_end_index'\n    var paren_end_index =\
    \ 0\n        ^\n/tmp/tmpy6zu2p4m.swift:15:9: note: 'paren_end_index' previously\
    \ declared here\n    var paren_end_index = 0\n        ^\n/tmp/tmpy6zu2p4m.swift:24:9:\
    \ error: invalid redeclaration of 'paren_start_index'\n    var paren_start_index\
    \ = 0\n        ^\n/tmp/tmpy6zu2p4m.swift:14:9: no"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level =\
    \ 0\n    var paren_levels = [Int]()\n    var paren_levels_size = 0\n    var paren_levels_sizes\
    \ = [Int]()\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes = [Int]()\n    var paren_levels_sizes_sizes_index\
    \ = 0\n    var paren_levels_sizes_sizes_size = 0\n    var paren_levels_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_index = 0\n    var paren_levels_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_index\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_size = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_index = 0\n  \
    \  var paren_levels_sizes_sizes_sizes_sizes_sizes_size = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_index =\
    \ 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_size = 0\n    var\
    \ paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_index\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size = 0\n\
    \    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes = [Int]()\n\
    \    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_index =\
    \ 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_index\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpnlfgc7yo.swift:39:9: error: type annotation missing in pattern\n\
    \    var paren_levels_sizes_sizes_sizes_\n        ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_string = \"\
    \"\n    var parens_string_index = 0\n    var parens_string_index2 = 0\n    var\
    \ parens_string_index3 = 0\n    var parens_string_index4 = 0\n    var parens_string_index5\
    \ = 0\n    var parens_string_index6 = 0\n    var parens_string_index7 = 0\n  \
    \  var parens_string_index8 = 0\n    var parens_string_index9 = 0\n    var parens_string_index10\
    \ = 0\n    var parens_string_index11 = 0\n    var parens_string_index12 = 0\n\
    \    var parens_string_index13 = 0\n    var parens_string_index14 = 0\n    var\
    \ parens_string_index15 = 0\n    var parens_string_index16 = 0\n    var parens_string_index17\
    \ = 0\n    var parens_string_index18 = 0\n    var parens_string_index19 = 0\n\
    \    var parens_string_index20 = 0\n    var parens_string_index21 = 0\n    var\
    \ parens_string_index22 = 0\n    var parens_string_index23 = 0\n    var parens_string_index24\
    \ = 0\n    var parens_string_index25 = 0\n    var parens_string_index26 = 0\n\
    \    var parens_string_index27 = 0\n    var parens_string_index28 = 0\n    var\
    \ parens_string_index29 = 0\n    var parens_string_index30 = 0\n    var parens_string_index31\
    \ = 0\n    var parens_string_index32 = 0\n    var parens_string_index33 = 0\n\
    \    var parens_string_index34 = 0\n    var parens_string_index35 = 0\n    var\
    \ parens_string_index36 = 0\n    var parens_string_index37 = 0\n    var parens_string_index38\
    \ = 0\n    var parens_string_index39 = 0\n    var parens_string_index40 = 0\n\
    \    var parens_string_index41 = 0\n    var parens_string_index42 = 0\n    var\
    \ parens_string_index43 = 0\n    var parens_string_index44 = 0\n    var parens_string_index45\
    \ = 0\n    var parens_string_index46 = 0\n    var parens_string_index47 = 0\n\
    \    var parens_string_index48 = 0\n    var parens_string_index49 = 0\n    var\
    \ parens_string_index50 = 0\n    var parens_string_index51 = 0\n    var parens_string_index52\
    \ = 0\n    var parens_string_index53 = 0\n    var parens_string_index54 = 0\n\
    \    var parens_string_index55 = 0\n    var parens_string_index56 = 0\n    var\
    \ parens_string_index57 = 0\n    var parens_string_index58 = 0\n    var parens_string_index59\
    \ = 0\n    var parens_string_index60 = 0\n    var parens_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp07zwlsr5.swift:74:9: error: type annotation missing in pattern\n\
    \    var parens_\n        ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char_start = 0\n    var paren_char_end = 0\n    var paren_char_char\
    \ = 0\n    var paren_char_char_count = 0\n    var paren_char_char_level = 0\n\
    \    var paren_char_char_start = 0\n    var paren_char_char_end = 0\n    var paren_char_char_char\
    \ = 0\n    var paren_char_char_char_count = 0\n    var paren_char_char_char_level\
    \ = 0\n    var paren_char_char_char_start = 0\n    var paren_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char = 0\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_end = 0\n    var paren_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_start = 0\n\
    \    var paren_char_char_char_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpcqft1kpa.swift:58:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_char_char_\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_levels_len = 0\n    var paren_levels_lens = [Int]()\n\
    \    var paren_levels_lens_len = 0\n    var paren_levels_lens_lens = [Int]()\n\
    \    var paren_levels_lens_lens_len = 0\n    var paren_levels_lens_lens_lens =\
    \ [Int]()\n    var paren_levels_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n\
    \    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpfatic6lb.swift:34:9: error: type annotation missing in pattern\n\
    \    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    var parens_level = 0\n    for char in paren_string.characters {\n       \
    \ if char == '(' {\n            parens_level++\n        } else if char == ')'\
    \ {\n            parens_level--\n        }\n        if parens_level == 0 {\n \
    \           levels.append(level)\n        }\n        if parens_level > 0 {\n \
    \           level = 0\n        }\n        level++\n        parens++\n    }\n \
    \   return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp4jpk3xmw.swift:13:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmp4jpk3xmw.swift:15:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmp4jpk3xmw.swift:12:30: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in paren_string.characters\
    \ {\n                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp4jpk3xmw.swift:14:25: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            parens_level++\n               \
    \         ^~\n/tmp/tmp4jpk3xmw.swift:16:25: error: cannot find operator '--' in\
    \ scope; did you mean '-= 1'?\n            parens_level--\n                  \
    \      ^~\n/tmp/tmp4jpk3xmw.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n/tmp/tmp4jpk3xmw.swift:25:15:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        parens++\n\
    \              ^~\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level =\
    \ 0\n    var paren_levels = [Int]()\n    var paren_levels_size = 0\n    var paren_levels_sizes\
    \ = [Int]()\n    var paren_levels_sizes_size = 0\n    var paren_levels_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_size = 0\n    var paren_levels_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_size = 0\n    var paren_levels_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_size = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_size = 0\n   \
    \ var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes = [Int]()\n\
    \    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size = 0\n   \
    \ var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes = [Int]()\n\
    \    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size = 0\n\
    \    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes =\
    \ [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: '/tmp/tmpzye74ih1.swift:36:1: error: expected expression in container literal

    }

    ^

    '
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var levels = [Int]()\n    for paren in\
    \ paren_string.characters {\n        if paren == '(' {\n            levels.append(0)\n\
    \            max_level = max(max_level, levels[levels.count-1])\n        } else\
    \ if paren == ')' {\n            levels[levels.count-1] += 1\n        }\n    }\n\
    \    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpn4600p4k.swift:11:21: error: single-quoted string literal found,\
    \ use '\"'\n        if paren == '(' {\n                    ^~~\n             \
    \       \"(\"\n/tmp/tmpn4600p4k.swift:14:28: error: single-quoted string literal\
    \ found, use '\"'\n        } else if paren == ')' {\n                        \
    \   ^~~\n                           \")\"\n/tmp/tmpn4600p4k.swift:10:31: error:\
    \ 'characters' is unavailable: Please use String directly\n    for paren in paren_string.characters\
    \ {\n                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_string = \"\
    \"\n    var parens_string_index = 0\n    var parens_string_index2 = 0\n    var\
    \ parens_string_index3 = 0\n    var parens_string_index4 = 0\n    var parens_string_index5\
    \ = 0\n    var parens_string_index6 = 0\n    var parens_string_index7 = 0\n  \
    \  var parens_string_index8 = 0\n    var parens_string_index9 = 0\n    var parens_string_index10\
    \ = 0\n    var parens_string_index11 = 0\n    var parens_string_index12 = 0\n\
    \    var parens_string_index13 = 0\n    var parens_string_index14 = 0\n    var\
    \ parens_string_index15 = 0\n    var parens_string_index16 = 0\n    var parens_string_index17\
    \ = 0\n    var parens_string_index18 = 0\n    var parens_string_index19 = 0\n\
    \    var parens_string_index20 = 0\n    var parens_string_index21 = 0\n    var\
    \ parens_string_index22 = 0\n    var parens_string_index23 = 0\n    var parens_string_index24\
    \ = 0\n    var parens_string_index25 = 0\n    var parens_string_index26 = 0\n\
    \    var parens_string_index27 = 0\n    var parens_string_index28 = 0\n    var\
    \ parens_string_index29 = 0\n    var parens_string_index30 = 0\n    var parens_string_index31\
    \ = 0\n    var parens_string_index32 = 0\n    var parens_string_index33 = 0\n\
    \    var parens_string_index34 = 0\n    var parens_string_index35 = 0\n    var\
    \ parens_string_index36 = 0\n    var parens_string_index37 = 0\n    var parens_string_index38\
    \ = 0\n    var parens_string_index39 = 0\n    var parens_string_index40 = 0\n\
    \    var parens_string_index41 = 0\n    var parens_string_index42 = 0\n    var\
    \ parens_string_index43 = 0\n    var parens_string_index44 = 0\n    var parens_string_index45\
    \ = 0\n    var parens_string_index46 = 0\n    var parens_string_index47 = 0\n\
    \    var parens_string_index48 = 0\n    var parens_string_index49 = 0\n    var\
    \ parens_string_index50 = 0\n    var parens_string_index51 = 0\n    var parens_string_index52\
    \ = 0\n    var parens_string_index53 = 0\n    var parens_string_index54 = 0\n\
    \    var parens_string_index55 = 0\n    var parens_string_index56 = 0\n    var\
    \ parens_string_index57 = 0\n    var parens_string_index58 = 0\n    var parens_string_index59\
    \ = 0\n    var parens_string_index60 = 0\n    var parens_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp07zwlsr5.swift:74:9: error: type annotation missing in pattern\n\
    \    var parens_\n        ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_chars\
    \ = String()\n    var paren_char_index = 0\n    var paren_char_index2 = 0\n  \
    \  var paren_char_index3 = 0\n    var paren_char_index4 = 0\n    var paren_char_index5\
    \ = 0\n    var paren_char_index6 = 0\n    var paren_char_index7 = 0\n    var paren_char_index8\
    \ = 0\n    var paren_char_index9 = 0\n    var paren_char_index10 = 0\n    var\
    \ paren_char_index11 = 0\n    var paren_char_index12 = 0\n    var paren_char_index13\
    \ = 0\n    var paren_char_index14 = 0\n    var paren_char_index15 = 0\n    var\
    \ paren_char_index16 = 0\n    var paren_char_index17 = 0\n    var paren_char_index18\
    \ = 0\n    var paren_char_index19 = 0\n    var paren_char_index20 = 0\n    var\
    \ paren_char_index21 = 0\n    var paren_char_index22 = 0\n    var paren_char_index23\
    \ = 0\n    var paren_char_index24 = 0\n    var paren_char_index25 = 0\n    var\
    \ paren_char_index26 = 0\n    var paren_char_index27 = 0\n    var paren_char_index28\
    \ = 0\n    var paren_char_index29 = 0\n    var paren_char_index30 = 0\n    var\
    \ paren_char_index31 = 0\n    var paren_char_index32 = 0\n    var paren_char_index33\
    \ = 0\n    var paren_char_index34 = 0\n    var paren_char_index35 = 0\n    var\
    \ paren_char_index36 = 0\n    var paren_char_index37 = 0\n    var paren_char_index38\
    \ = 0\n    var paren_char_index39 = 0\n    var paren_char_index40 = 0\n    var\
    \ paren_char_index41 = 0\n    var paren_char_index42 = 0\n    var paren_char_index43\
    \ = 0\n    var paren_char_index44 = 0\n    var paren_char_index45 = 0\n    var\
    \ paren_char_index46 = 0\n    var paren_char_index47 = 0\n    var paren_char_index48\
    \ = 0\n    var paren_char_index49 = 0\n    var paren_char_index50 = 0\n    var\
    \ paren_char_index51 = 0\n    var paren_char_index52 = 0\n    var paren_char_index53\
    \ = 0\n    var paren_char_index54 = 0\n    var paren_char_index55 = 0\n    var\
    \ paren_char_index56 = 0\n    var paren_char_index57 = 0\n    var paren_char_index58\
    \ = 0\n    var paren_char_index59 = 0\n    var paren_char_index60\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpb2b6munc.swift:73:9: error: type annotation missing in pattern\n\
    \    var paren_char_index60\n        ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_count_parens = 0\n    var paren_strings\
    \ = paren_string.split(\" \").map({ String($0) })\n    for paren_string in paren_strings\
    \ {\n        if paren_string == \"(\" || paren_string == \"{\" || paren_string\
    \ == \"[\" {\n            paren_count += 1\n        }\n        if paren_string\
    \ == \")\" || paren_string == \"}\" || paren_string == \"]\" {\n            paren_count_parens\
    \ += 1\n        }\n        if paren_string == \"(\" || paren_string == \"{\" ||\
    \ paren_string == \"[\" {\n            level += 1\n        }\n        if paren_string\
    \ == \")\" || paren_string == \"}\" || paren_string == \"]\" {\n            level\
    \ -= 1\n        }\n        if level > max_level {\n            max_level = level\n\
    \        }\n        if level == 0 {\n            max_level_parens = paren_count_parens\n\
    \        }\n    }\n    if paren_count_parens > max_level_parens {\n        max_level_parens\
    \ = paren_count_parens\n    }\n    return Array(0 ..< max_level_parens)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmphani80ds.swift:13:38: error: no exact matches in call to instance\
    \ method 'split'\n    var paren_strings = paren_string.split(\" \").map({ String($0)\
    \ })\n                                     ^\nSwift.Sequence:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n    \
    \                                   ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    var parens_count = 0\n    for c in paren_string.unicodeScalars {\n      \
    \  if c == '(' {\n            parens_count += 1\n        } else if c == ')' {\n\
    \            parens_count -= 1\n            if parens_count == 0 {\n         \
    \       levels.append(level)\n            }\n        }\n        level += 1\n \
    \   }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp1m_of8cp.swift:13:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmp1m_of8cp.swift:15:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmp1m_of8cp.swift:10:9: warning: initialization of variable\
    \ 'parens' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var parens = 0\n    ~~~~^~~~~~\n    _\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_levels_count = 0\n    var paren_levels_count_max =\
    \ 0\n    var paren_levels_count_max_index = 0\n    var paren_levels_count_min\
    \ = 0\n    var paren_levels_count_min_index = 0\n    var paren_levels_count_max2\
    \ = 0\n    var paren_levels_count_max2_index = 0\n    var paren_levels_count_min2\
    \ = 0\n    var paren_levels_count_min2_index = 0\n    var paren_levels_count_max3\
    \ = 0\n    var paren_levels_count_max3_index = 0\n    var paren_levels_count_min3\
    \ = 0\n    var paren_levels_count_min3_index = 0\n    var paren_levels_count_max4\
    \ = 0\n    var paren_levels_count_max4_index = 0\n    var paren_levels_count_min4\
    \ = 0\n    var paren_levels_count_min4_index = 0\n    var paren_levels_count_max5\
    \ = 0\n    var paren_levels_count_max5_index = 0\n    var paren_levels_count_min5\
    \ = 0\n    var paren_levels_count_min5_index = 0\n    var paren_levels_count_max6\
    \ = 0\n    var paren_levels_count_max6_index = 0\n    var paren_levels_count_min6\
    \ = 0\n    var paren_levels_count_min6_index = 0\n    var paren_levels_count_max7\
    \ = 0\n    var paren_levels_count_max7_index = 0\n    var paren_levels_count_min7\
    \ = 0\n    var paren_levels_count_min7_index = 0\n    var paren_levels_count_max8\
    \ = 0\n    var paren_levels_count_max8_index = 0\n    var paren_levels_count_min8\
    \ = 0\n    var paren_levels_count_min8_index = 0\n    var paren_levels_count_max9\
    \ = 0\n    var paren_levels_count_max9_index = 0\n    var paren_levels_count_min9\
    \ = 0\n    var paren_levels_count_min9_index = 0\n    var paren_levels_count_max10\
    \ = 0\n    var paren_levels_count_max10_index = 0\n    var paren_levels_count_min10\
    \ = 0\n    var paren_levels_count_min10_index = 0\n    var paren_levels_count_max11\
    \ = 0\n    var paren_levels_count_max11_index = 0\n    var paren_levels_count_min11\
    \ = 0\n    var paren_levels_count_min11_index = 0\n    var paren_levels_count_max12\
    \ = 0\n    var paren_levels_count_max12_index = 0\n    var paren_level\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpxaw2khoi.swift:58:9: error: type annotation missing in pattern\n\
    \    var paren_level\n        ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    for c in paren_string.unicodeScalars {\n        if c == parens.unicodeScalars.first\
    \ {\n            levels[level] = parens\n            parens = 0\n        } else\
    \ {\n            parens += 1\n        }\n        level += 1\n    }\n    return\
    \ levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp28icd1z9.swift:12:24: error: value of type 'Int' has no member\
    \ 'unicodeScalars'\n        if c == parens.unicodeScalars.first {\n          \
    \      ~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    for char in paren_string.characters {\n        if char == '(' {\n \
    \           paren_count += 1\n        } else if char == ')' {\n            paren_count\
    \ -= 1\n            if paren_count == 0 {\n                levels.append(paren_level)\n\
    \            }\n        }\n        paren_level += char == '(' ? 1 : -1\n    }\n\
    \    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpr1ddrzpb.swift:12:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmpr1ddrzpb.swift:14:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmpr1ddrzpb.swift:20:32: error: single-quoted\
    \ string literal found, use '\"'\n        paren_level += char == '(' ? 1 : -1\n\
    \                               ^~~\n                               \"(\"\n/tmp/tmpr1ddrzpb.swift:11:30:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in paren_string.characters {\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_size = 0\n    var\
    \ paren_levels_sizes = [Int]()\n    var paren_levels_sizes_size = 0\n    var paren_levels_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_size = 0\n    var paren_levels_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_size = 0\n    var paren_levels_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_size = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_size = 0\n   \
    \ var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes = [Int]()\n\
    \    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size = 0\n   \
    \ var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes = [Int]()\n\
    \    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size = 0\n\
    \    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes =\
    \ [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpam7c3orn.swift:35:9: error: type annotation missing in pattern\n\
    \    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp8w7gf4pj.swift:12:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp8w7gf4pj.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp8w7gf4pj.swift:13:9:\
    \ error: invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n\
    \        ^\n/tmp/tmp8w7gf4pj.swift:11:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmp8w7gf4pj.swift:14:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmp8w7gf4pj.swift:10:9: note: 'paren_level' previously declared\
    \ here\n    var paren_level = 0\n        ^\n/tmp/tmp8w7gf4pj.swift:15:9: error:\
    \ invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp8w7gf4pj.swift:11:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmp8w7gf4pj.swift:16:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmp8w7gf4pj.swift:10:9: note: 'paren_level' previously declared\
    \ here\n    var paren_level = 0\n        ^\n/tmp/tmp8w7gf4pj.swift:17:9: error:\
    \ invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp8w7gf4pj.swift:11:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmp8w7gf4pj.swift:18:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmp8w7gf4pj.swift:10:9: note: 'paren_level' previously declared\
    \ here\n    var paren_level = 0\n        ^\n/tmp/tmp8w7gf4pj.swift:19:9: error:\
    \ invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp8w7gf4pj.swift:11:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmp8w7gf4pj.swift:20:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmp8w7gf4pj.swift:10:9: note: 'paren_level' previously declared\
    \ here\n    var paren_level = 0\n        ^\n/tmp/tmp8w7gf4pj.swift:21:9: er"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7loufpti.swift:14:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:15:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:16:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:17:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:18:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:19:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp7loufpti.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp7loufpti.swift:20:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp7loufpti.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp7loufpti.swift:21:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp7loufpti.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp7loufpti.swift:22:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp7loufpti.swift:23:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = 0\n    var paren_char_next = 0\n    var paren_char_prev\
    \ = 0\n    var paren_char_prev2 = 0\n    var paren_char_next2 = 0\n    var paren_char_prev3\
    \ = 0\n    var paren_char_next3 = 0\n    var paren_char_prev4 = 0\n    var paren_char_next4\
    \ = 0\n    var paren_char_prev5 = 0\n    var paren_char_next5 = 0\n    var paren_char_prev6\
    \ = 0\n    var paren_char_next6 = 0\n    var paren_char_prev7 = 0\n    var paren_char_next7\
    \ = 0\n    var paren_char_prev8 = 0\n    var paren_char_next8 = 0\n    var paren_char_prev9\
    \ = 0\n    var paren_char_next9 = 0\n    var paren_char_prev10 = 0\n    var paren_char_next10\
    \ = 0\n    var paren_char_prev11 = 0\n    var paren_char_next11 = 0\n    var paren_char_prev12\
    \ = 0\n    var paren_char_next12 = 0\n    var paren_char_prev13 = 0\n    var paren_char_next13\
    \ = 0\n    var paren_char_prev14 = 0\n    var paren_char_next14 = 0\n    var paren_char_prev15\
    \ = 0\n    var paren_char_next15 = 0\n    var paren_char_prev16 = 0\n    var paren_char_next16\
    \ = 0\n    var paren_char_prev17 = 0\n    var paren_char_next17 = 0\n    var paren_char_prev18\
    \ = 0\n    var paren_char_next18 = 0\n    var paren_char_prev19 = 0\n    var paren_char_next19\
    \ = 0\n    var paren_char_prev20 = 0\n    var paren_char_next20 = 0\n    var paren_char_prev21\
    \ = 0\n    var paren_char_next21 = 0\n    var paren_char_prev22 = 0\n    var paren_char_next22\
    \ = 0\n    var paren_char_prev23 = 0\n    var paren_char_next23 = 0\n    var paren_char_prev24\
    \ = 0\n    var paren_char_next24 = 0\n    var paren_char_prev25 = 0\n    var paren_char_next25\
    \ = 0\n    var paren_char_prev26 = 0\n    var paren_char_next26 = 0\n    var paren_char_prev27\
    \ = 0\n    var paren_char_next27 = 0\n    var paren_char_prev28 = 0\n    var paren_char_next28\
    \ = 0\n    var paren_char_prev29 = 0\n    var paren_char_next29 = 0\n    var paren_char_prev30\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpuh_tcpfm.swift:74:9: error: type annotation missing in pattern\n\
    \    var paren\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_count_parens = 0\n    var paren_level\
    \ = 0\n    var paren_level_parens = 0\n    var paren_level_parens_count = 0\n\
    \    var paren_level_parens_count_parens = 0\n    var paren_level_parens_count_parens_count\
    \ = 0\n    var paren_level_parens_count_parens_count_parens = 0\n    var paren_level_parens_count_parens_count_parens_count\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens = 0\n\
    \    var paren_level_parens_count_parens_count_parens_count_parens_count = 0\n\
    \    var paren_level_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp_gipf7g9.swift:35:9: error: type annotation missing in pattern\n\
    \    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_levels_len = 0\n    var paren_levels_start = 0\n    var\
    \ paren_levels_end = 0\n    var paren_levels_start = 0\n    var paren_levels_end\
    \ = 0\n    var paren_levels_start = 0\n    var paren_levels_end = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_start = 0\n    var paren_levels_end\
    \ = 0\n    var paren_levels_start = 0\n    var paren_levels_end = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_start = 0\n    var paren_levels_end\
    \ = 0\n    var paren_levels_start = 0\n    var paren_levels_end = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_start = 0\n    var paren_levels_end\
    \ = 0\n    var paren_levels_start = 0\n    var paren_levels_end = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_start = 0\n    var paren_levels_end\
    \ = 0\n    var paren_levels_start = 0\n    var paren_levels_end = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_start = 0\n    var paren_levels_end\
    \ = 0\n    var paren_levels_start = 0\n    var paren_levels_end = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_start = 0\n    var paren_levels_end\
    \ = 0\n    var paren_levels_start = 0\n    var paren_levels_end = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_start = 0\n    var paren_levels_end\
    \ = 0\n    var paren_levels_start = 0\n    var paren_levels_end = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_start = 0\n    var paren_levels_end\
    \ = 0\n    var paren_levels_start = 0\n    var paren_levels_end = 0\n    var paren_levels_start\
    \ = 0\n    var paren_levels_end = 0\n    var paren_levels_start = 0\n    var paren_levels_end\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp_hhidxhh.swift:17:9: error: invalid redeclaration of 'paren_levels_start'\n\
    \    var paren_levels_start = 0\n        ^\n/tmp/tmp_hhidxhh.swift:15:9: note:\
    \ 'paren_levels_start' previously declared here\n    var paren_levels_start =\
    \ 0\n        ^\n/tmp/tmp_hhidxhh.swift:18:9: error: invalid redeclaration of 'paren_levels_end'\n\
    \    var paren_levels_end = 0\n        ^\n/tmp/tmp_hhidxhh.swift:16:9: note: 'paren_levels_end'\
    \ previously declared here\n    var paren_levels_end = 0\n        ^\n/tmp/tmp_hhidxhh.swift:19:9:\
    \ error: invalid redeclaration of 'paren_levels_start'\n    var paren_levels_start\
    \ = 0\n        ^\n/tmp/tmp_hhidxhh.swift:15:9: note: 'paren_levels_start' previously\
    \ declared here\n    var paren_levels_start = 0\n        ^\n/tmp/tmp_hhidxhh.swift:20:9:\
    \ error: invalid redeclaration of 'paren_levels_end'\n    var paren_levels_end\
    \ = 0\n        ^\n/tmp/tmp_hhidxhh.swift:16:9: note: 'paren_levels_end' previously\
    \ declared here\n    var paren_levels_end = 0\n        ^\n/tmp/tmp_hhidxhh.swift:21:9:\
    \ error: invalid redeclaration of 'paren_levels_start'\n    var paren_levels_start\
    \ = 0\n        ^\n/tmp/tmp_hhidxhh.swift:15:9: note: 'paren_levels_start' previously\
    \ declared here\n    var paren_levels_start = 0\n        ^\n/tmp/tmp_hhidxhh.swift:22:9:\
    \ error: invalid redeclaration of 'paren_levels_end'\n    var paren_levels_end\
    \ = 0\n        ^\n/tmp/tmp_hhidxhh.swift:16:9: note: 'paren_levels_end' previously\
    \ declared here\n    var paren_levels_end = 0\n        ^\n/tmp/tmp_hhidxhh.swift:23:9:\
    \ error: invalid redeclaration of 'paren_levels_start'\n    var paren_levels_start\
    \ = 0\n        ^\n/tmp/tmp_hhidxhh.swift:15:9: note: 'paren_levels_start' previously\
    \ declared here\n    var paren_levels_start = 0\n        ^\n/tmp/tmp_hhidxhh.swift:24:9:\
    \ error: invalid redeclaration of 'paren_levels_end'\n    var paren_levels_end\
    \ = 0\n        ^\n/tmp/tmp_hhidxhh.swift:16:9: note: 'paren_levels_end' previously\
    \ declared here\n    var paren_levels_end = 0\n        ^\n/tmp/tmp_hhidxhh.swift:25:9:\
    \ error: invalid redeclaration of 'paren_levels_start'\n    var paren_levels_start\
    \ = 0\n       "
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpchcp0c3q.swift:13:9: error: invalid redeclaration of 'parens_count'\n\
    \    var parens_count = 0\n        ^\n/tmp/tmpchcp0c3q.swift:11:9: note: 'parens_count'\
    \ previously declared here\n    var parens_count = 0\n        ^\n/tmp/tmpchcp0c3q.swift:14:9:\
    \ error: invalid redeclaration of 'parens_level'\n    var parens_level = 0\n \
    \       ^\n/tmp/tmpchcp0c3q.swift:12:9: note: 'parens_level' previously declared\
    \ here\n    var parens_level = 0\n        ^\n/tmp/tmpchcp0c3q.swift:15:9: error:\
    \ invalid redeclaration of 'parens_count'\n    var parens_count = 0\n        ^\n\
    /tmp/tmpchcp0c3q.swift:11:9: note: 'parens_count' previously declared here\n \
    \   var parens_count = 0\n        ^\n/tmp/tmpchcp0c3q.swift:16:9: error: invalid\
    \ redeclaration of 'parens_level'\n    var parens_level = 0\n        ^\n/tmp/tmpchcp0c3q.swift:12:9:\
    \ note: 'parens_level' previously declared here\n    var parens_level = 0\n  \
    \      ^\n/tmp/tmpchcp0c3q.swift:17:9: error: invalid redeclaration of 'parens_count'\n\
    \    var parens_count = 0\n        ^\n/tmp/tmpchcp0c3q.swift:11:9: note: 'parens_count'\
    \ previously declared here\n    var parens_count = 0\n        ^\n/tmp/tmpchcp0c3q.swift:18:9:\
    \ error: invalid redeclaration of 'parens_level'\n    var parens_level = 0\n \
    \       ^\n/tmp/tmpchcp0c3q.swift:12:9: note: 'parens_level' previously declared\
    \ here\n    var parens_level = 0\n        ^\n/tmp/tmpchcp0c3q.swift:19:9: error:\
    \ invalid redeclaration of 'parens_count'\n    var parens_count = 0\n        ^\n\
    /tmp/tmpchcp0c3q.swift:11:9: note: 'parens_count' previously declared here\n \
    \   var parens_count = 0\n        ^\n/tmp/tmpchcp0c3q.swift:20:9: error: invalid\
    \ redeclaration of 'parens_level'\n    var parens_level = 0\n        ^\n/tmp/tmpchcp0c3q.swift:12:9:\
    \ note: 'parens_level' previously declared here\n    var parens_level = 0\n  \
    \      ^\n/tmp/tmpchcp0c3q.swift:21:9: error: invalid redeclaration of 'parens_count'\n\
    \    var parens_count = 0\n        ^\n/tmp/tmpchcp0c3q.swift:11:9: note: 'parens_count'\
    \ previously declared here\n    var parens_count = 0\n        ^\n/tmp/tmpchcp0c3q.swift:22:9:\
    \ error: invalid redeclaration o"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_level = 0\n    var paren_level_paren = 0\n    var paren_level_paren_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_paren_counter = 0\n\
    \    var paren_level_counter = 0\n    var paren_level_paren_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_paren_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_paren_counter = 0\n    var paren_level_counter = 0\n\
    \    var paren_level_paren_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_paren_counter = 0\n    var paren_level_counter = 0\n    var paren_level_paren_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_paren_counter = 0\n\
    \    var paren_level_counter = 0\n    var paren_level_paren_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_paren_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_paren_counter = 0\n    var paren_level_counter = 0\n\
    \    var paren_level_paren_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_paren_counter = 0\n    var paren_level_counter = 0\n    var paren_level_paren_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_paren_counter = 0\n\
    \    var paren_level_counter = 0\n    var paren_level_paren_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_paren_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_paren_counter = 0\n    var paren_level_counter = 0\n\
    \    var paren_level_paren_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_paren_counter = 0\n    var paren_level_counter = 0\n    var paren_level_paren_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_paren_counter = 0\n\
    \    var paren_level_counter = 0\n    var paren_level_paren_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_paren_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_paren_counter = 0\n    var paren_level_counter = 0\n\
    \    var paren_level_paren_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_paren_counter = 0\n    var paren_level_counter = 0\n    var paren_level_paren_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_paren_counter = 0\n\
    \    var paren_level_counter = 0\n    var paren_level_paren_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_paren_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_paren_counter = 0\n    var paren_level_counter = 0\n\
    \    var paren_level_paren_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_paren_counter = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpkxughw4p.swift:15:9: error: invalid redeclaration of 'paren_level_paren_counter'\n\
    \    var paren_level_paren_counter = 0\n        ^\n/tmp/tmpkxughw4p.swift:13:9:\
    \ note: 'paren_level_paren_counter' previously declared here\n    var paren_level_paren_counter\
    \ = 0\n        ^\n/tmp/tmpkxughw4p.swift:16:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpkxughw4p.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpkxughw4p.swift:17:9: error: invalid redeclaration of\
    \ 'paren_level_paren_counter'\n    var paren_level_paren_counter = 0\n       \
    \ ^\n/tmp/tmpkxughw4p.swift:13:9: note: 'paren_level_paren_counter' previously\
    \ declared here\n    var paren_level_paren_counter = 0\n        ^\n/tmp/tmpkxughw4p.swift:18:9:\
    \ error: invalid redeclaration of 'paren_level_counter'\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpkxughw4p.swift:14:9: note: 'paren_level_counter' previously\
    \ declared here\n    var paren_level_counter = 0\n        ^\n/tmp/tmpkxughw4p.swift:19:9:\
    \ error: invalid redeclaration of 'paren_level_paren_counter'\n    var paren_level_paren_counter\
    \ = 0\n        ^\n/tmp/tmpkxughw4p.swift:13:9: note: 'paren_level_paren_counter'\
    \ previously declared here\n    var paren_level_paren_counter = 0\n        ^\n\
    /tmp/tmpkxughw4p.swift:20:9: error: invalid redeclaration of 'paren_level_counter'\n\
    \    var paren_level_counter = 0\n        ^\n/tmp/tmpkxughw4p.swift:14:9: note:\
    \ 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpkxughw4p.swift:21:9: error: invalid redeclaration of\
    \ 'paren_level_paren_counter'\n    var paren_level_paren_counter = 0\n       \
    \ ^\n/tmp/tmpkxughw4p.swift:13:9: note: 'paren_level_paren_counter' previously\
    \ declared here\n    var paren_level_paren_counter = 0\n        ^\n/tmp/tmpkxughw4p.swift:22:9:\
    \ error: invalid redeclaration of 'paren_level_counter'\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpkxughw4p.swift:14:9: note: 'paren_level_counter' previously\
    \ declared here\n  "
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_count =\
    \ 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_levels = [Int]()\n    var paren_levels_size = 0\n    var paren_levels_sizes\
    \ = [Int]()\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs\
    \ = [Int]()\n    var paren_levels_sizes_index_next = 0\n    var paren_levels_sizes_index_next_next\
    \ = 0\n    var paren_levels_sizes_index_next_next_next = 0\n    var paren_levels_sizes_index_next_next_next_next\
    \ = 0\n    var paren_levels_sizes_index_next_next_next_next_next = 0\n    var\
    \ paren_levels_sizes_index_next_next_next_next_next_next = 0\n    var paren_levels_sizes_index_next_next_next_next_next_next_next\
    \ = 0\n    var paren_levels_sizes_index_next_next_next_next_next_next_next = 0\n\
    \    var paren_levels_sizes_index_next_next_next_next_next_next_next_next = 0\n\
    \    var paren_levels_sizes_index_next_next_next_next_next_next_next_next = 0\n\
    \    var paren_levels_sizes_index_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_levels_sizes_index_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_levels_sizes_index_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_levels_sizes_index_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_levels_sizes_index_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_levels_sizes_index_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_levels_sizes_index_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_levels_sizes_index_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_levels_sizes_index_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_levels_sizes_index_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_levels_sizes_index_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_levels_sizes_index_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_levels_sizes_index_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpiiooke0a.swift:26:9: error: invalid redeclaration of 'paren_levels_sizes_index_next_next_next_next_next_next_next'\n\
    \    var paren_levels_sizes_index_next_next_next_next_next_next_next = 0\n   \
    \     ^\n/tmp/tmpiiooke0a.swift:25:9: note: 'paren_levels_sizes_index_next_next_next_next_next_next_next'\
    \ previously declared here\n    var paren_levels_sizes_index_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpiiooke0a.swift:28:9: error: invalid redeclaration of\
    \ 'paren_levels_sizes_index_next_next_next_next_next_next_next_next'\n    var\
    \ paren_levels_sizes_index_next_next_next_next_next_next_next_next = 0\n     \
    \   ^\n/tmp/tmpiiooke0a.swift:27:9: note: 'paren_levels_sizes_index_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var paren_levels_sizes_index_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpiiooke0a.swift:31:9: error: invalid redeclaration of\
    \ 'paren_levels_sizes_index_next_next_next_next_next_next_next_next_next_next'\n\
    \    var paren_levels_sizes_index_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpiiooke0a.swift:30:9: note: 'paren_levels_sizes_index_next_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var paren_levels_sizes_index_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpiiooke0a.swift:32:9: error: invalid redeclaration of\
    \ 'paren_levels_sizes_index_next_next_next_next_next_next_next_next_next_next'\n\
    \    var paren_levels_sizes_index_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpiiooke0a.swift:30:9: note: 'paren_levels_sizes_index_next_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var paren_levels_sizes_index_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpiiooke0a.swift:33:9: error: invalid redeclaration of\
    \ 'paren_levels_sizes_index_next_next_next_next_next_next_next_next_next_next'\n\
    \    var paren_levels_sizes_index_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpiiooke0a.swift:30:9: note: 'p"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_char_count = 0\n    var paren_char_level = 0\n    var paren_char\
    \ = \"\"\n    var paren_char_next = \"\"\n    var paren_char_next_next = \"\"\n\
    \    var paren_char_prev = \"\"\n    var paren_char_prev_next = \"\"\n    var\
    \ paren_char_prev_prev = \"\"\n    var paren_char_prev_prev_next = \"\"\n    var\
    \ paren_char_prev_prev_prev = \"\"\n    var paren_char_prev_prev_prev_next = \"\
    \"\n    var paren_char_prev_prev_prev_prev = \"\"\n    var paren_char_prev_prev_prev_prev_next\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev = \"\"\n    var paren_char_prev_prev_prev_prev_prev_next\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_next\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev = \"\"\n    var\
    \ paren_char_prev_prev_prev_prev_prev_prev_prev_next = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_next = \"\
    \"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = \"\"\
    \n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_next =\
    \ \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_next\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_next\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_next\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_next\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_next\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_next\
    \ = \"\"\n    var paren_char_prev_prev_prev_prev_prev_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpmzm91_g_.swift:37:9: error: invalid redeclaration of 'paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_next'\n\
    \    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_next\
    \ = \"\"\n        ^\n/tmp/tmpmzm91_g_.swift:35:9: note: 'paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_next'\
    \ previously declared here\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_next\
    \ = \"\"\n        ^\n/tmp/tmpmzm91_g_.swift:41:9: error: invalid redeclaration\
    \ of 'paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_next'\n\
    \    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_next\
    \ = \"\"\n        ^\n/tmp/tmpmzm91_g_.swift:39:9: note: 'paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_next'\
    \ previously declared here\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_next\
    \ = \"\"\n        ^\n/tmp/tmpmzm91_g_.swift:42:9: error: invalid redeclaration\
    \ of 'paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev'\n\
    \    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = \"\"\n        ^\n/tmp/tmpmzm91_g_.swift:40:9: note: 'paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev'\
    \ previously declared here\n    var paren_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = \"\"\n        ^\n/tmp/tmpmzm91_g_.swift:46:9: error: type annotation missing\
    \ in pattern\n    var paren_char_prev_prev_prev_prev_prev_\n        ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_count =\
    \ 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_group = [String]()\n    var paren_group_level = [Int]()\n    var\
    \ paren_group_start = [Int]()\n    var paren_group_end = [Int]()\n    var paren_group_str\
    \ = [String]()\n    var paren_group_str_level = [Int]()\n    var paren_group_str_start\
    \ = [Int]()\n    var paren_group_str_end = [Int]()\n    var paren_group_str_str\
    \ = [String]()\n    var paren_group_str_str_level = [Int]()\n    var paren_group_str_str_start\
    \ = [Int]()\n    var paren_group_str_str_end = [Int]()\n    var paren_group_str_str_str\
    \ = [String]()\n    var paren_group_str_str_str_level = [Int]()\n    var paren_group_str_str_str_start\
    \ = [Int]()\n    var paren_group_str_str_str_end = [Int]()\n    var paren_group_str_str_str_str\
    \ = [String]()\n    var paren_group_str_str_str_str_level = [Int]()\n    var paren_group_str_str_str_str_start\
    \ = [Int]()\n    var paren_group_str_str_str_str_end = [Int]()\n    var paren_group_str_str_str_str_str\
    \ = [String]()\n    var paren_group_str_str_str_str_str_level = [Int]()\n    var\
    \ paren_group_str_str_str_str_str_start = [Int]()\n    var paren_group_str_str_str_str_str_end\
    \ = [Int]()\n    var paren_group_str_str_str_str_str_str = [String]()\n    var\
    \ paren_group_str_str_str_str_str_str_level = [Int]()\n    var paren_group_str_str_str_str_str_str_start\
    \ = [Int]()\n    var paren_group_str_str_str_str_str_str_end = [Int]()\n    var\
    \ paren_group_str_str_str_str_str_str_str = [String]()\n    var paren_group_str_str_str_str_str_str_str_level\
    \ = [Int]()\n    var paren_group_str_str_str_str_str_str_str_start = [Int]()\n\
    \    var paren_group_str_str_str_str_str_str_str_end = [Int]()\n    var paren_group_str_str_str_str_str_str_str_str\
    \ = [String]()\n    var paren_group_str_str_str_str_str_str_str_str_level = [Int]()\n\
    \    var paren_group_str_str_str_str_str_str_str_str_start = [Int]()\n    var\
    \ paren_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp3qwt84pb.swift:49:9: error: type annotation missing in pattern\n\
    \    var paren_\n        ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_levels_size = 0\n    var paren_levels_index = 0\n   \
    \ var paren_levels_size_index = 0\n    var paren_levels_index_size = 0\n    var\
    \ paren_levels_index_size_index = 0\n    var paren_levels_index_size_max = 0\n\
    \    var paren_levels_index_size_max_index = 0\n    var paren_levels_index_size_max_size\
    \ = 0\n    var paren_levels_index_size_max_size_index = 0\n    var paren_levels_index_size_max_size_max\
    \ = 0\n    var paren_levels_index_size_max_size_max_index = 0\n    var paren_levels_index_size_max_size_max_size\
    \ = 0\n    var paren_levels_index_size_max_size_max_index = 0\n    var paren_levels_index_size_max_size_max_size_max\
    \ = 0\n    var paren_levels_index_size_max_size_max_size_max_index = 0\n    var\
    \ paren_levels_index_size_max_size_max_size_max_size = 0\n    var paren_levels_index_size_max_size_max_size_max_index\
    \ = 0\n    var paren_levels_index_size_max_size_max_size_max_size_max = 0\n  \
    \  var paren_levels_index_size_max_size_max_size_max_size_max_index = 0\n    var\
    \ paren_levels_index_size_max_size_max_size_max_size_max_size = 0\n    var paren_levels_index_size_max_size_max_size_max_size_max_index\
    \ = 0\n    var paren_levels_index_size_max_size_max_size_max_size_max_size_max\
    \ = 0\n    var paren_levels_index_size_max_size_max_size_max_size_max_size_max_index\
    \ = 0\n    var paren_levels_index_size_max_size_max_size_max_size_max_size_max_size\
    \ = 0\n    var paren_levels_index_size_max_size_max_size_max_size_max_size_max_index\
    \ = 0\n    var paren_levels_index_size_max_size_max_size_max_size_max_size_max_size_max\
    \ = 0\n    var paren_levels_index_size_max_size_max_size_max_size_max_size_max_size_max_index\
    \ = 0\n    var paren_levels_index_size_max_size_max_size_max_size_max_size_max_size_max_size\
    \ = 0\n    var paren_levels_index_size_max_size_max_size_max_size_max_size_max_size_max_size_max_index\
    \ = 0\n    var paren_levels_index_size_max_size_max_size_max_size_max_size_max_size_max_size_max_size_max\
    \ = 0\n    var paren_levels_index_size_max_size_max_size_max_size_max_size_max_size_max_size_max_size_max_index\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpgaezxjcr.swift:26:9: error: invalid redeclaration of 'paren_levels_index_size_max_size_max_index'\n\
    \    var paren_levels_index_size_max_size_max_index = 0\n        ^\n/tmp/tmpgaezxjcr.swift:24:9:\
    \ note: 'paren_levels_index_size_max_size_max_index' previously declared here\n\
    \    var paren_levels_index_size_max_size_max_index = 0\n        ^\n/tmp/tmpgaezxjcr.swift:30:9:\
    \ error: invalid redeclaration of 'paren_levels_index_size_max_size_max_size_max_index'\n\
    \    var paren_levels_index_size_max_size_max_size_max_index = 0\n        ^\n\
    /tmp/tmpgaezxjcr.swift:28:9: note: 'paren_levels_index_size_max_size_max_size_max_index'\
    \ previously declared here\n    var paren_levels_index_size_max_size_max_size_max_index\
    \ = 0\n        ^\n/tmp/tmpgaezxjcr.swift:34:9: error: invalid redeclaration of\
    \ 'paren_levels_index_size_max_size_max_size_max_size_max_index'\n    var paren_levels_index_size_max_size_max_size_max_size_max_index\
    \ = 0\n        ^\n/tmp/tmpgaezxjcr.swift:32:9: note: 'paren_levels_index_size_max_size_max_size_max_size_max_index'\
    \ previously declared here\n    var paren_levels_index_size_max_size_max_size_max_size_max_index\
    \ = 0\n        ^\n/tmp/tmpgaezxjcr.swift:38:9: error: invalid redeclaration of\
    \ 'paren_levels_index_size_max_size_max_size_max_size_max_size_max_index'\n  \
    \  var paren_levels_index_size_max_size_max_size_max_size_max_size_max_index =\
    \ 0\n        ^\n/tmp/tmpgaezxjcr.swift:36:9: note: 'paren_levels_index_size_max_size_max_size_max_size_max_size_max_index'\
    \ previously declared here\n    var paren_levels_index_size_max_size_max_size_max_size_max_size_max_index\
    \ = 0\n        ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_level = 0\n    var paren_char_start = 0\n    var paren_char_end\
    \ = 0\n    var paren_char_char_count = 0\n    var paren_char_char_level = 0\n\
    \    var paren_char_char_start = 0\n    var paren_char_char_end = 0\n    var paren_char_char_char_count\
    \ = 0\n    var paren_char_char_char_level = 0\n    var paren_char_char_char_start\
    \ = 0\n    var paren_char_char_char_end = 0\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_count = 0\n\
    \    var paren_char_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_count =\
    \ 0\n    var paren_char_char_char_char_char_char_char_char_char_char_level = 0\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_start = 0\n \
    \   var paren_char_char_char_char_char_char_char_char_char_char_end = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_char_char_count = 0\n   \
    \ var paren_char_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpmtw7f9bp.swift:54:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_count = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_level = 0\n\
    \    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpchcp0c3q.swift:13:9: error: invalid redeclaration of 'parens_count'\n\
    \    var parens_count = 0\n        ^\n/tmp/tmpchcp0c3q.swift:11:9: note: 'parens_count'\
    \ previously declared here\n    var parens_count = 0\n        ^\n/tmp/tmpchcp0c3q.swift:14:9:\
    \ error: invalid redeclaration of 'parens_level'\n    var parens_level = 0\n \
    \       ^\n/tmp/tmpchcp0c3q.swift:12:9: note: 'parens_level' previously declared\
    \ here\n    var parens_level = 0\n        ^\n/tmp/tmpchcp0c3q.swift:15:9: error:\
    \ invalid redeclaration of 'parens_count'\n    var parens_count = 0\n        ^\n\
    /tmp/tmpchcp0c3q.swift:11:9: note: 'parens_count' previously declared here\n \
    \   var parens_count = 0\n        ^\n/tmp/tmpchcp0c3q.swift:16:9: error: invalid\
    \ redeclaration of 'parens_level'\n    var parens_level = 0\n        ^\n/tmp/tmpchcp0c3q.swift:12:9:\
    \ note: 'parens_level' previously declared here\n    var parens_level = 0\n  \
    \      ^\n/tmp/tmpchcp0c3q.swift:17:9: error: invalid redeclaration of 'parens_count'\n\
    \    var parens_count = 0\n        ^\n/tmp/tmpchcp0c3q.swift:11:9: note: 'parens_count'\
    \ previously declared here\n    var parens_count = 0\n        ^\n/tmp/tmpchcp0c3q.swift:18:9:\
    \ error: invalid redeclaration of 'parens_level'\n    var parens_level = 0\n \
    \       ^\n/tmp/tmpchcp0c3q.swift:12:9: note: 'parens_level' previously declared\
    \ here\n    var parens_level = 0\n        ^\n/tmp/tmpchcp0c3q.swift:19:9: error:\
    \ invalid redeclaration of 'parens_count'\n    var parens_count = 0\n        ^\n\
    /tmp/tmpchcp0c3q.swift:11:9: note: 'parens_count' previously declared here\n \
    \   var parens_count = 0\n        ^\n/tmp/tmpchcp0c3q.swift:20:9: error: invalid\
    \ redeclaration of 'parens_level'\n    var parens_level = 0\n        ^\n/tmp/tmpchcp0c3q.swift:12:9:\
    \ note: 'parens_level' previously declared here\n    var parens_level = 0\n  \
    \      ^\n/tmp/tmpchcp0c3q.swift:21:9: error: invalid redeclaration of 'parens_count'\n\
    \    var parens_count = 0\n        ^\n/tmp/tmpchcp0c3q.swift:11:9: note: 'parens_count'\
    \ previously declared here\n    var parens_count = 0\n        ^\n/tmp/tmpchcp0c3q.swift:22:9:\
    \ error: invalid redeclaration o"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_levels_len\
    \ = 0\n    var paren_levels_len2 = 0\n    var paren_levels_len3 = 0\n    var paren_levels_len4\
    \ = 0\n    var paren_levels_len5 = 0\n    var paren_levels_len6 = 0\n    var paren_levels_len7\
    \ = 0\n    var paren_levels_len8 = 0\n    var paren_levels_len9 = 0\n    var paren_levels_len10\
    \ = 0\n    var paren_levels_len11 = 0\n    var paren_levels_len12 = 0\n    var\
    \ paren_levels_len13 = 0\n    var paren_levels_len14 = 0\n    var paren_levels_len15\
    \ = 0\n    var paren_levels_len16 = 0\n    var paren_levels_len17 = 0\n    var\
    \ paren_levels_len18 = 0\n    var paren_levels_len19 = 0\n    var paren_levels_len20\
    \ = 0\n    var paren_levels_len21 = 0\n    var paren_levels_len22 = 0\n    var\
    \ paren_levels_len23 = 0\n    var paren_levels_len24 = 0\n    var paren_levels_len25\
    \ = 0\n    var paren_levels_len26 = 0\n    var paren_levels_len27 = 0\n    var\
    \ paren_levels_len28 = 0\n    var paren_levels_len29 = 0\n    var paren_levels_len30\
    \ = 0\n    var paren_levels_len31 = 0\n    var paren_levels_len32 = 0\n    var\
    \ paren_levels_len33 = 0\n    var paren_levels_len34 = 0\n    var paren_levels_len35\
    \ = 0\n    var paren_levels_len36 = 0\n    var paren_levels_len37 = 0\n    var\
    \ paren_levels_len38 = 0\n    var paren_levels_len39 = 0\n    var paren_levels_len40\
    \ = 0\n    var paren_levels_len41 = 0\n    var paren_levels_len42 = 0\n    var\
    \ paren_levels_len43 = 0\n    var paren_levels_len44 = 0\n    var paren_levels_len45\
    \ = 0\n    var paren_levels_len46 = 0\n    var paren_levels_len47 = 0\n    var\
    \ paren_levels_len48 = 0\n    var paren_levels_len49 = 0\n    var paren_levels_len50\
    \ = 0\n    var paren_levels_len51 = 0\n    var paren_levels_len52 = 0\n    var\
    \ paren_levels_len53 = 0\n    var paren_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpfbup0wwn.swift:66:9: error: type annotation missing in pattern\n\
    \    var paren_\n        ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_char = 0\n\
    \    var paren_char_count = 0\n    var paren_char_level = 0\n    var paren_char_start\
    \ = 0\n    var paren_char_end = 0\n    var paren_char_char = 0\n    var paren_char_char_count\
    \ = 0\n    var paren_char_char_level = 0\n    var paren_char_char_start = 0\n\
    \    var paren_char_char_end = 0\n    var paren_char_char_char = 0\n    var paren_char_char_char_count\
    \ = 0\n    var paren_char_char_char_level = 0\n    var paren_char_char_char_start\
    \ = 0\n    var paren_char_char_char_end = 0\n    var paren_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_count = 0\n    var paren_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_start = 0\n    var paren_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_count = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_end = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_level = 0\n\
    \    var paren_char_char_char_char_char_char_char_char_char_start = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpeowrt9hp.swift:57:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_char_char_char_char_char_char_\n        ^\n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_chars\
    \ = \"\"\n    var paren_char_index = 0\n    var paren_char = \"\"\n    var paren_char_indexes\
    \ = [Int]()\n    var paren_char_indexes_index = 0\n    var paren_char_indexes_count\
    \ = 0\n    var paren_char_indexes_string = \"\"\n    var paren_char_indexes_string_index\
    \ = 0\n    var paren_char_indexes_string_count = 0\n    var paren_char_indexes_string_char\
    \ = \"\"\n    var paren_char_indexes_string_char_index = 0\n    var paren_char_indexes_string_char_count\
    \ = 0\n    var paren_char_indexes_string_char_array = [Int]()\n    var paren_char_indexes_string_char_array_index\
    \ = 0\n    var paren_char_indexes_string_char_array_count = 0\n    var paren_char_indexes_string_char_array_string\
    \ = \"\"\n    var paren_char_indexes_string_char_array_string_index = 0\n    var\
    \ paren_char_indexes_string_char_array_string_count = 0\n    var paren_char_indexes_string_char_array_string_char\
    \ = \"\"\n    var paren_char_indexes_string_char_array_string_char_index = 0\n\
    \    var paren_char_indexes_string_char_array_string_char_count = 0\n    var paren_char_indexes_string_char_array_string_char_array\
    \ = [Int]()\n    var paren_char_indexes_string_char_array_string_char_array_index\
    \ = 0\n    var paren_char_indexes_string_char_array_string_char_array_count =\
    \ 0\n    var paren_char_indexes_string_char_array_string_char_array_string = \"\
    \"\n    var paren_char_indexes_string_char_array_string_char_array_string_index\
    \ = 0\n    var paren_char_indexes_string_char_array_string_char_array_string_count\
    \ = 0\n    var paren_char_indexes_string_char_array_string_char_array_string_char\
    \ = \"\"\n    var paren_char_indexes_string_char_array_string_char_array_string_char_index\
    \ = 0\n    var paren_char_indexes_string_char_array_string_char_array_string_char_count\
    \ = 0\n    var paren_char_indexes_string_char_array_string_char_array_string_char_array\
    \ = [Int]()\n    var paren_char_indexes_string_char_array_string_char_array_string_char_array_index\
    \ = 0\n    var paren_char_indexes_string_char_array_string_char_array_string_char_array_count\
    \ = 0\n    var paren_char_indexes_string_char_array_string_char_array_string_char_array_string\
    \ = \"\"\n    var paren_char_indexes_string_char_array_string_char_array_string_char_array_string_index\
    \ = 0\n    var paren_char_indexes_string_char_array_string_char_array_string_char_array_string_count\
    \ = 0\n    var paren_char_indexes_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpgcwqvi4n.swift:49:9: error: type annotation missing in pattern\n\
    \    var paren_char_indexes_\n        ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_stack =\
    \ [String]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_levels_string = \"\"\n    for c in paren_string.unicodeScalars {\n   \
    \     if c == '(' {\n            paren_stack.append(String(c.value))\n       \
    \     paren_level++\n        } else if c == ')' {\n            paren_level--\n\
    \            if paren_level == 0 {\n                paren_levels.append(paren_level)\n\
    \                paren_levels_string += String(c.value)\n            }\n     \
    \   }\n    }\n    if paren_levels_string != \"\" {\n        max_level = paren_levels_string.count\n\
    \    }\n    for paren_level in paren_levels {\n        if paren_level > max_level\
    \ {\n            max_level = paren_level\n        }\n    }\n    return paren_levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp05kood8p.swift:15:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmp05kood8p.swift:18:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmp05kood8p.swift:17:24: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            paren_level++\n                \
    \       ^~\n/tmp/tmp05kood8p.swift:19:24: error: cannot find operator '--' in\
    \ scope; did you mean '-= 1'?\n            paren_level--\n                   \
    \    ^~\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for ch in paren_string.characters {\n        if ch == '(' {\n     \
    \       paren_count += 1\n            levels.append(level)\n        } else if\
    \ ch == ')' {\n            levels[level] = levels[level] - 1\n            if levels[level]\
    \ == 0 {\n                levels[level] = level + 1\n            }\n         \
    \   paren_count -= 1\n        }\n        level += 1\n    }\n    return levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp_8_pkuwf.swift:12:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmp_8_pkuwf.swift:15:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n/tmp/tmp_8_pkuwf.swift:11:28: error: 'characters' is\
    \ unavailable: Please use String directly\n    for ch in paren_string.characters\
    \ {\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659825025
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_string = \"\
    \"\n    var parens_string_index = 0\n    var parens_string_index2 = 0\n    var\
    \ parens_string_index3 = 0\n    var parens_string_index4 = 0\n    var parens_string_index5\
    \ = 0\n    var parens_string_index6 = 0\n    var parens_string_index7 = 0\n  \
    \  var parens_string_index8 = 0\n    var parens_string_index9 = 0\n    var parens_string_index10\
    \ = 0\n    var parens_string_index11 = 0\n    var parens_string_index12 = 0\n\
    \    var parens_string_index13 = 0\n    var parens_string_index14 = 0\n    var\
    \ parens_string_index15 = 0\n    var parens_string_index16 = 0\n    var parens_string_index17\
    \ = 0\n    var parens_string_index18 = 0\n    var parens_string_index19 = 0\n\
    \    var parens_string_index20 = 0\n    var parens_string_index21 = 0\n    var\
    \ parens_string_index22 = 0\n    var parens_string_index23 = 0\n    var parens_string_index24\
    \ = 0\n    var parens_string_index25 = 0\n    var parens_string_index26 = 0\n\
    \    var parens_string_index27 = 0\n    var parens_string_index28 = 0\n    var\
    \ parens_string_index29 = 0\n    var parens_string_index30 = 0\n    var parens_string_index31\
    \ = 0\n    var parens_string_index32 = 0\n    var parens_string_index33 = 0\n\
    \    var parens_string_index34 = 0\n    var parens_string_index35 = 0\n    var\
    \ parens_string_index36 = 0\n    var parens_string_index37 = 0\n    var parens_string_index38\
    \ = 0\n    var parens_string_index39 = 0\n    var parens_string_index40 = 0\n\
    \    var parens_string_index41 = 0\n    var parens_string_index42 = 0\n    var\
    \ parens_string_index43 = 0\n    var parens_string_index44 = 0\n    var parens_string_index45\
    \ = 0\n    var parens_string_index46 = 0\n    var parens_string_index47 = 0\n\
    \    var parens_string_index48 = 0\n    var parens_string_index49 = 0\n    var\
    \ parens_string_index50 = 0\n    var parens_string_index51 = 0\n    var parens_string_index52\
    \ = 0\n    var parens_string_index53 = 0\n    var parens_string_index54 = 0\n\
    \    var parens_string_index55 = 0\n    var parens_string_index56 = 0\n    var\
    \ parens_string_index57 = 0\n    var parens_string_index58 = 0\n    var parens_string_index59\
    \ = 0\n    var parens_string_index60 = 0\n    var \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpy7604j16.swift:74:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpy7604j16.swift:8:9: warning: initialization of variable 'levels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var levels = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpy7604j16.swift:9:9: warning:\
    \ initialization of variable 'level' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpy7604j16.swift:10:9:\
    \ warning: initialization of variable 'parens' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var parens = 0\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmpy7604j16.swift:11:9: warning: initialization of variable 'parens_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var parens_level = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpy7604j16.swift:12:9:\
    \ warning: initialization of variable 'parens_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var parens_count = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpy7604j16.swift:13:9: warning: initialization\
    \ of variable 'parens_string' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var parens_string = \"\"\n    ~~~~^~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpy7604j16.swift:14:9: warning: initialization of variable 'parens_string_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var parens_string_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpy7604j16.swift:15:9:\
    \ warning: initialization of variable 'parens_string_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var parens_string_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpy7604j16.swift:16:9: warning:\
    \ initialization of variable 'parens_string_index3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var parens_string_index3 = 0\n  \
    \  ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpy7604j16.swift:17:9: warning: initialization\
    \ of variable 'parens_string_index4' was never used; consider"
  stdout: ''
  timestamp: 1659825025
