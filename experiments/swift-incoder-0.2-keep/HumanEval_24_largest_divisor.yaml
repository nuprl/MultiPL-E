name: HumanEval_24_largest_divisor
language: swift
prompt: "\n/// For a given number n, find the largest number that divides n evenly,\
  \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n: Int)\
  \ -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
  \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
  \ == 50)\nassert(largest_divisor(n: 49) == 7)"
completions: ["    var largest = 0\n    for divisor in 1...n {\n        if n % divisor\
    \ == 0 {\n            if largest < divisor {\n                largest = divisor\n\
    \            }\n        }\n    }\n    return largest", "    if n < 2 {\n     \
    \   return n\n    }\n    var maxDivisor = 1\n    var maxDivisorIndex = -1\n  \
    \  for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if maxDivisor\
    \ < i {\n                maxDivisor = i\n                maxDivisorIndex = i\n\
    \            }\n        }\n    }\n    return maxDivisorIndex", "    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n%divisor == 0 {\n            if\
    \ divisor*divisor > largestDivisor {\n                largestDivisor = divisor\n\
    \            }\n        }\n    }\n    return largestDivisor", "    var largestDivisor\
    \ = Int()\n    var largestDivisorIndex = Int()\n    for i := 0; i < n; i++ {\n\
    \        if n % i == 0 {\n            if largestDivisor == 0 || largestDivisor\
    \ > i {\n                largestDivisor = i\n                largestDivisorIndex\
    \ = i\n            }\n        }\n    }\n    return largestDivisor", "    var maxDivisor\
    \ = 1\n    var maxDivisorIndex = -1\n    for i := 1; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            if maxDivisor < i {\n                maxDivisor =\
    \ i\n                maxDivisorIndex = i\n            }\n        }\n    }\n  \
    \  return maxDivisorIndex", "    var largest = Int(n)\n    for divisor in 1...n\
    \ {\n        if n % divisor == 0 {\n            largest = divisor\n        }\n\
    \    }\n    return largest", "    var maxDivisor = 1\n    var maxDivisorValue\
    \ = n\n    for divisor in 2...n {\n        if n % divisor == 0 {\n           \
    \ if divisor * divisor > maxDivisorValue {\n                maxDivisorValue =\
    \ divisor\n                maxDivisor = divisor\n            }\n        }\n  \
    \  }\n    return maxDivisor", "    if n < 2 {\n        return n\n    }\n    var\
    \ largestDivisor = Int(1)\n    var largestDivisorRemainder = Int(1)\n    for divisor\
    \ in 2...n {\n        if n % divisor == 0 {\n            if largestDivisorRemainder\
    \ > divisor {\n                largestDivisor = divisor\n                largestDivisorRemainder\
    \ = n % divisor\n            }\n        } else {\n            largestDivisorRemainder\
    \ = n % divisor\n        }\n    }\n    return largestDivisor", "    var largestDivisor\
    \ = 1\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor*divisor > n {\n                largestDivisor = divisor\n       \
    \     } else {\n                break\n            }\n        }\n    }\n    return\
    \ largestDivisor", "    if n < 2 {\n        return n\n    }\n    var largestDivisor\
    \ = 1\n    var largestDivisorIndex = 0\n    for i := 2; i <= n; i++ {\n      \
    \  if n % i == 0 {\n            if largestDivisor > i {\n                largestDivisor\
    \ = i\n                largestDivisorIndex = i\n            }\n        }\n   \
    \ }\n    return largestDivisor", "    var largest = 0\n    for divisor in 1...n\
    \ {\n        if n % divisor == 0 {\n            if largest < divisor {\n     \
    \           largest = divisor\n            }\n        }\n    }\n    return largest",
  "    if n < 2 {\n        return n\n    }\n    var maxDivisor = 1\n    var maxDivisorIndex\
    \ = -1\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if\
    \ maxDivisor < i {\n                maxDivisor = i\n                maxDivisorIndex\
    \ = i\n            }\n        }\n    }\n    return maxDivisorIndex", "    var\
    \ largestDivisor = Int()\n    var largestDivisorNum = Int()\n    for num in 1...n\
    \ {\n        if num % 2 == 0 {\n            if num > largestDivisorNum {\n   \
    \             largestDivisorNum = num\n                largestDivisor = num\n\
    \            }\n        } else {\n            if num > largestDivisorNum {\n \
    \               largestDivisorNum = num\n                largestDivisor = largestDivisorNum\n\
    \            }\n        }\n    }\n    return largestDivisor", "    if n < 2 {\n\
    \        return n\n    }\n    var maxDivisor = 1\n    var maxDivisorIndex = -1\n\
    \    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if maxDivisor\
    \ < i {\n                maxDivisor = i\n                maxDivisorIndex = i\n\
    \            }\n        }\n    }\n    return maxDivisorIndex", "    if n < 2 {\n\
    \        return n\n    }\n    var max_divisor = 0\n    var max_divisor_index =\
    \ 0\n    for i := 0; i < n; i++ {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i\n                max_divisor_index =\
    \ i\n            }\n        }\n    }\n    return max_divisor", "    var largest\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if largest < divisor {\n                largest = divisor\n            }\n \
    \       }\n    }\n    return largest", "    var max_divisor = 0\n    for divisor\
    \ in 1...n {\n        if n % divisor == 0 {\n            if max_divisor < divisor\
    \ {\n                max_divisor = divisor\n            }\n        }\n    }\n\
    \    return max_divisor", "    var largestDivisor = 0\n    for divisor in divisors\
    \ {\n        if n / divisor == 0 {\n            if divisor > largestDivisor {\n\
    \                largestDivisor = divisor\n            }\n        }\n    }\n \
    \   return largestDivisor", "    var largestDivisor = Int()\n    for divisor in\
    \ stride(from: 1, to: n, by: 1) {\n        if n % divisor == 0 {\n           \
    \ if largestDivisor == 0 {\n                largestDivisor = divisor\n       \
    \     } else {\n                if divisor > largestDivisor {\n              \
    \      largestDivisor = divisor\n                }\n            }\n        }\n\
    \    }\n    return largestDivisor", "    var max_divisor = 0\n    var max_divisor_index\
    \ = 0\n    for index in 0..<n {\n        if n % index == 0 {\n            if max_divisor\
    \ < index {\n                max_divisor = index\n                max_divisor_index\
    \ = index\n            }\n        }\n    }\n    return max_divisor_index"]
stop_tokens:
- "\n}"
