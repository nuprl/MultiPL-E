language: swift
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpnvuybjr0.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpnvuybjr0.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpnvuybjr0.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpnvuybjr0.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpnvuybjr0.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpnvuybjr0.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpnvuybjr0.swift:34:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result;\n    }\n  \
    \  if n == 1 {\n        result.append(1)\n        return result;\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result;\n    }\n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3x754frx.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp3x754frx.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp3x754frx.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp3x754frx.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp3x754frx.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp3x754frx.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp3x754frx.swift:34:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result;\n   \
    \ }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n\
    \ / 2)\n    } else {\n        result.append(1)\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp9mjsu6tb.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp9mjsu6tb.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp9mjsu6tb.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp9mjsu6tb.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpenyhso86.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpenyhso86.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpenyhso86.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpenyhso86.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpenyhso86.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpenyhso86.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpenyhso86.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result;\n    }\n  \
    \  if n == 1 {\n        result.append(1)\n        return result;\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result;\n    }\n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3x754frx.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp3x754frx.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp3x754frx.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp3x754frx.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp3x754frx.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp3x754frx.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp3x754frx.swift:34:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(1)\n        result.append(3)\n \
    \       return result\n    }\n    \n    if n == 1 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(3)\n        result.append(3)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmph5x_pebl.swift:175:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmph5x_pebl.swift:17:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmph5x_pebl.swift:154:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmptdrjoh8x.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmptdrjoh8x.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmptdrjoh8x.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmptdrjoh8x.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmptdrjoh8x.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmptdrjoh8x.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmptdrjoh8x.swift:38:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(0)\n   \
    \     result.append(1)\n        result.append(2)\n        return result\n    }\n\
    \    \n    var first = 0\n    var second = 1\n    var third = 1\n    var fourth\
    \ = 1\n    \n    for _ in 0..<n {\n        third = first + second + third\n  \
    \      fourth = first + second + third\n        first = second\n        second\
    \ = third\n        third = fourth\n    }\n    \n    result.append(first)\n   \
    \ result.append(second)\n    result.append(third)\n    result.append(fourth)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp5xl743mq/tmp5xl743mq.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2422ecdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2422bc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2422bc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2422bc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5xl743mq                        0x000055b190a6f5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b24230b9460 __libc_start_main +
    245

    6    tmp5xl743mq                        0x000055b190a6f209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_p0t5oj5.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp_p0t5oj5.swift:31:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp_p0t5oj5.swift:31:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp_p0t5oj5.swift:33:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_p0t5oj5.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_p0t5oj5.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_p0t5oj5.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result;\n    }\n  \
    \  if n == 1 {\n        result.append(1)\n        return result;\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result;\n    }\n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpjoph853v.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpjoph853v.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpjoph853v.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpjoph853v.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpjoph853v.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpjoph853v.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpjoph853v.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpjoph853v.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpjoph853v.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpjoph853v.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n      \
    \  result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpph92hja3.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpph92hja3.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpph92hja3.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpph92hja3.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpph92hja3.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpph92hja3.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpph92hja3.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpph92hja3.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpph92hja3.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpph92hja3.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result;\n   \
    \ }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp2xfzoshu.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp2xfzoshu.swift:31:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp2xfzoshu.swift:31:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp2xfzoshu.swift:33:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp2xfzoshu.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp2xfzoshu.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp2xfzoshu.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(1)\n        result.append(n / 2)\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        return result\n    }\n    \n    result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpshut230v.swift:40:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpshut230v.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpshut230v.swift:40:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpshut230v.swift:40:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpshut230v.swift:44:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                  ^\n                  contentsOf: \n/tmp/tmpshut230v.swift:44:23:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmpshut230v.swift:44:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmpshut230v.swift:44:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result;\n   \
    \ }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \   }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0u6jxk50.swift:26:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp0u6jxk50.swift:26:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp0u6jxk50.swift:26:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp0u6jxk50.swift:28:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp0u6jxk50.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp0u6jxk50.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp0u6jxk50.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n\
    \    else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \     result.append(tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpqczz8369.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpqczz8369.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpqczz8369.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpqczz8369.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpqczz8369.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpqczz8369.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpqczz8369.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpqczz8369.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpqczz8369.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpqczz8369.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(3)\n        return result\n    }\n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \       result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpcaurtrv_.swift:28:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpcaurtrv_.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpcaurtrv_.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpcaurtrv_.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpcaurtrv_.swift:30:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpcaurtrv_.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpcaurtrv_.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpcaurtrv_.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpcaurtrv_.swift:31:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpcaurtrv_.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result;\n    }\n  \
    \  if n == 2 {\n        result.append(3)\n        return result;\n    }\n    if\
    \ n == 3 {\n        result.append(1)\n        result.append(3)\n        return\
    \ result;\n    }\n    if n % 2 == 0 {\n        result.append(1)\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpx0aszn5e.swift:34:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpx0aszn5e.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpx0aszn5e.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpx0aszn5e.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpx0aszn5e.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpx0aszn5e.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpx0aszn5e.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpx0aszn5e.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpx0aszn5e.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpx0aszn5e.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var firstThree = [Int]()\n    var secondThree = [Int]()\n    var thirdThree\
    \ = [Int]()\n    var fourthThree = [Int]()\n    var fifthThree = [Int]()\n   \
    \ var sixthThree = [Int]()\n    var seventhThree = [Int]()\n    var eighthThree\
    \ = [Int]()\n    var ninethThree = [Int]()\n    var tenthThree = [Int]()\n   \
    \ var eleventhThree = [Int]()\n    var thirteenthThree = [Int]()\n    var fourteenthThree\
    \ = [Int]()\n    var fifteenthThree = [Int]()\n    var sixteenthThree = [Int]()\n\
    \    var seventeenthThree = [Int]()\n    var eighteenthThree = [Int]()\n    var\
    \ nineteenthThree = [Int]()\n    var twentiethThree = [Int]()\n    var twentyFourthThree\
    \ = [Int]()\n    var twentyFifthThree = [Int]()\n    var twentySixthThree = [Int]()\n\
    \    var twentySeventhThree = [Int]()\n    var twentyEighthThree = [Int]()\n \
    \   var twentyNinthThree = [Int]()\n    var thirtyOnethThree = [Int]()\n    var\
    \ thirtySecondThree = [Int]()\n    var thirtyThirdThree = [Int]()\n    var thirtyFourthThree\
    \ = [Int]()\n    var thirtyFifthThree = [Int]()\n    var thirtySixthThree = [Int]()\n\
    \    var thirtySeventhThree = [Int]()\n    var thirtyEighthThree = [Int]()\n \
    \   var thirtyNinthThree = [Int]()\n    var fortyOnethThree = [Int]()\n    var\
    \ fortySecondThree = [Int]()\n    var fortyThirdThree = [Int]()\n    var fortyFourthThree\
    \ = [Int]()\n    var fortyFifthThree = [Int]()\n    var fortySixthThree = [Int]()\n\
    \    var fortySeventhThree = [Int]()\n    var fortyEighthThree = [Int]()\n   \
    \ var fortyNinthThree = [Int]()\n    var fiftyOnethThree = [Int]()\n    var fiftySecondThree\
    \ = [Int]()\n    var fiftyThirdThree = [Int]()\n    var fiftyFourthThree\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpzzg24ejh.swift:65:9: error: type annotation missing in pattern\n\
    \    var fiftyFourthThree\n        ^\n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(3)\n        return result\n    }\n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpiwg6nokb.swift:28:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpiwg6nokb.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpiwg6nokb.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpiwg6nokb.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpiwg6nokb.swift:30:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpiwg6nokb.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpiwg6nokb.swift:30:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    if n == 1 {\n        result.append(0)\n        return\
    \ result\n    }\n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    let firstTribonacci = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    \n    for i in firstTribonacci {\n        result.append(i)\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpvyw847ri.swift:34:31: error: missing argument label 'n:' in call\n\
    \    let firstTribonacci = tri(n - 1) + tri(n - 2) + tri(n + 1)\n            \
    \                  ^\n                              n: \n/tmp/tmpvyw847ri.swift:34:44:\
    \ error: missing argument label 'n:' in call\n    let firstTribonacci = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n                                           ^\n\
    \                                           n: \n/tmp/tmpvyw847ri.swift:34:57:\
    \ error: missing argument label 'n:' in call\n    let firstTribonacci = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n                                           \
    \             ^\n                                                        n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var a = 2\n    var b = 3\n    var c = 1\n    for _ in 0..<n {\n        result.append(c)\n\
    \        if n % 2 == 0 {\n            a += b\n            b += c\n           \
    \ c += 1\n        } else {\n            a += c\n            b += b\n         \
    \   c += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmp3p3sypka/tmp3p3sypka.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a0ef4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a0bebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a0beb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a0bea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3p3sypka                        0x000055d7b6c025ca <unavailable> + 5578

    5    libc.so.6                          0x00002ae4a10e0460 __libc_start_main +
    245

    6    tmp3p3sypka                        0x000055d7b6c02209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpyzle3aae.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpyzle3aae.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpyzle3aae.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpyzle3aae.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpyzle3aae.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpyzle3aae.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpyzle3aae.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpyzle3aae.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpyzle3aae.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpyzle3aae.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659825013
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var a = 2\n    var b = 3\n    var c = 1\n    for _ in 0..<n {\n        result.append(c)\n\
    \        if n % 2 == 0 {\n            c += b\n        } else {\n            c\
    \ += a\n        }\n        if c > n {\n            c = 1\n        }\n        a\
    \ += b\n        b += c\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp6xd4h17g/tmp6xd4h17g.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8bec96cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8bec663b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8bec663988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8bec6627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6xd4h17g                        0x00005643c26d85ca <unavailable> + 5578

    5    libc.so.6                          0x00002b8becb58460 __libc_start_main +
    245

    6    tmp6xd4h17g                        0x00005643c26d8209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpqo21lx0w.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpqo21lx0w.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpqo21lx0w.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpqo21lx0w.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpqo21lx0w.swift:33:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpqo21lx0w.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpqo21lx0w.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpqo21lx0w.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpqo21lx0w.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpqo21lx0w.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    \n   \
    \ var firstTribonacci = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    \n    for i\
    \ in 0..<n {\n        result.append(firstTribonacci[i])\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp1t2rpzuw.swift:32:31: error: missing argument label 'n:' in call\n\
    \    var firstTribonacci = tri(n - 1) + tri(n - 2) + tri(n + 1)\n            \
    \                  ^\n                              n: \n/tmp/tmp1t2rpzuw.swift:32:44:\
    \ error: missing argument label 'n:' in call\n    var firstTribonacci = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n                                           ^\n\
    \                                           n: \n/tmp/tmp1t2rpzuw.swift:32:57:\
    \ error: missing argument label 'n:' in call\n    var firstTribonacci = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n                                           \
    \             ^\n                                                        n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(3)\n        return result\n    }\n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpk0ny7d2f.swift:28:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpk0ny7d2f.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpk0ny7d2f.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpk0ny7d2f.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpk0ny7d2f.swift:30:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpk0ny7d2f.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpk0ny7d2f.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpk0ny7d2f.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpk0ny7d2f.swift:31:9: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1))\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1659825073
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var first = 3\n    var second = 1\n    var third = 2\n    for _ in 0..<n\
    \ {\n        result.append(first)\n        result.append(second)\n        result.append(third)\n\
    \        first = second\n        second = third\n        third = first + second\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpna2nws5y/tmpna2nws5y.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab18f92cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab18f623b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab18f623988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab18f6227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpna2nws5y                        0x000055851f4d95ca <unavailable> + 5578

    5    libc.so.6                          0x00002ab18fb18460 __libc_start_main +
    245

    6    tmpna2nws5y                        0x000055851f4d9209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmptdrjoh8x.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmptdrjoh8x.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmptdrjoh8x.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmptdrjoh8x.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmptdrjoh8x.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmptdrjoh8x.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmptdrjoh8x.swift:38:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(0)\n   \
    \     result.append(1)\n        result.append(2)\n        return result\n    }\n\
    \    \n    var first = 0\n    var second = 1\n    var third = 2\n    \n    for\
    \ i in 1...n {\n        \n        third = first + second + third\n        first\
    \ = second\n        second = third\n        \n        result.append(third)\n \
    \   }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmplhrrj_1m/tmplhrrj_1m.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7fc1c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7fbebdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7fbebd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7fbebc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplhrrj_1m                        0x000055a2c4ad65ca <unavailable> + 5578

    5    libc.so.6                          0x00002ab7fc3b2460 __libc_start_main +
    245

    6    tmplhrrj_1m                        0x000055a2c4ad6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpi7gnuiac.swift:38:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpi7gnuiac.swift:38:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpi7gnuiac.swift:38:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpi7gnuiac.swift:40:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpi7gnuiac.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpi7gnuiac.swift:40:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpi7gnuiac.swift:40:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var first = 3\n    var second = 1\n    var third = 1\n    for _ in 0..<n\
    \ {\n        result.append(first)\n        result.append(second)\n        result.append(third)\n\
    \        first++\n        second++\n        third++\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpbl6x6by5.swift:26:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        first++\n             ^~\n/tmp/tmpbl6x6by5.swift:27:15:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        second++\n\
    \              ^~\n/tmp/tmpbl6x6by5.swift:28:14: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        third++\n             ^~\n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpenyhso86.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpenyhso86.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpenyhso86.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpenyhso86.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpenyhso86.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpenyhso86.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpenyhso86.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpueb4ldk7.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpueb4ldk7.swift:31:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpueb4ldk7.swift:31:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpueb4ldk7.swift:33:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpueb4ldk7.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpueb4ldk7.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpueb4ldk7.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825014
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n\
    \    if n % 2 == 0 {\n        a = a + b + c\n    } else {\n        d = d + c +\
    \ b\n    }\n    for _ in 1...n {\n        result.append(a)\n        if n % 2 ==\
    \ 0 {\n            a = a + b + c\n        } else {\n            d = d + c + b\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpzhzv7vev/tmpzhzv7vev.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b556afe3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b556acdab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b556acda988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b556acd97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhzv7vev                        0x000055c62a1815ca <unavailable> + 5578

    5    libc.so.6                          0x00002b556b1cf460 __libc_start_main +
    245

    6    tmpzhzv7vev                        0x000055c62a181209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    \n   \
    \ var firstTribonacci = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    \n    for i\
    \ in firstTribonacci {\n        result.append(i)\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpz7mckbn5.swift:32:31: error: missing argument label 'n:' in call\n\
    \    var firstTribonacci = tri(n - 1) + tri(n - 2) + tri(n + 1)\n            \
    \                  ^\n                              n: \n/tmp/tmpz7mckbn5.swift:32:44:\
    \ error: missing argument label 'n:' in call\n    var firstTribonacci = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n                                           ^\n\
    \                                           n: \n/tmp/tmpz7mckbn5.swift:32:57:\
    \ error: missing argument label 'n:' in call\n    var firstTribonacci = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n                                           \
    \             ^\n                                                        n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result;\n    }\n  \
    \  if n == 2 {\n        result.append(3)\n        return result;\n    }\n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \       result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpxp6jmph4.swift:28:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpxp6jmph4.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpxp6jmph4.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpxp6jmph4.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpxp6jmph4.swift:30:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpxp6jmph4.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpxp6jmph4.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpxp6jmph4.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpxp6jmph4.swift:31:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpxp6jmph4.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpnvuybjr0.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpnvuybjr0.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpnvuybjr0.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpnvuybjr0.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpnvuybjr0.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpnvuybjr0.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpnvuybjr0.swift:34:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpnvuybjr0.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpnvuybjr0.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpnvuybjr0.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpnvuybjr0.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpnvuybjr0.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpnvuybjr0.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpnvuybjr0.swift:34:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        return result;\n    }\n    if n == 1 {\n        result.append(3)\n\
    \        return result;\n    }\n    if n == 2 {\n        result.append(1)\n  \
    \      result.append(3)\n        return result;\n    }\n    if n % 2 == 0 {\n\
    \        result.append(1)\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpfzpbv79l.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpfzpbv79l.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpfzpbv79l.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpfzpbv79l.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpfzpbv79l.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpfzpbv79l.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpfzpbv79l.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpfzpbv79l.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpfzpbv79l.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpfzpbv79l.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpsthkw31f.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpsthkw31f.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpsthkw31f.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpsthkw31f.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpsthkw31f.swift:38:9: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1))\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659825071
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n        return result\n    }\n    \n    result.append(tri(n - 1) + tri(n\
    \ - 2))\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6ivegfm0.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp6ivegfm0.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp6ivegfm0.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp6ivegfm0.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp6ivegfm0.swift:35:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2))\n        \
    \          ^\n                  contentsOf: \n/tmp/tmp6ivegfm0.swift:35:23: error:\
    \ missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n -\
    \ 2))\n                      ^\n                      n: \n/tmp/tmp6ivegfm0.swift:35:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2))\n                                   ^\n                              \
    \     n: \n"
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp7b5o0jxc.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp7b5o0jxc.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp7b5o0jxc.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp7b5o0jxc.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp7b5o0jxc.swift:33:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp7b5o0jxc.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp7b5o0jxc.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp7b5o0jxc.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp7b5o0jxc.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp7b5o0jxc.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(3)\n        return result\n    }\n    if\
    \ n == 3 {\n        result.append(1)\n        result.append(3)\n        return\
    \ result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpxn34d2na.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpxn34d2na.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpxn34d2na.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpxn34d2na.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpxn34d2na.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpxn34d2na.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpxn34d2na.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpxn34d2na.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpxn34d2na.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpxn34d2na.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpo4hfp1gk.swift:26:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpo4hfp1gk.swift:26:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpo4hfp1gk.swift:26:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpo4hfp1gk.swift:28:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpo4hfp1gk.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpo4hfp1gk.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpo4hfp1gk.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n\
    \    var e = Int(0)\n    var f = Int(1)\n    var g = Int(0)\n    var h = Int(1)\n\
    \    var i = Int(0)\n    var j = Int(1)\n    var k = Int(2)\n    var l = Int(3)\n\
    \    var m = Int(1)\n    var n = Int(2)\n    var o = Int(0)\n    var p = Int(1)\n\
    \    var q = Int(2)\n    var r = Int(3)\n    var s = Int(1)\n    var t = Int(2)\n\
    \    var u = Int(1)\n    var v = Int(2)\n    var w = Int(1)\n    var x = Int(3)\n\
    \    var y = Int(1)\n    var z = Int(2)\n    var a = Int(3)\n    var b = Int(1)\n\
    \    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n    var f = Int(1)\n\
    \    var g = Int(0)\n    var h = Int(1)\n    var i = Int(0)\n    var j = Int(1)\n\
    \    var k = Int(2)\n    var l = Int(3)\n    var m = Int(1)\n    var n = Int(2)\n\
    \    var o = Int(0)\n    var p = Int(1)\n    var q = Int(2)\n    var r = Int(3)\n\
    \    var s = Int(1)\n    var t = Int(2)\n    var u = Int(1)\n    var v = Int(2)\n\
    \    var w = Int(1)\n    var x = Int(3)\n    var y = Int(1)\n    var z = Int(2)\n\
    \    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n\
    \    var e = Int(0)\n    var f = Int(1)\n    var g = Int(0)\n    var h = Int(1)\n\
    \    var i = Int(0)\n    var j = Int(1)\n    var k = Int(2)\n    var l = Int(3)\n\
    \    var m = Int(1)\n    var n = Int(2)\n    var o = Int(0)\n    var p = Int(1)\n\
    \    var q = Int(2)\n    var r = Int(3)\n    var s = Int(1)\n    var t = Int(2)\n\
    \    var u = Int(1)\n    var v = Int(2)\n    var w = Int(1)\n    var x = Int(3)\n\
    \    var y = Int(1)\n    var z = Int(2)\n    var a = Int(3)\n    var b = Int(1)\n\
    \    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n    var f = Int(1)\n\
    \    var g = Int(0)\n    var h = Int(1)\n    var i = Int(0)\n    var j = Int(1)\n\
    \    var k = Int(2)\n    var l = Int(3)\n    var m = Int(1)\n    var n = Int(2)\n\
    \    var o = Int(0)\n    var p = Int(1)\n    var q = Int(2)\n    var r = Int(3)\n\
    \    var s = Int(1)\n    var t = Int(2)\n    var u = Int(1)\n    var v = Int(2)\n\
    \    var w = Int(1)\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpvp_ad4ld.swift:45:9: error: invalid redeclaration of 'a'\n    var\
    \ a = Int(3)\n        ^\n/tmp/tmpvp_ad4ld.swift:19:9: note: 'a' previously declared\
    \ here\n    var a = Int(3)\n        ^\n/tmp/tmpvp_ad4ld.swift:46:9: error: invalid\
    \ redeclaration of 'b'\n    var b = Int(1)\n        ^\n/tmp/tmpvp_ad4ld.swift:20:9:\
    \ note: 'b' previously declared here\n    var b = Int(1)\n        ^\n/tmp/tmpvp_ad4ld.swift:47:9:\
    \ error: invalid redeclaration of 'c'\n    var c = Int(2)\n        ^\n/tmp/tmpvp_ad4ld.swift:21:9:\
    \ note: 'c' previously declared here\n    var c = Int(2)\n        ^\n/tmp/tmpvp_ad4ld.swift:48:9:\
    \ error: invalid redeclaration of 'd'\n    var d = Int(1)\n        ^\n/tmp/tmpvp_ad4ld.swift:22:9:\
    \ note: 'd' previously declared here\n    var d = Int(1)\n        ^\n/tmp/tmpvp_ad4ld.swift:49:9:\
    \ error: invalid redeclaration of 'e'\n    var e = Int(0)\n        ^\n/tmp/tmpvp_ad4ld.swift:23:9:\
    \ note: 'e' previously declared here\n    var e = Int(0)\n        ^\n/tmp/tmpvp_ad4ld.swift:50:9:\
    \ error: invalid redeclaration of 'f'\n    var f = Int(1)\n        ^\n/tmp/tmpvp_ad4ld.swift:24:9:\
    \ note: 'f' previously declared here\n    var f = Int(1)\n        ^\n/tmp/tmpvp_ad4ld.swift:51:9:\
    \ error: invalid redeclaration of 'g'\n    var g = Int(0)\n        ^\n/tmp/tmpvp_ad4ld.swift:25:9:\
    \ note: 'g' previously declared here\n    var g = Int(0)\n        ^\n/tmp/tmpvp_ad4ld.swift:52:9:\
    \ error: invalid redeclaration of 'h'\n    var h = Int(1)\n        ^\n/tmp/tmpvp_ad4ld.swift:26:9:\
    \ note: 'h' previously declared here\n    var h = Int(1)\n        ^\n/tmp/tmpvp_ad4ld.swift:53:9:\
    \ error: invalid redeclaration of 'i'\n    var i = Int(0)\n        ^\n/tmp/tmpvp_ad4ld.swift:27:9:\
    \ note: 'i' previously declared here\n    var i = Int(0)\n        ^\n/tmp/tmpvp_ad4ld.swift:54:9:\
    \ error: invalid redeclaration of 'j'\n    var j = Int(1)\n        ^\n/tmp/tmpvp_ad4ld.swift:28:9:\
    \ note: 'j' previously declared here\n    var j = Int(1)\n        ^\n/tmp/tmpvp_ad4ld.swift:55:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int(2)\n        ^\n/tmp/tmpvp_ad4ld.swift:29:9:\
    \ note: 'k' previously declared here\n    var k = Int(2)\n "
  stdout: ''
  timestamp: 1659825013
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n    } else {\n        result.append(1)\n\
    \        result.append(n)\n        result.append(n)\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmphc7e1_9e/tmphc7e1_9e.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6086c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6083beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6083be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6083bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphc7e1_9e                        0x000055bc55e4a44a <unavailable> + 5194

    5    libc.so.6                          0x00002ab6088b3460 __libc_start_main +
    245

    6    tmphc7e1_9e                        0x000055bc55e4a089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result;\n    }\n  \
    \  if n == 2 {\n        result.append(3)\n        return result;\n    }\n    if\
    \ n == 3 {\n        result.append(1)\n        result.append(2)\n        return\
    \ result;\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpmu4qssok.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpmu4qssok.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpmu4qssok.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpmu4qssok.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpmu4qssok.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpmu4qssok.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpmu4qssok.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpmu4qssok.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpmu4qssok.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpmu4qssok.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpunmkrw0u.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpunmkrw0u.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpunmkrw0u.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpunmkrw0u.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpunmkrw0u.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpunmkrw0u.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpunmkrw0u.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpunmkrw0u.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpunmkrw0u.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpunmkrw0u.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(0)\n   \
    \     result.append(1)\n        result.append(2)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n   \
    \     result.append(2)\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n        return result\n    }\n    result.append(0)\n    result.append(1)\n\
    \    result.append(2)\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp023gcy8q.swift:39:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp023gcy8q.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp023gcy8q.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp023gcy8q.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp023gcy8q.swift:45:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                  ^\n                  contentsOf: \n/tmp/tmp023gcy8q.swift:45:23:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmp023gcy8q.swift:45:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmp023gcy8q.swift:45:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_p0t5oj5.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp_p0t5oj5.swift:31:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp_p0t5oj5.swift:31:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp_p0t5oj5.swift:33:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_p0t5oj5.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_p0t5oj5.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_p0t5oj5.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n - 3))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpxf_k13i3.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpxf_k13i3.swift:27:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpxf_k13i3.swift:27:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpxf_k13i3.swift:29:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n - 3))\n                      ^\n                      contentsOf: \n/tmp/tmpxf_k13i3.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n - 3))\n                          ^\n                  \
    \        n: \n/tmp/tmpxf_k13i3.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n - 3))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpxf_k13i3.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n - 3))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp1jbsf4cb.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp1jbsf4cb.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp1jbsf4cb.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp1jbsf4cb.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp1jbsf4cb.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp1jbsf4cb.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp1jbsf4cb.swift:39:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(0)\n   \
    \     result.append(1)\n        result.append(2)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        return result\n\
    \    }\n    result.append(0)\n    result.append(1)\n    result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpb49bjb3m.swift:38:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpb49bjb3m.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpb49bjb3m.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpb49bjb3m.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpb49bjb3m.swift:43:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                  ^\n                  contentsOf: \n/tmp/tmpb49bjb3m.swift:43:23:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmpb49bjb3m.swift:43:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmpb49bjb3m.swift:43:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpenyhso86.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpenyhso86.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpenyhso86.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpenyhso86.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpenyhso86.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpenyhso86.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpenyhso86.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825014
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(n)\n        result.append(n\
    \ + 2)\n        return result\n    }\n    \n    result.append(n)\n    result.append(n\
    \ + 2)\n    result.append(n + 3)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp_gkr161o/tmp_gkr161o.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b191ab02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b191a7f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b191a7f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b191a7f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_gkr161o                        0x00005654102ee4da <unavailable> + 5338

    5    libc.so.6                          0x00002b191acee460 __libc_start_main +
    245

    6    tmp_gkr161o                        0x00005654102ee119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    \n   \
    \ var firstTribonacci = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    \n    for index\
    \ in 0..<firstTribonacci.count {\n        result.append(firstTribonacci[index])\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpyad_8eg8.swift:32:31: error: missing argument label 'n:' in call\n\
    \    var firstTribonacci = tri(n - 1) + tri(n - 2) + tri(n + 1)\n            \
    \                  ^\n                              n: \n/tmp/tmpyad_8eg8.swift:32:44:\
    \ error: missing argument label 'n:' in call\n    var firstTribonacci = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n                                           ^\n\
    \                                           n: \n/tmp/tmpyad_8eg8.swift:32:57:\
    \ error: missing argument label 'n:' in call\n    var firstTribonacci = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n                                           \
    \             ^\n                                                        n: \n"
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpenyhso86.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpenyhso86.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpenyhso86.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpenyhso86.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpenyhso86.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpenyhso86.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpenyhso86.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n    } else {\n        result.append(3)\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1 + n / 2)\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpivd1m7fb.swift:29:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpivd1m7fb.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpivd1m7fb.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpivd1m7fb.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpenyhso86.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpenyhso86.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpenyhso86.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpenyhso86.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpenyhso86.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpenyhso86.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpenyhso86.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result;\n    }\n  \
    \  if n == 2 {\n        result.append(3)\n        return result;\n    }\n    if\
    \ n == 3 {\n        result.append(3)\n        result.append(1)\n        return\
    \ result;\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpr655bpd9.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpr655bpd9.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpr655bpd9.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpr655bpd9.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpr655bpd9.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpr655bpd9.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpr655bpd9.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpr655bpd9.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpr655bpd9.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpr655bpd9.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpx7oqfb69.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpx7oqfb69.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpx7oqfb69.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpx7oqfb69.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpx7oqfb69.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpx7oqfb69.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpx7oqfb69.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpx7oqfb69.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpx7oqfb69.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpx7oqfb69.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n + 2))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpl9v5stx5.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpl9v5stx5.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpl9v5stx5.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpl9v5stx5.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpl9v5stx5.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2))\n                      ^\n                      contentsOf:\
    \ \n/tmp/tmpl9v5stx5.swift:38:27: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2))\n  \
    \                        ^\n                          n: \n/tmp/tmpl9v5stx5.swift:38:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2))\n                                  \
    \     ^\n                                       n: \n/tmp/tmpl9v5stx5.swift:38:53:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2))\n                                  \
    \                  ^\n                                                    n: \n\
    /tmp/tmpl9v5stx5.swift:38:66: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2))\n     \
    \                                                            ^\n             \
    \                                                    n: \n"
  stdout: ''
  timestamp: 1659825024
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpi7gnuiac.swift:38:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpi7gnuiac.swift:38:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpi7gnuiac.swift:38:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpi7gnuiac.swift:40:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpi7gnuiac.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpi7gnuiac.swift:40:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpi7gnuiac.swift:40:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(3)\n        return result\n    }\n    if\
    \ n == 3 {\n        result.append(1)\n        result.append(3)\n        return\
    \ result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpxn34d2na.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpxn34d2na.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpxn34d2na.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpxn34d2na.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpxn34d2na.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpxn34d2na.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpxn34d2na.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpxn34d2na.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpxn34d2na.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpxn34d2na.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpgdglb0n7.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpgdglb0n7.swift:31:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpgdglb0n7.swift:31:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpgdglb0n7.swift:33:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpgdglb0n7.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpgdglb0n7.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpgdglb0n7.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpvb49vm4p.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpvb49vm4p.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpvb49vm4p.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpvb49vm4p.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpvb49vm4p.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpvb49vm4p.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpvb49vm4p.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpvb49vm4p.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpvb49vm4p.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpvb49vm4p.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpnvuybjr0.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpnvuybjr0.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpnvuybjr0.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpnvuybjr0.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpnvuybjr0.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpnvuybjr0.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpnvuybjr0.swift:34:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpyzle3aae.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpyzle3aae.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpyzle3aae.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpyzle3aae.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpyzle3aae.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpyzle3aae.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpyzle3aae.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpyzle3aae.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpyzle3aae.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpyzle3aae.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    if n == 1 {\n        result.append(0)\n        return\
    \ result\n    }\n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmprc87enfz.swift:34:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmprc87enfz.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmprc87enfz.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmprc87enfz.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmprc87enfz.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmprc87enfz.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmprc87enfz.swift:36:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(3)\n        return result\n    }\n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpiwg6nokb.swift:28:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpiwg6nokb.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpiwg6nokb.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpiwg6nokb.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpiwg6nokb.swift:30:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpiwg6nokb.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpiwg6nokb.swift:30:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \    } else {\n        result.append(1)\n        result.append(3)\n        result.append(3)\n\
    \    }\n    \n    for i in 1...(n + 1) {\n        result.append(result[i-2] +\
    \ result[i-1])\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b66354a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b663519a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b663519a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b663519a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6635199bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6634f99e83 <unavailable> + 188035

    6    tmp7q1rkz5q                        0x000055886ba4f40a <unavailable> + 9226

    7    tmp7q1rkz5q                        0x000055886ba4e53b <unavailable> + 5435

    8    libc.so.6                          0x00002b663568f460 __libc_start_main +
    245

    9    tmp7q1rkz5q                        0x000055886ba4e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var firstThree = [Int]()\n    var secondThree = [Int]()\n    var thirdThree\
    \ = [Int]()\n    var fourthThree = [Int]()\n    var fifthThree = [Int]()\n   \
    \ var sixthThree = [Int]()\n    var seventhThree = [Int]()\n    var eighthThree\
    \ = [Int]()\n    var ninethThree = [Int]()\n    var tenthThree = [Int]()\n   \
    \ var eleventhThree = [Int]()\n    var thirteenthThree = [Int]()\n    var fourteenthThree\
    \ = [Int]()\n    var fifteenthThree = [Int]()\n    var sixteenthThree = [Int]()\n\
    \    var seventeenthThree = [Int]()\n    var eighteenthThree = [Int]()\n    var\
    \ nineteenthThree = [Int]()\n    var twentiethThree = [Int]()\n    var twentyThirdThree\
    \ = [Int]()\n    var twentyFourthThree = [Int]()\n    var twentyFifthThree = [Int]()\n\
    \    var twentySixthThree = [Int]()\n    var twentySeventhThree = [Int]()\n  \
    \  var twentyEighthThree = [Int]()\n    var twentyNinethThree = [Int]()\n    var\
    \ thirtyThree = [Int]()\n    var thirtySixthThree = [Int]()\n    var thirtyEightthThree\
    \ = [Int]()\n    var thirtyNinethThree = [Int]()\n    var fortyThree = [Int]()\n\
    \    var fortySixthThree = [Int]()\n    var fortyEightthThree = [Int]()\n    var\
    \ fortyNinethThree = [Int]()\n    var fiftyThree = [Int]()\n    var fiftySixthThree\
    \ = [Int]()\n    var fiftyEightthThree = [Int]()\n    var fiftyNinethThree = [Int]()\n\
    \    var sixtyThree = [Int]()\n    var sixtySixthThree = [Int]()\n    var sixtyEightthThree\
    \ = [Int]()\n    var sixtyNinethThree = [Int]()\n    var seventyThree = [Int]()\n\
    \    var seventySixthThree = [Int]()\n    var seventyEightthThree = [Int]()\n\
    \    var seventyNinethThree = [Int]()\n    var eigh\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpsxkjn91r.swift:65:9: error: type annotation missing in pattern\n\
    \    var eigh\n        ^\n"
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(1)\n        return result;\n   \
    \ }\n    \n    if n == 1 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        result.append(1)\n\
    \        return result;\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpnu5_uja0.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpnu5_uja0.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpnu5_uja0.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpnu5_uja0.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpnu5_uja0.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpnu5_uja0.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpnu5_uja0.swift:39:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825014
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var a = 2\n    var b = 3\n    var c = 1\n    for i in 1...n {\n        result.append(c)\n\
    \        if i % 2 == 0 {\n            a = a + b\n            b = c\n        }\
    \ else {\n            c = a + b\n            a = b\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpsduxnlmc/tmpsduxnlmc.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62a77fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62a74f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62a74f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62a74f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsduxnlmc                        0x0000556cfe1645ca <unavailable> + 5578

    5    libc.so.6                          0x00002b62a79ea460 __libc_start_main +
    245

    6    tmpsduxnlmc                        0x0000556cfe164209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmputs0wmre.swift:26:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmputs0wmre.swift:26:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmputs0wmre.swift:26:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmputs0wmre.swift:28:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmputs0wmre.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmputs0wmre.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmputs0wmre.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpqo21lx0w.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpqo21lx0w.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpqo21lx0w.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpqo21lx0w.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpqo21lx0w.swift:33:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpqo21lx0w.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpqo21lx0w.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpqo21lx0w.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpqo21lx0w.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpqo21lx0w.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var tri1 = 1\n    var tri2 = 1\n    var tri3 = 1\n    var tri4 = 1\n    if\
    \ n % 2 == 0 {\n        tri1 = tri1\n        tri2 = tri2\n        tri3 = tri3\n\
    \        tri4 = tri4\n    }\n    for _ in 1...n {\n        tri1 = tri1 + tri2\n\
    \        tri2 = tri1 + tri3\n        tri3 = tri2 + tri4\n        tri4 = tri3 +\
    \ tri4\n        result.append(tri4)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmplg7agv3g.swift:24:14: error: assigning a variable to itself\n \
    \       tri1 = tri1\n        ~~~~ ^ ~~~~\n/tmp/tmplg7agv3g.swift:25:14: error:\
    \ assigning a variable to itself\n        tri2 = tri2\n        ~~~~ ^ ~~~~\n/tmp/tmplg7agv3g.swift:26:14:\
    \ error: assigning a variable to itself\n        tri3 = tri3\n        ~~~~ ^ ~~~~\n\
    /tmp/tmplg7agv3g.swift:27:14: error: assigning a variable to itself\n        tri4\
    \ = tri4\n        ~~~~ ^ ~~~~\n"
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result;\n   \
    \ }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpdzdas6tu.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpdzdas6tu.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpdzdas6tu.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpdzdas6tu.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpdzdas6tu.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpdzdas6tu.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpdzdas6tu.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpdzdas6tu.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpdzdas6tu.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpdzdas6tu.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpyzle3aae.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpyzle3aae.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpyzle3aae.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpyzle3aae.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpyzle3aae.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpyzle3aae.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpyzle3aae.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpyzle3aae.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpyzle3aae.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpyzle3aae.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpcb4vqjuc.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpcb4vqjuc.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpcb4vqjuc.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpcb4vqjuc.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpcb4vqjuc.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpcb4vqjuc.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpcb4vqjuc.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpcb4vqjuc.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpcb4vqjuc.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpcb4vqjuc.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpqo21lx0w.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpqo21lx0w.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpqo21lx0w.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpqo21lx0w.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpqo21lx0w.swift:33:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpqo21lx0w.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpqo21lx0w.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpqo21lx0w.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpqo21lx0w.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpqo21lx0w.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825014
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n    } else {\n        result.append(1)\n\
    \        result.append(n)\n    }\n    \n    for i in 1..<n {\n        result.append(result[i-2]\
    \ + result[i-1])\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af578b8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af578882561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af578882286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af57888213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af578881bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af578681e83 <unavailable> + 188035

    6    tmpxeu4b_f3                        0x000055f839acf26e <unavailable> + 8814

    7    tmpxeu4b_f3                        0x000055f839ace53b <unavailable> + 5435

    8    libc.so.6                          0x00002af578d77460 __libc_start_main +
    245

    9    tmpxeu4b_f3                        0x000055f839ace259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n      \
    \  result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpph92hja3.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpph92hja3.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpph92hja3.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpph92hja3.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpph92hja3.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpph92hja3.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpph92hja3.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpph92hja3.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpph92hja3.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpph92hja3.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825014
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result;\n   \
    \ }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \    } else {\n        result.append(1)\n        result.append(3)\n        result.append(3)\n\
    \    }\n    \n    for _ in 1...(n + 1) {\n        result.append(result[0] + result[1]\
    \ + result[2])\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzma4113d/tmpzma4113d.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaffd358c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaffd04fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaffd04f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaffd04e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzma4113d                        0x000055b3f18e561a <unavailable> + 5658

    5    libc.so.6                          0x00002aaffd544460 __libc_start_main +
    245

    6    tmpzma4113d                        0x000055b3f18e5259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(3)\n        return result\n    }\n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpv7y_h9lp.swift:28:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpv7y_h9lp.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpv7y_h9lp.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpv7y_h9lp.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpv7y_h9lp.swift:30:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpv7y_h9lp.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpv7y_h9lp.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpv7y_h9lp.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpv7y_h9lp.swift:31:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpv7y_h9lp.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(3)\n        return result\n    }\n    if\
    \ n == 3 {\n        result.append(3)\n        result.append(2)\n        return\
    \ result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpimiumehi.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpimiumehi.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpimiumehi.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpimiumehi.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpimiumehi.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpimiumehi.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpimiumehi.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpimiumehi.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpimiumehi.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpimiumehi.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n\
    \    var e = Int(0)\n    for _ in 0..<n {\n        result.append(a)\n        if\
    \ n % 2 == 0 {\n            e = a + b + c\n            d = b + c + e\n       \
    \     c = a + b + d\n            a = b + c + d\n            b = a + c + e\n  \
    \      }\n        n -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpe3het27e.swift:33:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmp20fc89dz.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp20fc89dz.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp20fc89dz.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp20fc89dz.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp20fc89dz.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2))\n                      ^\n                      contentsOf:\
    \ \n/tmp/tmp20fc89dz.swift:39:27: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2))\n  \
    \                        ^\n                          n: \n/tmp/tmp20fc89dz.swift:39:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2))\n                                  \
    \     ^\n                                       n: \n/tmp/tmp20fc89dz.swift:39:53:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2))\n                                  \
    \                  ^\n                                                    n: \n\
    /tmp/tmp20fc89dz.swift:39:66: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2))\n     \
    \                                                            ^\n             \
    \                                                    n: \n"
  stdout: ''
  timestamp: 1659825026
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var a = 2\n    var b = 3\n    var c = 1\n    for _ in 0..<n {\n        result.append(c)\n\
    \        if n % 2 == 0 {\n            c += b\n        } else {\n            c\
    \ += a\n        }\n        if n % 2 == 0 {\n            b += a\n        } else\
    \ {\n            b += c\n        }\n        a += c\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgv3juid6/tmpgv3juid6.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b547c1aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b547bea1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b547bea1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b547bea07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgv3juid6                        0x000055a6546545ca <unavailable> + 5578

    5    libc.so.6                          0x00002b547c396460 __libc_start_main +
    245

    6    tmpgv3juid6                        0x000055a654654209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result;\n    }\n  \
    \  if n == 2 {\n        result.append(3)\n        return result;\n    }\n    if\
    \ n == 3 {\n        result.append(3)\n        result.append(2)\n        return\
    \ result;\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpbl7psir8.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpbl7psir8.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpbl7psir8.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpbl7psir8.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpbl7psir8.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpbl7psir8.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpbl7psir8.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpbl7psir8.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpbl7psir8.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpbl7psir8.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825015
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var a = 2\n    var b = 3\n    var c = 1\n    for _ in 0..<n {\n        result.append(c)\n\
    \        if n % 2 == 0 {\n            c += b\n        } else {\n            c\
    \ += a\n        }\n        if n % 2 == 0 {\n            b += a\n        } else\
    \ {\n            b += c\n        }\n        a += c\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgv3juid6/tmpgv3juid6.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b547c1aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b547bea1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b547bea1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b547bea07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgv3juid6                        0x000055a6546545ca <unavailable> + 5578

    5    libc.so.6                          0x00002b547c396460 __libc_start_main +
    245

    6    tmpgv3juid6                        0x000055a654654209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpo4hfp1gk.swift:26:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpo4hfp1gk.swift:26:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpo4hfp1gk.swift:26:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpo4hfp1gk.swift:28:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpo4hfp1gk.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpo4hfp1gk.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpo4hfp1gk.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n - 3))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpqzbrilf8.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpqzbrilf8.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpqzbrilf8.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpqzbrilf8.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpqzbrilf8.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3))\n                      ^\n                      contentsOf:\
    \ \n/tmp/tmpqzbrilf8.swift:38:27: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3))\n  \
    \                        ^\n                          n: \n/tmp/tmpqzbrilf8.swift:38:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n - 3))\n                                  \
    \     ^\n                                       n: \n/tmp/tmpqzbrilf8.swift:38:53:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n - 3))\n                                  \
    \                  ^\n                                                    n: \n\
    /tmp/tmpqzbrilf8.swift:38:66: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3))\n     \
    \                                                            ^\n             \
    \                                                    n: \n"
  stdout: ''
  timestamp: 1659825026
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(3)\n        return result\n    }\n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpoktilt5h.swift:28:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpoktilt5h.swift:28:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpoktilt5h.swift:28:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpoktilt5h.swift:30:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpoktilt5h.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpoktilt5h.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpoktilt5h.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825015
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var tri1 = 3\n    var tri2 = 1\n    var tri3 = 1\n    for _ in 0..<n {\n\
    \        result.append(tri1)\n        tri1 = tri1 + tri2\n        tri2 = tri1\
    \ + tri3\n        tri3 = tri2 + tri1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp8gs67upw/tmp8gs67upw.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5434438c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543412fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543412f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543412e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gs67upw                        0x000055c4dbe675ca <unavailable> + 5578

    5    libc.so.6                          0x00002b5434624460 __libc_start_main +
    245

    6    tmp8gs67upw                        0x000055c4dbe67209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n      \
    \  result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpph92hja3.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpph92hja3.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpph92hja3.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpph92hja3.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpph92hja3.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpph92hja3.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpph92hja3.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpph92hja3.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpph92hja3.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpph92hja3.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825014
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n    } else {\n        result.append(1)\n\
    \        result.append(n + 1)\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpsk_9xj9m/tmpsk_9xj9m.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22e6f67c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22e6c5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22e6c5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22e6c5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsk_9xj9m                        0x0000564e42f7444a <unavailable> + 5194

    5    libc.so.6                          0x00002b22e7153460 __libc_start_main +
    245

    6    tmpsk_9xj9m                        0x0000564e42f74089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(3)\n        return result\n    }\n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpiwg6nokb.swift:28:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpiwg6nokb.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpiwg6nokb.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpiwg6nokb.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpiwg6nokb.swift:30:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpiwg6nokb.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpiwg6nokb.swift:30:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_sbyh_pg.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp_sbyh_pg.swift:36:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp_sbyh_pg.swift:36:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp_sbyh_pg.swift:38:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_sbyh_pg.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_sbyh_pg.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_sbyh_pg.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result;\n   \
    \ }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6koa95l1.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp6koa95l1.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp6koa95l1.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp6koa95l1.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp6koa95l1.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp6koa95l1.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp6koa95l1.swift:38:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \        result.append(10)\n        result.append(11)\n        result.append(12)\n\
    \        result.append(13)\n        result.append(14)\n        result.append(15)\n\
    \        result.append(16)\n        result.append(17)\n        result.append(18)\n\
    \        result.append(19)\n        result.append(20)\n        result.append(21)\n\
    \        result.append(22)\n        result.append(23)\n        result.append(24)\n\
    \        result.append(25)\n        result.append(26)\n        result.append(27)\n\
    \        result.append(28)\n        result.append(29)\n        result.append(30)\n\
    \        result.append(31)\n        result.append(32)\n        result.append(33)\n\
    \        result.append(34)\n        result.append(35)\n        result.append(36)\n\
    \        result.append(37)\n        result.append(38)\n        result.append(39)\n\
    \        result.append(40)\n        result.append(41)\n        result.append(42)\n\
    \        result.append(43)\n        result.append(44)\n        result.append(45)\n\
    \        result.append(46)\n        result.append(47)\n        result.append(48)\n\
    \        result.append(49)\n        result.append(50)\n        result.append(51)\n\
    \        result.append(52)\n        result.append(53)\n        result.append(54)\n\
    \        result.append(55)\n        result.append(56)\n        result.append(57)\n\
    \        result.append(58)\n        result.append(59)\n        result.append(60)\n\
    \        result.append(61)\n        result.append(62)\n        result.append(63)\n\
    \        result.append(64)\n        result.append(65)\n        result.append(66)\n\
    \        result.append(67)\n        result.append(68)\n        result.append(69)\n\
    \        result.append(70)\n        result.append(71)\n        result.append(72)\n\
    \        result.append(73)\n        result.append(74)\n        result.append(75)\n\
    \        result.append(76)\n        result.append(77)\n        result.append(78)\n\
    \        result.append(79)\n        result.append(80)\n        result.append(81)\n\
    \        result.append(82)\n        result.append(83)\n        result.append(84)\n\
    \        result.append(85)\n        result.append(86)\n        result.append(87)\n\
    \        result.append(88)\n        result.append(89)\n        result.append(90)\n\
    \        result.append(91)\n        result.append(92)\n        result.append(93)\n\
    \        result.append(94)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpvnxqqsdr.swift:159:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmpvnxqqsdr.swift:17:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmpvnxqqsdr.swift:138:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659825015
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var a = 2\n    var b = 3\n    var c = 1\n    for _ in 0..<n {\n        result.append(c)\n\
    \        if n % 2 == 0 {\n            a += b\n            b += c\n           \
    \ c += 1\n        } else {\n            a += c\n            b += b\n         \
    \   c += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmp3p3sypka/tmp3p3sypka.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a0ef4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a0bebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a0beb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a0bea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3p3sypka                        0x000055d7b6c025ca <unavailable> + 5578

    5    libc.so.6                          0x00002ae4a10e0460 __libc_start_main +
    245

    6    tmp3p3sypka                        0x000055d7b6c02209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n      \
    \  result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpph92hja3.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpph92hja3.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpph92hja3.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpph92hja3.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpph92hja3.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpph92hja3.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpph92hja3.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpph92hja3.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpph92hja3.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpph92hja3.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n\
    \    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n\
    \    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n\
    \    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n\
    \    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n\
    \    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n    var x = Int(0)\n\
    \    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n    var b = Int(0)\n\
    \    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n    var f = Int(0)\n\
    \    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n\
    \    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n\
    \    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n\
    \    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n\
    \    var w = Int(0)\n    var x = Int(0)\n    var y = Int(0)\n    var z = Int(0)\n\
    \    var a = Int(0)\n    var b = Int(0)\n    var c = Int(0)\n    var d = Int(0)\n\
    \    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n\
    \    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n\
    \    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n\
    \    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n\
    \    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n    var x = Int(0)\n\
    \    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n    var b = Int(0)\n\
    \    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n    var f = Int(0)\n\
    \    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n\
    \    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n\
    \    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n\
    \    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n\
    \    var w = Int(0)\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpen4h_wnk.swift:45:9: error: invalid redeclaration of 'a'\n    var\
    \ a = Int(0)\n        ^\n/tmp/tmpen4h_wnk.swift:19:9: note: 'a' previously declared\
    \ here\n    var a = Int(3)\n        ^\n/tmp/tmpen4h_wnk.swift:46:9: error: invalid\
    \ redeclaration of 'b'\n    var b = Int(0)\n        ^\n/tmp/tmpen4h_wnk.swift:20:9:\
    \ note: 'b' previously declared here\n    var b = Int(1)\n        ^\n/tmp/tmpen4h_wnk.swift:47:9:\
    \ error: invalid redeclaration of 'c'\n    var c = Int(0)\n        ^\n/tmp/tmpen4h_wnk.swift:21:9:\
    \ note: 'c' previously declared here\n    var c = Int(2)\n        ^\n/tmp/tmpen4h_wnk.swift:48:9:\
    \ error: invalid redeclaration of 'd'\n    var d = Int(0)\n        ^\n/tmp/tmpen4h_wnk.swift:22:9:\
    \ note: 'd' previously declared here\n    var d = Int(1)\n        ^\n/tmp/tmpen4h_wnk.swift:49:9:\
    \ error: invalid redeclaration of 'e'\n    var e = Int(0)\n        ^\n/tmp/tmpen4h_wnk.swift:23:9:\
    \ note: 'e' previously declared here\n    var e = Int(0)\n        ^\n/tmp/tmpen4h_wnk.swift:50:9:\
    \ error: invalid redeclaration of 'f'\n    var f = Int(0)\n        ^\n/tmp/tmpen4h_wnk.swift:24:9:\
    \ note: 'f' previously declared here\n    var f = Int(0)\n        ^\n/tmp/tmpen4h_wnk.swift:51:9:\
    \ error: invalid redeclaration of 'g'\n    var g = Int(0)\n        ^\n/tmp/tmpen4h_wnk.swift:25:9:\
    \ note: 'g' previously declared here\n    var g = Int(0)\n        ^\n/tmp/tmpen4h_wnk.swift:52:9:\
    \ error: invalid redeclaration of 'h'\n    var h = Int(0)\n        ^\n/tmp/tmpen4h_wnk.swift:26:9:\
    \ note: 'h' previously declared here\n    var h = Int(0)\n        ^\n/tmp/tmpen4h_wnk.swift:53:9:\
    \ error: invalid redeclaration of 'i'\n    var i = Int(0)\n        ^\n/tmp/tmpen4h_wnk.swift:27:9:\
    \ note: 'i' previously declared here\n    var i = Int(0)\n        ^\n/tmp/tmpen4h_wnk.swift:54:9:\
    \ error: invalid redeclaration of 'j'\n    var j = Int(0)\n        ^\n/tmp/tmpen4h_wnk.swift:28:9:\
    \ note: 'j' previously declared here\n    var j = Int(0)\n        ^\n/tmp/tmpen4h_wnk.swift:55:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int(0)\n        ^\n/tmp/tmpen4h_wnk.swift:29:9:\
    \ note: 'k' previously declared here\n    var k = Int(0)\n "
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpgdglb0n7.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpgdglb0n7.swift:31:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpgdglb0n7.swift:31:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpgdglb0n7.swift:33:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpgdglb0n7.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpgdglb0n7.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpgdglb0n7.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmptdrjoh8x.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmptdrjoh8x.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmptdrjoh8x.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmptdrjoh8x.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmptdrjoh8x.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmptdrjoh8x.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmptdrjoh8x.swift:38:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpquhm6bn9.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpquhm6bn9.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpquhm6bn9.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpquhm6bn9.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpquhm6bn9.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpquhm6bn9.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpquhm6bn9.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpquhm6bn9.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpquhm6bn9.swift:39:9: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1))\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1659825071
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n - 3) + tri(n - 4))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp9entukz6.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp9entukz6.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp9entukz6.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp9entukz6.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp9entukz6.swift:38:9: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 3) + tri(n - 4))\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659825044
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(3)\n        return result\n    }\n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpv7y_h9lp.swift:28:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpv7y_h9lp.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpv7y_h9lp.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpv7y_h9lp.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpv7y_h9lp.swift:30:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpv7y_h9lp.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpv7y_h9lp.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpv7y_h9lp.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpv7y_h9lp.swift:31:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpv7y_h9lp.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result;\n    }\n  \
    \  if n == 2 {\n        result.append(3)\n        return result;\n    }\n    if\
    \ n == 3 {\n        result.append(1)\n        result.append(3)\n        return\
    \ result;\n    }\n    if n % 2 == 0 {\n        result.append(1)\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(1)\n  \
    \      result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpyg6ljhxj.swift:34:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpyg6ljhxj.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpyg6ljhxj.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpyg6ljhxj.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpyg6ljhxj.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpyg6ljhxj.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpyg6ljhxj.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpyg6ljhxj.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpyg6ljhxj.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpyg6ljhxj.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(3)\n        return result\n    }\n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpoktilt5h.swift:28:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpoktilt5h.swift:28:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpoktilt5h.swift:28:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpoktilt5h.swift:30:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpoktilt5h.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpoktilt5h.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpoktilt5h.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n      \
    \  result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2))\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_w3skr9u.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp_w3skr9u.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_w3skr9u.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_w3skr9u.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_w3skr9u.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_w3skr9u.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_w3skr9u.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_w3skr9u.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_w3skr9u.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2))\n                      ^\n                      contentsOf:\
    \ \n/tmp/tmp_w3skr9u.swift:35:27: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1"
  stdout: ''
  timestamp: 1659825027
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n      \
    \  result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpph92hja3.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpph92hja3.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpph92hja3.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpph92hja3.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpph92hja3.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpph92hja3.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpph92hja3.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpph92hja3.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpph92hja3.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpph92hja3.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(3)\n        return result\n    }\n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpoktilt5h.swift:28:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpoktilt5h.swift:28:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpoktilt5h.swift:28:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpoktilt5h.swift:30:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpoktilt5h.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpoktilt5h.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpoktilt5h.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpgdglb0n7.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpgdglb0n7.swift:31:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpgdglb0n7.swift:31:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpgdglb0n7.swift:33:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpgdglb0n7.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpgdglb0n7.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpgdglb0n7.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result;\n    }\n  \
    \  if n == 2 {\n        result.append(3)\n        return result;\n    }\n    if\
    \ n == 3 {\n        result.append(3)\n        return result;\n    }\n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8jm3rbfa.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp8jm3rbfa.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp8jm3rbfa.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp8jm3rbfa.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp8jm3rbfa.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp8jm3rbfa.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp8jm3rbfa.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp8jm3rbfa.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp8jm3rbfa.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp8jm3rbfa.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_p0t5oj5.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp_p0t5oj5.swift:31:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp_p0t5oj5.swift:31:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp_p0t5oj5.swift:33:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_p0t5oj5.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_p0t5oj5.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_p0t5oj5.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpo4hfp1gk.swift:26:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpo4hfp1gk.swift:26:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpo4hfp1gk.swift:26:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpo4hfp1gk.swift:28:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpo4hfp1gk.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpo4hfp1gk.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpo4hfp1gk.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpocxj5xx6.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpocxj5xx6.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpocxj5xx6.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpocxj5xx6.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpocxj5xx6.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpocxj5xx6.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpocxj5xx6.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpocxj5xx6.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpocxj5xx6.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpocxj5xx6.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(3)\n        return result\n    }\n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpoktilt5h.swift:28:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpoktilt5h.swift:28:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpoktilt5h.swift:28:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpoktilt5h.swift:30:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpoktilt5h.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpoktilt5h.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpoktilt5h.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(1)\n        result.append(2)\n \
    \       return result\n    }\n    \n    if n == 1 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpr3s3_sbc.swift:38:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpr3s3_sbc.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpr3s3_sbc.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpr3s3_sbc.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpr3s3_sbc.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpr3s3_sbc.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpr3s3_sbc.swift:40:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpr3s3_sbc.swift:40:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpr3s3_sbc.swift:41:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpr3s3_sbc.swift:41:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpa8e27z6j.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpa8e27z6j.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpa8e27z6j.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpa8e27z6j.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpa8e27z6j.swift:33:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpa8e27z6j.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpa8e27z6j.swift:33:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(3)\n        return result\n    }\n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpiwg6nokb.swift:28:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpiwg6nokb.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpiwg6nokb.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpiwg6nokb.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpiwg6nokb.swift:30:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpiwg6nokb.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpiwg6nokb.swift:30:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpo4hfp1gk.swift:26:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpo4hfp1gk.swift:26:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpo4hfp1gk.swift:26:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpo4hfp1gk.swift:28:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpo4hfp1gk.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpo4hfp1gk.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpo4hfp1gk.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n      \
    \  result.append(tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpizlywcmn.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpizlywcmn.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpizlywcmn.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpizlywcmn.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpizlywcmn.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpizlywcmn.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpizlywcmn.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpizlywcmn.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpizlywcmn.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpizlywcmn.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(1)\n        result.append(3)\n \
    \       return result\n    }\n    \n    if n == 1 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(3)\n        result.append(3)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmph5x_pebl.swift:175:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmph5x_pebl.swift:17:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmph5x_pebl.swift:154:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659825013
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var tri1 = 1\n    var tri2 = 1\n    var tri3 = 1\n    for _ in 0..<n {\n\
    \        tri3 = tri1 + tri2 + tri3\n        result.append(tri3)\n        tri1\
    \ = tri2\n        tri2 = tri3\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpbvcctq8g/tmpbvcctq8g.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b881ea59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b881e750b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b881e750988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b881e74f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbvcctq8g                        0x00005645dfe655ca <unavailable> + 5578

    5    libc.so.6                          0x00002b881ec45460 __libc_start_main +
    245

    6    tmpbvcctq8g                        0x00005645dfe65209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var a = tri(n - 1)\n    var b = tri(n - 2)\n    var c = tri(n + 1)\n    for\
    \ var i = 0; i < n; i++ {\n        result.append(a[i])\n        result.append(b[i])\n\
    \        result.append(c[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpuerrmpwa.swift:22:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpuerrmpwa.swift:19:17: error: missing argument label 'n:' in call\n   \
    \ var a = tri(n - 1)\n                ^\n                n: \n/tmp/tmpuerrmpwa.swift:20:17:\
    \ error: missing argument label 'n:' in call\n    var b = tri(n - 2)\n       \
    \         ^\n                n: \n/tmp/tmpuerrmpwa.swift:21:17: error: missing\
    \ argument label 'n:' in call\n    var c = tri(n + 1)\n                ^\n   \
    \             n: \n"
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmptdrjoh8x.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmptdrjoh8x.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmptdrjoh8x.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmptdrjoh8x.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmptdrjoh8x.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmptdrjoh8x.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmptdrjoh8x.swift:38:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(3)\n\
    \        result.append(1 + n / 2)\n    } else {\n        result.append(1 + n /\
    \ 2)\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmppnxi62fk.swift:41:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmppnxi62fk.swift:41:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmppnxi62fk.swift:41:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmppnxi62fk.swift:41:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmptdrjoh8x.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmptdrjoh8x.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmptdrjoh8x.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmptdrjoh8x.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmptdrjoh8x.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmptdrjoh8x.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmptdrjoh8x.swift:38:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(n)\n        result.append(1\
    \ + n / 2)\n        return result\n    }\n    \n    result.append(n)\n    result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpzlxtk824.swift:32:19: error: missing argument label 'contentsOf:'\
    \ in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n         \
    \         ^\n                  contentsOf: \n/tmp/tmpzlxtk824.swift:32:23: error:\
    \ missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmpzlxtk824.swift:32:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmpzlxtk824.swift:32:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result;\n   \
    \ }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpk2t2kn0n.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpk2t2kn0n.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpk2t2kn0n.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpk2t2kn0n.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpk2t2kn0n.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpk2t2kn0n.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpk2t2kn0n.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpk2t2kn0n.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpk2t2kn0n.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpk2t2kn0n.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpnvuybjr0.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpnvuybjr0.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpnvuybjr0.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpnvuybjr0.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpnvuybjr0.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpnvuybjr0.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpnvuybjr0.swift:34:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n      \
    \  result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpph92hja3.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpph92hja3.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpph92hja3.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpph92hja3.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpph92hja3.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpph92hja3.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpph92hja3.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpph92hja3.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpph92hja3.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpph92hja3.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result;\n    }\n  \
    \  if n == 2 {\n        result.append(3)\n        return result;\n    }\n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n - 3))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpuz5eg99c.swift:28:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n - 3))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpuz5eg99c.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n - 3))\n                          ^\n                  \
    \        n: \n/tmp/tmpuz5eg99c.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n - 3))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpuz5eg99c.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n - 3))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpuz5eg99c.swift:30:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpuz5eg99c.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpuz5eg99c.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpuz5eg99c.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825016
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result;\n   \
    \ }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \   }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0u6jxk50.swift:26:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp0u6jxk50.swift:26:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp0u6jxk50.swift:26:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp0u6jxk50.swift:28:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp0u6jxk50.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp0u6jxk50.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp0u6jxk50.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(1)\n        result.append(n)\n        result.append(n\
    \ + 2)\n        return result\n    }\n    \n    result.append(1)\n    result.append(n)\n\
    \    result.append(n + 2)\n    result.append(n + 3)\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpzrxss6n9/tmpzrxss6n9.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c0bf5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c0bc52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c0bc52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c0bc517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzrxss6n9                        0x0000558881d994da <unavailable> + 5338

    5    libc.so.6                          0x00002b6c0c147460 __libc_start_main +
    245

    6    tmpzrxss6n9                        0x0000558881d99119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var a = tri(n - 1)\n    var b = tri(n - 2)\n    var c = tri(n - 3)\n    for\
    \ _ in 0..<n {\n        result.append(a)\n        result.append(b)\n        result.append(c)\n\
    \        a = b\n        b = c\n        c = a + b\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp56amn14a.swift:19:17: error: missing argument label 'n:' in call\n\
    \    var a = tri(n - 1)\n                ^\n                n: \n/tmp/tmp56amn14a.swift:20:17:\
    \ error: missing argument label 'n:' in call\n    var b = tri(n - 2)\n       \
    \         ^\n                n: \n/tmp/tmp56amn14a.swift:21:17: error: missing\
    \ argument label 'n:' in call\n    var c = tri(n - 3)\n                ^\n   \
    \             n: \n"
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var first = 3\n    var second = 1\n    var third = 1\n    var fourth = 1\n\
    \    var fifth = 1\n    var sixth = 1\n    var seventh = 1\n    var eighth = 1\n\
    \    var nineth = 1\n    var tenth = 1\n    var eleventh = 1\n    var twelfth\
    \ = 1\n    var thirteenth = 1\n    var fourteenth = 1\n    var fifteenth = 1\n\
    \    var sixteenth = 1\n    var seventeenth = 1\n    var eighteenth = 1\n    var\
    \ nineteenth = 1\n    var twentieth = 1\n    var twentyfirst = 1\n    var twentysecond\
    \ = 1\n    var twentythird = 1\n    var twentyfourth = 1\n    var twentyfifth\
    \ = 1\n    var twentysixth = 1\n    var twentyseventh = 1\n    var twentyeighth\
    \ = 1\n    var twentynineth = 1\n    var thirtieth = 1\n    var thirtyfirst =\
    \ 1\n    var thirtysecond = 1\n    var thirtythird = 1\n    var thirtyfourth =\
    \ 1\n    var thirtyfifth = 1\n    var thirtysixth = 1\n    var thirtyseventh =\
    \ 1\n    var thirtyeighth = 1\n    var thirtynineth = 1\n    var fourtieth = 1\n\
    \    var fourtyfirst = 1\n    var fourtysecond = 1\n    var fourtythird = 1\n\
    \    var fourtyfourth = 1\n    var fourtyfifth = 1\n    var fourtysixth = 1\n\
    \    var fourtyseventh = 1\n    var fourtyeighth = 1\n    var fourtynineth = 1\n\
    \    var fiftieth = 1\n    var fiftyfirst = 1\n    var fiftysecond = 1\n    var\
    \ fiftythird = 1\n    var fiftyfourth = 1\n    var fiftyfifth = 1\n    var fiftysixth\
    \ = 1\n    var fiftyseventh = 1\n    var fiftyeighth = 1\n    var fiftynineth\
    \ = 1\n    var sixtieth = 1\n    var sixtyfirst = 1\n    var sixtysecond = 1\n\
    \    var sixtythird = 1\n    var sixtyfourth = 1\n    var sixtyfifth = 1\n   \
    \ var sixtysixth = 1\n    var sixtyseventh = 1\n    var sixtyeighth = 1\n    var\
    \ sixtynineth = 1\n    var seventieth = 1\n    var seventyfirst = 1\n    var seventysecond\
    \ = 1\n    var seventythird = 1\n    var seventyfourth = 1\n    var se\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp28v7ugkp.swift:93:9: error: type annotation missing in pattern\n\
    \    var se\n        ^\n"
  stdout: ''
  timestamp: 1659825015
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var first = 0\n    var second = 1\n    var third = 1\n    for _ in 0..<n\
    \ {\n        result.append(first)\n        result.append(second)\n        result.append(third)\n\
    \        first += second\n        second += third\n        third += second\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpab9uzpgc/tmpab9uzpgc.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf8b4d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf8b1c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf8b1c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf8b1c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpab9uzpgc                        0x0000557d9b2495ca <unavailable> + 5578

    5    libc.so.6                          0x00002aaf8b6bc460 __libc_start_main +
    245

    6    tmpab9uzpgc                        0x0000557d9b249209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result;\n   \
    \ }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpk2t2kn0n.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpk2t2kn0n.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpk2t2kn0n.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpk2t2kn0n.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpk2t2kn0n.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpk2t2kn0n.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpk2t2kn0n.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpk2t2kn0n.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpk2t2kn0n.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpk2t2kn0n.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659825015
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n    } else {\n        result.append(1)\n\
    \        result.append(n+1)\n        result.append(n+1)\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmplqhhtz2b/tmplqhhtz2b.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad6bc8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad6b982b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad6b982988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad6b9817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplqhhtz2b                        0x00005584b578344a <unavailable> + 5194

    5    libc.so.6                          0x00002aad6be77460 __libc_start_main +
    245

    6    tmplqhhtz2b                        0x00005584b5783089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result;\n   \
    \ }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpdzdas6tu.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpdzdas6tu.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpdzdas6tu.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpdzdas6tu.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpdzdas6tu.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpdzdas6tu.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpdzdas6tu.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpdzdas6tu.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpdzdas6tu.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpdzdas6tu.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825015
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \    } else {\n        result.append(1)\n        result.append(3)\n        result.append(3)\n\
    \    }\n    \n    for _ in 1...n {\n        result.append(result[result.count\
    \ - 1])\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpn_pzixv3/tmpn_pzixv3.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba08b3cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba08b0c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba08b0c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba08b0c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn_pzixv3                        0x0000561c1da5067a <unavailable> + 5754

    5    libc.so.6                          0x00002ba08b5b6460 __libc_start_main +
    245

    6    tmpn_pzixv3                        0x0000561c1da502b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpenyhso86.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpenyhso86.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpenyhso86.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpenyhso86.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpenyhso86.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpenyhso86.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpenyhso86.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpenyhso86.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpenyhso86.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpenyhso86.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpenyhso86.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpenyhso86.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpenyhso86.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpenyhso86.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpo4hfp1gk.swift:26:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpo4hfp1gk.swift:26:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpo4hfp1gk.swift:26:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpo4hfp1gk.swift:28:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpo4hfp1gk.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpo4hfp1gk.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpo4hfp1gk.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825014
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var tri1 = 1\n    var tri2 = 2\n    var tri3 = 1\n    var tri4 = 3\n    for\
    \ _ in 0..<n {\n        result.append(tri1)\n        tri1 = tri1 + tri2\n    \
    \    tri2 = tri1 + tri3\n        tri3 = tri2 + tri4\n        tri4 = tri3 + tri4\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp4rf94yml/tmp4rf94yml.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41b69a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41b669cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41b669c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41b669b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4rf94yml                        0x000055e1f19b75ca <unavailable> + 5578

    5    libc.so.6                          0x00002b41b6b91460 __libc_start_main +
    245

    6    tmp4rf94yml                        0x000055e1f19b7209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    \n    result.append(1)\n\
    \    result.append(3)\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6ej_kb8y.swift:33:20: error: missing argument label 'n:' in call\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n                   ^\n \
    \                  n: \n/tmp/tmp6ej_kb8y.swift:33:33: error: missing argument\
    \ label 'n:' in call\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  \
    \                              ^\n                                n: \n/tmp/tmp6ej_kb8y.swift:33:46:\
    \ error: missing argument label 'n:' in call\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                                             ^\n        \
    \                                     n: \n/tmp/tmp6ej_kb8y.swift:38:19: error:\
    \ missing argument label 'contentsOf:' in call\n    result.append(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n                  ^\n                  contentsOf:\
    \ \n/tmp/tmp6ej_kb8y.swift:38:23: error: missing argument label 'n:' in call\n\
    \    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n                   \
    \   ^\n                      n: \n/tmp/tmp6ej_kb8y.swift:38:36: error: missing\
    \ argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                                   ^\n                              \
    \     n: \n/tmp/tmp6ej_kb8y.swift:38:49: error: missing argument label 'n:' in\
    \ call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n            \
    \                                    ^\n                                     \
    \           n: \n"
  stdout: ''
  timestamp: 1659825016
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpenyhso86.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpenyhso86.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpenyhso86.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpenyhso86.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpenyhso86.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpenyhso86.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpenyhso86.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpyzle3aae.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpyzle3aae.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpyzle3aae.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpyzle3aae.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpyzle3aae.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpyzle3aae.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpyzle3aae.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpyzle3aae.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpyzle3aae.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpyzle3aae.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpenyhso86.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpenyhso86.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpenyhso86.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpenyhso86.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpenyhso86.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpenyhso86.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpenyhso86.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpenyhso86.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(1)\n        result.append(2)\n \
    \       return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5pdbo3jz.swift:28:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp5pdbo3jz.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp5pdbo3jz.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp5pdbo3jz.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp5pdbo3jz.swift:30:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp5pdbo3jz.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp5pdbo3jz.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp5pdbo3jz.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp5pdbo3jz.swift:31:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp5pdbo3jz.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825016
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(1)\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n == 1 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_050feh7.swift:38:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp_050feh7.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_050feh7.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_050feh7.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_050feh7.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_050feh7.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_050feh7.swift:40:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_050feh7.swift:40:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_050feh7.swift:41:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_050feh7.swift:41:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825016
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var first = 0\n    var second = 1\n    var third = 1\n    for _ in 0..<n\
    \ {\n        result.append(first)\n        result.append(second)\n        result.append(third)\n\
    \        first += second\n        second += third\n        third += second\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpab9uzpgc/tmpab9uzpgc.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf8b4d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf8b1c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf8b1c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf8b1c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpab9uzpgc                        0x0000557d9b2495ca <unavailable> + 5578

    5    libc.so.6                          0x00002aaf8b6bc460 __libc_start_main +
    245

    6    tmpab9uzpgc                        0x0000557d9b249209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmptdrjoh8x.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmptdrjoh8x.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmptdrjoh8x.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmptdrjoh8x.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmptdrjoh8x.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmptdrjoh8x.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmptdrjoh8x.swift:38:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n\
    \    \n    for i in 1...n {\n        result.append(a)\n        if i % 2 == 0 {\n\
    \            a = a + b\n        } else {\n            b = b + c\n        }\n \
    \       c = d + a\n        d = a + b\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmptj7jcriu/tmptj7jcriu.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20e28fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20e25f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20e25f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20e25f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptj7jcriu                        0x00005648a09e15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b20e2ae7460 __libc_start_main +
    245

    6    tmptj7jcriu                        0x00005648a09e1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825015
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpzguuympc.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpzguuympc.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpzguuympc.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpzguuympc.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpzguuympc.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpzguuympc.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpzguuympc.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpzguuympc.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpzguuympc.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpzguuympc.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825016
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpzguuympc.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpzguuympc.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpzguuympc.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpzguuympc.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpzguuympc.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpzguuympc.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpzguuympc.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpzguuympc.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpzguuympc.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpzguuympc.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825016
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        result.append(5)\n        return result\n    }\n    \n    result.append(1)\n\
    \    result.append(3)\n    result.append(5)\n    result.append(7)\n    result.append(9)\n\
    \    result.append(11)\n    result.append(13)\n    result.append(15)\n    result.append(17)\n\
    \    result.append(19)\n    result.append(21)\n    result.append(23)\n    result.append(25)\n\
    \    result.append(27)\n    result.append(29)\n    result.append(31)\n    result.append(33)\n\
    \    result.append(35)\n    result.append(37)\n    result.append(39)\n    result.append(41)\n\
    \    result.append(43)\n    result.append(45)\n    result.append(47)\n    result.append(49)\n\
    \    result.append(51)\n    result.append(53)\n    result.append(55)\n    result.append(57)\n\
    \    result.append(59)\n    result.append(61)\n    result.append(63)\n    result.append(65)\n\
    \    result.append(67)\n    result.append(69)\n    result.append(71)\n    result.append(73)\n\
    \    result.append(75)\n    result.append(77)\n    result.append(79)\n    result.append(81)\n\
    \    result.append(83)\n    result.append(85)\n    result.append(87)\n    result.append(89)\n\
    \    result.append(91)\n    result.append(93)\n    result.append(95)\n    result.append(97)\n\
    \    result.append(99)\n    result.append(101)\n    result.append(103)\n    result.append(105)\n\
    \    result.append(107)\n    result.append(109)\n    result.append(111)\n    result.append(113)\n\
    \    result.append(115)\n    result.append(117)\n    result.append(119)\n    result.append(121)\n\
    \    result.append(123)\n    result.append(125)\n    result.append(127)\n    result.append(129)\n\
    \    result.append(131)\n    result.append(133)\n    result.append(135)\n    result.append(137)\n\
    \    result.append(139)\n    result.append(141)\n    result.append(143)\n    result.append(145)\n\
    \    result.append(147)\n    result.append(149)\n    result.append(151)\n    result.append(153)\n\
    \    result.append(155)\n    result.append(157)\n    result.append(159)\n    result.append(161)\n\
    \    result.append(163)\n    result.append(165)\n    result.append(167)\n    result.append(169)\n\
    \    result.append(171)\n    result.append(173)\n    result.append(175)\n    result.append(177)\n\
    \    result.append(179)\n    result.append(181)\n    result.append(183)\n    result.append(185)\n\
    \    result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_v8745fr.swift:130:5: warning: variable is unused\n    result\n\
    \    ^~~~~~\n/tmp/tmp_v8745fr.swift:130:5: error: missing return in global function\
    \ expected to return '[Int]'\n    result\n    ^\n/tmp/tmp_v8745fr.swift:130:5:\
    \ note: did you mean to return the last expression?\n    result\n    ^\n    return\
    \ \n"
  stdout: ''
  timestamp: 1659825016
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var first = 0\n    var second = 1\n    var third = 1\n    var fourth = 1\n\
    \    for _ in 0..<n {\n        result.append(first)\n        first = second\n\
    \        second = third\n        third = fourth\n        fourth = first + second\
    \ + third\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpunrix3a_/tmpunrix3a_.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86db9f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86db6ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86db6ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86db6eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunrix3a_                        0x0000564c6d4205ca <unavailable> + 5578

    5    libc.so.6                          0x00002b86dbbe1460 __libc_start_main +
    245

    6    tmpunrix3a_                        0x0000564c6d420209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825016
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(n)\n        result.append(n\
    \ + 1 )\n        return result\n    }\n    \n    result.append(n)\n    result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpj_ofq3on.swift:37:19: error: missing argument label 'contentsOf:'\
    \ in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n         \
    \         ^\n                  contentsOf: \n/tmp/tmpj_ofq3on.swift:37:23: error:\
    \ missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmpj_ofq3on.swift:37:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmpj_ofq3on.swift:37:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659825016
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(1)\n        result.append(3)\n \
    \   } else {\n        result.append(1)\n        result.append(3)\n        result.append(1\
    \ + n / 2)\n        if n % 2 == 1 {\n            result.append(1 + n / 2)\n  \
    \      }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpf47ocbup/tmpf47ocbup.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74cc79cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74cc493b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74cc493988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74cc4927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf47ocbup                        0x000056242de0c4da <unavailable> + 5338

    5    libc.so.6                          0x00002b74cc988460 __libc_start_main +
    245

    6    tmpf47ocbup                        0x000056242de0c119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659825016
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var tri1 = 1\n    var tri2 = 1\n    var tri3 = 1\n    var tri4 = 2\n    if\
    \ n % 2 == 0 {\n        tri1 = tri1 + tri2\n        tri2 = tri2 + tri3\n     \
    \   tri3 = tri3 + tri4\n        tri4 = tri4 + tri1\n    }\n    for _ in 1...n\
    \ {\n        result.append(tri1)\n        tri1 = tri1 + tri2\n        tri2 = tri2\
    \ + tri3\n        tri3 = tri3 + tri4\n        tri4 = tri4 + tri1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpcx5rmez1/tmpcx5rmez1.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93ef175c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93eee6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93eee6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93eee6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcx5rmez1                        0x00005622d33775ca <unavailable> + 5578

    5    libc.so.6                          0x00002b93ef361460 __libc_start_main +
    245

    6    tmpcx5rmez1                        0x00005622d3377209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825016
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var first = 3\n    var second = 1\n    var third = 1\n    for _ in 0..<n\
    \ {\n        result.append(first)\n        result.append(second)\n        result.append(third)\n\
    \        first = (first + second) + third\n        second = third\n        third\
    \ = first\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpuer4xqxo/tmpuer4xqxo.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb36ce8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb369dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb369df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb369de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuer4xqxo                        0x000056339bf785ca <unavailable> + 5578

    5    libc.so.6                          0x00002aeb36ed4460 __libc_start_main +
    245

    6    tmpuer4xqxo                        0x000056339bf78209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825016
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result;\n    }\n  \
    \  if n == 1 {\n        result.append(1)\n        return result;\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result;\n    }\n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3x754frx.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp3x754frx.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp3x754frx.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp3x754frx.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp3x754frx.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp3x754frx.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp3x754frx.swift:34:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_p0t5oj5.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp_p0t5oj5.swift:31:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp_p0t5oj5.swift:31:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp_p0t5oj5.swift:33:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_p0t5oj5.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_p0t5oj5.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_p0t5oj5.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        return result\n    }\n    \n    result.append(1)\n    result.append(3)\n\
    \    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpdazfb_1u.swift:38:19: error: missing argument label 'contentsOf:'\
    \ in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n         \
    \         ^\n                  contentsOf: \n/tmp/tmpdazfb_1u.swift:38:23: error:\
    \ missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmpdazfb_1u.swift:38:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmpdazfb_1u.swift:38:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659825016
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmplntpiz2x.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmplntpiz2x.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmplntpiz2x.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmplntpiz2x.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmplntpiz2x.swift:33:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmplntpiz2x.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmplntpiz2x.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmplntpiz2x.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmplntpiz2x.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmplntpiz2x.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825016
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    if n == 1 {\n        result.append(0)\n        return\
    \ result\n    }\n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    var firstTribonacci = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    \n    if n % 2 == 0 {\n        result.append(firstTribonacci)\n\
    \        result.append(firstTribonacci + 1)\n    } else {\n        result.append(firstTribonacci)\n\
    \        result.append(firstTribonacci + 2)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpmfig2yxl.swift:34:31: error: missing argument label 'n:' in call\n\
    \    var firstTribonacci = tri(n - 1) + tri(n - 2) + tri(n + 1)\n            \
    \                  ^\n                              n: \n/tmp/tmpmfig2yxl.swift:34:44:\
    \ error: missing argument label 'n:' in call\n    var firstTribonacci = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n                                           ^\n\
    \                                           n: \n/tmp/tmpmfig2yxl.swift:34:57:\
    \ error: missing argument label 'n:' in call\n    var firstTribonacci = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n                                           \
    \             ^\n                                                        n: \n"
  stdout: ''
  timestamp: 1659825016
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpquhm6bn9.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpquhm6bn9.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpquhm6bn9.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpquhm6bn9.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpquhm6bn9.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpquhm6bn9.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpquhm6bn9.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpquhm6bn9.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpquhm6bn9.swift:39:9: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1))\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1659825071
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n    } else {\n        result.append(3)\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1 + n / 2)\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpivd1m7fb.swift:29:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpivd1m7fb.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpivd1m7fb.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpivd1m7fb.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n      \
    \  result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpph92hja3.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpph92hja3.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpph92hja3.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpph92hja3.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpph92hja3.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpph92hja3.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpph92hja3.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpph92hja3.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpph92hja3.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpph92hja3.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825014
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var tri1 = 1\n    var tri2 = 1\n    var tri3 = 1\n    for _ in 1...n {\n\
    \        result.append(tri1)\n        if n % 2 == 0 {\n            tri2 = tri1\
    \ + tri2\n            tri3 = tri1 + tri2 + tri3\n        } else {\n          \
    \  tri1 = tri2 + tri3\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp83t3xbgj/tmp83t3xbgj.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6914de3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6914adab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6914ada988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6914ad97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp83t3xbgj                        0x0000563b06a2a5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b6914fcf460 __libc_start_main +
    245

    6    tmp83t3xbgj                        0x0000563b06a2a209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825016
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var tri1 = 1\n    var tri2 = 1\n    var tri3 = 1\n    for _ in 0..<n {\n\
    \        tri3 = tri1 + tri2 + tri3\n        result.append(tri3)\n        tri1\
    \ = tri2\n        tri2 = tri3\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpbvcctq8g/tmpbvcctq8g.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b881ea59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b881e750b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b881e750988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b881e74f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbvcctq8g                        0x00005645dfe655ca <unavailable> + 5578

    5    libc.so.6                          0x00002b881ec45460 __libc_start_main +
    245

    6    tmpbvcctq8g                        0x00005645dfe65209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825015
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var tri1 = 1\n    var tri2 = 1\n    var tri3 = 1\n    for _ in 0..<n {\n\
    \        result.append(tri1)\n        if n % 2 == 0 {\n            tri1 = tri1\
    \ + tri2\n            tri2 = tri2 + tri3\n        } else {\n            tri3 =\
    \ tri1 + tri2 + tri3\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp3zc3zjuy/tmp3zc3zjuy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad84d8bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad84d5b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad84d5b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad84d5b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3zc3zjuy                        0x000055564cbec5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad84daa8460 __libc_start_main +
    245

    6    tmp3zc3zjuy                        0x000055564cbec209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825016
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var firstTribonacciNumber = 3\n    var secondTribonacciNumber = 1\n    var\
    \ thirdTribonacciNumber = 2\n    for _ in 0..<n {\n        result.append(firstTribonacciNumber)\n\
    \        firstTribonacciNumber = secondTribonacciNumber\n        secondTribonacciNumber\
    \ = thirdTribonacciNumber\n        thirdTribonacciNumber += firstTribonacciNumber\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpugk_pr_y/tmpugk_pr_y.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6e63f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6e60eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6e60ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6e60e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpugk_pr_y                        0x0000564d1eb465ca <unavailable> + 5578

    5    libc.so.6                          0x00002ac6e65df460 __libc_start_main +
    245

    6    tmpugk_pr_y                        0x0000564d1eb46209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825016
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(n)\n\
    \        result.append(n + 2)\n        return result\n    }\n    \n    result.append(n)\n\
    \    result.append(n + 2)\n    result.append(n + 3)\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxclxerj7/tmpxclxerj7.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5f150fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5f1206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5f1206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5f12057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxclxerj7                        0x000056030f0434da <unavailable> + 5338

    5    libc.so.6                          0x00002ba5f16fb460 __libc_start_main +
    245

    6    tmpxclxerj7                        0x000056030f043119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659825016
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0gjgnfjs.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp0gjgnfjs.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp0gjgnfjs.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp0gjgnfjs.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp0gjgnfjs.swift:33:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp0gjgnfjs.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp0gjgnfjs.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp0gjgnfjs.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp0gjgnfjs.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp0gjgnfjs.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659825016
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result;\n    }\n  \
    \  if n == 2 {\n        result.append(3)\n        return result;\n    }\n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \       result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpxp6jmph4.swift:28:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpxp6jmph4.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpxp6jmph4.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpxp6jmph4.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpxp6jmph4.swift:30:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpxp6jmph4.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpxp6jmph4.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpxp6jmph4.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpxp6jmph4.swift:31:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpxp6jmph4.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659825014
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpzguuympc.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpzguuympc.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpzguuympc.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpzguuympc.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpzguuympc.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpzguuympc.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpzguuympc.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpzguuympc.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpzguuympc.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpzguuympc.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825016
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0gjgnfjs.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp0gjgnfjs.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp0gjgnfjs.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp0gjgnfjs.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp0gjgnfjs.swift:33:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp0gjgnfjs.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp0gjgnfjs.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp0gjgnfjs.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp0gjgnfjs.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp0gjgnfjs.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659825016
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpmrfs2uv7.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpmrfs2uv7.swift:36:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpmrfs2uv7.swift:36:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpmrfs2uv7.swift:38:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpmrfs2uv7.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpmrfs2uv7.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpmrfs2uv7.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825016
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_p0t5oj5.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp_p0t5oj5.swift:31:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp_p0t5oj5.swift:31:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp_p0t5oj5.swift:33:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_p0t5oj5.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_p0t5oj5.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_p0t5oj5.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825013
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var first = 0\n    var second = 1\n    var third = 2\n    for _ in 0..<n\
    \ {\n        result.append(first)\n        result.append(second)\n        result.append(third)\n\
    \        first += second\n        second += third\n        third += first\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp31g2x2q8/tmp31g2x2q8.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c5a88ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c5a581b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c5a581988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c5a5807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp31g2x2q8                        0x00005567b40de5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b6c5aa76460 __libc_start_main +
    245

    6    tmp31g2x2q8                        0x00005567b40de209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825016
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpaxzaxuxq.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpaxzaxuxq.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpaxzaxuxq.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpaxzaxuxq.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpaxzaxuxq.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2))\n                      ^\n                      contentsOf:\
    \ \n/tmp/tmpaxzaxuxq.swift:39:27: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2))\n  \
    \                        ^\n                          n: \n/tmp/tmpaxzaxuxq.swift:39:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2))\n                                  \
    \     ^\n                                       n: \n/tmp/tmpaxzaxuxq.swift:39:53:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2))\n                                  \
    \                  ^\n                                                    n: \n\
    /tmp/tmpaxzaxuxq.swift:39:66: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2))\n     \
    \                                                            ^\n             \
    \                                                    n: \n"
  stdout: ''
  timestamp: 1659825027
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    \n   \
    \ var firstThree = tri(n - 1)\n    var secondThree = tri(n - 2)\n    var thirdThree\
    \ = tri(n - 3)\n    \n    var firstTwo = firstThree + secondThree\n    var secondTwo\
    \ = secondThree + thirdThree\n    \n    var firstOne = firstTwo + secondTwo\n\
    \    \n    result.append(firstOne)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpx4czt3v0.swift:32:26: error: missing argument label 'n:' in call\n\
    \    var firstThree = tri(n - 1)\n                         ^\n               \
    \          n: \n/tmp/tmpx4czt3v0.swift:33:27: error: missing argument label 'n:'\
    \ in call\n    var secondThree = tri(n - 2)\n                          ^\n   \
    \                       n: \n/tmp/tmpx4czt3v0.swift:34:26: error: missing argument\
    \ label 'n:' in call\n    var thirdThree = tri(n - 3)\n                      \
    \   ^\n                         n: \n"
  stdout: ''
  timestamp: 1659825016
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpdr7dkkc6.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpdr7dkkc6.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpdr7dkkc6.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpdr7dkkc6.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpdr7dkkc6.swift:33:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpdr7dkkc6.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpdr7dkkc6.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpdr7dkkc6.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpdr7dkkc6.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpdr7dkkc6.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659825016
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var first = 3\n    var second = 1\n    var third = 1\n    for _ in 0..<n\
    \ {\n        result.append(first)\n        first = second\n        second = third\n\
    \        third = first + second\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmppulgunz9/tmppulgunz9.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8491ee8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8491bdfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8491bdf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8491bde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppulgunz9                        0x0000555868a885ca <unavailable> + 5578

    5    libc.so.6                          0x00002b84920d4460 __libc_start_main +
    245

    6    tmppulgunz9                        0x0000555868a88209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825016
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        return result\n    }\n    \n    result.append(0)\n\
    \    result.append(1)\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmprs51sv05.swift:43:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmprs51sv05.swift:43:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmprs51sv05.swift:43:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmprs51sv05.swift:43:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmprs51sv05.swift:49:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                  ^\n                  contentsOf: \n/tmp/tmprs51sv05.swift:49:23:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmprs51sv05.swift:49:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmprs51sv05.swift:49:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659825016
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \    }\n    else {\n        result.append(1)\n        result.append(3)\n     \
    \   result.append(5)\n    }\n    \n    for _ in 1...n {\n        result.append(result[n-2]\
    \ + result[n-1])\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpf2b0gl0p/tmpf2b0gl0p.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1405b70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1405867b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1405867988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14058667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2b0gl0p                        0x0000558e43cd661a <unavailable> + 5658

    5    libc.so.6                          0x00002b1405d5c460 __libc_start_main +
    245

    6    tmpf2b0gl0p                        0x0000558e43cd6259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825016
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result;\n   \
    \ }\n    \n    if n % 2 == 0 {\n        result.append(n)\n        result.append(n\
    \ + 2)\n    } else {\n        result.append(n)\n        result.append(n + 3)\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp6mwk9wwk/tmp6mwk9wwk.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83413e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83410dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83410df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83410de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6mwk9wwk                        0x00005650bb9ea4da <unavailable> + 5338

    5    libc.so.6                          0x00002b83415d4460 __libc_start_main +
    245

    6    tmp6mwk9wwk                        0x00005650bb9ea119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659825016
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpmrfs2uv7.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpmrfs2uv7.swift:36:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpmrfs2uv7.swift:36:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpmrfs2uv7.swift:38:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpmrfs2uv7.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpmrfs2uv7.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpmrfs2uv7.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825016
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \    }\n    else {\n        result.append(1)\n        result.append(3)\n     \
    \   result.append(3)\n    }\n    \n    for i in 1...n {\n        result.append(result[i-2]\
    \ + result[i-1] + result[i+1])\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af84e3a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af84e09c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af84e09c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af84e09c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af84e09bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af84de9be83 <unavailable> + 188035

    6    tmpwyeae9kq                        0x0000563e2ab5c3ec <unavailable> + 9196

    7    tmpwyeae9kq                        0x0000563e2ab5b53b <unavailable> + 5435

    8    libc.so.6                          0x00002af84e591460 __libc_start_main +
    245

    9    tmpwyeae9kq                        0x0000563e2ab5b259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825016
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    if n == 1 {\n        result.append(0)\n        return\
    \ result\n    }\n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmprc87enfz.swift:34:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmprc87enfz.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmprc87enfz.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmprc87enfz.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmprc87enfz.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmprc87enfz.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmprc87enfz.swift:36:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825014
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n)\n\
    \        return result\n    }\n    \n    result.append(1)\n    result.append(n)\n\
    \    result.append(n)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpb36ki7st/tmpb36ki7st.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b966e5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b966e298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b966e298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b966e2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb36ki7st                        0x00005606a62624da <unavailable> + 5338

    5    libc.so.6                          0x00002b966e78d460 __libc_start_main +
    245

    6    tmpb36ki7st                        0x00005606a6262119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659825016
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n\
    \    var e = Int(0)\n    var f = Int(1)\n    var g = Int(2)\n    var h = Int(3)\n\
    \    var i = Int(0)\n    var j = Int(1)\n    var k = Int(2)\n    var l = Int(3)\n\
    \    var m = Int(0)\n    var n = Int(1)\n    var o = Int(2)\n    var p = Int(3)\n\
    \    var q = Int(1)\n    var r = Int(2)\n    var s = Int(3)\n    var t = Int(1)\n\
    \    var u = Int(2)\n    var v = Int(3)\n    var w = Int(1)\n    var x = Int(2)\n\
    \    var y = Int(3)\n    var z = Int(1)\n    var a = Int(3)\n    var b = Int(1)\n\
    \    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n    var f = Int(1)\n\
    \    var g = Int(2)\n    var h = Int(3)\n    var i = Int(0)\n    var j = Int(1)\n\
    \    var k = Int(2)\n    var l = Int(3)\n    var m = Int(0)\n    var n = Int(1)\n\
    \    var o = Int(2)\n    var p = Int(3)\n    var q = Int(1)\n    var r = Int(2)\n\
    \    var s = Int(3)\n    var t = Int(1)\n    var u = Int(2)\n    var v = Int(3)\n\
    \    var w = Int(1)\n    var x = Int(2)\n    var y = Int(3)\n    var z = Int(1)\n\
    \    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n\
    \    var e = Int(0)\n    var f = Int(1)\n    var g = Int(2)\n    var h = Int(3)\n\
    \    var i = Int(0)\n    var j = Int(1)\n    var k = Int(2)\n    var l = Int(3)\n\
    \    var m = Int(0)\n    var n = Int(1)\n    var o = Int(2)\n    var p = Int(3)\n\
    \    var q = Int(1)\n    var r = Int(2)\n    var s = Int(3)\n    var t = Int(1)\n\
    \    var u = Int(2)\n    var v = Int(3)\n    var w = Int(1)\n    var x = Int(2)\n\
    \    var y = Int(3)\n    var z = Int(1)\n    var a = Int(3)\n    var b = Int(1)\n\
    \    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n    var f = Int(1)\n\
    \    var g = Int(2)\n    var h = Int(3)\n    var i = Int(0)\n    var j = Int(1)\n\
    \    var k = Int(2)\n    var l = Int(3)\n    var m = Int(0)\n    var n = Int(1)\n\
    \    var o = Int(2)\n    var p = Int(3)\n    var q = Int(1)\n    var r = Int(2)\n\
    \    var s = Int(3)\n    var t = Int(1)\n    var u = Int(2)\n    var v = Int(3)\n\
    \    var w = Int(1)\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp7n111_y5.swift:45:9: error: invalid redeclaration of 'a'\n    var\
    \ a = Int(3)\n        ^\n/tmp/tmp7n111_y5.swift:19:9: note: 'a' previously declared\
    \ here\n    var a = Int(3)\n        ^\n/tmp/tmp7n111_y5.swift:46:9: error: invalid\
    \ redeclaration of 'b'\n    var b = Int(1)\n        ^\n/tmp/tmp7n111_y5.swift:20:9:\
    \ note: 'b' previously declared here\n    var b = Int(1)\n        ^\n/tmp/tmp7n111_y5.swift:47:9:\
    \ error: invalid redeclaration of 'c'\n    var c = Int(2)\n        ^\n/tmp/tmp7n111_y5.swift:21:9:\
    \ note: 'c' previously declared here\n    var c = Int(2)\n        ^\n/tmp/tmp7n111_y5.swift:48:9:\
    \ error: invalid redeclaration of 'd'\n    var d = Int(1)\n        ^\n/tmp/tmp7n111_y5.swift:22:9:\
    \ note: 'd' previously declared here\n    var d = Int(1)\n        ^\n/tmp/tmp7n111_y5.swift:49:9:\
    \ error: invalid redeclaration of 'e'\n    var e = Int(0)\n        ^\n/tmp/tmp7n111_y5.swift:23:9:\
    \ note: 'e' previously declared here\n    var e = Int(0)\n        ^\n/tmp/tmp7n111_y5.swift:50:9:\
    \ error: invalid redeclaration of 'f'\n    var f = Int(1)\n        ^\n/tmp/tmp7n111_y5.swift:24:9:\
    \ note: 'f' previously declared here\n    var f = Int(1)\n        ^\n/tmp/tmp7n111_y5.swift:51:9:\
    \ error: invalid redeclaration of 'g'\n    var g = Int(2)\n        ^\n/tmp/tmp7n111_y5.swift:25:9:\
    \ note: 'g' previously declared here\n    var g = Int(2)\n        ^\n/tmp/tmp7n111_y5.swift:52:9:\
    \ error: invalid redeclaration of 'h'\n    var h = Int(3)\n        ^\n/tmp/tmp7n111_y5.swift:26:9:\
    \ note: 'h' previously declared here\n    var h = Int(3)\n        ^\n/tmp/tmp7n111_y5.swift:53:9:\
    \ error: invalid redeclaration of 'i'\n    var i = Int(0)\n        ^\n/tmp/tmp7n111_y5.swift:27:9:\
    \ note: 'i' previously declared here\n    var i = Int(0)\n        ^\n/tmp/tmp7n111_y5.swift:54:9:\
    \ error: invalid redeclaration of 'j'\n    var j = Int(1)\n        ^\n/tmp/tmp7n111_y5.swift:28:9:\
    \ note: 'j' previously declared here\n    var j = Int(1)\n        ^\n/tmp/tmp7n111_y5.swift:55:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int(2)\n        ^\n/tmp/tmp7n111_y5.swift:29:9:\
    \ note: 'k' previously declared here\n    var k = Int(2)\n "
  stdout: ''
  timestamp: 1659825016
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var tri1 = 1\n    var tri2 = 1\n    var tri3 = 1\n    if n % 2 == 0 {\n \
    \       tri1 = tri1 + tri2\n        tri2 = tri1 + tri3\n        tri3 = tri1 +\
    \ tri2\n    }\n    for _ in 1...n {\n        result.append(tri1)\n        tri1\
    \ = tri1 + tri2\n        tri2 = tri1 + tri3\n        tri3 = tri1 + tri2\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmptp1fr94x/tmptp1fr94x.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4751abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac474ea2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac474ea2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac474ea17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptp1fr94x                        0x000055abfbe6e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ac475397460 __libc_start_main +
    245

    6    tmptp1fr94x                        0x000055abfbe6e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825016
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmph1tnkxtc.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmph1tnkxtc.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmph1tnkxtc.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmph1tnkxtc.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmph1tnkxtc.swift:33:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmph1tnkxtc.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmph1tnkxtc.swift:33:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825017
