name: HumanEval_155_even_odd_count
language: swift
prompt: "\n/// Given an integer. return a tuple that has the number of even and odd\
  \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n/// even_odd_count(123)\
  \ ==> (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
  \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
  \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
  \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
  \ 0) == (1, 0))"
completions: ["    var even = 0, odd = 0, remainder = 0\n    for _ in 0..<num {\n\
    \        remainder = num % 10\n        even = even + Int(remainder % 2 == 0)\n\
    \        odd = odd + Int(remainder % 2 != 0)\n        num = num / 10\n    }\n\
    \    return (even, odd)", "    var evenCount = 0\n    var oddCount = 0\n    for\
    \ num > 0 {\n        if num % 2 == 0 {\n            evenCount += 1\n        }\
    \ else {\n            oddCount += 1\n        }\n        num /= 10\n    }\n   \
    \ return (evenCount, oddCount)", "    var even: Int = 0\n    var odd: Int = 0\n\
    \    var numStr = String(num)\n    for char in numStr {\n        if char == \"\
    0\" {\n            even++\n        } else {\n            odd++\n        }\n  \
    \  }\n    return (even, odd)", "    var even = 0, odd = 1\n    for _ in 0..<num\
    \ {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n    \
    \        odd += 1\n        }\n        num /= 10\n    }\n    return (even, odd)",
  "    var even = 0, odd = 0, remainder = 0\n    for _ in 0..<num {\n        remainder\
    \ = num % 10\n        even = even + remainder / 2\n        odd = odd + remainder\
    \ % 2\n        num = num / 10\n    }\n    return (even, odd)", "    var even =\
    \ 0\n    var odd = 0\n    for num != 0 {\n        num /= 10\n        even += num\
    \ % 2 == 0\n        odd += num % 2 != 0\n    }\n    return (even, odd)", "   \
    \ var evenCount = 0\n    var oddCount = 0\n    var numString = String(num)\n \
    \   for char in numString {\n        if char == \"0\" {\n            evenCount++\n\
    \        } else {\n            oddCount++\n        }\n    }\n    return (evenCount,\
    \ oddCount)", "    var even = 0\n    var odd = 0\n    var digit = num\n    while\
    \ digit > 0 {\n        digit = digit / 10\n        if digit % 2 == 0 {\n     \
    \       even++\n        } else {\n            odd++\n        }\n    }\n    return\
    \ (even, odd)", "    var even = 0, odd = 1\n    for _ in 0..<num {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return (even, odd)", "    var even\
    \ = 0\n    var odd = 0\n    for n in num {\n        if n % 2 == 0 {\n        \
    \    even += 1\n        } else {\n            odd += 1\n        }\n    }\n   \
    \ return (even, odd)", "    var even = 0\n    var odd = 0\n    var count = 0\n\
    \    var digit = 0\n    var remainder = num\n    while remainder > 0 {\n     \
    \   digit = remainder % 10\n        remainder = remainder / 10\n        if digit\
    \ % 2 == 0 {\n            even++\n        } else {\n            odd++\n      \
    \  }\n        count++\n    }\n    return (even, odd)", "    var evenCount = 0\n\
    \    var oddCount = 0\n    var numString = String(num)\n    for char in numString\
    \ {\n        if char == \"0\" {\n            evenCount++\n        } else {\n \
    \           oddCount++\n        }\n    }\n    return (evenCount, oddCount)", " \
    \   var even = 0, odd = 0, remainder = 0\n    for _ in 0..<num {\n        remainder\
    \ = num % 10\n        if remainder % 2 == 0 {\n            even += Int(remainder)\n\
    \        } else {\n            odd += Int(remainder)\n        }\n        num /=\
    \ 10\n    }\n    return (even, odd)", "    var even = 0, odd = 1\n    for n in\
    \ num {\n        if n % 2 == 0 {\n            even += 1\n        } else {\n  \
    \          odd += 1\n        }\n    }\n    return (even, odd)", "    var evenCount\
    \ = 0\n    var oddCount = 0\n    var remainder = num\n    while remainder > 0\
    \ {\n        remainder, remainder = remainder / 10, remainder % 10\n        if\
    \ remainder % 2 == 0 {\n            evenCount += 1\n        } else {\n       \
    \     oddCount += 1\n        }\n    }\n    return (evenCount, oddCount)", "  \
    \  var even = 0\n    var odd = 0\n    var digit = 0\n    while num > 0 {\n   \
    \     digit = num % 10\n        num /= 10\n        if digit % 2 == 0 {\n     \
    \       even += digit\n        } else {\n            odd += digit\n        }\n\
    \    }\n    return (even, odd)", "    var even = 0, odd = 1\n    for num > 0 {\n\
    \        num /= 10\n        if num % 2 == 0 {\n            even++\n        } else\
    \ {\n            odd++\n        }\n    }\n    return (even, odd)", "    var evenCount\
    \ = 0\n    var oddCount = 0\n    var remainder = num\n    while remainder != 0\
    \ {\n        remainder, remainder = Int(remainder), Int(remainder)\n        evenCount\
    \ += Int(remainder % 2 == 0)\n        oddCount += Int(remainder % 2 != 0)\n  \
    \  }\n    return (evenCount, oddCount)", "    var even = 0, odd = 1\n    for num\
    \ >= 0 {\n        let remainder = num % 10\n        if remainder == 0 {\n    \
    \        even++\n        } else {\n            odd++\n        }\n        num /=\
    \ 10\n    }\n    return (even, odd)", "    var evenCount = 0\n    var oddCount\
    \ = 0\n    var numStr = String(num)\n    for char in numStr {\n        if char\
    \ == \"0\" {\n            evenCount++\n        } else {\n            oddCount++\n\
    \        }\n    }\n    return (evenCount, oddCount)"]
stop_tokens:
- "\n}"
