language: swift
name: HumanEval_68_pluck
results:
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpgp_5fozd/tmpgp_5fozd.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b00847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b0053eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b0053e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b0053d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgp_5fozd                        0x0000564bbe8637cb <unavailable> + 6091

    5    libc.so.6                          0x00002b9b00a33460 __libc_start_main +
    245

    6    tmpgp_5fozd                        0x0000564bbe8632b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ value in arr {\n        if value < minValue {\n            minValue = value\n\
    \            minIndex = -1\n        }\n        if value == minValue {\n      \
    \      minIndex += 1\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp8w29opx3/tmp8w29opx3.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cd39eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cd36e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cd36e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cd36e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8w29opx3                        0x000055fc196eb62c <unavailable> + 5676

    5    libc.so.6                          0x00002b9cd3bd6460 __libc_start_main +
    245

    6    tmp8w29opx3                        0x000055fc196eb239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    var minIndex2\
    \ = 0\n    var minIndex3 = 0\n    var minIndex4 = 0\n    var minIndex5 = 0\n \
    \   var minIndex6 = 0\n    var minIndex7 = 0\n    var minIndex8 = 0\n    var minIndex9\
    \ = 0\n    var minIndex10 = 0\n    var minIndex11 = 0\n    var minIndex12 = 0\n\
    \    var minIndex13 = 0\n    var minIndex14 = 0\n    var minIndex15 = 0\n    var\
    \ minIndex16 = 0\n    var minIndex17 = 0\n    var minIndex18 = 0\n    var minIndex19\
    \ = 0\n    var minIndex20 = 0\n    var minIndex21 = 0\n    var minIndex22 = 0\n\
    \    var minIndex23 = 0\n    var minIndex24 = 0\n    var minIndex25 = 0\n    var\
    \ minIndex26 = 0\n    var minIndex27 = 0\n    var minIndex28 = 0\n    var minIndex29\
    \ = 0\n    var minIndex30 = 0\n    var minIndex31 = 0\n    var minIndex32 = 0\n\
    \    var minIndex33 = 0\n    var minIndex34 = 0\n    var minIndex35 = 0\n    var\
    \ minIndex36 = 0\n    var minIndex37 = 0\n    var minIndex38 = 0\n    var minIndex39\
    \ = 0\n    var minIndex40 = 0\n    var minIndex41 = 0\n    var minIndex42 = 0\n\
    \    var minIndex43 = 0\n    var minIndex44 = 0\n    var minIndex45 = 0\n    var\
    \ minIndex46 = 0\n    var minIndex47 = 0\n    var minIndex48 = 0\n    var minIndex49\
    \ = 0\n    var minIndex50 = 0\n    var minIndex51 = 0\n    var minIndex52 = 0\n\
    \    var minIndex53 = 0\n    var minIndex54 = 0\n    var minIndex55 = 0\n    var\
    \ minIndex56 = 0\n    var minIndex57 = 0\n    var minIndex58 = 0\n    var minIndex59\
    \ = 0\n    var minIndex60 = 0\n    var minIndex61 = 0\n    var minIndex62 = 0\n\
    \    var minIndex63 = 0\n    var minIndex64 = 0\n    var minIndex65 = 0\n    var\
    \ minIndex66 = 0\n    var minIndex67 = 0\n    var minIndex68 = 0\n    var minIndex69\
    \ = 0\n    var minIndex70 = 0\n    var minIndex71 = 0\n    var minIndex72 = 0\n\
    \    var minIndex73 = 0\n    var minIndex74 = 0\n    var minIndex75 = 0\n    var\
    \ minIndex76 = 0\n    var minIndex77 = 0\n    var minIndex78 = 0\n    var minIndex79\
    \ = 0\n    var minIndex80 = 0\n    var minIndex81 = 0\n    var minIndex82 = 0\n\
    \    var minIndex83 = 0\n    var min\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\n\
    assert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0,\
    \ 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr:\
    \ [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcx9ibfc8.swift:113:9: error: type annotation missing in pattern\n\
    \    var min\n        ^\n"
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var min: Int = 0\n    var minIndex: Int = 0\n    for\
    \ index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if min\
    \ > arr[index] {\n                min = arr[index]\n                minIndex =\
    \ index\n            }\n        }\n    }\n    if min == 0 {\n        return result\n\
    \    }\n    result.append(min)\n    result.append(minIndex)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpsemi2kzq/tmpsemi2kzq.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b962b599c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b962b290b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b962b290988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b962b28f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsemi2kzq                        0x0000564682e6864c <unavailable> + 5708

    5    libc.so.6                          0x00002b962b785460 __libc_start_main +
    245

    6    tmpsemi2kzq                        0x0000564682e68259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    var even: Int = 0\n    for i in arr {\n        if i % 2 == 0 {\n    \
    \        even = i\n        } else {\n            if smallest == 0 {\n        \
    \        smallest = i\n                smallestIndex = i\n            } else {\n\
    \                if smallest == i {\n                    smallestIndex = i\n \
    \               }\n            }\n        }\n    }\n    if smallest != 0 {\n \
    \       result = [smallest, smallestIndex]\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpr7nlv9hb/tmpr7nlv9hb.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dbaf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11db7e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11db7e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11db7e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr7nlv9hb                        0x00005566c72bf5bc <unavailable> + 5564

    5    libc.so.6                          0x00002b11dbcdd460 __libc_start_main +
    245

    6    tmpr7nlv9hb                        0x00005566c72bf1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestEven = arr[0]\n    var smallestIndex = -1\n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if smallestEven == arr[index] {\n                smallestEven = arr[index]\n\
    \                smallestIndex = index\n            } else {\n               \
    \ smallestEven = arr[index]\n                smallestIndex = index\n         \
    \   }\n        }\n    }\n    result.append(smallestEven)\n    result.append(smallestIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4fd42ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4fd121561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad4fd121286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad4fd12113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad4fd120bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad4fcf20e83 <unavailable> + 188035

    6    tmpfvi7wl3t                        0x000055e8f917cfe8 <unavailable> + 8168

    7    tmpfvi7wl3t                        0x000055e8f917c7ee <unavailable> + 6126

    8    libc.so.6                          0x00002ad4fd616460 __libc_start_main +
    245

    9    tmpfvi7wl3t                        0x000055e8f917c2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue == i {\n      \
    \          minIndex = i\n            } else {\n                minValue = i\n\
    \                minIndex = i\n            }\n        } else {\n            if\
    \ minValue == i {\n                minIndex = i\n            }\n        }\n  \
    \  }\n    result.append(minValue)\n    result.append(minIndex)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpgnphqk9l/tmpgnphqk9l.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8f8e10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8f8b07b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8f8b07988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8f8b067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgnphqk9l                        0x00005569189196bc <unavailable> + 5820

    5    libc.so.6                          0x00002ab8f8ffc460 __libc_start_main +
    245

    6    tmpgnphqk9l                        0x00005569189192c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for value\
    \ in arr {\n        if value % 2 == 0 {\n            if value < minValue {\n \
    \               minValue = value\n                minIndex = result.count\n  \
    \          }\n            result[minIndex] = value\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab04e18bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab04de82561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab04de82286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab04de8213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab04de81bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab04dc817ec <unavailable> + 186348

    6    tmpdk7dhy7f                        0x0000563d48ec121e <unavailable> + 8734

    7    tmpdk7dhy7f                        0x0000563d48ec0634 <unavailable> + 5684

    8    libc.so.6                          0x00002ab04e377460 __libc_start_main +
    245

    9    tmpdk7dhy7f                        0x0000563d48ec0319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n         \
    \       minValue = i\n                minIndex = i\n            }\n        } else\
    \ {\n            if minValue == i {\n                minIndex = i\n          \
    \  }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmplvgxr3u7/tmplvgxr3u7.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb31944c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb3163bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb3163b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb3163a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvgxr3u7                        0x0000558cf4a5d6bc <unavailable> + 5820

    5    libc.so.6                          0x00002abb31b30460 __libc_start_main +
    245

    6    tmplvgxr3u7                        0x0000558cf4a5d2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ > arr[index] {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        } else {\n            if minValue == arr[index]\
    \ {\n                minIndex = index\n            }\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpg6_3z1lo/tmpg6_3z1lo.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fc27cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fc24c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fc24c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fc24c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg6_3z1lo                        0x000055c30f4ea76b <unavailable> + 5995

    5    libc.so.6                          0x00002b9fc29b6460 __libc_start_main +
    245

    6    tmpg6_3z1lo                        0x000055c30f4ea259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minValue == i {\n                minIndex = i\n     \
    \       }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp0zpbn0bk/tmp0zpbn0bk.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02deb13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02de80ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02de80a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02de8097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0zpbn0bk                        0x00005614293f266c <unavailable> + 5740

    5    libc.so.6                          0x00002b02decff460 __libc_start_main +
    245

    6    tmp0zpbn0bk                        0x00005614293f2279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue == i {\n      \
    \          minIndex = i\n            } else {\n                result.append(i)\n\
    \            }\n        }\n    }\n    if minIndex == -1 {\n        return result\n\
    \    }\n    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpvokke9nd/tmpvokke9nd.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac21c566c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac21c25db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac21c25d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac21c25c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvokke9nd                        0x000055692e3996bc <unavailable> + 5820

    5    libc.so.6                          0x00002ac21c752460 __libc_start_main +
    245

    6    tmpvokke9nd                        0x000055692e3992c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpgp_5fozd/tmpgp_5fozd.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b00847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b0053eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b0053e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b0053d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgp_5fozd                        0x0000564bbe8637cb <unavailable> + 6091

    5    libc.so.6                          0x00002b9b00a33460 __libc_start_main +
    245

    6    tmpgp_5fozd                        0x0000564bbe8632b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minIndex == -1 || minValue < i {\n                minValue\
    \ = i\n                minIndex = i\n            }\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp9x0fvb40/tmp9x0fvb40.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3290d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad328dceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad328dce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad328dcd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9x0fvb40                        0x000055b2617746bc <unavailable> + 5820

    5    libc.so.6                          0x00002ad3292c3460 __libc_start_main +
    245

    6    tmp9x0fvb40                        0x000055b2617742c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minValue == i {\n                minIndex = i\n     \
    \       }\n        }\n    }\n    result = [minValue, minIndex]\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp2dnbtya3/tmp2dnbtya3.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48487afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48484a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48484a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48484a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2dnbtya3                        0x00005649dcfb461c <unavailable> + 5660

    5    libc.so.6                          0x00002b484899b460 __libc_start_main +
    245

    6    tmp2dnbtya3                        0x00005649dcfb4229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    \n    for index in 0..<arr.count {\n        if arr[index]\
    \ % 2 == 0 {\n            result.append(arr[index])\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp3k3260ow/tmp3k3260ow.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af966e35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af966b2cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af966b2c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af966b2b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3k3260ow                        0x0000557a154476ac <unavailable> + 5804

    5    libc.so.6                          0x00002af967021460 __libc_start_main +
    245

    6    tmp3k3260ow                        0x0000557a154472b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ < arr[index] {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp2n9llo1y/tmp2n9llo1y.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cad299c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cacf90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cacf90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cacf8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2n9llo1y                        0x000055eefe7746ac <unavailable> + 5804

    5    libc.so.6                          0x00002b5cad485460 __libc_start_main +
    245

    6    tmp2n9llo1y                        0x000055eefe7742b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ > arr[index] {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpkrclecws/tmpkrclecws.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaecb03bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaecad32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaecad32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaecad317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkrclecws                        0x0000556d6458c7cb <unavailable> + 6091

    5    libc.so.6                          0x00002aaecb227460 __libc_start_main +
    245

    6    tmpkrclecws                        0x0000556d6458c2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestIndex = -1\n    var smallestValue = arr[0]\n\
    \    for i in arr {\n        if i % 2 == 0 {\n            if smallestIndex ==\
    \ -1 || smallestValue < i {\n                smallestIndex = i\n             \
    \   smallestValue = i\n            } else {\n                smallestIndex = i\n\
    \                smallestValue = i\n            }\n        } else {\n        \
    \    if smallestIndex != -1 && smallestValue == i {\n                smallestIndex\
    \ = i\n                smallestValue = i\n            }\n        }\n    }\n  \
    \  result.append(smallestValue)\n    result.append(smallestIndex)\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: Exception
  stderr: 'tmpqssjtfch/tmpqssjtfch.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad1e90ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad1e601b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad1e601988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad1e6007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqssjtfch                        0x0000561d6d2eb6bc <unavailable> + 5820

    5    libc.so.6                          0x00002aad1eaf6460 __libc_start_main +
    245

    6    tmpqssjtfch                        0x0000561d6d2eb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ minIndex = 0\n    var minValue = arr[0]\n    for i in arr {\n        if i %\
    \ 2 == 0 {\n            if minValue < i {\n                minValue = i\n    \
    \            minIndex = i\n            }\n        }\n    }\n    return [minValue,\
    \ minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: Exception
  stderr: 'tmp7dbyt7_i/tmp7dbyt7_i.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf2cda0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf2ca97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf2ca97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf2ca967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7dbyt7_i                        0x0000557516a0b61c <unavailable> + 5660

    5    libc.so.6                          0x00002abf2cf8c460 __libc_start_main +
    245

    6    tmp7dbyt7_i                        0x0000557516a0b229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ value in arr {\n        if value % 2 == 0 {\n            if value < minValue\
    \ {\n                minValue = value\n                minIndex = arr.index(value)\n\
    \            }\n        } else {\n            if value < minValue {\n        \
    \        minValue = value\n                minIndex = arr.index(value)\n     \
    \       }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1kssg7cv.swift:35:32: error: no exact matches in call to instance\
    \ method 'index'\n                minIndex = arr.index(value)\n              \
    \                 ^\nSwift.Array:7:28: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(after:)')\n    @inlinable public func index(after i: Int)\
    \ -> Int\n                           ^\nSwift.Array:9:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public func\
    \ index(before i: Int) -> Int\n                           ^\nSwift.RandomAccessCollection:3:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(after:)')\n\
    \    @inlinable public func index(after i: Self.Index) -> Self.Index\n       \
    \                    ^\nSwift.RandomAccessCollection:4:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public func\
    \ index(before i: Self.Index) -> Self.Index\n                           ^\n/tmp/tmp1kssg7cv.swift:40:32:\
    \ error: no exact matches in call to instance method 'index'\n               \
    \ minIndex = arr.index(value)\n                               ^\nSwift.Array:7:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(after:)')\n\
    \    @inlinable public func index(after i: Int) -> Int\n                     \
    \      ^\nSwift.Array:9:28: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(before:)')\n    @inlinable public func index(before i: Int) -> Int\n\
    \                           ^\nSwift.RandomAccessCollection:3:28: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(after:)')\n    @inlinable public\
    \ func index(after i: Self.Index) -> Self.Index\n                           ^\n\
    Swift.RandomAccessCollection:4:28: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(before:)')\n    @inlinable public func index(before i: Self.Index)\
    \ -> Self.Index\n                           ^\n"
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    var index: Int = 0\n    var even: Int = 0\n    var evenIndex: Int = 0\n\
    \    for index in 0..<arr.count {\n        even = arr[index]\n        if even\
    \ % 2 == 0 {\n            if smallest == 0 {\n                smallest = even\n\
    \                smallestIndex = index\n            } else {\n               \
    \ if even < smallest {\n                    smallest = even\n                \
    \    smallestIndex = index\n                }\n            }\n        } else {\n\
    \            if smallest == 0 {\n                smallest = even\n           \
    \     smallestIndex = index\n            } else {\n                if even > smallest\
    \ {\n                    smallest = even\n                    smallestIndex =\
    \ index\n                }\n            }\n        }\n    }\n    if smallest ==\
    \ 0 {\n        return result\n    }\n    result.append(smallest)\n    result.append(smallestIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmppg4tso8j/tmppg4tso8j.swift:79: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b789c211c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b789bf08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b789bf08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b789bf077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppg4tso8j                        0x000056071f9ab64c <unavailable> + 5708

    5    libc.so.6                          0x00002b789c3fd460 __libc_start_main +
    245

    6    tmppg4tso8j                        0x000056071f9ab259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n  \
    \  \n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n    \
    \        if arr[index] < minValue {\n                minValue = arr[index]\n \
    \               minIndex = index\n            }\n        }\n    }\n    \n    if\
    \ minIndex == 0 {\n        return arr\n    }\n    \n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp7gkyqmrc/tmp7gkyqmrc.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b276cd03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b276c9fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b276c9fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b276c9f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7gkyqmrc                        0x000056087b4787cb <unavailable> + 6091

    5    libc.so.6                          0x00002b276ceef460 __libc_start_main +
    245

    6    tmp7gkyqmrc                        0x000056087b4782b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    var minIndex2\
    \ = 0\n    var minIndex3 = 0\n    var minIndex4 = 0\n    var minIndex5 = 0\n \
    \   var minIndex6 = 0\n    var minIndex7 = 0\n    var minIndex8 = 0\n    var minIndex9\
    \ = 0\n    var minIndex10 = 0\n    var minIndex11 = 0\n    var minIndex12 = 0\n\
    \    var minIndex13 = 0\n    var minIndex14 = 0\n    var minIndex15 = 0\n    var\
    \ minIndex16 = 0\n    var minIndex17 = 0\n    var minIndex18 = 0\n    var minIndex19\
    \ = 0\n    var minIndex20 = 0\n    var minIndex21 = 0\n    var minIndex22 = 0\n\
    \    var minIndex23 = 0\n    var minIndex24 = 0\n    var minIndex25 = 0\n    var\
    \ minIndex26 = 0\n    var minIndex27 = 0\n    var minIndex28 = 0\n    var minIndex29\
    \ = 0\n    var minIndex30 = 0\n    var minIndex31 = 0\n    var minIndex32 = 0\n\
    \    var minIndex33 = 0\n    var minIndex34 = 0\n    var minIndex35 = 0\n    var\
    \ minIndex36 = 0\n    var minIndex37 = 0\n    var minIndex38 = 0\n    var minIndex39\
    \ = 0\n    var minIndex40 = 0\n    var minIndex41 = 0\n    var minIndex42 = 0\n\
    \    var minIndex43 = 0\n    var minIndex44 = 0\n    var minIndex45 = 0\n    var\
    \ minIndex46 = 0\n    var minIndex47 = 0\n    var minIndex48 = 0\n    var minIndex49\
    \ = 0\n    var minIndex50 = 0\n    var minIndex51 = 0\n    var minIndex52 = 0\n\
    \    var minIndex53 = 0\n    var minIndex54 = 0\n    var minIndex55 = 0\n    var\
    \ minIndex56 = 0\n    var minIndex57 = 0\n    var minIndex58 = 0\n    var minIndex59\
    \ = 0\n    var minIndex60 = 0\n    var minIndex61 = 0\n    var minIndex62 = 0\n\
    \    var minIndex63 = 0\n    var minIndex64 = 0\n    var minIndex65 = 0\n    var\
    \ minIndex66 = 0\n    var minIndex67 = 0\n    var minIndex68 = 0\n    var minIndex69\
    \ = 0\n    var minIndex70 = 0\n    var minIndex71 = 0\n    var minIndex72 = 0\n\
    \    var minIndex73 = 0\n    var minIndex74 = 0\n    var minIndex75 = 0\n    var\
    \ minIndex76 = 0\n    var minIndex77 = 0\n    var minIndex78 = 0\n    var minIndex79\
    \ = 0\n    var minIndex80 = 0\n    var minIndex81 = 0\n    var minIndex82 = 0\n\
    \    var minIndex83 = 0\n    var min\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\n\
    assert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0,\
    \ 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr:\
    \ [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcx9ibfc8.swift:113:9: error: type annotation missing in pattern\n\
    \    var min\n        ^\n"
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ minIndex = 0\n    var minValue = arr[0]\n    for index in 1..<arr.count {\n\
    \        if arr[index] < minValue {\n            minValue = arr[index]\n     \
    \       minIndex = index\n        }\n    }\n    return [minValue, minIndex]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp79kx447f/tmp79kx447f.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b195873ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1958435b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1958435988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19584347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp79kx447f                        0x000055f2fa02970b <unavailable> + 5899

    5    libc.so.6                          0x00002b195892a460 __libc_start_main +
    245

    6    tmp79kx447f                        0x000055f2fa0291f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minValue == i {\n                minIndex = i\n     \
    \       }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp0zpbn0bk/tmp0zpbn0bk.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02deb13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02de80ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02de80a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02de8097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0zpbn0bk                        0x00005614293f266c <unavailable> + 5740

    5    libc.so.6                          0x00002b02decff460 __libc_start_main +
    245

    6    tmp0zpbn0bk                        0x00005614293f2279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minIndex == -1 || minValue < i {\n                minValue\
    \ = i\n                minIndex = i\n            }\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp9x0fvb40/tmp9x0fvb40.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3290d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad328dceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad328dce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad328dcd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9x0fvb40                        0x000055b2617746bc <unavailable> + 5820

    5    libc.so.6                          0x00002ad3292c3460 __libc_start_main +
    245

    6    tmp9x0fvb40                        0x000055b2617742c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    var index: Int = 0\n    var even: Bool = false\n    for index in 0..<arr.count\
    \ {\n        if arr[index] % 2 == 0 {\n            even = true\n        } else\
    \ {\n            even = false\n        }\n        if even {\n            if smallest\
    \ == 0 {\n                smallest = arr[index]\n                smallestIndex\
    \ = index\n            } else {\n                if arr[index] < smallest {\n\
    \                    smallest = arr[index]\n                    smallestIndex\
    \ = index\n                }\n            }\n        }\n    }\n    if smallest\
    \ != 0 {\n        result = [smallest, smallestIndex]\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpm7c7he00/tmpm7c7he00.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af928ffdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af928cf4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af928cf4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af928cf37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm7c7he00                        0x000055e48bd70954 <unavailable> + 6484

    5    libc.so.6                          0x00002af9291e9460 __libc_start_main +
    245

    6    tmpm7c7he00                        0x000055e48bd701f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ value in arr {\n        if value < minValue {\n            minValue = value\n\
    \            minIndex = -1\n        }\n        if value == minValue {\n      \
    \      minIndex += 1\n        }\n    }\n    if minIndex == -1 {\n        return\
    \ result\n    }\n    result.append(minValue)\n    result.append(minIndex)\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpy3gmsmrl/tmpy3gmsmrl.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68e6f87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68e6c7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68e6c7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68e6c7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy3gmsmrl                        0x000055f2b742862c <unavailable> + 5676

    5    libc.so.6                          0x00002b68e7173460 __libc_start_main +
    245

    6    tmpy3gmsmrl                        0x000055f2b7428239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ > arr[index] {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        } else {\n            if minValue == arr[index]\
    \ {\n                minIndex = index\n            }\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmppo2iwf0f/tmppo2iwf0f.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94de372c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94de069b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94de069988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94de0687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppo2iwf0f                        0x00005583382fd7cb <unavailable> + 6091

    5    libc.so.6                          0x00002b94de55e460 __libc_start_main +
    245

    6    tmppo2iwf0f                        0x00005583382fd2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n         \
    \       minValue = i\n                minIndex = i\n            }\n        } else\
    \ {\n            if minValue == i {\n                minIndex += 1\n         \
    \   }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp9sx6zsqd/tmp9sx6zsqd.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef7254ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef72245b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef72245988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef722447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9sx6zsqd                        0x000055f7887c96bc <unavailable> + 5820

    5    libc.so.6                          0x00002aef7273a460 __libc_start_main +
    245

    6    tmp9sx6zsqd                        0x000055f7887c92c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    for node in arr {\n        if smallest == 0 || node < smallest {\n  \
    \          smallest = node\n            smallestIndex = arr.index(of: node)\n\
    \        }\n    }\n    result.append(smallest)\n    result.append(smallestIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp3836w6fl.swift:34:33: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            smallestIndex = arr.index(of: node)\n             \
    \                   ^\n/tmp/tmp3836w6fl.swift:34:33: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            smallestIndex\
    \ = arr.index(of: node)\n                                ^\n                 \
    \                               ?? <#default value#>\n/tmp/tmp3836w6fl.swift:34:33:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            smallestIndex = arr.index(of: node)\n                   \
    \             ^\n                                               !\n"
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n    \
    \        if smallest == 0 || arr[index] < smallest {\n                smallest\
    \ = arr[index]\n                smallestIndex = index\n            }\n       \
    \ }\n    }\n    if smallest != 0 {\n        result = [smallest, smallestIndex]\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpoasxonps/tmpoasxonps.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b75d64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b75a5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b75a5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b75a5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoasxonps                        0x0000561cb7000954 <unavailable> + 6484

    5    libc.so.6                          0x00002b2b75f50460 __libc_start_main +
    245

    6    tmpoasxonps                        0x0000561cb70001f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestEven = arr[0]\n    var smallestIndex = -1\n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if smallestEven == arr[index] {\n                smallestEven = arr[index]\n\
    \                smallestIndex = index\n            } else {\n               \
    \ if smallestIndex == -1 {\n                    smallestEven = arr[index]\n  \
    \                  smallestIndex = index\n                } else {\n         \
    \           if smallestIndex < index {\n                        smallestEven =\
    \ arr[index]\n                        smallestIndex = index\n                \
    \    }\n                }\n            }\n        }\n    }\n    result.append(smallestEven)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aca05f53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca05c4a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aca05c4a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aca05c4a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aca05c49bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aca05a49e83 <unavailable> + 188035

    6    tmppq3un237                        0x000055de48745fe8 <unavailable> + 8168

    7    tmppq3un237                        0x000055de487457ee <unavailable> + 6126

    8    libc.so.6                          0x00002aca0613f460 __libc_start_main +
    245

    9    tmppq3un237                        0x000055de487452b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n         \
    \       minValue = i\n                minIndex = i\n            }\n        } else\
    \ {\n            if minValue == i {\n                minIndex = i\n          \
    \  }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmplvgxr3u7/tmplvgxr3u7.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb31944c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb3163bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb3163b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb3163a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvgxr3u7                        0x0000558cf4a5d6bc <unavailable> + 5820

    5    libc.so.6                          0x00002abb31b30460 __libc_start_main +
    245

    6    tmplvgxr3u7                        0x0000558cf4a5d2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpgp_5fozd/tmpgp_5fozd.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b00847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b0053eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b0053e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b0053d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgp_5fozd                        0x0000564bbe8637cb <unavailable> + 6091

    5    libc.so.6                          0x00002b9b00a33460 __libc_start_main +
    245

    6    tmpgp_5fozd                        0x0000564bbe8632b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minIndex == -1 || minValue < i {\n                minValue\
    \ = i\n                minIndex = i\n            }\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp9x0fvb40/tmp9x0fvb40.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3290d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad328dceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad328dce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad328dcd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9x0fvb40                        0x000055b2617746bc <unavailable> + 5820

    5    libc.so.6                          0x00002ad3292c3460 __libc_start_main +
    245

    6    tmp9x0fvb40                        0x000055b2617742c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minIndex = 0\n    var minValue = arr[0]\n    \n    for i in 1..<arr.count\
    \ {\n        if arr[i] < minValue {\n            minValue = arr[i]\n         \
    \   minIndex = i\n        }\n    }\n    \n    return [minValue, minIndex]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpn_k4mi_0/tmpn_k4mi_0.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba357187c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba356e7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba356e7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba356e7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn_k4mi_0                        0x000055cdb6bdc70b <unavailable> + 5899

    5    libc.so.6                          0x00002ba357373460 __libc_start_main +
    245

    6    tmpn_k4mi_0                        0x000055cdb6bdc1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ value in arr {\n        if value < minValue {\n            minValue = value\n\
    \            minIndex = result.count\n        }\n        result[minIndex] = value\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2eb262c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2eaf59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab2eaf59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab2eaf5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab2eaf58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab2ead587ec <unavailable> + 186348

    6    tmp_ykn7lh4                        0x000055d092b68096 <unavailable> + 8342

    7    tmp_ykn7lh4                        0x000055d092b67554 <unavailable> + 5460

    8    libc.so.6                          0x00002ab2eb44e460 __libc_start_main +
    245

    9    tmp_ykn7lh4                        0x000055d092b67239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n         \
    \       minValue = i\n                minIndex = i\n            }\n        } else\
    \ {\n            if minValue == i {\n                minIndex += 1\n         \
    \   }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp9sx6zsqd/tmp9sx6zsqd.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef7254ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef72245b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef72245988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef722447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9sx6zsqd                        0x000055f7887c96bc <unavailable> + 5820

    5    libc.so.6                          0x00002aef7273a460 __libc_start_main +
    245

    6    tmp9sx6zsqd                        0x000055f7887c92c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n         \
    \       minValue = i\n                minIndex = i\n            }\n        } else\
    \ {\n            if minValue == i {\n                minIndex += 1\n         \
    \   }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpj02myogk/tmpj02myogk.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e4fcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e4cc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e4cc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e4cc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj02myogk                        0x000055dbbe90f6bc <unavailable> + 5820

    5    libc.so.6                          0x00002b21e51b6460 __libc_start_main +
    245

    6    tmpj02myogk                        0x000055dbbe90f2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpgp_5fozd/tmpgp_5fozd.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b00847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b0053eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b0053e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b0053d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgp_5fozd                        0x0000564bbe8637cb <unavailable> + 6091

    5    libc.so.6                          0x00002b9b00a33460 __libc_start_main +
    245

    6    tmpgp_5fozd                        0x0000564bbe8632b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = Int()\n    var minIndex = -1\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue == 0 || minValue\
    \ > i {\n                minValue = i\n                minIndex = i\n        \
    \    }\n        } else {\n            if minValue == 0 || minValue > i {\n   \
    \             minValue = i\n                minIndex = i\n            }\n    \
    \    }\n    }\n    if minValue == 0 {\n        return result\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp68tdq3o6/tmp68tdq3o6.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1fb5dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1fb2d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1fb2d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1fb2d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp68tdq3o6                        0x0000561be7e1166c <unavailable> + 5740

    5    libc.so.6                          0x00002ac1fb7c8460 __libc_start_main +
    245

    6    tmp68tdq3o6                        0x0000561be7e11279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ value in arr {\n        if value < minValue {\n            minValue = value\n\
    \            minIndex = result.count\n        }\n        if value == minValue\
    \ {\n            result[minIndex] = value\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b85f2e02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85f2af9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b85f2af9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b85f2af913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b85f2af8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b85f28f87ec <unavailable> + 186348

    6    tmppl2tf683                        0x0000559cf79eb0a3 <unavailable> + 8355

    7    tmppl2tf683                        0x0000559cf79ea554 <unavailable> + 5460

    8    libc.so.6                          0x00002b85f2fee460 __libc_start_main +
    245

    9    tmppl2tf683                        0x0000559cf79ea239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minValue = arr[0]\n    var minIndex = 0\n    \n    for index in 0..<arr.count\
    \ {\n        if arr[index] < minValue {\n            minValue = arr[index]\n \
    \           minIndex = index\n        }\n    }\n    \n    return [minValue, minIndex]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmppcp0l1n9/tmppcp0l1n9.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8749e6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8749b66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8749b66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8749b657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppcp0l1n9                        0x0000558ddba4670b <unavailable> + 5899

    5    libc.so.6                          0x00002b874a05b460 __libc_start_main +
    245

    6    tmppcp0l1n9                        0x0000558ddba461f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n    \
    \        if smallest == 0 || arr[index] < smallest {\n                smallest\
    \ = arr[index]\n                smallestIndex = index\n            }\n       \
    \ }\n    }\n    if smallest != 0 {\n        result = [smallest, smallestIndex]\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpoasxonps/tmpoasxonps.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b75d64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b75a5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b75a5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b75a5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoasxonps                        0x0000561cb7000954 <unavailable> + 6484

    5    libc.so.6                          0x00002b2b75f50460 __libc_start_main +
    245

    6    tmpoasxonps                        0x0000561cb70001f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minValue == i {\n                minIndex = i\n     \
    \       }\n        }\n    }\n    if minIndex == -1 {\n        return result\n\
    \    }\n    result.append(minValue)\n    result.append(minIndex)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpt111zz22/tmpt111zz22.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7da1dbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7da1ab2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7da1ab2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7da1ab17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt111zz22                        0x000055e5021da6bc <unavailable> + 5820

    5    libc.so.6                          0x00002b7da1fa7460 __libc_start_main +
    245

    6    tmpt111zz22                        0x000055e5021da2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestValue = arr[0]\n    var smallestIndex = 0\n\
    \    var evenIndex = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ % 2 == 0 {\n            evenIndex += 1\n            if evenIndex == smallestIndex\
    \ {\n                smallestValue = arr[index]\n                smallestIndex\
    \ = index\n            }\n        } else {\n            evenIndex = 0\n      \
    \  }\n    }\n    if evenIndex == 0 {\n        result.append(smallestValue)\n \
    \       result.append(smallestIndex)\n    } else {\n        result.append(smallestValue)\n\
    \        result.append(smallestIndex)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpo3qhmzq_/tmpo3qhmzq_.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9106de5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9106adcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9106adc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9106adb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3qhmzq_                        0x0000562c72aca6ac <unavailable> + 5804

    5    libc.so.6                          0x00002b9106fd1460 __libc_start_main +
    245

    6    tmpo3qhmzq_                        0x0000562c72aca2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    var even: Int = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ % 2 == 0 {\n            even = arr[index]\n        } else {\n            if\
    \ even < smallest {\n                smallest = even\n                smallestIndex\
    \ = index\n            }\n            even = 0\n        }\n    }\n    if smallest\
    \ != 0 {\n        result = [smallest, smallestIndex]\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp722_l5vk/tmp722_l5vk.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77f4413c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77f410ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77f410a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77f41097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp722_l5vk                        0x000055a79c69a5ec <unavailable> + 5612

    5    libc.so.6                          0x00002b77f45ff460 __libc_start_main +
    245

    6    tmp722_l5vk                        0x000055a79c69a1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var min: Int = 0\n    var minIndex: Int = 0\n    for\
    \ index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if min\
    \ > arr[index] {\n                min = arr[index]\n                minIndex =\
    \ index\n            }\n        }\n    }\n    result.append(min)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpnddx86gc/tmpnddx86gc.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a81f77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a81c6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a81c6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a81c6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnddx86gc                        0x000055c1978a764c <unavailable> + 5708

    5    libc.so.6                          0x00002b0a82163460 __libc_start_main +
    245

    6    tmpnddx86gc                        0x000055c1978a7259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ minIndex = 0\n    var minValue = arr[0]\n    for index in 0..<arr.count {\n\
    \        if arr[index] % 2 == 0 {\n            if minValue > arr[index] {\n  \
    \              minValue = arr[index]\n                minIndex = index\n     \
    \       }\n        }\n    }\n    return [minValue, minIndex]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpcltwgrmv/tmpcltwgrmv.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af77c8b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af77c5aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af77c5ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af77c5ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcltwgrmv                        0x0000563902af170b <unavailable> + 5899

    5    libc.so.6                          0x00002af77caa3460 __libc_start_main +
    245

    6    tmpcltwgrmv                        0x0000563902af11f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n    \
    \        if smallest == 0 || arr[index] < smallest {\n                smallest\
    \ = arr[index]\n                smallestIndex = index\n            }\n       \
    \ }\n    }\n    result.append(smallest)\n    result.append(smallestIndex)\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmptq9ky9t0/tmptq9ky9t0.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc120a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc11d9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc11d9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc11d9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptq9ky9t0                        0x0000560705c25856 <unavailable> + 6230

    5    libc.so.6                          0x00002afc12290460 __libc_start_main +
    245

    6    tmptq9ky9t0                        0x0000560705c25259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestValue = arr[0]\n    var smallestIndex = 0\n\
    \    var evenIndex = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ % 2 == 0 {\n            evenIndex++\n            if evenIndex == smallestIndex\
    \ {\n                smallestValue = arr[index]\n                smallestIndex\
    \ = index\n            }\n        } else {\n            evenIndex = 0\n      \
    \  }\n    }\n    if evenIndex == smallestIndex {\n        result.append(smallestValue)\n\
    \        result.append(smallestIndex)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp2opgx973.swift:34:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            evenIndex++\n                     ^~\n"
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpgp_5fozd/tmpgp_5fozd.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b00847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b0053eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b0053e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b0053d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgp_5fozd                        0x0000564bbe8637cb <unavailable> + 6091

    5    libc.so.6                          0x00002b9b00a33460 __libc_start_main +
    245

    6    tmpgp_5fozd                        0x0000564bbe8632b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpgp_5fozd/tmpgp_5fozd.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b00847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b0053eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b0053e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b0053d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgp_5fozd                        0x0000564bbe8637cb <unavailable> + 6091

    5    libc.so.6                          0x00002b9b00a33460 __libc_start_main +
    245

    6    tmpgp_5fozd                        0x0000564bbe8632b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestEven = arr[0]\n    var smallestIndex = -1\n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if smallestEven == arr[index] {\n                smallestEven = arr[index]\n\
    \                smallestIndex = index\n            } else {\n               \
    \ if arr[index] < smallestEven {\n                    smallestEven = arr[index]\n\
    \                    smallestIndex = index\n                }\n            }\n\
    \        }\n    }\n    if smallestIndex == -1 {\n        return result\n    }\n\
    \    result.append(smallestEven)\n    result.append(smallestIndex)\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: Exception
  stderr: 'tmp8jxf_gfg/tmp8jxf_gfg.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37f4f9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37f4c91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37f4c91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37f4c907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8jxf_gfg                        0x000055c3e4d5d7cb <unavailable> + 6091

    5    libc.so.6                          0x00002b37f5186460 __libc_start_main +
    245

    6    tmp8jxf_gfg                        0x000055c3e4d5d2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ value in arr {\n        if value == minValue {\n            minIndex = arr.index(of:\
    \ value)\n        }\n        if value < minValue {\n            minValue = value\n\
    \            minIndex = arr.index(of: value)\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwl60xb_w.swift:33:28: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            minIndex = arr.index(of: value)\n                 \
    \          ^\n/tmp/tmpwl60xb_w.swift:33:28: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n            minIndex = arr.index(of:\
    \ value)\n                           ^\n                                     \
    \       ?? <#default value#>\n/tmp/tmpwl60xb_w.swift:33:28: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    minIndex = arr.index(of: value)\n                           ^\n         \
    \                                  !\n/tmp/tmpwl60xb_w.swift:37:28: error: value\
    \ of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must be unwrapped\
    \ to a value of type 'Array<Int>.Index' (aka 'Int')\n            minIndex = arr.index(of:\
    \ value)\n                           ^\n/tmp/tmpwl60xb_w.swift:37:28: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         minIndex = arr.index(of: value)\n                           ^\n    \
    \                                        ?? <#default value#>\n/tmp/tmpwl60xb_w.swift:37:28:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            minIndex = arr.index(of: value)\n                       \
    \    ^\n                                           !\n"
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ == arr[index] {\n                minIndex = index\n            } else {\n  \
    \              minValue = arr[index]\n                minIndex = index\n     \
    \       }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bfdc72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bfd969561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0bfd969286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0bfd96913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0bfd968bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0bfd768e83 <unavailable> + 188035

    6    tmpu0zeeq32                        0x0000562888419f9b <unavailable> + 8091

    7    tmpu0zeeq32                        0x000056288841978e <unavailable> + 6030

    8    libc.so.6                          0x00002b0bfde5e460 __libc_start_main +
    245

    9    tmpu0zeeq32                        0x0000562888419259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue > i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minValue == i {\n                minIndex = i\n     \
    \       }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpdg5vqqjm/tmpdg5vqqjm.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb87290c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb86f87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb86f87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb86f867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdg5vqqjm                        0x00005594c7c826bc <unavailable> + 5820

    5    libc.so.6                          0x00002afb8747c460 __libc_start_main +
    245

    6    tmpdg5vqqjm                        0x00005594c7c822c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minIndex == -1 {\n                minIndex = i\n    \
    \        } else {\n                if minIndex != i {\n                    minIndex\
    \ = i\n                }\n            }\n        }\n    }\n    if minIndex !=\
    \ -1 {\n        result.append(minIndex)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpqvfa2tp4/tmpqvfa2tp4.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a88fa6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a88c9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a88c9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a88c9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqvfa2tp4                        0x00005625ebafc6bc <unavailable> + 5820

    5    libc.so.6                          0x00002b8a89192460 __libc_start_main +
    245

    6    tmpqvfa2tp4                        0x00005625ebafc2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    var even: Bool = false\n    for value in arr {\n        if even {\n \
    \           if value < smallest {\n                smallest = value\n        \
    \        smallestIndex = arr.index(value)\n            }\n        } else {\n \
    \           if value < smallest {\n                even = true\n             \
    \   smallest = value\n                smallestIndex = arr.index(value)\n     \
    \       }\n        }\n    }\n    if even {\n        result = [smallest, smallestIndex]\n\
    \    } else {\n        result = [smallest, arr.index(smallest)]\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp3ilrtlzd.swift:36:37: error: no exact matches in call to instance\
    \ method 'index'\n                smallestIndex = arr.index(value)\n         \
    \                           ^\nSwift.Array:7:28: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(after:)')\n    @inlinable public func index(after\
    \ i: Int) -> Int\n                           ^\nSwift.Array:9:28: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public\
    \ func index(before i: Int) -> Int\n                           ^\nSwift.RandomAccessCollection:3:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(after:)')\n\
    \    @inlinable public func index(after i: Self.Index) -> Self.Index\n       \
    \                    ^\nSwift.RandomAccessCollection:4:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public func\
    \ index(before i: Self.Index) -> Self.Index\n                           ^\n/tmp/tmp3ilrtlzd.swift:42:37:\
    \ error: no exact matches in call to instance method 'index'\n               \
    \ smallestIndex = arr.index(value)\n                                    ^\nSwift.Array:7:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(after:)')\n\
    \    @inlinable public func index(after i: Int) -> Int\n                     \
    \      ^\nSwift.Array:9:28: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(before:)')\n    @inlinable public func index(before i: Int) -> Int\n\
    \                           ^\nSwift.RandomAccessCollection:3:28: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(after:)')\n    @inlinable public\
    \ func index(after i: Self.Index) -> Self.Index\n                           ^\n\
    Swift.RandomAccessCollection:4:28: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(before:)')\n    @inlinable public func index(before i: Self.Index)\
    \ -> Self.Index\n                           ^\n/tmp/tmp3ilrtlzd.swift:49:33: error:\
    \ no exact matches in call to instance method 'index'\n        result = [smallest,\
    \ arr.index(smallest)]\n                          "
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue > i {\n         \
    \       minValue = i\n                minIndex = i\n            }\n        } else\
    \ {\n            if minValue == i {\n                minIndex = i\n          \
    \  }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpe9ts5_sh/tmpe9ts5_sh.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9457940c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9457637b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9457637988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94576367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9ts5_sh                        0x0000563bfde826bc <unavailable> + 5820

    5    libc.so.6                          0x00002b9457b2c460 __libc_start_main +
    245

    6    tmpe9ts5_sh                        0x0000563bfde822c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    for i in arr {\n        if smallest == 0 || smallest > i {\n        \
    \    smallest = i\n            smallestIndex = i\n        }\n        if smallest\
    \ == i {\n            result.append(i)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpce3uopks/tmpce3uopks.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b379d724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b379d41bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b379d41b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b379d41a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpce3uopks                        0x000055be3247957c <unavailable> + 5500

    5    libc.so.6                          0x00002b379d910460 __libc_start_main +
    245

    6    tmpce3uopks                        0x000055be32479189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minValue = arr[0]\n    var minIndex = 0\n    \n    for i in 1..<arr.count\
    \ {\n        if arr[i] < minValue {\n            minValue = arr[i]\n         \
    \   minIndex = i\n        }\n    }\n    \n    return [minValue, minIndex]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpyv2mza2i/tmpyv2mza2i.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba34bea0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba34bb97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba34bb97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba34bb967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyv2mza2i                        0x0000556b7a60a70b <unavailable> + 5899

    5    libc.so.6                          0x00002ba34c08c460 __libc_start_main +
    245

    6    tmpyv2mza2i                        0x0000556b7a60a1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = Int()\n    var minIndex = -1\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ == 0 || arr[index] < minValue {\n                minValue = arr[index]\n   \
    \             minIndex = index\n            }\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpnecmkyub/tmpnecmkyub.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c1a0e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c19dd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c19dd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c19dd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnecmkyub                        0x00005647414608b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b8c1a2cd460 __libc_start_main +
    245

    6    tmpnecmkyub                        0x00005647414602b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue > i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minValue == i {\n                minIndex = i\n     \
    \       }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp21h4btsm/tmp21h4btsm.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae6e0e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae6ddddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae6dddd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae6dddc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp21h4btsm                        0x000056182e3c966c <unavailable> + 5740

    5    libc.so.6                          0x00002aae6e2d2460 __libc_start_main +
    245

    6    tmp21h4btsm                        0x000056182e3c9279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = Int()\n    var minIndex = -1\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ == 0 || arr[index] < minValue {\n                minValue = arr[index]\n   \
    \             minIndex = index\n            }\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpnecmkyub/tmpnecmkyub.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c1a0e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c19dd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c19dd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c19dd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnecmkyub                        0x00005647414608b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b8c1a2cd460 __libc_start_main +
    245

    6    tmpnecmkyub                        0x00005647414602b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ minIndex = 0\n    var minValue = arr[0]\n    for i in 1..<arr.count {\n    \
    \    if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    return [minValue, minIndex]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpk4k7_1m7/tmpk4k7_1m7.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9b204dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9b1d44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9b1d44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9b1d437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk4k7_1m7                        0x0000560fdd57170b <unavailable> + 5899

    5    libc.so.6                          0x00002ab9b2239460 __libc_start_main +
    245

    6    tmpk4k7_1m7                        0x0000560fdd5711f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpgp_5fozd/tmpgp_5fozd.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b00847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b0053eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b0053e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b0053d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgp_5fozd                        0x0000564bbe8637cb <unavailable> + 6091

    5    libc.so.6                          0x00002b9b00a33460 __libc_start_main +
    245

    6    tmpgp_5fozd                        0x0000564bbe8632b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestEven = arr[0]\n    var smallestIndex = 0\n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if smallestEven == arr[index] {\n                smallestEven = arr[index]\n\
    \                smallestIndex = index\n            }\n        }\n    }\n    result.append(smallestEven)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp5wfrw6yd/tmp5wfrw6yd.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8f1ffcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8f1cf3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8f1cf3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8f1cf27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5wfrw6yd                        0x0000555e36d876ac <unavailable> + 5804

    5    libc.so.6                          0x00002ac8f21e8460 __libc_start_main +
    245

    6    tmp5wfrw6yd                        0x0000555e36d872b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minIndex = 0\n    var minValue = arr[0]\n    \n    for index in 0..<arr.count\
    \ {\n        if arr[index] % 2 == 0 {\n            if minValue == arr[index] {\n\
    \                minIndex = index\n            } else {\n                minValue\
    \ = arr[index]\n                minIndex = index\n            }\n        }\n \
    \   }\n    \n    return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5023a44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b502373b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b502373b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b502373b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b502373abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b502353ae83 <unavailable> + 188035

    6    tmp0uwt8h6l                        0x000055da259f5f10 <unavailable> + 7952

    7    tmp0uwt8h6l                        0x000055da259f572e <unavailable> + 5934

    8    libc.so.6                          0x00002b5023c30460 __libc_start_main +
    245

    9    tmp0uwt8h6l                        0x000055da259f51f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallest = 0\n    var smallestIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if smallest\
    \ == 0 || arr[index] < arr[smallest] {\n                smallest = arr[index]\n\
    \                smallestIndex = index\n            }\n        }\n    }\n    if\
    \ smallest == 0 {\n        return result\n    }\n    result.append(smallest)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0cd7875c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cd756c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0cd756c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0cd756c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0cd756bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0cd736be83 <unavailable> + 188035

    6    tmpb7xrqqtk                        0x000055fe4a4b3227 <unavailable> + 8743

    7    tmpb7xrqqtk                        0x000055fe4a4b25d4 <unavailable> + 5588

    8    libc.so.6                          0x00002b0cd7a61460 __libc_start_main +
    245

    9    tmpb7xrqqtk                        0x000055fe4a4b22b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestIndex = 0\n    var smallestValue = arr[0]\n\
    \    for i in arr {\n        if i % 2 == 0 {\n            if smallestValue < i\
    \ {\n                smallestValue = i\n                smallestIndex = i\n  \
    \          }\n        } else {\n            if smallestIndex == 0 {\n        \
    \        smallestIndex = i\n            } else {\n                if smallestIndex\
    \ < i {\n                    smallestIndex = i\n                }\n          \
    \  }\n        }\n    }\n    result.append(smallestValue)\n    result.append(smallestIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpujkmnqud/tmpujkmnqud.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d5cc47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d5c93eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d5c93e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d5c93d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpujkmnqud                        0x0000563ce69a56bc <unavailable> + 5820

    5    libc.so.6                          0x00002b2d5ce33460 __libc_start_main +
    245

    6    tmpujkmnqud                        0x0000563ce69a52c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minValue == i {\n                minIndex = i\n     \
    \       }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp0zpbn0bk/tmp0zpbn0bk.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02deb13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02de80ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02de80a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02de8097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0zpbn0bk                        0x00005614293f266c <unavailable> + 5740

    5    libc.so.6                          0x00002b02decff460 __libc_start_main +
    245

    6    tmp0zpbn0bk                        0x00005614293f2279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    var index: Int = 0\n    for value in arr {\n        if value < smallest\
    \ {\n            smallest = value\n            smallestIndex = index\n       \
    \ }\n        if value == smallest {\n            result.append(value)\n      \
    \      index += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp5pqu3phq/tmp5pqu3phq.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19af5a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19af29ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19af29a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19af2997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5pqu3phq                        0x0000563bdda0c57c <unavailable> + 5500

    5    libc.so.6                          0x00002b19af78f460 __libc_start_main +
    245

    6    tmp5pqu3phq                        0x0000563bdda0c189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n    \
    \        if smallest == 0 || arr[index] < smallest {\n                smallest\
    \ = arr[index]\n                smallestIndex = index\n            }\n       \
    \ }\n    }\n    if smallest != 0 {\n        result = [smallest, smallestIndex]\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpoasxonps/tmpoasxonps.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b75d64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b75a5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b75a5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b75a5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoasxonps                        0x0000561cb7000954 <unavailable> + 6484

    5    libc.so.6                          0x00002b2b75f50460 __libc_start_main +
    245

    6    tmpoasxonps                        0x0000561cb70001f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpgp_5fozd/tmpgp_5fozd.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b00847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b0053eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b0053e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b0053d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgp_5fozd                        0x0000564bbe8637cb <unavailable> + 6091

    5    libc.so.6                          0x00002b9b00a33460 __libc_start_main +
    245

    6    tmpgp_5fozd                        0x0000564bbe8632b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ == arr[index] {\n                minIndex = index\n            } else {\n  \
    \              if arr[index] < minValue {\n                    minValue = arr[index]\n\
    \                    minIndex = index\n                }\n            }\n    \
    \    }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: Exception
  stderr: 'tmptx8apy1p/tmptx8apy1p.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af745cbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7459b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7459b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7459b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptx8apy1p                        0x00005584cf65676b <unavailable> + 5995

    5    libc.so.6                          0x00002af745ea8460 __libc_start_main +
    245

    6    tmptx8apy1p                        0x00005584cf656259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minIndex == -1 || minValue < i {\n                minValue\
    \ = i\n                minIndex = i\n            }\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp9x0fvb40/tmp9x0fvb40.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3290d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad328dceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad328dce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad328dcd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9x0fvb40                        0x000055b2617746bc <unavailable> + 5820

    5    libc.so.6                          0x00002ad3292c3460 __libc_start_main +
    245

    6    tmp9x0fvb40                        0x000055b2617742c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue > i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minValue == i {\n                minIndex = i\n     \
    \       }\n        }\n    }\n    if minIndex == -1 {\n        return result\n\
    \    }\n    result.append(minValue)\n    result.append(minIndex)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpha_92p69/tmpha_92p69.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0664667c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b066435eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b066435e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b066435d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpha_92p69                        0x000055beebac86bc <unavailable> + 5820

    5    libc.so.6                          0x00002b0664853460 __libc_start_main +
    245

    6    tmpha_92p69                        0x000055beebac82c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    var index: Int = 0\n    for value in arr {\n        if value == 0 {\n\
    \            smallest = value\n            smallestIndex = index\n        }\n\
    \        if value < smallest {\n            smallest = value\n            smallestIndex\
    \ = index\n        }\n        index += 1\n    }\n    result.append(smallest)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmimaklp9/tmpmimaklp9.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade6b295c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade6af8cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade6af8c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade6af8b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmimaklp9                        0x00005562293c157c <unavailable> + 5500

    5    libc.so.6                          0x00002ade6b481460 __libc_start_main +
    245

    6    tmpmimaklp9                        0x00005562293c1189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue > i {\n         \
    \       minValue = i\n                minIndex = i\n            }\n        } else\
    \ {\n            if minValue == i {\n                minIndex = i\n          \
    \  }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpe9ts5_sh/tmpe9ts5_sh.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9457940c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9457637b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9457637988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94576367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9ts5_sh                        0x0000563bfde826bc <unavailable> + 5820

    5    libc.so.6                          0x00002b9457b2c460 __libc_start_main +
    245

    6    tmpe9ts5_sh                        0x0000563bfde822c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue > i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minValue == i {\n                minIndex += 1\n    \
    \        }\n        }\n    }\n    result = [minValue, minIndex]\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpnsd8bghn/tmpnsd8bghn.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad95b137c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad95ae2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad95ae2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad95ae2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnsd8bghn                        0x00005572ec68661c <unavailable> + 5660

    5    libc.so.6                          0x00002ad95b323460 __libc_start_main +
    245

    6    tmpnsd8bghn                        0x00005572ec686229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n    \
    \        if smallest == 0 || arr[index] < smallest {\n                smallest\
    \ = arr[index]\n                smallestIndex = index\n            }\n       \
    \ }\n    }\n    result.append(smallest)\n    result.append(smallestIndex)\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmptq9ky9t0/tmptq9ky9t0.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc120a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc11d9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc11d9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc11d9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptq9ky9t0                        0x0000560705c25856 <unavailable> + 6230

    5    libc.so.6                          0x00002afc12290460 __libc_start_main +
    245

    6    tmptq9ky9t0                        0x0000560705c25259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    \n    var minValue = arr[0]\n    var minIndex =\
    \ 0\n    \n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n\
    \            if arr[index] < minValue {\n                minValue = arr[index]\n\
    \                minIndex = index\n            }\n        }\n    }\n    \n   \
    \ if minIndex == arr.count {\n        return result\n    }\n    \n    result.append(minValue)\n\
    \    result.append(minIndex)\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpe2l0oil0/tmpe2l0oil0.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c68b3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c68833b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c68833988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c688327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2l0oil0                        0x0000563f828217cb <unavailable> + 6091

    5    libc.so.6                          0x00002b4c68d28460 __libc_start_main +
    245

    6    tmpe2l0oil0                        0x0000563f828212b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    \n    if arr.isEmpty() {\n        return result\n\
    \    }\n    \n    var smallestEvenValue = arr[0]\n    var smallestIndex = 0\n\
    \    \n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n  \
    \          if smallestEvenValue < arr[index] {\n                smallestEvenValue\
    \ = arr[index]\n                smallestIndex = index\n            }\n       \
    \ }\n    }\n    \n    if smallestEvenValue == arr[0] {\n        result = [smallestEvenValue,\
    \ smallestIndex]\n    } else {\n        result = [smallestEvenValue, smallestIndex]\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpujsm5vpg.swift:31:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n         \
    \       minValue = i\n                minIndex = i\n            }\n        } else\
    \ {\n            if minValue == i {\n                minIndex += 1\n         \
    \   }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp9sx6zsqd/tmp9sx6zsqd.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef7254ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef72245b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef72245988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef722447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9sx6zsqd                        0x000055f7887c96bc <unavailable> + 5820

    5    libc.so.6                          0x00002aef7273a460 __libc_start_main +
    245

    6    tmp9sx6zsqd                        0x000055f7887c92c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ value in arr {\n        if value % 2 == 0 {\n            if value < minValue\
    \ {\n                minValue = value\n                minIndex = arr.index(value)\n\
    \            }\n        } else {\n            if value < minValue {\n        \
    \        minValue = value\n                minIndex = arr.index(value)\n     \
    \       }\n        }\n    }\n    if minIndex == -1 {\n        return result\n\
    \    }\n    result.append(minValue)\n    result.append(minIndex)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpupnsl8eg.swift:35:32: error: no exact matches in call to instance\
    \ method 'index'\n                minIndex = arr.index(value)\n              \
    \                 ^\nSwift.Array:7:28: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(after:)')\n    @inlinable public func index(after i: Int)\
    \ -> Int\n                           ^\nSwift.Array:9:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public func\
    \ index(before i: Int) -> Int\n                           ^\nSwift.RandomAccessCollection:3:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(after:)')\n\
    \    @inlinable public func index(after i: Self.Index) -> Self.Index\n       \
    \                    ^\nSwift.RandomAccessCollection:4:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public func\
    \ index(before i: Self.Index) -> Self.Index\n                           ^\n/tmp/tmpupnsl8eg.swift:40:32:\
    \ error: no exact matches in call to instance method 'index'\n               \
    \ minIndex = arr.index(value)\n                               ^\nSwift.Array:7:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(after:)')\n\
    \    @inlinable public func index(after i: Int) -> Int\n                     \
    \      ^\nSwift.Array:9:28: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(before:)')\n    @inlinable public func index(before i: Int) -> Int\n\
    \                           ^\nSwift.RandomAccessCollection:3:28: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(after:)')\n    @inlinable public\
    \ func index(after i: Self.Index) -> Self.Index\n                           ^\n\
    Swift.RandomAccessCollection:4:28: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(before:)')\n    @inlinable public func index(before i: Self.Index)\
    \ -> Self.Index\n                           ^\n"
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpgp_5fozd/tmpgp_5fozd.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b00847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b0053eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b0053e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b0053d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgp_5fozd                        0x0000564bbe8637cb <unavailable> + 6091

    5    libc.so.6                          0x00002b9b00a33460 __libc_start_main +
    245

    6    tmpgp_5fozd                        0x0000564bbe8632b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpu9qm7_zb/tmpu9qm7_zb.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3910bc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39108bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39108bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39108ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu9qm7_zb                        0x0000563a4096076b <unavailable> + 5995

    5    libc.so.6                          0x00002b3910db0460 __libc_start_main +
    245

    6    tmpu9qm7_zb                        0x0000563a40960259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minValue == i {\n                minIndex = i\n     \
    \       }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp0zpbn0bk/tmp0zpbn0bk.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02deb13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02de80ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02de80a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02de8097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0zpbn0bk                        0x00005614293f266c <unavailable> + 5740

    5    libc.so.6                          0x00002b02decff460 __libc_start_main +
    245

    6    tmp0zpbn0bk                        0x00005614293f2279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestIndex = -1\n    var smallestValue = arr[0]\n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if smallestValue == arr[index] {\n                smallestIndex = index\n\
    \            } else {\n                smallestValue = arr[index]\n          \
    \      smallestIndex = index\n            }\n        }\n    }\n    if smallestIndex\
    \ == -1 {\n        return result\n    }\n    result.append(smallestValue)\n  \
    \  result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae91b90ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae91b601561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae91b601286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae91b60113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae91b600bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae91b400e83 <unavailable> + 188035

    6    tmp2bgd3_lc                        0x0000562f14cdb006 <unavailable> + 8198

    7    tmp2bgd3_lc                        0x0000562f14cda7ee <unavailable> + 6126

    8    libc.so.6                          0x00002ae91baf6460 __libc_start_main +
    245

    9    tmp2bgd3_lc                        0x0000562f14cda2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue > i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minIndex == -1 || minValue > i {\n                minValue\
    \ = i\n                minIndex = i\n            }\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp1b5x0lay/tmp1b5x0lay.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09f2cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09f29e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09f29e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09f29e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1b5x0lay                        0x000055fc4012a6bc <unavailable> + 5820

    5    libc.so.6                          0x00002b09f2ed9460 __libc_start_main +
    245

    6    tmp1b5x0lay                        0x000055fc4012a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpgp_5fozd/tmpgp_5fozd.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b00847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b0053eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b0053e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b0053d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgp_5fozd                        0x0000564bbe8637cb <unavailable> + 6091

    5    libc.so.6                          0x00002b9b00a33460 __libc_start_main +
    245

    6    tmpgp_5fozd                        0x0000564bbe8632b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    var index: Int = 0\n    for element in arr {\n        if element % 2\
    \ == 0 {\n            if smallest == 0 {\n                smallest = element\n\
    \                smallestIndex = index\n            } else {\n               \
    \ if element < smallest {\n                    smallest = element\n          \
    \          smallestIndex = index\n                }\n            }\n        }\n\
    \        index += 1\n    }\n    if smallest != 0 {\n        result = [smallest,\
    \ smallestIndex]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp9hxtv8kq/tmp9hxtv8kq.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a91dfac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a91af1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a91af1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a91af07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9hxtv8kq                        0x0000558da90fd924 <unavailable> + 6436

    5    libc.so.6                          0x00002b6a91fe6460 __libc_start_main +
    245

    6    tmp9hxtv8kq                        0x0000558da90fd1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue == i {\n      \
    \          minIndex = i\n            } else {\n                minValue = i\n\
    \                minIndex = i\n            }\n        }\n    }\n    if minIndex\
    \ == -1 {\n        return result\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp5sssve3d/tmp5sssve3d.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38cf46bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38cf162b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38cf162988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38cf1617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5sssve3d                        0x0000562fd28f76bc <unavailable> + 5820

    5    libc.so.6                          0x00002b38cf657460 __libc_start_main +
    245

    6    tmp5sssve3d                        0x0000562fd28f72c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    var minIndex2\
    \ = 0\n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n  \
    \          if arr[index] < minValue {\n                minValue = arr[index]\n\
    \                minIndex = index\n            }\n            if arr[index] <\
    \ minValue2 {\n                minValue2 = arr[index]\n                minIndex2\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    result.append(minIndex2)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpftpxurrh.swift:38:29: error: cannot find 'minValue2' in scope\n\
    \            if arr[index] < minValue2 {\n                            ^~~~~~~~~\n\
    /tmp/tmpftpxurrh.swift:39:17: error: cannot find 'minValue2' in scope\n      \
    \          minValue2 = arr[index]\n                ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpgp_5fozd/tmpgp_5fozd.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b00847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b0053eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b0053e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b0053d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgp_5fozd                        0x0000564bbe8637cb <unavailable> + 6091

    5    libc.so.6                          0x00002b9b00a33460 __libc_start_main +
    245

    6    tmpgp_5fozd                        0x0000564bbe8632b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minValue == i {\n                minIndex += 1\n    \
    \        }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp0cafu4u_/tmp0cafu4u_.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace176a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace1739fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace1739f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace1739e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0cafu4u_                        0x000055f0c3bf866c <unavailable> + 5740

    5    libc.so.6                          0x00002ace17894460 __libc_start_main +
    245

    6    tmp0cafu4u_                        0x000055f0c3bf8279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ value in arr {\n        if value < minValue {\n            minValue = value\n\
    \            minIndex = -1\n        }\n        if value == minValue {\n      \
    \      minIndex += 1\n        }\n    }\n    if minIndex == -1 {\n        return\
    \ result\n    }\n    result.append(minValue)\n    result.append(minIndex)\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpy3gmsmrl/tmpy3gmsmrl.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68e6f87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68e6c7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68e6c7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68e6c7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy3gmsmrl                        0x000055f2b742862c <unavailable> + 5676

    5    libc.so.6                          0x00002b68e7173460 __libc_start_main +
    245

    6    tmpy3gmsmrl                        0x000055f2b7428239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minIndex = 0\n    var minValue = arr[0]\n    \n    for i in 1..<arr.count\
    \ {\n        if arr[i] < minValue {\n            minValue = arr[i]\n         \
    \   minIndex = i\n        }\n    }\n    \n    return [minValue, minIndex]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpn_k4mi_0/tmpn_k4mi_0.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba357187c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba356e7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba356e7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba356e7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn_k4mi_0                        0x000055cdb6bdc70b <unavailable> + 5899

    5    libc.so.6                          0x00002ba357373460 __libc_start_main +
    245

    6    tmpn_k4mi_0                        0x000055cdb6bdc1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n    \
    \        if smallest == 0 || arr[index] < smallest {\n                smallest\
    \ = arr[index]\n                smallestIndex = index\n            }\n       \
    \ }\n    }\n    result.append(smallest)\n    result.append(smallestIndex)\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmptq9ky9t0/tmptq9ky9t0.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc120a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc11d9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc11d9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc11d9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptq9ky9t0                        0x0000560705c25856 <unavailable> + 6230

    5    libc.so.6                          0x00002afc12290460 __libc_start_main +
    245

    6    tmptq9ky9t0                        0x0000560705c25259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue > i {\n         \
    \       minValue = i\n                minIndex = i\n            }\n        } else\
    \ {\n            if minValue > i {\n                minValue = i\n           \
    \     minIndex = i\n            }\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp4ddp8p4i/tmp4ddp8p4i.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c6298bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c62682b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c62682988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c626817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ddp8p4i                        0x000055ee63b166bc <unavailable> + 5820

    5    libc.so.6                          0x00002b5c62b77460 __libc_start_main +
    245

    6    tmp4ddp8p4i                        0x000055ee63b162c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var evenIndex = [Int]()\n    var evenValues = [Int]()\n    \n    for value\
    \ in arr {\n        if value % 2 == 0 {\n            evenIndex.append(value)\n\
    \            evenValues.append(value)\n        }\n    }\n    \n    if evenIndex.count\
    \ == 0 {\n        return []\n    }\n    \n    var smallestIndex = -1\n    var\
    \ smallestValue = evenValues[0]\n    \n    for index in evenIndex {\n        if\
    \ index == smallestIndex {\n            continue\n        }\n        if evenValues[index]\
    \ < smallestValue {\n            smallestValue = evenValues[index]\n         \
    \   smallestIndex = index\n        }\n    }\n    \n    return [smallestValue,\
    \ smallestIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e2f67cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e2f373561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2e2f373286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2e2f37313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2e2f372bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2e2f172e83 <unavailable> + 188035

    6    tmpxw8js21z                        0x0000562e90eb3376 <unavailable> + 9078

    7    tmpxw8js21z                        0x0000562e90eb2644 <unavailable> + 5700

    8    libc.so.6                          0x00002b2e2f868460 __libc_start_main +
    245

    9    tmpxw8js21z                        0x0000562e90eb2329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ == arr[index] {\n                minIndex = index\n            }\n         \
    \   else {\n                if minIndex == -1 {\n                    minIndex\
    \ = index\n                }\n                else {\n                    if minIndex\
    \ > index {\n                        minIndex = index\n                    }\n\
    \                }\n            }\n        }\n    }\n    if minIndex == -1 {\n\
    \        return result\n    }\n    else {\n        return [minValue, minIndex]\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int])\
    \ == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: Exception
  stderr: 'tmpyf468cd_/tmpyf468cd_.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c0cd50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c0ca47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c0ca47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c0ca467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyf468cd_                        0x00005636bae5a64c <unavailable> + 5708

    5    libc.so.6                          0x00002b9c0cf3c460 __libc_start_main +
    245

    6    tmpyf468cd_                        0x00005636bae5a259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minIndex == -1 || minValue < i {\n                minValue\
    \ = i\n                minIndex = i\n            }\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp9x0fvb40/tmp9x0fvb40.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3290d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad328dceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad328dce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad328dcd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9x0fvb40                        0x000055b2617746bc <unavailable> + 5820

    5    libc.so.6                          0x00002ad3292c3460 __libc_start_main +
    245

    6    tmp9x0fvb40                        0x000055b2617742c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ < arr[index] {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp80kqmul2/tmp80kqmul2.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb70031c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb6fd28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb6fd28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb6fd277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp80kqmul2                        0x0000565056d1e6ac <unavailable> + 5804

    5    libc.so.6                          0x00002afb7021d460 __libc_start_main +
    245

    6    tmp80kqmul2                        0x0000565056d1e2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n  \
    \  \n    for i in arr {\n        if i % 2 == 0 {\n            if minValue > i\
    \ {\n                minValue = i\n                minIndex = i\n            }\n\
    \        } else {\n            if minValue == i {\n                minIndex =\
    \ i\n            }\n        }\n    }\n    \n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp00jatu40/tmp00jatu40.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23cd89bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23cd592b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23cd592988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23cd5917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp00jatu40                        0x0000564b6ee3e6bc <unavailable> + 5820

    5    libc.so.6                          0x00002b23cda87460 __libc_start_main +
    245

    6    tmp00jatu40                        0x0000564b6ee3e2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestEven = arr[0]\n    var smallestIndex = 0\n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if smallestEven == arr[index] {\n                smallestEven = arr[index]\n\
    \                smallestIndex = index\n            }\n        }\n    }\n    result.append(smallestEven)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp5wfrw6yd/tmp5wfrw6yd.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8f1ffcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8f1cf3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8f1cf3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8f1cf27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5wfrw6yd                        0x0000555e36d876ac <unavailable> + 5804

    5    libc.so.6                          0x00002ac8f21e8460 __libc_start_main +
    245

    6    tmp5wfrw6yd                        0x0000555e36d872b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n    \
    \        if smallest == 0 || arr[index] < smallest {\n                smallest\
    \ = arr[index]\n                smallestIndex = index\n            }\n       \
    \ }\n    }\n    if smallest == 0 {\n        return result\n    }\n    result.append(smallest)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpcfw5j4g1/tmpcfw5j4g1.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af953882c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af953579b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af953579988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9535787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfw5j4g1                        0x0000562065d149b4 <unavailable> + 6580

    5    libc.so.6                          0x00002af953a6e460 __libc_start_main +
    245

    6    tmpcfw5j4g1                        0x0000562065d14259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpgp_5fozd/tmpgp_5fozd.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b00847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b0053eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b0053e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b0053d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgp_5fozd                        0x0000564bbe8637cb <unavailable> + 6091

    5    libc.so.6                          0x00002b9b00a33460 __libc_start_main +
    245

    6    tmpgp_5fozd                        0x0000564bbe8632b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ < arr[index] {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp2n9llo1y/tmp2n9llo1y.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cad299c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cacf90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cacf90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cacf8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2n9llo1y                        0x000055eefe7746ac <unavailable> + 5804

    5    libc.so.6                          0x00002b5cad485460 __libc_start_main +
    245

    6    tmp2n9llo1y                        0x000055eefe7742b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for value\
    \ in arr {\n        if value % 2 == 0 {\n            if value < minValue {\n \
    \               minValue = value\n                minIndex = result.count\n  \
    \          }\n            result[minIndex] = value\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab04e18bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab04de82561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab04de82286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab04de8213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab04de81bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab04dc817ec <unavailable> + 186348

    6    tmpdk7dhy7f                        0x0000563d48ec121e <unavailable> + 8734

    7    tmpdk7dhy7f                        0x0000563d48ec0634 <unavailable> + 5684

    8    libc.so.6                          0x00002ab04e377460 __libc_start_main +
    245

    9    tmpdk7dhy7f                        0x0000563d48ec0319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ < arr[index] {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp2n9llo1y/tmp2n9llo1y.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cad299c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cacf90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cacf90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cacf8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2n9llo1y                        0x000055eefe7746ac <unavailable> + 5804

    5    libc.so.6                          0x00002b5cad485460 __libc_start_main +
    245

    6    tmp2n9llo1y                        0x000055eefe7742b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestValue = arr[0]\n    var smallestIndex = -1\n\
    \    for i in arr {\n        if smallestValue == i {\n            smallestIndex\
    \ = i\n        }\n        if smallestValue > i {\n            smallestValue =\
    \ i\n            smallestIndex = i\n        }\n    }\n    result.append(smallestValue)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpr6eakbg9/tmpr6eakbg9.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf8e346c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf8e03db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf8e03d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf8e03c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr6eakbg9                        0x000055b49466d62c <unavailable> + 5676

    5    libc.so.6                          0x00002abf8e532460 __libc_start_main +
    245

    6    tmpr6eakbg9                        0x000055b49466d239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue == i {\n      \
    \          minIndex = i\n            } else {\n                result.append(i)\n\
    \            }\n        }\n    }\n    if minIndex == -1 {\n        return result\n\
    \    }\n    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpvokke9nd/tmpvokke9nd.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac21c566c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac21c25db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac21c25d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac21c25c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvokke9nd                        0x000055692e3996bc <unavailable> + 5820

    5    libc.so.6                          0x00002ac21c752460 __libc_start_main +
    245

    6    tmpvokke9nd                        0x000055692e3992c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpgp_5fozd/tmpgp_5fozd.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b00847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b0053eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b0053e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b0053d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgp_5fozd                        0x0000564bbe8637cb <unavailable> + 6091

    5    libc.so.6                          0x00002b9b00a33460 __libc_start_main +
    245

    6    tmpgp_5fozd                        0x0000564bbe8632b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minIndex == -1 || minValue < i {\n                minValue\
    \ = i\n                minIndex = i\n            }\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp9x0fvb40/tmp9x0fvb40.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3290d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad328dceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad328dce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad328dcd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9x0fvb40                        0x000055b2617746bc <unavailable> + 5820

    5    libc.so.6                          0x00002ad3292c3460 __libc_start_main +
    245

    6    tmp9x0fvb40                        0x000055b2617742c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue > i {\n         \
    \       minValue = i\n                minIndex = i\n            }\n        } else\
    \ {\n            if minValue == i {\n                minIndex = i\n          \
    \  }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpe9ts5_sh/tmpe9ts5_sh.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9457940c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9457637b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9457637988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94576367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9ts5_sh                        0x0000563bfde826bc <unavailable> + 5820

    5    libc.so.6                          0x00002b9457b2c460 __libc_start_main +
    245

    6    tmpe9ts5_sh                        0x0000563bfde822c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ minValue = arr[0]\n    var minIndex = 0\n    var result = [Int]()\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n         \
    \       minValue = i\n                minIndex = i\n            }\n        } else\
    \ {\n            if minValue == i {\n                minIndex += 1\n         \
    \   }\n        }\n    }\n    if minIndex == 0 {\n        return result\n    }\n\
    \    if minIndex == arr.count {\n        return [minValue, minIndex]\n    }\n\
    \    if minIndex == arr.count - 1 {\n        return [minValue, minIndex + 1]\n\
    \    }\n    return [minValue, minIndex + 1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmptuyv_9j5/tmptuyv_9j5.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b131a951c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b131a648b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b131a648988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b131a6477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptuyv_9j5                        0x000055e9010006bc <unavailable> + 5820

    5    libc.so.6                          0x00002b131ab3d460 __libc_start_main +
    245

    6    tmptuyv_9j5                        0x000055e9010002c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = Int()\n    var minIndex = -1\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ == 0 || arr[index] < minValue {\n                minValue = arr[index]\n   \
    \             minIndex = index\n            }\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpnecmkyub/tmpnecmkyub.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c1a0e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c19dd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c19dd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c19dd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnecmkyub                        0x00005647414608b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b8c1a2cd460 __libc_start_main +
    245

    6    tmpnecmkyub                        0x00005647414602b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minValue == i {\n                minIndex = i\n     \
    \       }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp0zpbn0bk/tmp0zpbn0bk.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02deb13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02de80ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02de80a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02de8097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0zpbn0bk                        0x00005614293f266c <unavailable> + 5740

    5    libc.so.6                          0x00002b02decff460 __libc_start_main +
    245

    6    tmp0zpbn0bk                        0x00005614293f2279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minValue == i {\n                minIndex = i\n     \
    \       }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp0zpbn0bk/tmp0zpbn0bk.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02deb13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02de80ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02de80a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02de8097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0zpbn0bk                        0x00005614293f266c <unavailable> + 5740

    5    libc.so.6                          0x00002b02decff460 __libc_start_main +
    245

    6    tmp0zpbn0bk                        0x00005614293f2279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpgp_5fozd/tmpgp_5fozd.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b00847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b0053eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b0053e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b0053d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgp_5fozd                        0x0000564bbe8637cb <unavailable> + 6091

    5    libc.so.6                          0x00002b9b00a33460 __libc_start_main +
    245

    6    tmpgp_5fozd                        0x0000564bbe8632b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ == arr[index] {\n                minIndex = index\n            } else {\n  \
    \              minValue = arr[index]\n                minIndex = index\n     \
    \       }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002baa53f1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa53c14561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002baa53c14286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002baa53c1413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002baa53c13bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002baa53a13e83 <unavailable> + 188035

    6    tmp0c9wx07t                        0x00005585d9641ff0 <unavailable> + 8176

    7    tmp0c9wx07t                        0x00005585d96417ee <unavailable> + 6126

    8    libc.so.6                          0x00002baa54109460 __libc_start_main +
    245

    9    tmp0c9wx07t                        0x00005585d96412b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for value\
    \ in arr {\n        if value < minValue {\n            minValue = value\n    \
    \        minIndex = result.count\n        }\n        result[minIndex] = value\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b78b9d0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78b9a01561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b78b9a01286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b78b9a0113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b78b9a00bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b78b98007ec <unavailable> + 186348

    6    tmp0qi9cbzr                        0x000055774ca0f0db <unavailable> + 8411

    7    tmp0qi9cbzr                        0x000055774ca0e5a4 <unavailable> + 5540

    8    libc.so.6                          0x00002b78b9ef6460 __libc_start_main +
    245

    9    tmp0qi9cbzr                        0x000055774ca0e289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n    \
    \        if smallest == 0 || arr[index] < smallest {\n                smallest\
    \ = arr[index]\n                smallestIndex = index\n            }\n       \
    \ }\n    }\n    result.append(smallest)\n    result.append(smallestIndex)\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmptq9ky9t0/tmptq9ky9t0.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc120a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc11d9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc11d9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc11d9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptq9ky9t0                        0x0000560705c25856 <unavailable> + 6230

    5    libc.so.6                          0x00002afc12290460 __libc_start_main +
    245

    6    tmptq9ky9t0                        0x0000560705c25259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue > i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minIndex == -1 || minValue > i {\n                minValue\
    \ = i\n                minIndex = i\n            }\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp1b5x0lay/tmp1b5x0lay.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09f2cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09f29e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09f29e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09f29e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1b5x0lay                        0x000055fc4012a6bc <unavailable> + 5820

    5    libc.so.6                          0x00002b09f2ed9460 __libc_start_main +
    245

    6    tmp1b5x0lay                        0x000055fc4012a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n         \
    \       minValue = i\n                minIndex = i\n            }\n        } else\
    \ {\n            if minValue == i {\n                minIndex = i\n          \
    \  }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmplvgxr3u7/tmplvgxr3u7.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb31944c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb3163bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb3163b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb3163a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvgxr3u7                        0x0000558cf4a5d6bc <unavailable> + 5820

    5    libc.so.6                          0x00002abb31b30460 __libc_start_main +
    245

    6    tmplvgxr3u7                        0x0000558cf4a5d2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue == i {\n      \
    \          minIndex = i\n            } else {\n                minIndex = minIndex\n\
    \            }\n        }\n    }\n    result.append(minIndex)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7ivcxz98.swift:36:26: error: assigning a variable to itself\n \
    \               minIndex = minIndex\n                ~~~~~~~~ ^ ~~~~~~~~\n/tmp/tmp7ivcxz98.swift:30:9:\
    \ warning: variable 'minValue' was never mutated; consider changing to 'let' constant\n\
    \    var minValue = arr[0]\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n         \
    \       minValue = i\n                minIndex = i\n            }\n        } else\
    \ {\n            if minValue == i {\n                minIndex = i\n          \
    \  }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmplvgxr3u7/tmplvgxr3u7.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb31944c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb3163bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb3163b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb3163a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvgxr3u7                        0x0000558cf4a5d6bc <unavailable> + 5820

    5    libc.so.6                          0x00002abb31b30460 __libc_start_main +
    245

    6    tmplvgxr3u7                        0x0000558cf4a5d2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpgp_5fozd/tmpgp_5fozd.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b00847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b0053eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b0053e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b0053d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgp_5fozd                        0x0000564bbe8637cb <unavailable> + 6091

    5    libc.so.6                          0x00002b9b00a33460 __libc_start_main +
    245

    6    tmpgp_5fozd                        0x0000564bbe8632b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minIndex == -1 {\n                minIndex = i\n    \
    \        } else {\n                if minIndex != i {\n                    minIndex\
    \ = i\n                }\n            }\n        }\n    }\n    if minIndex ==\
    \ -1 {\n        return result\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpfsmlmrsz/tmpfsmlmrsz.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c6f041c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c6ed38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c6ed38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c6ed377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfsmlmrsz                        0x000055c3a938c6bc <unavailable> + 5820

    5    libc.so.6                          0x00002b6c6f22d460 __libc_start_main +
    245

    6    tmpfsmlmrsz                        0x000055c3a938c2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpgp_5fozd/tmpgp_5fozd.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b00847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b0053eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b0053e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b0053d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgp_5fozd                        0x0000564bbe8637cb <unavailable> + 6091

    5    libc.so.6                          0x00002b9b00a33460 __libc_start_main +
    245

    6    tmpgp_5fozd                        0x0000564bbe8632b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestEven = arr[0]\n    var smallestIndex = -1\n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if smallestEven == arr[index] {\n                smallestEven = arr[index]\n\
    \                smallestIndex = index\n            } else {\n               \
    \ smallestEven = arr[index]\n                smallestIndex = index\n         \
    \   }\n        }\n    }\n    result.append(smallestEven)\n    result.append(smallestIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4fd42ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4fd121561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad4fd121286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad4fd12113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad4fd120bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad4fcf20e83 <unavailable> + 188035

    6    tmpfvi7wl3t                        0x000055e8f917cfe8 <unavailable> + 8168

    7    tmpfvi7wl3t                        0x000055e8f917c7ee <unavailable> + 6126

    8    libc.so.6                          0x00002ad4fd616460 __libc_start_main +
    245

    9    tmpfvi7wl3t                        0x000055e8f917c2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestValue = arr[0]\n    var smallestIndex = 0\n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if smallestValue == arr[index] {\n                smallestIndex = index\n\
    \            } else {\n                if smallestValue < arr[index] {\n     \
    \               smallestValue = arr[index]\n                    smallestIndex\
    \ = index\n                }\n            }\n        }\n    }\n    result.append(smallestValue)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp__kpo_8_/tmp__kpo_8_.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f47318c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f4700fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f4700f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f4700e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__kpo_8_                        0x000055ee4f6af6ac <unavailable> + 5804

    5    libc.so.6                          0x00002b0f47504460 __libc_start_main +
    245

    6    tmp__kpo_8_                        0x000055ee4f6af2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ minIndex = 0\n    var minValue = arr[0]\n    for index in 1..<arr.count {\n\
    \        if arr[index] < minValue {\n            minValue = arr[index]\n     \
    \       minIndex = index\n        }\n    }\n    return [minValue, minIndex]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp79kx447f/tmp79kx447f.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b195873ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1958435b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1958435988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19584347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp79kx447f                        0x000055f2fa02970b <unavailable> + 5899

    5    libc.so.6                          0x00002b195892a460 __libc_start_main +
    245

    6    tmp79kx447f                        0x000055f2fa0291f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n         \
    \       minValue = i\n                minIndex = i\n            }\n        } else\
    \ {\n            if minValue == i {\n                minIndex += 1\n         \
    \   }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp9sx6zsqd/tmp9sx6zsqd.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef7254ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef72245b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef72245988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef722447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9sx6zsqd                        0x000055f7887c96bc <unavailable> + 5820

    5    libc.so.6                          0x00002aef7273a460 __libc_start_main +
    245

    6    tmp9sx6zsqd                        0x000055f7887c92c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue == i {\n      \
    \          minIndex = i\n            } else {\n                result.append(i)\n\
    \            }\n        }\n    }\n    if minIndex == -1 {\n        return result\n\
    \    }\n    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpvokke9nd/tmpvokke9nd.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac21c566c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac21c25db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac21c25d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac21c25c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvokke9nd                        0x000055692e3996bc <unavailable> + 5820

    5    libc.so.6                          0x00002ac21c752460 __libc_start_main +
    245

    6    tmpvokke9nd                        0x000055692e3992c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ minIndex = 0\n    var minValue = arr[0]\n    for index in 1..<arr.count {\n\
    \        if arr[index] >= minValue {\n            if arr[index] % 2 == 0 {\n \
    \               minValue = arr[index]\n                minIndex = index\n    \
    \        }\n        }\n    }\n    return [minValue, minIndex]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpob_x864y/tmpob_x864y.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b711fac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b711f7bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b711f7bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b711f7bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpob_x864y                        0x000055c65ae405ec <unavailable> + 5612

    5    libc.so.6                          0x00002b711fcb1460 __libc_start_main +
    245

    6    tmpob_x864y                        0x000055c65ae401f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n         \
    \       minValue = i\n                minIndex = i\n            }\n        } else\
    \ {\n            if minValue == i {\n                minIndex = i\n          \
    \  }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmplvgxr3u7/tmplvgxr3u7.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb31944c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb3163bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb3163b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb3163a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvgxr3u7                        0x0000558cf4a5d6bc <unavailable> + 5820

    5    libc.so.6                          0x00002abb31b30460 __libc_start_main +
    245

    6    tmplvgxr3u7                        0x0000558cf4a5d2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpgp_5fozd/tmpgp_5fozd.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b00847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b0053eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b0053e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b0053d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgp_5fozd                        0x0000564bbe8637cb <unavailable> + 6091

    5    libc.so.6                          0x00002b9b00a33460 __libc_start_main +
    245

    6    tmpgp_5fozd                        0x0000564bbe8632b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpu9qm7_zb/tmpu9qm7_zb.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3910bc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39108bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39108bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39108ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu9qm7_zb                        0x0000563a4096076b <unavailable> + 5995

    5    libc.so.6                          0x00002b3910db0460 __libc_start_main +
    245

    6    tmpu9qm7_zb                        0x0000563a40960259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    var even: Bool = false\n    for index in 0..<arr.count {\n        if\
    \ arr[index] % 2 == 0 {\n            even = true\n        }\n        if even {\n\
    \            if smallest == 0 || arr[index] < smallest {\n                smallest\
    \ = arr[index]\n                smallestIndex = index\n            }\n       \
    \ } else {\n            if smallest == 0 || arr[index] > smallest {\n        \
    \        smallest = arr[index]\n                smallestIndex = index\n      \
    \      }\n        }\n    }\n    if smallest == 0 {\n        return result\n  \
    \  }\n    result.append(smallest)\n    result.append(smallestIndex)\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: Exception
  stderr: 'tmpg8qe7voi/tmpg8qe7voi.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b75344c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b7503bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b7503b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b7503a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8qe7voi                        0x000055fc4502d76b <unavailable> + 5995

    5    libc.so.6                          0x00002b4b75530460 __libc_start_main +
    245

    6    tmpg8qe7voi                        0x000055fc4502d259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestEvenIndex = 0\n    var smallestEvenValue =\
    \ 0\n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n    \
    \        if smallestEvenValue == 0 {\n                smallestEvenValue = arr[index]\n\
    \                smallestEvenIndex = index\n            } else {\n           \
    \     if arr[index] < smallestEvenValue {\n                    smallestEvenValue\
    \ = arr[index]\n                    smallestEvenIndex = index\n              \
    \  }\n            }\n        }\n    }\n    if smallestEvenValue == 0 {\n     \
    \   return result\n    }\n    if smallestEvenIndex == 0 {\n        return [smallestEvenValue,\
    \ smallestEvenIndex]\n    }\n    if smallestEvenIndex < arr.count {\n        if\
    \ arr[smallestEvenIndex] < smallestEvenValue {\n            result = [smallestEvenValue,\
    \ smallestEvenIndex]\n        } else {\n            result = [smallestEvenValue,\
    \ smallestEvenIndex-1]\n        }\n    } else {\n        result = []\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmppyiymjdw/tmppyiymjdw.swift:75: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd9b77dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd9b474b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd9b474988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd9b4737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppyiymjdw                        0x000055b3b8ea464c <unavailable> + 5708

    5    libc.so.6                          0x00002abd9b969460 __libc_start_main +
    245

    6    tmppyiymjdw                        0x000055b3b8ea4259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpgp_5fozd/tmpgp_5fozd.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b00847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b0053eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b0053e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b0053d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgp_5fozd                        0x0000564bbe8637cb <unavailable> + 6091

    5    libc.so.6                          0x00002b9b00a33460 __libc_start_main +
    245

    6    tmpgp_5fozd                        0x0000564bbe8632b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minValue == i {\n                minIndex = i\n     \
    \       }\n        }\n    }\n    result = [minValue, minIndex]\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp2dnbtya3/tmp2dnbtya3.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48487afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48484a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48484a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48484a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2dnbtya3                        0x00005649dcfb461c <unavailable> + 5660

    5    libc.so.6                          0x00002b484899b460 __libc_start_main +
    245

    6    tmp2dnbtya3                        0x00005649dcfb4229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    var index\
    \ = 0\n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n  \
    \          if arr[index] < minValue {\n                minValue = arr[index]\n\
    \                minIndex = index\n            }\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpx6c2l_b1/tmpx6c2l_b1.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad253ecfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad253bc6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad253bc6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad253bc57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx6c2l_b1                        0x00005639e0b197cb <unavailable> + 6091

    5    libc.so.6                          0x00002ad2540bb460 __libc_start_main +
    245

    6    tmpx6c2l_b1                        0x00005639e0b192b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue == i {\n      \
    \          minIndex = i\n            } else {\n                result.append(i)\n\
    \            }\n        }\n    }\n    if minIndex == -1 {\n        return result\n\
    \    }\n    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpvokke9nd/tmpvokke9nd.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac21c566c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac21c25db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac21c25d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac21c25c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvokke9nd                        0x000055692e3996bc <unavailable> + 5820

    5    libc.so.6                          0x00002ac21c752460 __libc_start_main +
    245

    6    tmpvokke9nd                        0x000055692e3992c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestValue = arr[0]\n    var smallestIndex = 0\n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if smallestValue == arr[index] {\n                smallestIndex = index\n\
    \            }\n            else {\n                if smallestValue < arr[index]\
    \ {\n                    smallestValue = arr[index]\n                    smallestIndex\
    \ = index\n                }\n            }\n        }\n    }\n    result.append(smallestValue)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpns50xogl/tmpns50xogl.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c7a5f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c7a2e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c7a2e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c7a2e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns50xogl                        0x000055cb9bc006ac <unavailable> + 5804

    5    libc.so.6                          0x00002b2c7a7de460 __libc_start_main +
    245

    6    tmpns50xogl                        0x000055cb9bc002b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minValue == i {\n                minIndex += 1\n    \
    \        }\n        }\n    }\n    result = [minValue, minIndex]\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp2sm22rrn/tmp2sm22rrn.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd29040c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd28d37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd28d37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd28d367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2sm22rrn                        0x0000559b7eed461c <unavailable> + 5660

    5    libc.so.6                          0x00002afd2922c460 __libc_start_main +
    245

    6    tmp2sm22rrn                        0x0000559b7eed4229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ minIndex = 0\n    var minValue = arr[0]\n    for i in arr {\n        if i %\
    \ 2 == 0 {\n            if minValue < i {\n                minValue = i\n    \
    \            minIndex = i\n            }\n        } else {\n            if minValue\
    \ == i {\n                minIndex = i\n            }\n        }\n    }\n    return\
    \ [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpv4uvve8w/tmpv4uvve8w.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0338e94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0338b8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0338b8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0338b8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4uvve8w                        0x000055cde20f861c <unavailable> + 5660

    5    libc.so.6                          0x00002b0339080460 __libc_start_main +
    245

    6    tmpv4uvve8w                        0x000055cde20f8229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    var minIndex2\
    \ = 0\n    for index in 0..<arr.count {\n        if arr[index] >= minValue {\n\
    \            if arr[index] % 2 == 0 {\n                if arr[index] < minValue\
    \ {\n                    minValue = arr[index]\n                    minIndex =\
    \ index\n                }\n            } else {\n                if arr[index]\
    \ < minValue {\n                    minValue = arr[index]\n                  \
    \  minIndex2 = index\n                }\n            }\n        }\n    }\n   \
    \ if minIndex == 0 {\n        return arr\n    }\n    if minIndex2 == 0 {\n   \
    \     return arr\n    }\n    if minIndex2 < minIndex {\n        return arr\n \
    \   }\n    if minIndex2 > minIndex {\n        return arr\n    }\n    if minIndex2\
    \ == minIndex {\n        result.append(minValue)\n        result.append(minIndex)\n\
    \        return result\n    }\n    if minIndex2 < minIndex {\n        result.append(minValue)\n\
    \        result.append(minIndex2)\n        return result\n    }\n    if minIndex2\
    \ > minIndex {\n        result.append(minValue)\n        result.append(minIndex2)\n\
    \        return result\n    }\n    if minIndex2 == minIndex {\n        result.append(minValue)\n\
    \        result.append(minIndex)\n        return result\n    }\n    if minIndex2\
    \ < minIndex {\n        result.append(minValue)\n        result.append(minIndex2)\n\
    \        return result\n    }\n    if minIndex2 > minIndex {\n        result.append(minValue)\n\
    \        result.append(minIndex2)\n        return result\n    }\n    if minIndex2\
    \ == minIndex {\n        result.append(minValue)\n        result.append(minIndex)\n\
    \        return result\n    }\n    if minIndex2 < minIndex {\n        result.append(minValue)\n\
    \        result.append(minIndex2)\n        return result\n    }\n    if minIndex2\
    \ > minIndex {\n        result.append(minValue)\n        result.append(minIndex2)\n\
    \        return result\n    }\n    if minIndex2 == minIndex {\n        result.append(minValue)\n\
    \        result.append(minIndex)\n        return result\n    }\n    if minIndex2\
    \ < minIndex {\n        result.append(minValue)\n        result.append(minIndex2)\n\
    \        return result\n    }\n    if minIndex2 > minIndex {\n        result.append(minValue)\n\
    \        result.append(minIndex2)\n        return result\n    }\n    if minIndex2\
    \ == minIndex {\n        result.append(minValue)\n        result.append(minIndex)\n\
    \        return result\n    }\n    if minIndex2 < minIndex {\n        result.append(minValue)\n\
    \        result.append(minIndex2)\n        return result\n    }\n    if minIndex2\
    \ > minIndex {\n        result.append(minValue)\n        result.append(minIndex2)\n\
    \        return result\n    }\n    if minIndex2 == minIndex {\n        result.append(minValue)\n\
    \        result.append(minIndex)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpaiuwic62.swift:159:48: error: expected '}' at end of brace statement\n\
    assert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])\n                            \
    \                   ^\n/tmp/tmpaiuwic62.swift:27:33: note: to match this opening\
    \ '{'\nfunc pluck(arr: [Int]) -> [Int] {\n                                ^\n\
    /tmp/tmpaiuwic62.swift:140:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    var even: Int = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ % 2 == 0 {\n            even = arr[index]\n        }\n        if even > smallest\
    \ {\n            smallest = even\n            smallestIndex = index\n        }\n\
    \    }\n    result.append(smallest)\n    result.append(smallestIndex)\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: Exception
  stderr: 'tmpps37wjkg/tmpps37wjkg.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9be4c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9be1b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9be1b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9be1b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpps37wjkg                        0x000055a68091364c <unavailable> + 5708

    5    libc.so.6                          0x00002ad9be6ad460 __libc_start_main +
    245

    6    tmpps37wjkg                        0x000055a680913259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue > i {\n         \
    \       minValue = i\n                minIndex = i\n            }\n        } else\
    \ {\n            if minValue == i {\n                minIndex = i\n          \
    \  }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpe9ts5_sh/tmpe9ts5_sh.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9457940c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9457637b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9457637988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94576367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9ts5_sh                        0x0000563bfde826bc <unavailable> + 5820

    5    libc.so.6                          0x00002b9457b2c460 __libc_start_main +
    245

    6    tmpe9ts5_sh                        0x0000563bfde822c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestIndex = -1\n    var smallestValue = arr[0]\n\
    \    for i in arr {\n        if smallestValue > i {\n            smallestValue\
    \ = i\n            smallestIndex = i\n        }\n    }\n    result.append(smallestValue)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp8rj0us_u/tmp8rj0us_u.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b209f063c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b209ed5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b209ed5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b209ed597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rj0us_u                        0x000055ffd3b5e62c <unavailable> + 5676

    5    libc.so.6                          0x00002b209f24f460 __libc_start_main +
    245

    6    tmp8rj0us_u                        0x000055ffd3b5e239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    var index: Int = 0\n    for value in arr {\n        if value < smallest\
    \ {\n            smallest = value\n            smallestIndex = index\n       \
    \ }\n        if value == smallest {\n            result.append(value)\n      \
    \      index += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp5pqu3phq/tmp5pqu3phq.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19af5a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19af29ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19af29a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19af2997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5pqu3phq                        0x0000563bdda0c57c <unavailable> + 5500

    5    libc.so.6                          0x00002b19af78f460 __libc_start_main +
    245

    6    tmp5pqu3phq                        0x0000563bdda0c189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestEvenValue = arr[0]\n    var smallestIndex\
    \ = 0\n    var smallestIndexValue = 0\n    for index in 0..<arr.count {\n    \
    \    if arr[index] % 2 == 0 {\n            if smallestEvenValue < arr[index] {\n\
    \                smallestEvenValue = arr[index]\n                smallestIndex\
    \ = index\n                smallestIndexValue = arr[index]\n            }\n  \
    \      } else {\n            if smallestIndexValue < arr[index] {\n          \
    \      smallestIndexValue = arr[index]\n                smallestIndex = index\n\
    \            }\n        }\n    }\n    result.append(smallestEvenValue)\n    result.append(smallestIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmphb0_rwg3/tmphb0_rwg3.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f267f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f264e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f264e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f264e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphb0_rwg3                        0x000055c0f66c56ac <unavailable> + 5804

    5    libc.so.6                          0x00002b5f269dd460 __libc_start_main +
    245

    6    tmphb0_rwg3                        0x000055c0f66c52b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minValue == i {\n                minIndex = i\n     \
    \       }\n        }\n    }\n    result = [minValue, minIndex]\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp2dnbtya3/tmp2dnbtya3.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48487afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48484a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48484a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48484a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2dnbtya3                        0x00005649dcfb461c <unavailable> + 5660

    5    libc.so.6                          0x00002b484899b460 __libc_start_main +
    245

    6    tmp2dnbtya3                        0x00005649dcfb4229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ > arr[index] {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmplm84elkr/tmplm84elkr.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5308d13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5308a0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5308a0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5308a097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm84elkr                        0x0000557521c8476b <unavailable> + 5995

    5    libc.so.6                          0x00002b5308eff460 __libc_start_main +
    245

    6    tmplm84elkr                        0x0000557521c84259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minIndex == i {\n                minIndex = i\n     \
    \       }\n        }\n    }\n    result = [minValue, minIndex]\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpp244x599/tmpp244x599.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad959cc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9599bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9599bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9599ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp244x599                        0x000056018038a61c <unavailable> + 5660

    5    libc.so.6                          0x00002ad959eb0460 __libc_start_main +
    245

    6    tmpp244x599                        0x000056018038a229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minValue == i {\n                minIndex += 1\n    \
    \        }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp0cafu4u_/tmp0cafu4u_.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace176a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace1739fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace1739f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace1739e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0cafu4u_                        0x000055f0c3bf866c <unavailable> + 5740

    5    libc.so.6                          0x00002ace17894460 __libc_start_main +
    245

    6    tmp0cafu4u_                        0x000055f0c3bf8279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestEven = arr[0]\n    var smallestIndex = 0\n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if arr[index] < smallestEven {\n                smallestEven = arr[index]\n\
    \                smallestIndex = index\n            }\n        }\n    }\n    result.append(smallestEven)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpdjdyvwyy/tmpdjdyvwyy.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78ca331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ca028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ca028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ca0277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdjdyvwyy                        0x00005574331397cb <unavailable> + 6091

    5    libc.so.6                          0x00002b78ca51d460 __libc_start_main +
    245

    6    tmpdjdyvwyy                        0x00005574331392b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallestEvenValue: Int = 0\n    var smallestIndex:\
    \ Int = 0\n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n\
    \            if smallestEvenValue == 0 || arr[index] < smallestEvenValue {\n \
    \               smallestEvenValue = arr[index]\n                smallestIndex\
    \ = index\n            }\n        }\n    }\n    if smallestEvenValue != 0 {\n\
    \        result = [smallestEvenValue, smallestIndex]\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpxovjwfdq/tmpxovjwfdq.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abffe9eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abffe6e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abffe6e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abffe6e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxovjwfdq                        0x0000563b3cbd9954 <unavailable> + 6484

    5    libc.so.6                          0x00002abffebd6460 __libc_start_main +
    245

    6    tmpxovjwfdq                        0x0000563b3cbd91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minIndex == -1 || minValue < i {\n                minValue\
    \ = i\n                minIndex = i\n            }\n        }\n    }\n    if minIndex\
    \ == -1 {\n        return result\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpayodknqe/tmpayodknqe.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2a6a27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2a671eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2a671e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2a671d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayodknqe                        0x000055d9522706bc <unavailable> + 5820

    5    libc.so.6                          0x00002ab2a6c13460 __libc_start_main +
    245

    6    tmpayodknqe                        0x000055d9522702c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    var index = 0\n    \n    for element in arr {\n\
    \        if element % 2 == 0 {\n            result.append(element)\n        }\n\
    \    }\n    \n    if result.count == 0 {\n        return nil\n    }\n    \n  \
    \  if result.count == 1 {\n        return result\n    }\n    \n    if result.count\
    \ == 2 {\n        if result[0] < result[1] {\n            return result\n    \
    \    } else {\n            return nil\n        }\n    }\n    \n    if result.count\
    \ > 2 {\n        if result[0] < result[1] {\n            if result[1] < result[2]\
    \ {\n                return result\n            } else {\n                return\
    \ nil\n            }\n        } else {\n            if result[1] < result[2] {\n\
    \                return nil\n            } else {\n                return result\n\
    \            }\n        }\n    }\n    \n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpogegny_v.swift:39:16: error: 'nil' is incompatible with return\
    \ type '[Int]'\n        return nil\n               ^\n/tmp/tmpogegny_v.swift:50:20:\
    \ error: 'nil' is incompatible with return type '[Int]'\n            return nil\n\
    \                   ^\n/tmp/tmpogegny_v.swift:59:24: error: 'nil' is incompatible\
    \ with return type '[Int]'\n                return nil\n                     \
    \  ^\n/tmp/tmpogegny_v.swift:63:24: error: 'nil' is incompatible with return type\
    \ '[Int]'\n                return nil\n                       ^\n/tmp/tmpogegny_v.swift:70:12:\
    \ error: 'nil' is incompatible with return type '[Int]'\n    return nil\n    \
    \       ^\n"
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestValue = arr[0]\n    var smallestIndex = 0\n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if smallestValue == arr[index] {\n                smallestIndex = index\n\
    \            } else {\n                if smallestValue < arr[index] {\n     \
    \               smallestValue = arr[index]\n                    smallestIndex\
    \ = index\n                }\n            }\n        }\n    }\n    result.append(smallestValue)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp__kpo_8_/tmp__kpo_8_.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f47318c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f4700fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f4700f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f4700e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__kpo_8_                        0x000055ee4f6af6ac <unavailable> + 5804

    5    libc.so.6                          0x00002b0f47504460 __libc_start_main +
    245

    6    tmp__kpo_8_                        0x000055ee4f6af2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestEvenValue = arr[0]\n    var smallestIndex\
    \ = 0\n    for i in arr {\n        if smallestEvenValue == i {\n            smallestEvenValue\
    \ = i\n            smallestIndex = i\n        } else {\n            if smallestEvenValue\
    \ > i {\n                smallestEvenValue = i\n                smallestIndex\
    \ = i\n            }\n        }\n    }\n    result = [smallestEvenValue, smallestIndex]\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpz0ux4ilb/tmpz0ux4ilb.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab069df8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab069aefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab069aef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab069aee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz0ux4ilb                        0x000055f56dfef5dc <unavailable> + 5596

    5    libc.so.6                          0x00002ab069fe4460 __libc_start_main +
    245

    6    tmpz0ux4ilb                        0x000055f56dfef1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    var even: Bool = false\n    for i in arr {\n        if i % 2 == 0 {\n\
    \            even = true\n        } else {\n            even = false\n       \
    \ }\n        if even {\n            if smallest == 0 {\n                smallest\
    \ = i\n                smallestIndex = i\n            } else {\n             \
    \   if smallest > i {\n                    smallest = i\n                    smallestIndex\
    \ = i\n                }\n            }\n        } else {\n            if smallest\
    \ == 0 {\n                smallest = i\n                smallestIndex = i\n  \
    \          } else {\n                if smallest < i {\n                    smallest\
    \ = i\n                    smallestIndex = i\n                }\n            }\n\
    \        }\n    }\n    if smallest == 0 {\n        return result\n    } else {\n\
    \        return [smallest, smallestIndex]\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp17s6sj2v/tmp17s6sj2v.swift:80: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3aef8f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3aef5eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3aef5ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3aef5ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17s6sj2v                        0x0000556bcefd75bc <unavailable> + 5564

    5    libc.so.6                          0x00002b3aefae3460 __libc_start_main +
    245

    6    tmp17s6sj2v                        0x0000556bcefd71c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue > i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minValue == i {\n                minIndex = i\n     \
    \       }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpdg5vqqjm/tmpdg5vqqjm.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb87290c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb86f87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb86f87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb86f867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdg5vqqjm                        0x00005594c7c826bc <unavailable> + 5820

    5    libc.so.6                          0x00002afb8747c460 __libc_start_main +
    245

    6    tmpdg5vqqjm                        0x00005594c7c822c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n \
    \   \n    for i in 0..<arr.count {\n        if arr[i] < minValue {\n         \
    \   minValue = arr[i]\n            minIndex = i\n        }\n    }\n    \n    if\
    \ minIndex == -1 {\n        return result\n    }\n    \n    result.append(minValue)\n\
    \    result.append(minIndex)\n    \n    for i in 1..<arr.count {\n        if arr[i]\
    \ < minValue {\n            result.append(arr[i])\n            result.append(i)\n\
    \        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp73wt8ulh/tmp73wt8ulh.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9fd5c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9fd2c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9fd2c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9fd2bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp73wt8ulh                        0x00005557e07bd7cb <unavailable> + 6091

    5    libc.so.6                          0x00002ba9fd7b5460 __libc_start_main +
    245

    6    tmp73wt8ulh                        0x00005557e07bd2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue > i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minValue == i {\n                minIndex = i\n     \
    \       }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpdg5vqqjm/tmpdg5vqqjm.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb87290c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb86f87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb86f87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb86f867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdg5vqqjm                        0x00005594c7c826bc <unavailable> + 5820

    5    libc.so.6                          0x00002afb8747c460 __libc_start_main +
    245

    6    tmpdg5vqqjm                        0x00005594c7c822c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minValue = arr[0]\n    var minIndex = 0\n    \n    for i in 1..<arr.count\
    \ {\n        if arr[i] < minValue {\n            minValue = arr[i]\n         \
    \   minIndex = i\n        }\n    }\n    \n    return [minValue, minIndex]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpyv2mza2i/tmpyv2mza2i.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba34bea0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba34bb97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba34bb97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba34bb967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyv2mza2i                        0x0000556b7a60a70b <unavailable> + 5899

    5    libc.so.6                          0x00002ba34c08c460 __libc_start_main +
    245

    6    tmpyv2mza2i                        0x0000556b7a60a1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue == i {\n      \
    \          minIndex = i\n            } else {\n                result.append(i)\n\
    \            }\n        }\n    }\n    if minIndex == -1 {\n        return result\n\
    \    }\n    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpvokke9nd/tmpvokke9nd.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac21c566c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac21c25db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac21c25d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac21c25c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvokke9nd                        0x000055692e3996bc <unavailable> + 5820

    5    libc.so.6                          0x00002ac21c752460 __libc_start_main +
    245

    6    tmpvokke9nd                        0x000055692e3992c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestValue = arr[0]\n    var smallestIndex = 0\n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if smallestValue == arr[index] {\n                smallestIndex = index\n\
    \            } else {\n                if arr[index] < smallestValue {\n     \
    \               smallestValue = arr[index]\n                    smallestIndex\
    \ = index\n                }\n            }\n        }\n    }\n    result.append(smallestValue)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpv0g1piq3/tmpv0g1piq3.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04473b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04470adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04470ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04470ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0g1piq3                        0x00005655346467cb <unavailable> + 6091

    5    libc.so.6                          0x00002b04475a2460 __libc_start_main +
    245

    6    tmpv0g1piq3                        0x00005655346462b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ value in arr {\n        if value % 2 == 0 {\n            if value < minValue\
    \ {\n                minValue = value\n                minIndex = result.count\n\
    \            }\n            result[minIndex] = value\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9bed1b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9beceaf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9beceaf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9beceaf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9beceaebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9beccae7ec <unavailable> + 186348

    6    tmpipa8keci                        0x000055ee37eb521e <unavailable> + 8734

    7    tmpipa8keci                        0x000055ee37eb4634 <unavailable> + 5684

    8    libc.so.6                          0x00002b9bed3a4460 __libc_start_main +
    245

    9    tmpipa8keci                        0x000055ee37eb4319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestIndex = 0\n    var smallestValue = arr[0]\n\
    \    for i in arr {\n        if i % 2 == 0 {\n            if smallestValue ==\
    \ i {\n                smallestIndex = i\n            } else {\n             \
    \   smallestValue = i\n                smallestIndex = i\n            }\n    \
    \    } else {\n            if smallestIndex == i {\n                smallestIndex\
    \ = i\n            } else {\n                smallestValue = i\n             \
    \   smallestIndex = i\n            }\n        }\n    }\n    result.append(smallestValue)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp3lpzgh1g/tmp3lpzgh1g.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b114b0b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b114ada9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b114ada9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b114ada87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3lpzgh1g                        0x000055bb9110b6bc <unavailable> + 5820

    5    libc.so.6                          0x00002b114b29e460 __libc_start_main +
    245

    6    tmp3lpzgh1g                        0x000055bb9110b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    var index: Int = 0\n    for node in arr {\n        if smallestIndex ==\
    \ 0 || node < smallest {\n            smallest = node\n            smallestIndex\
    \ = index\n        }\n        index += 1\n    }\n    result.append(smallest)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmpti16ie/tmpmpti16ie.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accf6fe8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accf6cdfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accf6cdf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accf6cde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmpti16ie                        0x000055c73ef6f786 <unavailable> + 6022

    5    libc.so.6                          0x00002accf71d4460 __libc_start_main +
    245

    6    tmpmpti16ie                        0x000055c73ef6f189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue == i {\n      \
    \          minIndex = i\n            } else {\n                result.append(i)\n\
    \            }\n        }\n    }\n    if minIndex == -1 {\n        return result\n\
    \    }\n    result.insert(minIndex, minValue)\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmprixn1pz8.swift:43:12: error: no exact matches in call to instance\
    \ method 'insert'\n    result.insert(minIndex, minValue)\n           ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n         \
    \       minValue = i\n                minIndex = i\n            }\n        }\n\
    \    }\n    result.append(minValue)\n    result.append(minIndex)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpytdyu48w/tmpytdyu48w.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60484a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60481a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60481a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b604819f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpytdyu48w                        0x00005585227a76bc <unavailable> + 5820

    5    libc.so.6                          0x00002b6048695460 __libc_start_main +
    245

    6    tmpytdyu48w                        0x00005585227a72c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ == arr[index] {\n                minIndex = index\n            } else {\n  \
    \              minValue = arr[index]\n                minIndex = index\n     \
    \       }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bfdc72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bfd969561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0bfd969286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0bfd96913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0bfd968bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0bfd768e83 <unavailable> + 188035

    6    tmpu0zeeq32                        0x0000562888419f9b <unavailable> + 8091

    7    tmpu0zeeq32                        0x000056288841978e <unavailable> + 6030

    8    libc.so.6                          0x00002b0bfde5e460 __libc_start_main +
    245

    9    tmpu0zeeq32                        0x0000562888419259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n    \
    \        if smallest == 0 || arr[index] < smallest {\n                smallest\
    \ = arr[index]\n                smallestIndex = index\n            }\n       \
    \ }\n    }\n    result.append(smallest)\n    result.append(smallestIndex)\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmptq9ky9t0/tmptq9ky9t0.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc120a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc11d9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc11d9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc11d9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptq9ky9t0                        0x0000560705c25856 <unavailable> + 6230

    5    libc.so.6                          0x00002afc12290460 __libc_start_main +
    245

    6    tmptq9ky9t0                        0x0000560705c25259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpu9qm7_zb/tmpu9qm7_zb.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3910bc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39108bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39108bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39108ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu9qm7_zb                        0x0000563a4096076b <unavailable> + 5995

    5    libc.so.6                          0x00002b3910db0460 __libc_start_main +
    245

    6    tmpu9qm7_zb                        0x0000563a40960259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    var minIndex2\
    \ = 0\n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n  \
    \          if arr[index] < minValue {\n                minValue = arr[index]\n\
    \                minIndex = index\n            }\n            if arr[index] <\
    \ minValue {\n                minValue = arr[index]\n                minIndex2\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    result.append(minIndex2)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp3wjg3_9c/tmp3wjg3_9c.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4844f3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4844c33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4844c33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4844c327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3wjg3_9c                        0x0000557a2b1606ac <unavailable> + 5804

    5    libc.so.6                          0x00002b4845128460 __libc_start_main +
    245

    6    tmp3wjg3_9c                        0x0000557a2b1602b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestValue = arr[0]\n    var smallestIndex = 0\n\
    \    var index = 0\n    for value in arr {\n        if value < smallestValue {\n\
    \            smallestValue = value\n            smallestIndex = index\n      \
    \  }\n        index += 1\n    }\n    result.append(smallestValue)\n    result.append(smallestIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmppvtxhccz/tmppvtxhccz.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b104b66bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b104b362b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b104b362988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b104b3617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvtxhccz                        0x0000560c6f0e474b <unavailable> + 5963

    5    libc.so.6                          0x00002b104b857460 __libc_start_main +
    245

    6    tmppvtxhccz                        0x0000560c6f0e4239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013660
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ index in 0..<arr.count {\n        if arr[index] % 2 == 0 && arr[index] < minValue\
    \ {\n            minValue = arr[index]\n            minIndex = index\n       \
    \ }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: Exception
  stderr: 'tmpgsp3651_/tmpgsp3651_.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e8e1ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e8def6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e8def6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e8def57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgsp3651_                        0x000055c8609b776b <unavailable> + 5995

    5    libc.so.6                          0x00002b4e8e3eb460 __libc_start_main +
    245

    6    tmpgsp3651_                        0x000055c8609b7259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013660
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n         \
    \       minValue = i\n                minIndex = i\n            }\n        } else\
    \ {\n            if minValue == i {\n                minIndex = i\n          \
    \  }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmplvgxr3u7/tmplvgxr3u7.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb31944c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb3163bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb3163b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb3163a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvgxr3u7                        0x0000558cf4a5d6bc <unavailable> + 5820

    5    libc.so.6                          0x00002abb31b30460 __libc_start_main +
    245

    6    tmplvgxr3u7                        0x0000558cf4a5d2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue == i {\n      \
    \          minIndex = i\n            } else {\n                minValue = i\n\
    \                minIndex = i\n            }\n        } else {\n            if\
    \ minValue == i {\n                minIndex = i\n            } else {\n      \
    \          minValue = i\n            }\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp9hsm4e5b/tmp9hsm4e5b.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b042af6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b042ac65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b042ac65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b042ac647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9hsm4e5b                        0x0000564f76dc96bc <unavailable> + 5820

    5    libc.so.6                          0x00002b042b15a460 __libc_start_main +
    245

    6    tmp9hsm4e5b                        0x0000564f76dc92c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013660
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n         \
    \       minValue = i\n                minIndex = i\n            }\n        } else\
    \ {\n            if minValue == i {\n                minIndex = i\n          \
    \  }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmplvgxr3u7/tmplvgxr3u7.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb31944c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb3163bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb3163b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb3163a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvgxr3u7                        0x0000558cf4a5d6bc <unavailable> + 5820

    5    libc.so.6                          0x00002abb31b30460 __libc_start_main +
    245

    6    tmplvgxr3u7                        0x0000558cf4a5d2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    var evenCount\
    \ = 0\n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n  \
    \          evenCount += 1\n            if evenCount == minValue {\n          \
    \      minIndex = index\n                minValue = arr[index]\n            }\n\
    \        } else {\n            evenCount = 0\n        }\n    }\n    if minValue\
    \ == arr[0] {\n        return arr\n    }\n    if minIndex == arr.count {\n   \
    \     return arr\n    }\n    result.insert(minIndex, minValue)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpb9mx7_7q.swift:49:12: error: no exact matches in call to instance\
    \ method 'insert'\n    result.insert(minIndex, minValue)\n           ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1660013659
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ minValue = arr[0]\n    var minIndex = 0\n    var minIndex2 = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n            if arr[index] < minValue2 {\n          \
    \      minValue2 = arr[index]\n                minIndex2 = index\n           \
    \ }\n        }\n    }\n    return [minValue, minIndex2]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcb3gmkz3.swift:37:29: error: cannot find 'minValue2' in scope\n\
    \            if arr[index] < minValue2 {\n                            ^~~~~~~~~\n\
    /tmp/tmpcb3gmkz3.swift:38:17: error: cannot find 'minValue2' in scope\n      \
    \          minValue2 = arr[index]\n                ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013659
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue > i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minIndex == -1 || minValue > i {\n                minValue\
    \ = i\n                minIndex = i\n            }\n        }\n    }\n    if minIndex\
    \ == -1 {\n        return result\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp4pm9aez1/tmp4pm9aez1.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50c30f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50c2df0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50c2df0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50c2def7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4pm9aez1                        0x000055b4bc5ea6bc <unavailable> + 5820

    5    libc.so.6                          0x00002b50c32e5460 __libc_start_main +
    245

    6    tmp4pm9aez1                        0x000055b4bc5ea2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013660
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    var even: Bool = false\n    for index in 0..<arr.count {\n        if\
    \ arr[index] % 2 == 0 {\n            even = true\n        } else {\n         \
    \   even = false\n        }\n        if even {\n            if smallest == 0 {\n\
    \                smallest = arr[index]\n                smallestIndex = index\n\
    \            } else {\n                if arr[index] < smallest {\n          \
    \          smallest = arr[index]\n                    smallestIndex = index\n\
    \                }\n            }\n        }\n    }\n    if smallest != 0 {\n\
    \        result = [smallest, smallestIndex]\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpa17atl18/tmpa17atl18.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2be4032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2be3d29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2be3d29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2be3d287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa17atl18                        0x000055848ccb4954 <unavailable> + 6484

    5    libc.so.6                          0x00002b2be421e460 __libc_start_main +
    245

    6    tmpa17atl18                        0x000055848ccb41f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013660
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ minValue = arr[0]\n    var minIndex = 0\n    var minIndex2 = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n            if arr[index] < minIndex2 {\n          \
    \      minIndex2 = index\n            }\n        }\n    }\n    return [minValue,\
    \ minIndex2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpplcxthcz/tmpplcxthcz.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6aff154c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6afee4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6afee4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6afee4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpplcxthcz                        0x00005612914c65ec <unavailable> + 5612

    5    libc.so.6                          0x00002b6aff340460 __libc_start_main +
    245

    6    tmpplcxthcz                        0x00005612914c61f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013660
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallestEvenIndex = 0\n    var smallestEvenValue\
    \ = 0\n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n  \
    \          if smallestEvenValue == 0 || arr[index] < smallestEvenValue {\n   \
    \             smallestEvenValue = arr[index]\n                smallestEvenIndex\
    \ = index\n            }\n        }\n    }\n    if smallestEvenValue != 0 {\n\
    \        result = [smallestEvenValue, smallestEvenIndex]\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpse_huk84/tmpse_huk84.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b395438ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3954081b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3954081988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39540807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpse_huk84                        0x0000560e65e0e954 <unavailable> + 6484

    5    libc.so.6                          0x00002b3954576460 __libc_start_main +
    245

    6    tmpse_huk84                        0x0000560e65e0e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013660
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n    \
    \        if smallest == 0 || arr[index] < smallest {\n                smallest\
    \ = arr[index]\n                smallestIndex = index\n            }\n       \
    \ }\n    }\n    if smallest != 0 {\n        result = [smallest, smallestIndex]\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpoasxonps/tmpoasxonps.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b75d64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b75a5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b75a5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b75a5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoasxonps                        0x0000561cb7000954 <unavailable> + 6484

    5    libc.so.6                          0x00002b2b75f50460 __libc_start_main +
    245

    6    tmpoasxonps                        0x0000561cb70001f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013658
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n  \
    \  \n    for i in arr {\n        if i % 2 == 0 {\n            if minValue < i\
    \ {\n                minValue = i\n                minIndex = i\n            }\n\
    \        } else {\n            if minValue == i {\n                minIndex +=\
    \ 1\n            }\n        }\n    }\n    \n    if minIndex == 0 {\n        return\
    \ result\n    }\n    \n    if minIndex == arr.count {\n        return result\n\
    \    }\n    \n    if minIndex < arr.count {\n        result.insert(minIndex, minValue)\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmphcpto_8y.swift:55:16: error: no exact matches in call to instance\
    \ method 'insert'\n        result.insert(minIndex, minValue)\n               ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue > i {\n         \
    \       minValue = i\n                minIndex = i\n            }\n        } else\
    \ {\n            if minValue == i {\n                minIndex += 1\n         \
    \   }\n        }\n    }\n    if minIndex == 0 {\n        return result\n    }\n\
    \    if minIndex == arr.count {\n        return [minValue, minIndex]\n    }\n\
    \    if minIndex > arr.count {\n        return result\n    }\n    if minValue\
    \ == arr[0] {\n        return [minValue, minIndex]\n    }\n    if minValue ==\
    \ arr[arr.count-1] {\n        return [minValue, minIndex-1]\n    }\n    if minValue\
    \ > arr[arr.count-1] {\n        return result\n    }\n    if minValue < arr[0]\
    \ {\n        return result\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmptbdjdflo/tmptbdjdflo.swift:80: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53af0f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53aedebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53aedeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53aedea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptbdjdflo                        0x00005596c13ac6bc <unavailable> + 5820

    5    libc.so.6                          0x00002b53af2e0460 __libc_start_main +
    245

    6    tmptbdjdflo                        0x00005596c13ac2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013660
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    var index: Int = 0\n    for n in arr {\n        if n % 2 == 0 {\n   \
    \         if smallest == 0 || n < smallest {\n                smallest = n\n \
    \               smallestIndex = index\n            }\n            index += 1\n\
    \        } else {\n            if smallest != 0 {\n                result.append(smallest)\n\
    \                smallest = 0\n                smallestIndex = 0\n           \
    \ }\n        }\n    }\n    if smallest != 0 {\n        result.append(smallest)\n\
    \        smallest = 0\n        smallestIndex = 0\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp5jgqzdk0/tmp5jgqzdk0.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cbdff7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cbdceeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cbdcee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cbdced7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5jgqzdk0                        0x000055ea9fcfc61c <unavailable> + 5660

    5    libc.so.6                          0x00002b6cbe1e3460 __libc_start_main +
    245

    6    tmp5jgqzdk0                        0x000055ea9fcfc229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013660
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
    \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minIndex == -1 || minValue < i {\n                minValue\
    \ = i\n                minIndex = i\n            }\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp9x0fvb40/tmp9x0fvb40.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3290d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad328dceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad328dce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad328dcd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9x0fvb40                        0x000055b2617746bc <unavailable> + 5820

    5    libc.so.6                          0x00002ad3292c3460 __libc_start_main +
    245

    6    tmp9x0fvb40                        0x000055b2617742c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013658
