language: swift
name: HumanEval_137_compare_one
results:
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n            return aInt > bInt || aDouble > bDouble\
    \ || aString > bString\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp7_vun98a.swift:18:31: error: cannot find 'aInt' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                            ^~~~\n/tmp/tmp7_vun98a.swift:18:51: error: cannot\
    \ find 'aDouble' in scope\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n                                                  ^~~~~~~\n\
    /tmp/tmp7_vun98a.swift:18:74: error: cannot find 'aString' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                                                                       ^~~~~~~\n\
    /tmp/tmp7_vun98a.swift:19:35: error: cannot find 'bInt' in scope\n        switch\
    \ b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n  \
    \                                ^~~~\n/tmp/tmp7_vun98a.swift:19:55: error: cannot\
    \ find 'bDouble' in scope\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n                                                   \
    \   ^~~~~~~\n/tmp/tmp7_vun98a.swift:19:78: error: cannot find 'bString' in scope\n\
    \        switch b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n\
    \                                                                            \
    \ ^~~~~~~\n/tmp/tmp7_vun98a.swift:20:20: error: cannot find 'aInt' in scope\n\
    \            return aInt > bInt || aDouble > bDouble || aString > bString\n  \
    \                 ^~~~\n/tmp/tmp7_vun98a.swift:20:27: error: cannot find 'bInt'\
    \ in scope\n            return aInt > bInt || aDouble > bDouble || aString > bString\n\
    \                          ^~~~\n/tmp/tmp7_vun98a.swift:20:35: error: cannot find\
    \ 'aDouble' in scope\n            return aInt > bInt || aDouble > bDouble || aString\
    \ > bString\n                                  ^~~~~~~\n/tmp/tmp7_vun98a.swift:20:45:\
    \ error: cannot find 'bDouble' in scope\n            return aInt > bInt || aDouble\
    \ > bDouble || aString > bString\n                                           \
    \ ^~~~~~~\n/tmp/tmp7_vun98a.swift:20:56: error: cannot find 'aString' in scope\n\
    \ "
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        switch b { // Compare two integers\n        case .intValue(_):\n    \
    \        return a\n        case .doubleValue(_):\n            return b\n     \
    \   case .stringValue(_):\n            return b\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Compare two doubles\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { // Compare two strings\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return b\n        }\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: Exception
  stderr: 'tmpd6fg4wa3/tmpd6fg4wa3.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba22dea8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba22db9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba22db9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba22db9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd6fg4wa3                        0x000055f29c751a56 <unavailable> + 6742

    5    libc.so.6                          0x00002ba22e094460 __libc_start_main +
    245

    6    tmpd6fg4wa3                        0x000055f29c751499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // case Int\n    case .intValue(_):\n   \
    \     switch b { // case Int\n        case .intValue(_):\n            return a\n\
    \        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // case Double\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // case String\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmp9cfzgw95/tmp9cfzgw95.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acea861dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acea8314b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acea8314988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acea83137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9cfzgw95                        0x00005616c52a8a56 <unavailable> + 6742

    5    libc.so.6                          0x00002acea8809460 __libc_start_main +
    245

    6    tmp9cfzgw95                        0x00005616c52a8499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n            return aInt > bInt ? b : a\n        default:\
    \ return b\n        }\n    default: return a\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp29nhk_uu.swift:18:31: error: cannot find 'aInt' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                            ^~~~\n/tmp/tmp29nhk_uu.swift:18:51: error: cannot\
    \ find 'aDouble' in scope\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n                                                  ^~~~~~~\n\
    /tmp/tmp29nhk_uu.swift:18:74: error: cannot find 'aString' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                                                                       ^~~~~~~\n\
    /tmp/tmp29nhk_uu.swift:19:35: error: cannot find 'bInt' in scope\n        switch\
    \ b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n  \
    \                                ^~~~\n/tmp/tmp29nhk_uu.swift:19:55: error: cannot\
    \ find 'bDouble' in scope\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n                                                   \
    \   ^~~~~~~\n/tmp/tmp29nhk_uu.swift:19:78: error: cannot find 'bString' in scope\n\
    \        switch b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n\
    \                                                                            \
    \ ^~~~~~~\n/tmp/tmp29nhk_uu.swift:20:20: error: cannot find 'aInt' in scope\n\
    \            return aInt > bInt ? b : a\n                   ^~~~\n/tmp/tmp29nhk_uu.swift:20:27:\
    \ error: cannot find 'bInt' in scope\n            return aInt > bInt ? b : a\n\
    \                          ^~~~\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        switch b { // Compare two values\n        case .intValue(_):\n      \
    \      return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Compare two values\n\
    \        case .intValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Compare two values\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpx3ecbu37.swift:22:41: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n            return .intValue(a.intValue > b.intValue)\n\
    \                                        ^\n/tmp/tmpx3ecbu37.swift:22:30: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue)\n                             ^\n       \
    \                      Value\n/tmp/tmpx3ecbu37.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue)\n                                        ^\n/tmp/tmpx3ecbu37.swift:22:41:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n            return .intValue(a.intValue > b.intValue)\n         \
    \                               ^\n/tmp/tmpx3ecbu37.swift:22:41: note: required\
    \ by referencing operator function '>' on 'Comparable' where 'Self' = '(Int) ->\
    \ Value'\n            return .intValue(a.intValue > b.intValue)\n            \
    \                            ^\n/tmp/tmpx3ecbu37.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue)\n                                          ^\n               \
    \                           Value\n/tmp/tmpx3ecbu37.swift:24:47: error: cannot\
    \ convert value of type 'Bool' to expected argument type 'Double'\n          \
    \  return .doubleValue(a.doubleValue > b.doubleValue)\n                      \
    \                        ^\n/tmp/tmpx3ecbu37.swift:24:33: error: enum case 'doubleValue'\
    \ cannot be used as an instance member\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n                                ^\n                      \
    \          Value\n/tmp/tmpx3ecbu37.swift:24:47: error: type '(Double) -> Value'\
    \ cannot conform to 'Comparable'\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n                                              ^\n/tmp/tmpx3ecbu37.swift:24:47:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ proto"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        return b == .intValue(a) ? .intValue(a) : .intValue(b)\n    case .doubleValue(_):\n\
    \        return b == .doubleValue(a) ? .doubleValue(a) : .doubleValue(b)\n   \
    \ case .stringValue(_):\n        return b == .stringValue(a) ? .stringValue(a)\
    \ : .stringValue(b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpg12m0whn.swift:20:31: error: cannot convert value of type 'Value'\
    \ to expected argument type 'Int'\n        return b == .intValue(a) ? .intValue(a)\
    \ : .intValue(b)\n                              ^\n/tmp/tmpg12m0whn.swift:20:46:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Int'\n\
    \        return b == .intValue(a) ? .intValue(a) : .intValue(b)\n            \
    \                                 ^\n/tmp/tmpg12m0whn.swift:20:61: error: cannot\
    \ convert value of type 'Value' to expected argument type 'Int'\n        return\
    \ b == .intValue(a) ? .intValue(a) : .intValue(b)\n                          \
    \                                  ^\n/tmp/tmpg12m0whn.swift:22:34: error: cannot\
    \ convert value of type 'Value' to expected argument type 'Double'\n        return\
    \ b == .doubleValue(a) ? .doubleValue(a) : .doubleValue(b)\n                 \
    \                ^\n/tmp/tmpg12m0whn.swift:22:52: error: cannot convert value\
    \ of type 'Value' to expected argument type 'Double'\n        return b == .doubleValue(a)\
    \ ? .doubleValue(a) : .doubleValue(b)\n                                      \
    \             ^\n/tmp/tmpg12m0whn.swift:22:70: error: cannot convert value of\
    \ type 'Value' to expected argument type 'Double'\n        return b == .doubleValue(a)\
    \ ? .doubleValue(a) : .doubleValue(b)\n                                      \
    \                               ^\n/tmp/tmpg12m0whn.swift:24:34: error: cannot\
    \ convert value of type 'Value' to expected argument type 'String'\n        return\
    \ b == .stringValue(a) ? .stringValue(a) : .stringValue(b)\n                 \
    \                ^\n/tmp/tmpg12m0whn.swift:24:52: error: cannot convert value\
    \ of type 'Value' to expected argument type 'String'\n        return b == .stringValue(a)\
    \ ? .stringValue(a) : .stringValue(b)\n                                      \
    \             ^\n/tmp/tmpg12m0whn.swift:24:70: error: cannot convert value of\
    \ type 'Value' to expected argument type 'String'\n        return b == .stringValue(a)\
    \ ? .stringValue(a) : .stringValue(b)\n                                      \
    \                             "
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a\n    case .intValue(_):\n\
    \        switch b { // Switch on b\n        case .intValue(_):\n            return\
    \ a > b ? a : b\n        case .doubleValue(_):\n            return a > b ? b :\
    \ a\n        case .stringValue(_):\n            return a > b ? b : a\n       \
    \ }\n    case .doubleValue(_):\n        switch b { // Switch on b\n        case\
    \ .intValue(_):\n            return a > b ? b : a\n        case .doubleValue(_):\n\
    \            return a > b ? a : b\n        case .stringValue(_):\n           \
    \ return a > b ? a : b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // Switch on b\n        case .intValue(_):\n            return a > b ? b :\
    \ a\n        case .doubleValue(_):\n            return a > b ? a : b\n       \
    \ case .stringValue(_):\n            return a > b ? a : b\n        }\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1),\
    \ b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpn06eyxq7.swift:22:22: error: referencing operator function '>'\
    \ on 'Comparable' requires that 'Value' conform to 'Comparable'\n            return\
    \ a > b ? a : b\n                     ^\nSwift.Comparable:1:17: note: where 'Self'\
    \ = 'Value'\npublic protocol Comparable : Equatable {\n                ^\n/tmp/tmpn06eyxq7.swift:22:22:\
    \ note: binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? a : b\n                     ^\n/tmp/tmpn06eyxq7.swift:24:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? b : a\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmpn06eyxq7.swift:24:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? b : a\n                     ^\n/tmp/tmpn06eyxq7.swift:26:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? b : a\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmpn06eyxq7.swift:26:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? b : a\n                     ^\n/tmp/tmpn06eyxq7.swift:31:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? b : a\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmpn06eyxq7.swift:31:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? b : a\n                     ^\n/tmp/tmpn06eyxq7.swift:33:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? a : b\n              "
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is Int\n    case .intValue(_):\n   \
    \     switch b { // b is Int\n        case .intValue(_):\n            return a\n\
    \        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is Double\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is String\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpqo15u7gt/tmpqo15u7gt.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf67f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf64eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf64ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf64ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqo15u7gt                        0x00005578b487aa56 <unavailable> + 6742

    5    libc.so.6                          0x00002b9cf69e3460 __libc_start_main +
    245

    6    tmpqo15u7gt                        0x00005578b487a499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // TODO: switch on type\n    case .intValue(_):\n\
    \        switch b { // TODO: switch on type\n        case .intValue(_):\n    \
    \        return a\n        case .doubleValue(_):\n            return b\n     \
    \   case .stringValue(_):\n            return b\n        }\n    case .doubleValue(_):\n\
    \        switch b { // TODO: switch on type\n        case .intValue(_):\n    \
    \        return a\n        case .doubleValue(_):\n            return b\n     \
    \   case .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { // TODO: switch on type\n        case .intValue(_):\n    \
    \        return a\n        case .doubleValue(_):\n            return b\n     \
    \   case .stringValue(_):\n            return b\n        }\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1),\
    \ b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: Exception
  stderr: 'tmp7v8iv9y7/tmp7v8iv9y7.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f8d62bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f8d322b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f8d322988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f8d3217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7v8iv9y7                        0x0000561300508a56 <unavailable> + 6742

    5    libc.so.6                          0x00002b2f8d817460 __libc_start_main +
    245

    6    tmp7v8iv9y7                        0x0000561300508499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ b\n        case .doubleValue(_):\n            return a\n        case .stringValue(_):\n\
    \            return a\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return b\n      \
    \  case .doubleValue(_):\n            return a\n        case .stringValue(_):\n\
    \            return a\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return b\n      \
    \  case .doubleValue(_):\n            return a\n        case .stringValue(_):\n\
    \            return a\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpvwkau1cm/tmpvwkau1cm.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39202ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b391ffe3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b391ffe3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b391ffe27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvwkau1cm                        0x0000560434e45d54 <unavailable> + 7508

    5    libc.so.6                          0x00002b39204d8460 __libc_start_main +
    245

    6    tmpvwkau1cm                        0x0000560434e45499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // TODO: switch on type\n    case .intValue(_):\n\
    \        return b == .intValue(a)\n    case .doubleValue(_):\n        return b\
    \ == .doubleValue(a)\n    case .stringValue(_):\n        return b == .stringValue(a)\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpjci3nhqs.swift:20:18: error: cannot convert return expression of\
    \ type 'Bool' to return type 'Value?'\n        return b == .intValue(a)\n    \
    \           ~~^~~~~~~~~~~~~~~\n/tmp/tmpjci3nhqs.swift:20:31: error: cannot convert\
    \ value of type 'Value' to expected argument type 'Int'\n        return b == .intValue(a)\n\
    \                              ^\n/tmp/tmpjci3nhqs.swift:22:18: error: cannot\
    \ convert return expression of type 'Bool' to return type 'Value?'\n        return\
    \ b == .doubleValue(a)\n               ~~^~~~~~~~~~~~~~~~~~\n/tmp/tmpjci3nhqs.swift:22:34:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Double'\n\
    \        return b == .doubleValue(a)\n                                 ^\n/tmp/tmpjci3nhqs.swift:24:18:\
    \ error: cannot convert return expression of type 'Bool' to return type 'Value?'\n\
    \        return b == .stringValue(a)\n               ~~^~~~~~~~~~~~~~~~~~\n/tmp/tmpjci3nhqs.swift:24:34:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \        return b == .stringValue(a)\n                                 ^\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // case Int\n    case .intValue(_):\n   \
    \     switch b { // case Int\n        case .intValue(_):\n            return a\n\
    \        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // case Double\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // case String\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmp9cfzgw95/tmp9cfzgw95.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acea861dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acea8314b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acea8314988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acea83137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9cfzgw95                        0x00005616c52a8a56 <unavailable> + 6742

    5    libc.so.6                          0x00002acea8809460 __libc_start_main +
    245

    6    tmp9cfzgw95                        0x00005616c52a8499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // case Int\n    case .intValue(_):\n   \
    \     return b == .intValue(_) ? .intValue(_) : .stringValue(_)\n    case .doubleValue(_):\n\
    \        return b == .doubleValue(_) ? .doubleValue(_) : .stringValue(_)\n   \
    \ case .stringValue(_):\n        return b == .stringValue(_) ? .stringValue(_)\
    \ : .intValue(_)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpzryiqt05.swift:20:31: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n        return b == .intValue(_) ? .intValue(_)\
    \ : .stringValue(_)\n                              ^\n/tmp/tmpzryiqt05.swift:22:34:\
    \ error: '_' can only appear in a pattern or on the left side of an assignment\n\
    \        return b == .doubleValue(_) ? .doubleValue(_) : .stringValue(_)\n   \
    \                              ^\n/tmp/tmpzryiqt05.swift:24:34: error: '_' can\
    \ only appear in a pattern or on the left side of an assignment\n        return\
    \ b == .stringValue(_) ? .stringValue(_) : .intValue(_)\n                    \
    \             ^\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n            return aInt > bInt ? b : a\n        default:\n\
    \            return b\n        }\n    default:\n        return b\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp8qabid33.swift:18:31: error: cannot find 'aInt' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                            ^~~~\n/tmp/tmp8qabid33.swift:18:51: error: cannot\
    \ find 'aDouble' in scope\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n                                                  ^~~~~~~\n\
    /tmp/tmp8qabid33.swift:18:74: error: cannot find 'aString' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                                                                       ^~~~~~~\n\
    /tmp/tmp8qabid33.swift:19:35: error: cannot find 'bInt' in scope\n        switch\
    \ b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n  \
    \                                ^~~~\n/tmp/tmp8qabid33.swift:19:55: error: cannot\
    \ find 'bDouble' in scope\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n                                                   \
    \   ^~~~~~~\n/tmp/tmp8qabid33.swift:19:78: error: cannot find 'bString' in scope\n\
    \        switch b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n\
    \                                                                            \
    \ ^~~~~~~\n/tmp/tmp8qabid33.swift:20:20: error: cannot find 'aInt' in scope\n\
    \            return aInt > bInt ? b : a\n                   ^~~~\n/tmp/tmp8qabid33.swift:20:27:\
    \ error: cannot find 'bInt' in scope\n            return aInt > bInt ? b : a\n\
    \                          ^~~~\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue:\n\
    \        switch b { // Switch on b's type\n        case .intValue:\n         \
    \   return a.intValue > b.intValue ? a : b\n        case .doubleValue:\n     \
    \       return a.doubleValue > b.doubleValue ? a : b\n        case .stringValue:\n\
    \            return a.stringValue > b.stringValue ? a : b\n        }\n    case\
    \ .doubleValue:\n        switch b { // Switch on b's type\n        case .intValue:\n\
    \            return a.doubleValue > b.intValue ? a : b\n        case .doubleValue:\n\
    \            return a.doubleValue > b.doubleValue ? a : b\n        case .stringValue:\n\
    \            return a.doubleValue > b.stringValue ? a : b\n        }\n    case\
    \ .stringValue:\n        switch b { // Switch on b's type\n        case .intValue:\n\
    \            return a.stringValue > b.intValue ? a : b\n        case .doubleValue:\n\
    \            return a.stringValue > b.doubleValue ? a : b\n        case .stringValue:\n\
    \            return a.stringValue > b.stringValue ? a : b\n        }\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1),\
    \ b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp9amjf0rd.swift:22:20: error: enum case 'intValue' cannot be used\
    \ as an instance member\n            return a.intValue > b.intValue ? a : b\n\
    \                   ^\n                   Value\n/tmp/tmp9amjf0rd.swift:22:31:\
    \ error: type '(Int) -> Value' cannot conform to 'Comparable'\n            return\
    \ a.intValue > b.intValue ? a : b\n                              ^\n/tmp/tmp9amjf0rd.swift:22:31:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n            return a.intValue > b.intValue ? a : b\n            \
    \                  ^\n/tmp/tmp9amjf0rd.swift:22:31: note: required by referencing\
    \ operator function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n    \
    \        return a.intValue > b.intValue ? a : b\n                            \
    \  ^\n/tmp/tmp9amjf0rd.swift:22:33: error: enum case 'intValue' cannot be used\
    \ as an instance member\n            return a.intValue > b.intValue ? a : b\n\
    \                                ^\n                                Value\n/tmp/tmp9amjf0rd.swift:24:20:\
    \ error: enum case 'doubleValue' cannot be used as an instance member\n      \
    \      return a.doubleValue > b.doubleValue ? a : b\n                   ^\n  \
    \                 Value\n/tmp/tmp9amjf0rd.swift:24:34: error: type '(Double) ->\
    \ Value' cannot conform to 'Comparable'\n            return a.doubleValue > b.doubleValue\
    \ ? a : b\n                                 ^\n/tmp/tmp9amjf0rd.swift:24:34: note:\
    \ only concrete types such as structs, enums and classes can conform to protocols\n\
    \            return a.doubleValue > b.doubleValue ? a : b\n                  \
    \               ^\n/tmp/tmp9amjf0rd.swift:24:34: note: required by referencing\
    \ operator function '>' on 'Comparable' where 'Self' = '(Double) -> Value'\n \
    \           return a.doubleValue > b.doubleValue ? a : b\n                   \
    \              ^\n/tmp/tmp9amjf0rd.swift:24:36: error: enum case 'doubleValue'\
    \ cannot be used as an instance member\n            return a.doubleValue > b.doubleValue\
    \ ? a : b\n                                   ^\n                            \
    \       Value\n/"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(aInt):\n\
    \        switch b { // Compare two integers\n        case .intValue(bInt):\n \
    \           return bInt\n        case .doubleValue(bDouble):\n            return\
    \ bDouble\n        case .stringValue(bString):\n            if let bDouble = Double(bString)\
    \ {\n                return bDouble\n            }\n            return bString\n\
    \        }\n    case .doubleValue(aDouble):\n        switch b { // Compare two\
    \ doubles\n        case .intValue(bInt):\n            return bInt\n        case\
    \ .doubleValue(bDouble):\n            return bDouble\n        case .stringValue(bString):\n\
    \            if let bDouble = Double(bString) {\n                return bDouble\n\
    \            }\n            return bString\n        }\n    case .stringValue(aString):\n\
    \        switch b { // Compare two strings\n        case .intValue(bInt):\n  \
    \          return bInt\n        case .doubleValue(bDouble):\n            return\
    \ bDouble\n        case .stringValue(bString):\n            return bString\n \
    \       }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpdmcqeu6v.swift:19:20: error: cannot find 'aInt' in scope\n    case\
    \ .intValue(aInt):\n                   ^~~~\n/tmp/tmpdmcqeu6v.swift:31:23: error:\
    \ cannot find 'aDouble' in scope\n    case .doubleValue(aDouble):\n          \
    \            ^~~~~~~\n/tmp/tmpdmcqeu6v.swift:43:23: error: cannot find 'aString'\
    \ in scope\n    case .stringValue(aString):\n                      ^~~~~~~\n/tmp/tmpdmcqeu6v.swift:21:24:\
    \ error: cannot find 'bInt' in scope\n        case .intValue(bInt):\n        \
    \               ^~~~\n/tmp/tmpdmcqeu6v.swift:23:27: error: cannot find 'bDouble'\
    \ in scope\n        case .doubleValue(bDouble):\n                          ^~~~~~~\n\
    /tmp/tmpdmcqeu6v.swift:25:27: error: cannot find 'bString' in scope\n        case\
    \ .stringValue(bString):\n                          ^~~~~~~\n/tmp/tmpdmcqeu6v.swift:22:20:\
    \ error: cannot find 'bInt' in scope\n            return bInt\n              \
    \     ^~~~\n/tmp/tmpdmcqeu6v.swift:24:20: error: cannot find 'bDouble' in scope\n\
    \            return bDouble\n                   ^~~~~~~\n/tmp/tmpdmcqeu6v.swift:26:37:\
    \ error: cannot find 'bString' in scope\n            if let bDouble = Double(bString)\
    \ {\n                                    ^~~~~~~\n/tmp/tmpdmcqeu6v.swift:29:20:\
    \ error: cannot find 'bString' in scope\n            return bString\n        \
    \           ^~~~~~~\n/tmp/tmpdmcqeu6v.swift:33:24: error: cannot find 'bInt' in\
    \ scope\n        case .intValue(bInt):\n                       ^~~~\n/tmp/tmpdmcqeu6v.swift:35:27:\
    \ error: cannot find 'bDouble' in scope\n        case .doubleValue(bDouble):\n\
    \                          ^~~~~~~\n/tmp/tmpdmcqeu6v.swift:37:27: error: cannot\
    \ find 'bString' in scope\n        case .stringValue(bString):\n             \
    \             ^~~~~~~\n/tmp/tmpdmcqeu6v.swift:34:20: error: cannot find 'bInt'\
    \ in scope\n            return bInt\n                   ^~~~\n/tmp/tmpdmcqeu6v.swift:36:20:\
    \ error: cannot find 'bDouble' in scope\n            return bDouble\n        \
    \           ^~~~~~~\n/tmp/tmpdmcqeu6v.swift:38:37: error: cannot find 'bString'\
    \ in scope\n            if let bDouble = Double(bString) {\n         "
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n            return aInt > bInt || (aInt == bInt && aDouble\
    \ > bDouble)\n        case .stringValue(bString):\n            return aString\
    \ > bString\n        case .doubleValue(bDouble):\n            return aDouble >\
    \ bDouble\n        case .intValue(bInt):\n            return aInt > bInt\n   \
    \     }\n    case .stringValue(aString):\n        switch b { case .stringValue(bString),\
    \ .intValue(bInt), .doubleValue(bDouble):\n            return aString > bString\n\
    \        case .intValue(bInt):\n            return aString > bInt\n        case\
    \ .doubleValue(bDouble):\n            return aString > bDouble\n        }\n  \
    \  case .doubleValue(aDouble):\n        switch b { case .stringValue(bString),\
    \ .intValue(bInt), .doubleValue(bDouble):\n            return aDouble > bString\n\
    \        case .intValue(bInt):\n            return aDouble > bInt\n        case\
    \ .doubleValue(bDouble):\n            return aDouble > bDouble\n        }\n  \
    \  case .intValue(aInt):\n        switch b { case .stringValue(bString), .intValue(bInt),\
    \ .doubleValue(bDouble):\n            return aInt > bString\n        case .intValue(bInt):\n\
    \            return aInt > bInt\n        case .doubleValue(bDouble):\n       \
    \     return aInt > bDouble\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp6az9ka47.swift:18:31: error: cannot find 'aInt' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                            ^~~~\n/tmp/tmp6az9ka47.swift:18:51: error: cannot\
    \ find 'aDouble' in scope\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n                                                  ^~~~~~~\n\
    /tmp/tmp6az9ka47.swift:18:74: error: cannot find 'aString' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                                                                       ^~~~~~~\n\
    /tmp/tmp6az9ka47.swift:28:23: error: cannot find 'aString' in scope\n    case\
    \ .stringValue(aString):\n                      ^~~~~~~\n/tmp/tmp6az9ka47.swift:36:23:\
    \ error: cannot find 'aDouble' in scope\n    case .doubleValue(aDouble):\n   \
    \                   ^~~~~~~\n/tmp/tmp6az9ka47.swift:44:20: error: cannot find\
    \ 'aInt' in scope\n    case .intValue(aInt):\n                   ^~~~\n/tmp/tmp6az9ka47.swift:19:35:\
    \ error: cannot find 'bInt' in scope\n        switch b { case .intValue(bInt),\
    \ .doubleValue(bDouble), .stringValue(bString):\n                            \
    \      ^~~~\n/tmp/tmp6az9ka47.swift:19:55: error: cannot find 'bDouble' in scope\n\
    \        switch b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n\
    \                                                      ^~~~~~~\n/tmp/tmp6az9ka47.swift:19:78:\
    \ error: cannot find 'bString' in scope\n        switch b { case .intValue(bInt),\
    \ .doubleValue(bDouble), .stringValue(bString):\n                            \
    \                                                 ^~~~~~~\n/tmp/tmp6az9ka47.swift:21:27:\
    \ error: cannot find 'bString' in scope\n        case .stringValue(bString):\n\
    \                          ^~~~~~~\n/tmp/tmp6az9ka47.swift:23:27: error: cannot\
    \ find 'bDouble' in scope\n        case .doubleValue(bDouble):\n             \
    \             ^~~~~~~\n/tmp/tmp6az9ka47.swift:25:24: error: cannot find 'bInt'\
    \ in scope\n        case .intValue(bInt):\n                       ^~~~\n/t"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        switch b { // Compare two values\n        case .intValue(_):\n      \
    \      return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Compare two values\n\
    \        case .intValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Compare two values\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpx3ecbu37.swift:22:41: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n            return .intValue(a.intValue > b.intValue)\n\
    \                                        ^\n/tmp/tmpx3ecbu37.swift:22:30: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue)\n                             ^\n       \
    \                      Value\n/tmp/tmpx3ecbu37.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue)\n                                        ^\n/tmp/tmpx3ecbu37.swift:22:41:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n            return .intValue(a.intValue > b.intValue)\n         \
    \                               ^\n/tmp/tmpx3ecbu37.swift:22:41: note: required\
    \ by referencing operator function '>' on 'Comparable' where 'Self' = '(Int) ->\
    \ Value'\n            return .intValue(a.intValue > b.intValue)\n            \
    \                            ^\n/tmp/tmpx3ecbu37.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue)\n                                          ^\n               \
    \                           Value\n/tmp/tmpx3ecbu37.swift:24:47: error: cannot\
    \ convert value of type 'Bool' to expected argument type 'Double'\n          \
    \  return .doubleValue(a.doubleValue > b.doubleValue)\n                      \
    \                        ^\n/tmp/tmpx3ecbu37.swift:24:33: error: enum case 'doubleValue'\
    \ cannot be used as an instance member\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n                                ^\n                      \
    \          Value\n/tmp/tmpx3ecbu37.swift:24:47: error: type '(Double) -> Value'\
    \ cannot conform to 'Comparable'\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n                                              ^\n/tmp/tmpx3ecbu37.swift:24:47:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ proto"
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return a\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return b\n      \
    \  case .doubleValue(_):\n            return a\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return b\n      \
    \  case .doubleValue(_):\n            return a\n        case .stringValue(_):\n\
    \            return a\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpjn7zgbi4/tmpjn7zgbi4.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42cbac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe429b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe429b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe429b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjn7zgbi4                        0x0000559d58591a56 <unavailable> + 6742

    5    libc.so.6                          0x00002afe42ea6460 __libc_start_main +
    245

    6    tmpjn7zgbi4                        0x0000559d58591499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Handle ints\n    case .intValue(_):\n\
    \        switch b { // Handle ints\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // Handle doubles\n        case .intValue(_):\n            return a\n    \
    \    case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // Handle strings\n        case .intValue(_):\n            return a\n    \
    \    case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpvrx1akwl/tmpvrx1akwl.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023190cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0231603b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0231603988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02316027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvrx1akwl                        0x000055a998ff5a56 <unavailable> + 6742

    5    libc.so.6                          0x00002b0231af8460 __libc_start_main +
    245

    6    tmpvrx1akwl                        0x000055a998ff5499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n            if aInt == bInt {\n                return\
    \ aDouble\n            } else if aDouble == bDouble {\n                return\
    \ aString\n            } else {\n                return bString\n            }\n\
    \        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp6h4u14gg.swift:18:31: error: cannot find 'aInt' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                            ^~~~\n/tmp/tmp6h4u14gg.swift:18:51: error: cannot\
    \ find 'aDouble' in scope\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n                                                  ^~~~~~~\n\
    /tmp/tmp6h4u14gg.swift:18:74: error: cannot find 'aString' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                                                                       ^~~~~~~\n\
    /tmp/tmp6h4u14gg.swift:19:35: error: cannot find 'bInt' in scope\n        switch\
    \ b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n  \
    \                                ^~~~\n/tmp/tmp6h4u14gg.swift:19:55: error: cannot\
    \ find 'bDouble' in scope\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n                                                   \
    \   ^~~~~~~\n/tmp/tmp6h4u14gg.swift:19:78: error: cannot find 'bString' in scope\n\
    \        switch b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n\
    \                                                                            \
    \ ^~~~~~~\n/tmp/tmp6h4u14gg.swift:20:16: error: cannot find 'aInt' in scope\n\
    \            if aInt == bInt {\n               ^~~~\n/tmp/tmp6h4u14gg.swift:20:24:\
    \ error: cannot find 'bInt' in scope\n            if aInt == bInt {\n        \
    \               ^~~~\n/tmp/tmp6h4u14gg.swift:21:24: error: cannot find 'aDouble'\
    \ in scope\n                return aDouble\n                       ^~~~~~~\n/tmp/tmp6h4u14gg.swift:22:23:\
    \ error: cannot find 'aDouble' in scope\n            } else if aDouble == bDouble\
    \ {\n                      ^~~~~~~\n/tmp/tmp6h4u14gg.swift:22:34: error: cannot\
    \ find 'bDouble' in scope\n            } else if aDouble == bDouble {\n      \
    \                           ^~~~~~~\n/tmp/tmp6h4u14gg.swift:23:24: error: cannot\
    \ find 'aString' in scope\n                return aString\n                "
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is larger\n    case .intValue(_):\n\
    \        switch b { // b is larger\n        case .intValue(_):\n            return\
    \ b\n        case .doubleValue(_):\n            return a\n        case .stringValue(_):\n\
    \            return a\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is larger\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is larger\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return a\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpbbp0o_xg/tmpbbp0o_xg.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3f9c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3f6bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3f6ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3f6b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbbp0o_xg                        0x000055de1214dd54 <unavailable> + 7508

    5    libc.so.6                          0x00002ace3fbaf460 __libc_start_main +
    245

    6    tmpbbp0o_xg                        0x000055de1214d499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return a > b ? a : b\n        case .doubleValue(_):\n            return\
    \ a > b ? b : a\n        case .stringValue(_):\n            return a > b ? b :\
    \ a\n        }\n    case .doubleValue(_):\n        switch b { // Switch on b's\
    \ type\n        case .intValue(_):\n            return a > b ? b : a\n       \
    \ case .doubleValue(_):\n            return a > b ? a : b\n        case .stringValue(_):\n\
    \            return a > b ? a : b\n        }\n    case .stringValue(_):\n    \
    \    switch b { // Switch on b's type\n        case .intValue(_):\n          \
    \  return a > b ? b : a\n        case .doubleValue(_):\n            return a >\
    \ b ? a : b\n        case .stringValue(_):\n            return a > b ? a : b\n\
    \        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpdqpouttp.swift:22:22: error: referencing operator function '>'\
    \ on 'Comparable' requires that 'Value' conform to 'Comparable'\n            return\
    \ a > b ? a : b\n                     ^\nSwift.Comparable:1:17: note: where 'Self'\
    \ = 'Value'\npublic protocol Comparable : Equatable {\n                ^\n/tmp/tmpdqpouttp.swift:22:22:\
    \ note: binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? a : b\n                     ^\n/tmp/tmpdqpouttp.swift:24:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? b : a\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmpdqpouttp.swift:24:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? b : a\n                     ^\n/tmp/tmpdqpouttp.swift:26:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? b : a\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmpdqpouttp.swift:26:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? b : a\n                     ^\n/tmp/tmpdqpouttp.swift:31:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? b : a\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmpdqpouttp.swift:31:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? b : a\n                     ^\n/tmp/tmpdqpouttp.swift:33:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? a : b\n              "
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n \
    \       case .doubleValue(_):\n            return .doubleValue(a.doubleValue >\
    \ b.doubleValue ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.intValue ? a.doubleValue : b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue\
    \ : b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.intValue ? a.stringValue : b.stringValue)\n        case .doubleValue(_):\n\
    \            return .stringValue(a.stringValue > b.doubleValue ? a.stringValue\
    \ : b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1),\
    \ b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp7yyyx55x.swift:22:54: error: cannot convert value of type '(Int)\
    \ -> Value' to expected argument type 'Int'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \                   ^\n/tmp/tmp7yyyx55x.swift:22:30: error: enum case 'intValue'\
    \ cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                             ^\n  \
    \                           Value\n/tmp/tmp7yyyx55x.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmp7yyyx55x.swift:22:41: note: only concrete types such as structs,\
    \ enums and classes can conform to protocols\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmp7yyyx55x.swift:22:41: note: required by referencing operator\
    \ function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                           ^\n/tmp/tmp7yyyx55x.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \        ^\n                                          Value\n/tmp/tmp7yyyx55x.swift:22:56:\
    \ error: enum case 'intValue' cannot be used as an instance member\n         \
    \   return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n    \
    \                                                   ^\n                      \
    \                                 Value\n/tmp/tmp7yyyx55x.swift:22:69: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                                                       ^\n                  \
    \                                "
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n            return aInt > bInt ? b : a\n        default:\n\
    \            return b\n        }\n    default:\n        return a\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpzvlii6jj.swift:18:31: error: cannot find 'aInt' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                            ^~~~\n/tmp/tmpzvlii6jj.swift:18:51: error: cannot\
    \ find 'aDouble' in scope\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n                                                  ^~~~~~~\n\
    /tmp/tmpzvlii6jj.swift:18:74: error: cannot find 'aString' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                                                                       ^~~~~~~\n\
    /tmp/tmpzvlii6jj.swift:19:35: error: cannot find 'bInt' in scope\n        switch\
    \ b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n  \
    \                                ^~~~\n/tmp/tmpzvlii6jj.swift:19:55: error: cannot\
    \ find 'bDouble' in scope\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n                                                   \
    \   ^~~~~~~\n/tmp/tmpzvlii6jj.swift:19:78: error: cannot find 'bString' in scope\n\
    \        switch b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n\
    \                                                                            \
    \ ^~~~~~~\n/tmp/tmpzvlii6jj.swift:20:20: error: cannot find 'aInt' in scope\n\
    \            return aInt > bInt ? b : a\n                   ^~~~\n/tmp/tmpzvlii6jj.swift:20:27:\
    \ error: cannot find 'bInt' in scope\n            return aInt > bInt ? b : a\n\
    \                          ^~~~\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        switch b { // Compare two integers\n        case .intValue(_):\n    \
    \        return b\n        case .doubleValue(_):\n            return a\n     \
    \   case .stringValue(_):\n            return a\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Compare two doubles\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { // Compare two strings\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return a\n        }\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: Exception
  stderr: 'tmp703q6egw/tmp703q6egw.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b639f559c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b639f250b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b639f250988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b639f24f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp703q6egw                        0x0000558b2fff1d54 <unavailable> + 7508

    5    libc.so.6                          0x00002b639f745460 __libc_start_main +
    245

    6    tmp703q6egw                        0x0000558b2fff1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        switch b { // Compare two integers\n        case .intValue(_):\n    \
    \        return a\n        case .doubleValue(_):\n            return b\n     \
    \   case .stringValue(_):\n            return b\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Compare two doubles\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { // Compare two strings\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return b\n        }\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: Exception
  stderr: 'tmpd6fg4wa3/tmpd6fg4wa3.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba22dea8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba22db9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba22db9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba22db9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd6fg4wa3                        0x000055f29c751a56 <unavailable> + 6742

    5    libc.so.6                          0x00002ba22e094460 __libc_start_main +
    245

    6    tmpd6fg4wa3                        0x000055f29c751499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(aInt):\n\
    \        switch b { // Compare two integers\n        case .intValue(bInt):\n \
    \           return bInt > aInt // Compare two integers\n        case .doubleValue(bDouble):\n\
    \            return bDouble > aInt // Compare two integers\n        case .stringValue(bString):\n\
    \            return bString > aInt // Compare two integers\n        }\n    case\
    \ .doubleValue(aDouble):\n        switch b { // Compare two doubles\n        case\
    \ .intValue(bInt):\n            return bInt > aDouble // Compare two doubles\n\
    \        case .doubleValue(bDouble):\n            return bDouble > aDouble //\
    \ Compare two doubles\n        case .stringValue(bString):\n            return\
    \ bString > aDouble // Compare two doubles\n        }\n    case .stringValue(aString):\n\
    \        switch b { // Compare two strings\n        case .intValue(bInt):\n  \
    \          return bInt > aString // Compare two strings\n        case .doubleValue(bDouble):\n\
    \            return bDouble > aString // Compare two strings\n        case .stringValue(bString):\n\
    \            return bString > aString // Compare two strings\n        }\n    }\n\
    \    return nil // If values are equal, return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmplkmr5jc0.swift:19:20: error: cannot find 'aInt' in scope\n    case\
    \ .intValue(aInt):\n                   ^~~~\n/tmp/tmplkmr5jc0.swift:28:23: error:\
    \ cannot find 'aDouble' in scope\n    case .doubleValue(aDouble):\n          \
    \            ^~~~~~~\n/tmp/tmplkmr5jc0.swift:37:23: error: cannot find 'aString'\
    \ in scope\n    case .stringValue(aString):\n                      ^~~~~~~\n/tmp/tmplkmr5jc0.swift:21:24:\
    \ error: cannot find 'bInt' in scope\n        case .intValue(bInt):\n        \
    \               ^~~~\n/tmp/tmplkmr5jc0.swift:23:27: error: cannot find 'bDouble'\
    \ in scope\n        case .doubleValue(bDouble):\n                          ^~~~~~~\n\
    /tmp/tmplkmr5jc0.swift:25:27: error: cannot find 'bString' in scope\n        case\
    \ .stringValue(bString):\n                          ^~~~~~~\n/tmp/tmplkmr5jc0.swift:22:20:\
    \ error: cannot find 'bInt' in scope\n            return bInt > aInt // Compare\
    \ two integers\n                   ^~~~\n/tmp/tmplkmr5jc0.swift:22:27: error:\
    \ cannot find 'aInt' in scope\n            return bInt > aInt // Compare two integers\n\
    \                          ^~~~\n/tmp/tmplkmr5jc0.swift:22:25: error: cannot convert\
    \ return expression of type 'Bool' to return type 'Value?'\n            return\
    \ bInt > aInt // Compare two integers\n                   ~~~~~^~~~~~\n/tmp/tmplkmr5jc0.swift:24:20:\
    \ error: cannot find 'bDouble' in scope\n            return bDouble > aInt //\
    \ Compare two integers\n                   ^~~~~~~\n/tmp/tmplkmr5jc0.swift:24:30:\
    \ error: cannot find 'aInt' in scope\n            return bDouble > aInt // Compare\
    \ two integers\n                             ^~~~\n/tmp/tmplkmr5jc0.swift:24:28:\
    \ error: cannot convert return expression of type 'Bool' to return type 'Value?'\n\
    \            return bDouble > aInt // Compare two integers\n                 \
    \  ~~~~~~~~^~~~~~\n/tmp/tmplkmr5jc0.swift:26:20: error: cannot find 'bString'\
    \ in scope\n            return bString > aInt // Compare two integers\n      \
    \             ^~~~~~~\n/tmp/tmplkmr5jc0.swift:26:30: error: cannot find 'aInt'\
    \ in scope\n            return bString > aInt // Compare two intege"
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        switch b { // Compare two integers\n        case .intValue(_):\n    \
    \        return a\n        case .doubleValue(_):\n            return b\n     \
    \   case .stringValue(_):\n            return b\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Compare two doubles\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { // Compare two strings\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return b\n        }\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: Exception
  stderr: 'tmpd6fg4wa3/tmpd6fg4wa3.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba22dea8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba22db9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba22db9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba22db9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd6fg4wa3                        0x000055f29c751a56 <unavailable> + 6742

    5    libc.so.6                          0x00002ba22e094460 __libc_start_main +
    245

    6    tmpd6fg4wa3                        0x000055f29c751499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpmzfiigdx/tmpmzfiigdx.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba5a3c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba5a0bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba5a0bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba5a0bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzfiigdx                        0x000055ebafbe4a56 <unavailable> + 6742

    5    libc.so.6                          0x00002aba5a5b2460 __libc_start_main +
    245

    6    tmpmzfiigdx                        0x000055ebafbe4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // TODO: Switch to switch case when Swift\
    \ 4 is released\n    case .intValue(_):\n        switch b { // TODO: Switch to\
    \ switch case when Swift 4 is released\n        case .intValue(_):\n         \
    \   return .intValue(a)\n        case .doubleValue(_):\n            return .doubleValue(a)\n\
    \        case .stringValue(_):\n            return .stringValue(a)\n        }\n\
    \    case .doubleValue(_):\n        switch b { // TODO: Switch to switch case\
    \ when Swift 4 is released\n        case .intValue(_):\n            return .doubleValue(a)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a)\n        case\
    \ .stringValue(_):\n            return .stringValue(a)\n        }\n    case .stringValue(_):\n\
    \        switch b { // TODO: Switch to switch case when Swift 4 is released\n\
    \        case .intValue(_):\n            return .stringValue(a)\n        case\
    \ .doubleValue(_):\n            return .stringValue(a)\n        case .stringValue(_):\n\
    \            return .stringValue(a)\n        }\n    }\n    return nil\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpj4s69by4.swift:22:30: error: cannot convert value of type 'Value'\
    \ to expected argument type 'Int'\n            return .intValue(a)\n         \
    \                    ^\n/tmp/tmpj4s69by4.swift:24:33: error: cannot convert value\
    \ of type 'Value' to expected argument type 'Double'\n            return .doubleValue(a)\n\
    \                                ^\n/tmp/tmpj4s69by4.swift:26:33: error: cannot\
    \ convert value of type 'Value' to expected argument type 'String'\n         \
    \   return .stringValue(a)\n                                ^\n/tmp/tmpj4s69by4.swift:31:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Double'\n\
    \            return .doubleValue(a)\n                                ^\n/tmp/tmpj4s69by4.swift:33:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Double'\n\
    \            return .doubleValue(a)\n                                ^\n/tmp/tmpj4s69by4.swift:35:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \            return .stringValue(a)\n                                ^\n/tmp/tmpj4s69by4.swift:40:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \            return .stringValue(a)\n                                ^\n/tmp/tmpj4s69by4.swift:42:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \            return .stringValue(a)\n                                ^\n/tmp/tmpj4s69by4.swift:44:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \            return .stringValue(a)\n                                ^\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(int(a)):\n\
    \        switch b { // Compare two integers\n        case .intValue(int(b)):\n\
    \            return b\n        case .doubleValue(double(b)):\n            return\
    \ a\n        case .stringValue(string(b)):\n            return a\n        }\n\
    \    case .doubleValue(double(a)):\n        switch b { // Compare two doubles\n\
    \        case .intValue(int(b)):\n            return a\n        case .doubleValue(double(b)):\n\
    \            return b\n        case .stringValue(string(b)):\n            return\
    \ a\n        }\n    case .stringValue(string(a)):\n        switch b { // Compare\
    \ two strings\n        case .intValue(int(b)):\n            return a\n       \
    \ case .doubleValue(double(b)):\n            return b\n        case .stringValue(string(b)):\n\
    \            return a\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpb2ecnzk9.swift:19:20: error: cannot find 'int' in scope\n    case\
    \ .intValue(int(a)):\n                   ^~~\n/tmp/tmpb2ecnzk9.swift:28:23: error:\
    \ cannot find 'double' in scope\n    case .doubleValue(double(a)):\n         \
    \             ^~~~~~\n/tmp/tmpb2ecnzk9.swift:37:23: error: cannot find 'string'\
    \ in scope\n    case .stringValue(string(a)):\n                      ^~~~~~\n\
    /tmp/tmpb2ecnzk9.swift:21:24: error: cannot find 'int' in scope\n        case\
    \ .intValue(int(b)):\n                       ^~~\n/tmp/tmpb2ecnzk9.swift:23:27:\
    \ error: cannot find 'double' in scope\n        case .doubleValue(double(b)):\n\
    \                          ^~~~~~\n/tmp/tmpb2ecnzk9.swift:25:27: error: cannot\
    \ find 'string' in scope\n        case .stringValue(string(b)):\n            \
    \              ^~~~~~\n/tmp/tmpb2ecnzk9.swift:30:24: error: cannot find 'int'\
    \ in scope\n        case .intValue(int(b)):\n                       ^~~\n/tmp/tmpb2ecnzk9.swift:32:27:\
    \ error: cannot find 'double' in scope\n        case .doubleValue(double(b)):\n\
    \                          ^~~~~~\n/tmp/tmpb2ecnzk9.swift:34:27: error: cannot\
    \ find 'string' in scope\n        case .stringValue(string(b)):\n            \
    \              ^~~~~~\n/tmp/tmpb2ecnzk9.swift:39:24: error: cannot find 'int'\
    \ in scope\n        case .intValue(int(b)):\n                       ^~~\n/tmp/tmpb2ecnzk9.swift:41:27:\
    \ error: cannot find 'double' in scope\n        case .doubleValue(double(b)):\n\
    \                          ^~~~~~\n/tmp/tmpb2ecnzk9.swift:43:27: error: cannot\
    \ find 'string' in scope\n        case .stringValue(string(b)):\n            \
    \              ^~~~~~\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // case Int\n    case .intValue(_):\n   \
    \     switch b { // case Int\n        case .intValue(_):\n            return a\n\
    \        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // case Double\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // case String\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmp9cfzgw95/tmp9cfzgw95.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acea861dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acea8314b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acea8314988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acea83137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9cfzgw95                        0x00005616c52a8a56 <unavailable> + 6742

    5    libc.so.6                          0x00002acea8809460 __libc_start_main +
    245

    6    tmp9cfzgw95                        0x00005616c52a8499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n \
    \       case .doubleValue(_):\n            return .doubleValue(a.doubleValue >\
    \ b.doubleValue ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.intValue ? a.doubleValue : b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue\
    \ : b.doubleValue)\n        case .stringValue(_):\n            return .doubleValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        case .stringValue(_):\n\
    \            return .doubleValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.intValue ? a.stringValue : b.stringValue)\n        case .doubleValue(_):\n\
    \            return .stringValue(a.stringValue > b.doubleValue ? a.stringValue\
    \ : b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1),\
    \ b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpd6f0x855.swift:22:54: error: cannot convert value of type '(Int)\
    \ -> Value' to expected argument type 'Int'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \                   ^\n/tmp/tmpd6f0x855.swift:22:30: error: enum case 'intValue'\
    \ cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                             ^\n  \
    \                           Value\n/tmp/tmpd6f0x855.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmpd6f0x855.swift:22:41: note: only concrete types such as structs,\
    \ enums and classes can conform to protocols\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmpd6f0x855.swift:22:41: note: required by referencing operator\
    \ function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                           ^\n/tmp/tmpd6f0x855.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \        ^\n                                          Value\n/tmp/tmpd6f0x855.swift:22:56:\
    \ error: enum case 'intValue' cannot be used as an instance member\n         \
    \   return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n    \
    \                                                   ^\n                      \
    \                                 Value\n/tmp/tmpd6f0x855.swift:22:69: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                                                       ^\n                  \
    \                                "
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // case Int\n    case .intValue(_):\n   \
    \     switch b { // case Int\n        case .intValue(_):\n            return a\n\
    \        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // case Double\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // case String\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmp9cfzgw95/tmp9cfzgw95.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acea861dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acea8314b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acea8314988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acea83137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9cfzgw95                        0x00005616c52a8a56 <unavailable> + 6742

    5    libc.so.6                          0x00002acea8809460 __libc_start_main +
    245

    6    tmp9cfzgw95                        0x00005616c52a8499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a.\n    case .intValue(_):\n\
    \        switch b { // Switch on b.\n        case .intValue(_):\n            return\
    \ .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n        \
    \    return .doubleValue(a.doubleValue > b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        }\n \
    \   case .doubleValue(_):\n        switch b { // Switch on b.\n        case .intValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .doubleValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on b.\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpeqg0tk4w.swift:22:41: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n            return .intValue(a.intValue > b.intValue)\n\
    \                                        ^\n/tmp/tmpeqg0tk4w.swift:22:30: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue)\n                             ^\n       \
    \                      Value\n/tmp/tmpeqg0tk4w.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue)\n                                        ^\n/tmp/tmpeqg0tk4w.swift:22:41:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n            return .intValue(a.intValue > b.intValue)\n         \
    \                               ^\n/tmp/tmpeqg0tk4w.swift:22:41: note: required\
    \ by referencing operator function '>' on 'Comparable' where 'Self' = '(Int) ->\
    \ Value'\n            return .intValue(a.intValue > b.intValue)\n            \
    \                            ^\n/tmp/tmpeqg0tk4w.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue)\n                                          ^\n               \
    \                           Value\n/tmp/tmpeqg0tk4w.swift:24:47: error: cannot\
    \ convert value of type 'Bool' to expected argument type 'Double'\n          \
    \  return .doubleValue(a.doubleValue > b.doubleValue)\n                      \
    \                        ^\n/tmp/tmpeqg0tk4w.swift:24:33: error: enum case 'doubleValue'\
    \ cannot be used as an instance member\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n                                ^\n                      \
    \          Value\n/tmp/tmpeqg0tk4w.swift:24:47: error: type '(Double) -> Value'\
    \ cannot conform to 'Comparable'\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n                                              ^\n/tmp/tmpeqg0tk4w.swift:24:47:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ proto"
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is bigger\n    case .intValue(_):\n\
    \        switch b { // b is bigger\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is bigger\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is bigger\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmp38yf_604/tmp38yf_604.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac009560c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac009257b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac009257988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0092567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38yf_604                        0x0000563cb7fa8a56 <unavailable> + 6742

    5    libc.so.6                          0x00002ac00974c460 __libc_start_main +
    245

    6    tmp38yf_604                        0x0000563cb7fa8499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        switch b { // Compare two integers\n        case .intValue(_):\n    \
    \        return b\n        case .doubleValue(_):\n            return a\n     \
    \   case .stringValue(_):\n            return a\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Compare two doubles\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { // Compare two strings\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return a\n        }\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: Exception
  stderr: 'tmp703q6egw/tmp703q6egw.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b639f559c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b639f250b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b639f250988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b639f24f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp703q6egw                        0x0000558b2fff1d54 <unavailable> + 7508

    5    libc.so.6                          0x00002b639f745460 __libc_start_main +
    245

    6    tmp703q6egw                        0x0000558b2fff1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n \
    \       case .doubleValue(_):\n            return .doubleValue(a.doubleValue >\
    \ b.doubleValue ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.intValue ? a.doubleValue : b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue\
    \ : b.doubleValue)\n        case .stringValue(_):\n            return .doubleValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    case .stringValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .stringValue(a.stringValue > b.intValue ? a.stringValue : b.stringValue)\n\
    \        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.doubleValue ? a.stringValue : b.stringValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp9mjalr9c.swift:22:54: error: cannot convert value of type '(Int)\
    \ -> Value' to expected argument type 'Int'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \                   ^\n/tmp/tmp9mjalr9c.swift:22:30: error: enum case 'intValue'\
    \ cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                             ^\n  \
    \                           Value\n/tmp/tmp9mjalr9c.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmp9mjalr9c.swift:22:41: note: only concrete types such as structs,\
    \ enums and classes can conform to protocols\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmp9mjalr9c.swift:22:41: note: required by referencing operator\
    \ function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                           ^\n/tmp/tmp9mjalr9c.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \        ^\n                                          Value\n/tmp/tmp9mjalr9c.swift:22:56:\
    \ error: enum case 'intValue' cannot be used as an instance member\n         \
    \   return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n    \
    \                                                   ^\n                      \
    \                                 Value\n/tmp/tmp9mjalr9c.swift:22:69: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                                                       ^\n                  \
    \                                "
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(aInt):\n\
    \        switch b { // Compare two values\n        case .intValue(bInt):\n   \
    \         return bInt > aInt // Compare two integers\n        case .doubleValue(bDouble):\n\
    \            return bDouble > aInt // Compare two doubles\n        case .stringValue(bString):\n\
    \            return bString > aInt // Compare two strings\n        }\n    case\
    \ .doubleValue(aDouble):\n        switch b { // Compare two values\n        case\
    \ .intValue(bInt):\n            return bInt > aDouble // Compare two integers\n\
    \        case .doubleValue(bDouble):\n            return bDouble > aDouble //\
    \ Compare two doubles\n        case .stringValue(bString):\n            return\
    \ bString > aDouble // Compare two strings\n        }\n    case .stringValue(aString):\n\
    \        switch b { // Compare two values\n        case .intValue(bInt):\n   \
    \         return bInt > aString // Compare two integers\n        case .doubleValue(bDouble):\n\
    \            return bDouble > aString // Compare two doubles\n        case .stringValue(bString):\n\
    \            return bString > aString // Compare two strings\n        }\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1),\
    \ b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpg0876x1x.swift:19:20: error: cannot find 'aInt' in scope\n    case\
    \ .intValue(aInt):\n                   ^~~~\n/tmp/tmpg0876x1x.swift:28:23: error:\
    \ cannot find 'aDouble' in scope\n    case .doubleValue(aDouble):\n          \
    \            ^~~~~~~\n/tmp/tmpg0876x1x.swift:37:23: error: cannot find 'aString'\
    \ in scope\n    case .stringValue(aString):\n                      ^~~~~~~\n/tmp/tmpg0876x1x.swift:21:24:\
    \ error: cannot find 'bInt' in scope\n        case .intValue(bInt):\n        \
    \               ^~~~\n/tmp/tmpg0876x1x.swift:23:27: error: cannot find 'bDouble'\
    \ in scope\n        case .doubleValue(bDouble):\n                          ^~~~~~~\n\
    /tmp/tmpg0876x1x.swift:25:27: error: cannot find 'bString' in scope\n        case\
    \ .stringValue(bString):\n                          ^~~~~~~\n/tmp/tmpg0876x1x.swift:22:20:\
    \ error: cannot find 'bInt' in scope\n            return bInt > aInt // Compare\
    \ two integers\n                   ^~~~\n/tmp/tmpg0876x1x.swift:22:27: error:\
    \ cannot find 'aInt' in scope\n            return bInt > aInt // Compare two integers\n\
    \                          ^~~~\n/tmp/tmpg0876x1x.swift:22:25: error: cannot convert\
    \ return expression of type 'Bool' to return type 'Value?'\n            return\
    \ bInt > aInt // Compare two integers\n                   ~~~~~^~~~~~\n/tmp/tmpg0876x1x.swift:24:20:\
    \ error: cannot find 'bDouble' in scope\n            return bDouble > aInt //\
    \ Compare two doubles\n                   ^~~~~~~\n/tmp/tmpg0876x1x.swift:24:30:\
    \ error: cannot find 'aInt' in scope\n            return bDouble > aInt // Compare\
    \ two doubles\n                             ^~~~\n/tmp/tmpg0876x1x.swift:24:28:\
    \ error: cannot convert return expression of type 'Bool' to return type 'Value?'\n\
    \            return bDouble > aInt // Compare two doubles\n                  \
    \ ~~~~~~~~^~~~~~\n/tmp/tmpg0876x1x.swift:26:20: error: cannot find 'bString' in\
    \ scope\n            return bString > aInt // Compare two strings\n          \
    \         ^~~~~~~\n/tmp/tmpg0876x1x.swift:26:30: error: cannot find 'aInt' in\
    \ scope\n            return bString > aInt // Compare two strings\n  "
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // case intValue:\n    case .intValue:\n\
    \        return b == .intValue ? .intValue : b == .doubleValue ? .doubleValue\
    \ : b == .stringValue ? .stringValue : nil\n    case .doubleValue:\n        return\
    \ b == .doubleValue ? .doubleValue : b == .intValue ? .intValue : b == .stringValue\
    \ ? .stringValue : nil\n    case .stringValue:\n        return b == .stringValue\
    \ ? .stringValue : b == .intValue ? .intValue : b == .doubleValue ? .doubleValue\
    \ : nil\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1),\
    \ b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmph5g2r2dk.swift:20:22: error: member 'intValue' expects argument\
    \ of type 'Int'\n        return b == .intValue ? .intValue : b == .doubleValue\
    \ ? .doubleValue : b == .stringValue ? .stringValue : nil\n                  \
    \   ^\n/tmp/tmph5g2r2dk.swift:20:34: error: member 'intValue' expects argument\
    \ of type 'Int'\n        return b == .intValue ? .intValue : b == .doubleValue\
    \ ? .doubleValue : b == .stringValue ? .stringValue : nil\n                  \
    \               ^\n/tmp/tmph5g2r2dk.swift:20:51: error: member 'doubleValue' expects\
    \ argument of type 'Double'\n        return b == .intValue ? .intValue : b ==\
    \ .doubleValue ? .doubleValue : b == .stringValue ? .stringValue : nil\n     \
    \                                             ^\n/tmp/tmph5g2r2dk.swift:20:66:\
    \ error: member 'doubleValue' expects argument of type 'Double'\n        return\
    \ b == .intValue ? .intValue : b == .doubleValue ? .doubleValue : b == .stringValue\
    \ ? .stringValue : nil\n                                                     \
    \            ^\n/tmp/tmph5g2r2dk.swift:20:86: error: member 'stringValue' expects\
    \ argument of type 'String'\n        return b == .intValue ? .intValue : b ==\
    \ .doubleValue ? .doubleValue : b == .stringValue ? .stringValue : nil\n     \
    \                                                                            \
    \    ^\n/tmp/tmph5g2r2dk.swift:20:101: error: member 'stringValue' expects argument\
    \ of type 'String'\n        return b == .intValue ? .intValue : b == .doubleValue\
    \ ? .doubleValue : b == .stringValue ? .stringValue : nil\n                  \
    \                                                                            \
    \      ^\n/tmp/tmph5g2r2dk.swift:22:22: error: member 'doubleValue' expects argument\
    \ of type 'Double'\n        return b == .doubleValue ? .doubleValue : b == .intValue\
    \ ? .intValue : b == .stringValue ? .stringValue : nil\n                     ^\n\
    /tmp/tmph5g2r2dk.swift:22:37: error: member 'doubleValue' expects argument of\
    \ type 'Double'\n        return b == .doubleValue ? .doubleValue : b == .intValue\
    \ ? .intValue : b == .stringValue ? .stringVa"
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is Int\n    case .intValue(_):\n   \
    \     switch b { // b is Int\n        case .intValue(_):\n            return a\n\
    \        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is Double\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is String\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpqo15u7gt/tmpqo15u7gt.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf67f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf64eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf64ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf64ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqo15u7gt                        0x00005578b487aa56 <unavailable> + 6742

    5    libc.so.6                          0x00002b9cf69e3460 __libc_start_main +
    245

    6    tmpqo15u7gt                        0x00005578b487a499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpmzfiigdx/tmpmzfiigdx.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba5a3c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba5a0bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba5a0bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba5a0bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzfiigdx                        0x000055ebafbe4a56 <unavailable> + 6742

    5    libc.so.6                          0x00002aba5a5b2460 __libc_start_main +
    245

    6    tmpmzfiigdx                        0x000055ebafbe4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue:\n\
    \        switch b { // Switch on b's type\n        case .intValue:\n         \
    \   return a > b ? a : b\n        case .doubleValue:\n            return a > b\
    \ ? b : a\n        case .stringValue:\n            return a > b ? b : a\n    \
    \    }\n    case .doubleValue:\n        switch b { // Switch on b's type\n   \
    \     case .intValue:\n            return a > b ? b : a\n        case .doubleValue:\n\
    \            return a > b ? a : b\n        case .stringValue:\n            return\
    \ a > b ? a : b\n        }\n    case .stringValue:\n        switch b { // Switch\
    \ on b's type\n        case .intValue:\n            return a > b ? b : a\n   \
    \     case .doubleValue:\n            return a > b ? a : b\n        case .stringValue:\n\
    \            return a > b ? a : b\n        }\n    }\n    return nil\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmprnri9hdy.swift:22:22: error: referencing operator function '>'\
    \ on 'Comparable' requires that 'Value' conform to 'Comparable'\n            return\
    \ a > b ? a : b\n                     ^\nSwift.Comparable:1:17: note: where 'Self'\
    \ = 'Value'\npublic protocol Comparable : Equatable {\n                ^\n/tmp/tmprnri9hdy.swift:22:22:\
    \ note: binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? a : b\n                     ^\n/tmp/tmprnri9hdy.swift:24:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? b : a\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmprnri9hdy.swift:24:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? b : a\n                     ^\n/tmp/tmprnri9hdy.swift:26:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? b : a\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmprnri9hdy.swift:26:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? b : a\n                     ^\n/tmp/tmprnri9hdy.swift:31:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? b : a\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmprnri9hdy.swift:31:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? b : a\n                     ^\n/tmp/tmprnri9hdy.swift:33:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? a : b\n              "
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue:\n\
    \        switch b { // Switch on b's type\n        case .intValue:\n         \
    \   return a.intValue > b.intValue ? a : b\n        case .doubleValue:\n     \
    \       return a.doubleValue > b.doubleValue ? a : b\n        case .stringValue:\n\
    \            return a.stringValue > b.stringValue ? a : b\n        }\n    case\
    \ .doubleValue:\n        switch b { // Switch on b's type\n        case .intValue:\n\
    \            return a.doubleValue > b.intValue ? a : b\n        case .doubleValue:\n\
    \            return a.doubleValue > b.doubleValue ? a : b\n        case .stringValue:\n\
    \            return a.doubleValue > b.stringValue ? a : b\n        }\n    case\
    \ .stringValue:\n        switch b { // Switch on b's type\n        case .intValue:\n\
    \            return a.stringValue > b.intValue ? a : b\n        case .doubleValue:\n\
    \            return a.stringValue > b.doubleValue ? a : b\n        case .stringValue:\n\
    \            return a.stringValue > b.stringValue ? a : b\n        }\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1),\
    \ b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp9amjf0rd.swift:22:20: error: enum case 'intValue' cannot be used\
    \ as an instance member\n            return a.intValue > b.intValue ? a : b\n\
    \                   ^\n                   Value\n/tmp/tmp9amjf0rd.swift:22:31:\
    \ error: type '(Int) -> Value' cannot conform to 'Comparable'\n            return\
    \ a.intValue > b.intValue ? a : b\n                              ^\n/tmp/tmp9amjf0rd.swift:22:31:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n            return a.intValue > b.intValue ? a : b\n            \
    \                  ^\n/tmp/tmp9amjf0rd.swift:22:31: note: required by referencing\
    \ operator function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n    \
    \        return a.intValue > b.intValue ? a : b\n                            \
    \  ^\n/tmp/tmp9amjf0rd.swift:22:33: error: enum case 'intValue' cannot be used\
    \ as an instance member\n            return a.intValue > b.intValue ? a : b\n\
    \                                ^\n                                Value\n/tmp/tmp9amjf0rd.swift:24:20:\
    \ error: enum case 'doubleValue' cannot be used as an instance member\n      \
    \      return a.doubleValue > b.doubleValue ? a : b\n                   ^\n  \
    \                 Value\n/tmp/tmp9amjf0rd.swift:24:34: error: type '(Double) ->\
    \ Value' cannot conform to 'Comparable'\n            return a.doubleValue > b.doubleValue\
    \ ? a : b\n                                 ^\n/tmp/tmp9amjf0rd.swift:24:34: note:\
    \ only concrete types such as structs, enums and classes can conform to protocols\n\
    \            return a.doubleValue > b.doubleValue ? a : b\n                  \
    \               ^\n/tmp/tmp9amjf0rd.swift:24:34: note: required by referencing\
    \ operator function '>' on 'Comparable' where 'Self' = '(Double) -> Value'\n \
    \           return a.doubleValue > b.doubleValue ? a : b\n                   \
    \              ^\n/tmp/tmp9amjf0rd.swift:24:36: error: enum case 'doubleValue'\
    \ cannot be used as an instance member\n            return a.doubleValue > b.doubleValue\
    \ ? a : b\n                                   ^\n                            \
    \       Value\n/"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n \
    \       case .doubleValue(_):\n            return .doubleValue(a.doubleValue >\
    \ b.doubleValue ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.intValue ? a.doubleValue : b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue\
    \ : b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    case .stringValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .stringValue(a.stringValue > b.intValue ? a.stringValue : b.stringValue)\n\
    \        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.doubleValue ? a.stringValue : b.stringValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpt1cm97dk.swift:22:54: error: cannot convert value of type '(Int)\
    \ -> Value' to expected argument type 'Int'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \                   ^\n/tmp/tmpt1cm97dk.swift:22:30: error: enum case 'intValue'\
    \ cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                             ^\n  \
    \                           Value\n/tmp/tmpt1cm97dk.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmpt1cm97dk.swift:22:41: note: only concrete types such as structs,\
    \ enums and classes can conform to protocols\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmpt1cm97dk.swift:22:41: note: required by referencing operator\
    \ function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                           ^\n/tmp/tmpt1cm97dk.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \        ^\n                                          Value\n/tmp/tmpt1cm97dk.swift:22:56:\
    \ error: enum case 'intValue' cannot be used as an instance member\n         \
    \   return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n    \
    \                                                   ^\n                      \
    \                                 Value\n/tmp/tmpt1cm97dk.swift:22:69: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                                                       ^\n                  \
    \                                "
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        return b == .intValue(a)\n    case .doubleValue(_):\n        return b\
    \ == .doubleValue(a)\n    case .stringValue(_):\n        return b == .stringValue(a)\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpy1zwp40_.swift:20:18: error: cannot convert return expression of\
    \ type 'Bool' to return type 'Value?'\n        return b == .intValue(a)\n    \
    \           ~~^~~~~~~~~~~~~~~\n/tmp/tmpy1zwp40_.swift:20:31: error: cannot convert\
    \ value of type 'Value' to expected argument type 'Int'\n        return b == .intValue(a)\n\
    \                              ^\n/tmp/tmpy1zwp40_.swift:22:18: error: cannot\
    \ convert return expression of type 'Bool' to return type 'Value?'\n        return\
    \ b == .doubleValue(a)\n               ~~^~~~~~~~~~~~~~~~~~\n/tmp/tmpy1zwp40_.swift:22:34:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Double'\n\
    \        return b == .doubleValue(a)\n                                 ^\n/tmp/tmpy1zwp40_.swift:24:18:\
    \ error: cannot convert return expression of type 'Bool' to return type 'Value?'\n\
    \        return b == .stringValue(a)\n               ~~^~~~~~~~~~~~~~~~~~\n/tmp/tmpy1zwp40_.swift:24:34:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \        return b == .stringValue(a)\n                                 ^\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return a > b ? a : b\n        case .doubleValue(_):\n            return\
    \ a > b ? b : a\n        case .stringValue(_):\n            return a > b ? b :\
    \ a\n        }\n    case .doubleValue(_):\n        switch b { // Switch on b's\
    \ type\n        case .intValue(_):\n            return a > b ? a : b\n       \
    \ case .doubleValue(_):\n            return a > b ? b : a\n        case .stringValue(_):\n\
    \            return a > b ? b : a\n        }\n    case .stringValue(_):\n    \
    \    switch b { // Switch on b's type\n        case .intValue(_):\n          \
    \  return a > b ? a : b\n        case .doubleValue(_):\n            return a >\
    \ b ? b : a\n        case .stringValue(_):\n            return a > b ? b : a\n\
    \        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpolb3yvcd.swift:22:22: error: referencing operator function '>'\
    \ on 'Comparable' requires that 'Value' conform to 'Comparable'\n            return\
    \ a > b ? a : b\n                     ^\nSwift.Comparable:1:17: note: where 'Self'\
    \ = 'Value'\npublic protocol Comparable : Equatable {\n                ^\n/tmp/tmpolb3yvcd.swift:22:22:\
    \ note: binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? a : b\n                     ^\n/tmp/tmpolb3yvcd.swift:24:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? b : a\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmpolb3yvcd.swift:24:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? b : a\n                     ^\n/tmp/tmpolb3yvcd.swift:26:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? b : a\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmpolb3yvcd.swift:26:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? b : a\n                     ^\n/tmp/tmpolb3yvcd.swift:31:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? a : b\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmpolb3yvcd.swift:31:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? a : b\n                     ^\n/tmp/tmpolb3yvcd.swift:33:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? b : a\n              "
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n \
    \       case .doubleValue(_):\n            return .doubleValue(a.doubleValue >\
    \ b.doubleValue ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.intValue ? a.doubleValue : b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue\
    \ : b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    case .stringValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .stringValue(a.stringValue > b.intValue ? a.stringValue : b.stringValue)\n\
    \        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.doubleValue ? a.stringValue : b.stringValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpt1cm97dk.swift:22:54: error: cannot convert value of type '(Int)\
    \ -> Value' to expected argument type 'Int'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \                   ^\n/tmp/tmpt1cm97dk.swift:22:30: error: enum case 'intValue'\
    \ cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                             ^\n  \
    \                           Value\n/tmp/tmpt1cm97dk.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmpt1cm97dk.swift:22:41: note: only concrete types such as structs,\
    \ enums and classes can conform to protocols\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmpt1cm97dk.swift:22:41: note: required by referencing operator\
    \ function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                           ^\n/tmp/tmpt1cm97dk.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \        ^\n                                          Value\n/tmp/tmpt1cm97dk.swift:22:56:\
    \ error: enum case 'intValue' cannot be used as an instance member\n         \
    \   return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n    \
    \                                                   ^\n                      \
    \                                 Value\n/tmp/tmpt1cm97dk.swift:22:69: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                                                       ^\n                  \
    \                                "
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(i):\n\
    \        switch b { // Switch on b's type\n        case .intValue(i):\n      \
    \      return i // Return i\n        case .doubleValue(let d):\n            return\
    \ d // Return d\n        case .stringValue(let s):\n            if let i = Int(s)\
    \ { // If s is a valid integer\n                return i // Return i\n       \
    \     }\n            if let d = Double(s) { // If s is a valid double\n      \
    \          return d // Return d\n            }\n            return s // Return\
    \ s\n        }\n    case .doubleValue(let d):\n        switch b { // Switch on\
    \ b's type\n        case .intValue(i):\n            return d // Return d\n   \
    \     case .doubleValue(let d):\n            return d // Return d\n        case\
    \ .stringValue(let s):\n            if let i = Int(s) { // If s is a valid integer\n\
    \                return i // Return i\n            }\n            if let d = Double(s)\
    \ { // If s is a valid double\n                return d // Return d\n        \
    \    }\n            return s // Return s\n        }\n    case .stringValue(let\
    \ s):\n        switch b { // Switch on b's type\n        case .intValue(i):\n\
    \            return i // Return i\n        case .doubleValue(let d):\n       \
    \     return d // Return d\n        case .stringValue(let s):\n            if\
    \ let i = Int(s) { // If s is a valid integer\n                return i // Return\
    \ i\n            }\n            if let d = Double(s) { // If s is a valid double\n\
    \                return d // Return d\n            }\n            return s //\
    \ Return s\n        }\n    }\n    return nil // Return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpbcjyu_pm.swift:19:20: error: cannot find 'i' in scope\n    case\
    \ .intValue(i):\n                   ^\n/tmp/tmpbcjyu_pm.swift:21:24: error: cannot\
    \ find 'i' in scope\n        case .intValue(i):\n                       ^\n/tmp/tmpbcjyu_pm.swift:22:20:\
    \ error: cannot find 'i' in scope\n            return i // Return i\n        \
    \           ^\n/tmp/tmpbcjyu_pm.swift:24:20: error: cannot convert return expression\
    \ of type 'Double' to return type 'Value?'\n            return d // Return d\n\
    \                   ^\n/tmp/tmpbcjyu_pm.swift:27:24: error: cannot convert return\
    \ expression of type 'Int' to return type 'Value?'\n                return i //\
    \ Return i\n                       ^\n/tmp/tmpbcjyu_pm.swift:30:24: error: cannot\
    \ convert return expression of type 'Double' to return type 'Value?'\n       \
    \         return d // Return d\n                       ^\n/tmp/tmpbcjyu_pm.swift:32:20:\
    \ error: cannot convert return expression of type 'String' to return type 'Value?'\n\
    \            return s // Return s\n                   ^\n/tmp/tmpbcjyu_pm.swift:36:24:\
    \ error: cannot find 'i' in scope\n        case .intValue(i):\n              \
    \         ^\n/tmp/tmpbcjyu_pm.swift:37:20: error: cannot convert return expression\
    \ of type 'Double' to return type 'Value?'\n            return d // Return d\n\
    \                   ^\n/tmp/tmpbcjyu_pm.swift:39:20: error: cannot convert return\
    \ expression of type 'Double' to return type 'Value?'\n            return d //\
    \ Return d\n                   ^\n/tmp/tmpbcjyu_pm.swift:42:24: error: cannot\
    \ convert return expression of type 'Int' to return type 'Value?'\n          \
    \      return i // Return i\n                       ^\n/tmp/tmpbcjyu_pm.swift:45:24:\
    \ error: cannot convert return expression of type 'Double' to return type 'Value?'\n\
    \                return d // Return d\n                       ^\n/tmp/tmpbcjyu_pm.swift:47:20:\
    \ error: cannot convert return expression of type 'String' to return type 'Value?'\n\
    \            return s // Return s\n                   ^\n/tmp/tmpbcjyu_pm.swift:51:24:\
    \ error: cannot find 'i' in scope\n        case .intValue(i)"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(aInt),\
    \ .doubleValue(aDouble), .stringValue(aString):\n        switch b { // Compare\
    \ two values\n        case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n\
    \            return aInt > bInt || (aInt == bInt && aDouble > bDouble)\n     \
    \   case .stringValue(bString):\n            return aString > bString\n      \
    \  case .doubleValue(bDouble):\n            return aDouble > bDouble\n       \
    \ case .intValue(bInt):\n            return aInt > bInt\n        default:\n  \
    \          return nil\n        }\n    case .stringValue(aString):\n        switch\
    \ b { // Compare two values\n        case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n            return aString > bString\n        case .stringValue(bString):\n\
    \            return aString > bString\n        case .doubleValue(bDouble):\n \
    \           return aString > bString\n        case .intValue(bInt):\n        \
    \    return aString > bString\n        default:\n            return nil\n    \
    \    }\n    case .doubleValue(aDouble):\n        switch b { // Compare two values\n\
    \        case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n\
    \            return aDouble > bDouble\n        case .stringValue(bString):\n \
    \           return aDouble > bString\n        case .doubleValue(bDouble):\n  \
    \          return aDouble > bDouble\n        case .intValue(bInt):\n         \
    \   return aDouble > bDouble\n        default:\n            return nil\n     \
    \   }\n    case .intValue(aInt):\n        switch b { // Compare two values\n \
    \       case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n\
    \            return aInt > bInt\n        case .stringValue(bString):\n       \
    \     return aInt > bString\n        case .doubleValue(bDouble):\n           \
    \ return aInt > bDouble\n        case .intValue(bInt):\n            return aInt\
    \ > bInt\n        default:\n            return nil\n        }\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp6x0roo16.swift:19:20: error: cannot find 'aInt' in scope\n    case\
    \ .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n           \
    \        ^~~~\n/tmp/tmp6x0roo16.swift:19:40: error: cannot find 'aDouble' in scope\n\
    \    case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n   \
    \                                    ^~~~~~~\n/tmp/tmp6x0roo16.swift:19:63: error:\
    \ cannot find 'aString' in scope\n    case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n                                                   \
    \           ^~~~~~~\n/tmp/tmp6x0roo16.swift:32:23: error: cannot find 'aString'\
    \ in scope\n    case .stringValue(aString):\n                      ^~~~~~~\n/tmp/tmp6x0roo16.swift:45:23:\
    \ error: cannot find 'aDouble' in scope\n    case .doubleValue(aDouble):\n   \
    \                   ^~~~~~~\n/tmp/tmp6x0roo16.swift:58:20: error: cannot find\
    \ 'aInt' in scope\n    case .intValue(aInt):\n                   ^~~~\n/tmp/tmp6x0roo16.swift:21:24:\
    \ error: cannot find 'bInt' in scope\n        case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n                       ^~~~\n/tmp/tmp6x0roo16.swift:21:44:\
    \ error: cannot find 'bDouble' in scope\n        case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n                                           ^~~~~~~\n\
    /tmp/tmp6x0roo16.swift:21:67: error: cannot find 'bString' in scope\n        case\
    \ .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n           \
    \                                                       ^~~~~~~\n/tmp/tmp6x0roo16.swift:23:27:\
    \ error: cannot find 'bString' in scope\n        case .stringValue(bString):\n\
    \                          ^~~~~~~\n/tmp/tmp6x0roo16.swift:25:27: error: cannot\
    \ find 'bDouble' in scope\n        case .doubleValue(bDouble):\n             \
    \             ^~~~~~~\n/tmp/tmp6x0roo16.swift:27:24: error: cannot find 'bInt'\
    \ in scope\n        case .intValue(bInt):\n                       ^~~~\n/tmp/tmp6x0roo16.swift:22:20:\
    \ error: cannot find 'aInt' in scope\n            return aInt > bInt || (aInt\
    \ == bInt && aDouble > bDouble)"
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpmzfiigdx/tmpmzfiigdx.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba5a3c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba5a0bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba5a0bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba5a0bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzfiigdx                        0x000055ebafbe4a56 <unavailable> + 6742

    5    libc.so.6                          0x00002aba5a5b2460 __libc_start_main +
    245

    6    tmpmzfiigdx                        0x000055ebafbe4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n \
    \       case .doubleValue(_):\n            return .doubleValue(a.doubleValue >\
    \ b.doubleValue ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.intValue ? a.doubleValue : b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue\
    \ : b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    case .stringValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .stringValue(a.stringValue > b.intValue ? a.stringValue : b.stringValue)\n\
    \        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.doubleValue ? a.stringValue : b.stringValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpt1cm97dk.swift:22:54: error: cannot convert value of type '(Int)\
    \ -> Value' to expected argument type 'Int'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \                   ^\n/tmp/tmpt1cm97dk.swift:22:30: error: enum case 'intValue'\
    \ cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                             ^\n  \
    \                           Value\n/tmp/tmpt1cm97dk.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmpt1cm97dk.swift:22:41: note: only concrete types such as structs,\
    \ enums and classes can conform to protocols\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmpt1cm97dk.swift:22:41: note: required by referencing operator\
    \ function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                           ^\n/tmp/tmpt1cm97dk.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \        ^\n                                          Value\n/tmp/tmpt1cm97dk.swift:22:56:\
    \ error: enum case 'intValue' cannot be used as an instance member\n         \
    \   return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n    \
    \                                                   ^\n                      \
    \                                 Value\n/tmp/tmpt1cm97dk.swift:22:69: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                                                       ^\n                  \
    \                                "
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is larger\n    case .intValue(_):\n\
    \        switch b { // b is larger\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is larger\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is larger\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpvknks4wd/tmpvknks4wd.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad27d90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad27a87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad27a87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad27a867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvknks4wd                        0x00005626aa520a56 <unavailable> + 6742

    5    libc.so.6                          0x00002aad27f7c460 __libc_start_main +
    245

    6    tmpvknks4wd                        0x00005626aa520499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpmzfiigdx/tmpmzfiigdx.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba5a3c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba5a0bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba5a0bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba5a0bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzfiigdx                        0x000055ebafbe4a56 <unavailable> + 6742

    5    libc.so.6                          0x00002aba5a5b2460 __libc_start_main +
    245

    6    tmpmzfiigdx                        0x000055ebafbe4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n            return aInt > bInt ? .intValue(aInt) : aDouble\
    \ > bDouble ? .doubleValue(aDouble) : aString > bString ? .stringValue(aString)\
    \ : nil\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp_wfnu__3.swift:18:31: error: cannot find 'aInt' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                            ^~~~\n/tmp/tmp_wfnu__3.swift:18:51: error: cannot\
    \ find 'aDouble' in scope\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n                                                  ^~~~~~~\n\
    /tmp/tmp_wfnu__3.swift:18:74: error: cannot find 'aString' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                                                                       ^~~~~~~\n\
    /tmp/tmp_wfnu__3.swift:19:35: error: cannot find 'bInt' in scope\n        switch\
    \ b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n  \
    \                                ^~~~\n/tmp/tmp_wfnu__3.swift:19:55: error: cannot\
    \ find 'bDouble' in scope\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n                                                   \
    \   ^~~~~~~\n/tmp/tmp_wfnu__3.swift:19:78: error: cannot find 'bString' in scope\n\
    \        switch b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n\
    \                                                                            \
    \ ^~~~~~~\n/tmp/tmp_wfnu__3.swift:20:20: error: cannot find 'aInt' in scope\n\
    \            return aInt > bInt ? .intValue(aInt) : aDouble > bDouble ? .doubleValue(aDouble)\
    \ : aString > bString ? .stringValue(aString) : nil\n                   ^~~~\n\
    /tmp/tmp_wfnu__3.swift:20:27: error: cannot find 'bInt' in scope\n           \
    \ return aInt > bInt ? .intValue(aInt) : aDouble > bDouble ? .doubleValue(aDouble)\
    \ : aString > bString ? .stringValue(aString) : nil\n                        \
    \  ^~~~\n/tmp/tmp_wfnu__3.swift:20:44: error: cannot find 'aInt' in scope\n  \
    \          return aInt > bInt ? .intValue(aInt) : aDouble > bDouble ? .doubleValue(aDouble)\
    \ : aString > bString ? .stringValue(aString) : nil\n                        \
    \                   ^~~~\n/tmp/tmp_wfnu__3.swift:20:52: error: cannot find "
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        return b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    \n    switch b { // b is smaller\n    case .intValue(_):\n\
    \        return a\n    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n\
    \        return a\n    }\n    \n    // both are strings\n    if a.stringValue\
    \ < b.stringValue {\n        return a\n    } else {\n        return b\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpvn51casj.swift:37:22: error: binary operator '<' cannot be applied\
    \ to two '(String) -> Value' operands\n    if a.stringValue < b.stringValue {\n\
    \       ~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ .intValue(a)\n        case .doubleValue(_):\n            return .doubleValue(a)\n\
    \        case .stringValue(_):\n            return .stringValue(a)\n        }\n\
    \    case .doubleValue(_):\n        switch b { // b is smaller\n        case .intValue(_):\n\
    \            return .doubleValue(a)\n        case .doubleValue(_):\n         \
    \   return .doubleValue(a)\n        case .stringValue(_):\n            return\
    \ .stringValue(a)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ b is smaller\n        case .intValue(_):\n            return .stringValue(a)\n\
    \        case .doubleValue(_):\n            return .stringValue(a)\n        case\
    \ .stringValue(_):\n            return .stringValue(a)\n        }\n    }\n   \
    \ return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1),\
    \ b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpuxws9iax.swift:22:30: error: cannot convert value of type 'Value'\
    \ to expected argument type 'Int'\n            return .intValue(a)\n         \
    \                    ^\n/tmp/tmpuxws9iax.swift:24:33: error: cannot convert value\
    \ of type 'Value' to expected argument type 'Double'\n            return .doubleValue(a)\n\
    \                                ^\n/tmp/tmpuxws9iax.swift:26:33: error: cannot\
    \ convert value of type 'Value' to expected argument type 'String'\n         \
    \   return .stringValue(a)\n                                ^\n/tmp/tmpuxws9iax.swift:31:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Double'\n\
    \            return .doubleValue(a)\n                                ^\n/tmp/tmpuxws9iax.swift:33:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Double'\n\
    \            return .doubleValue(a)\n                                ^\n/tmp/tmpuxws9iax.swift:35:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \            return .stringValue(a)\n                                ^\n/tmp/tmpuxws9iax.swift:40:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \            return .stringValue(a)\n                                ^\n/tmp/tmpuxws9iax.swift:42:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \            return .stringValue(a)\n                                ^\n/tmp/tmpuxws9iax.swift:44:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \            return .stringValue(a)\n                                ^\n"
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpmzfiigdx/tmpmzfiigdx.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba5a3c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba5a0bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba5a0bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba5a0bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzfiigdx                        0x000055ebafbe4a56 <unavailable> + 6742

    5    libc.so.6                          0x00002aba5a5b2460 __libc_start_main +
    245

    6    tmpmzfiigdx                        0x000055ebafbe4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // case Int\n    case .intValue(_):\n   \
    \     switch b { // case Int\n        case .intValue(_):\n            return .intValue(a)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a)\n        case\
    \ .stringValue(_):\n            return .stringValue(a)\n        }\n    case .doubleValue(_):\n\
    \        switch b { // case Double\n        case .intValue(_):\n            return\
    \ .doubleValue(a)\n        case .doubleValue(_):\n            return .doubleValue(a)\n\
    \        case .stringValue(_):\n            return .stringValue(a)\n        }\n\
    \    case .stringValue(_):\n        switch b { // case String\n        case .intValue(_):\n\
    \            return .stringValue(a)\n        case .doubleValue(_):\n         \
    \   return .stringValue(a)\n        case .stringValue(_):\n            return\
    \ .stringValue(a)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp_hgn7q5d.swift:22:30: error: cannot convert value of type 'Value'\
    \ to expected argument type 'Int'\n            return .intValue(a)\n         \
    \                    ^\n/tmp/tmp_hgn7q5d.swift:24:33: error: cannot convert value\
    \ of type 'Value' to expected argument type 'Double'\n            return .doubleValue(a)\n\
    \                                ^\n/tmp/tmp_hgn7q5d.swift:26:33: error: cannot\
    \ convert value of type 'Value' to expected argument type 'String'\n         \
    \   return .stringValue(a)\n                                ^\n/tmp/tmp_hgn7q5d.swift:31:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Double'\n\
    \            return .doubleValue(a)\n                                ^\n/tmp/tmp_hgn7q5d.swift:33:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Double'\n\
    \            return .doubleValue(a)\n                                ^\n/tmp/tmp_hgn7q5d.swift:35:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \            return .stringValue(a)\n                                ^\n/tmp/tmp_hgn7q5d.swift:40:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \            return .stringValue(a)\n                                ^\n/tmp/tmp_hgn7q5d.swift:42:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \            return .stringValue(a)\n                                ^\n/tmp/tmp_hgn7q5d.swift:44:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \            return .stringValue(a)\n                                ^\n"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n \
    \       case .doubleValue(_):\n            return .doubleValue(a.doubleValue >\
    \ b.doubleValue ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.intValue ? a.doubleValue : b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue\
    \ : b.doubleValue)\n        case .stringValue(_):\n            return .doubleValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        case .stringValue(_):\n\
    \            return .doubleValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.intValue ? a.stringValue : b.stringValue)\n        case .doubleValue(_):\n\
    \            return .stringValue(a.stringValue > b.doubleValue ? a.stringValue\
    \ : b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1),\
    \ b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpd6f0x855.swift:22:54: error: cannot convert value of type '(Int)\
    \ -> Value' to expected argument type 'Int'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \                   ^\n/tmp/tmpd6f0x855.swift:22:30: error: enum case 'intValue'\
    \ cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                             ^\n  \
    \                           Value\n/tmp/tmpd6f0x855.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmpd6f0x855.swift:22:41: note: only concrete types such as structs,\
    \ enums and classes can conform to protocols\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmpd6f0x855.swift:22:41: note: required by referencing operator\
    \ function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                           ^\n/tmp/tmpd6f0x855.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \        ^\n                                          Value\n/tmp/tmpd6f0x855.swift:22:56:\
    \ error: enum case 'intValue' cannot be used as an instance member\n         \
    \   return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n    \
    \                                                   ^\n                      \
    \                                 Value\n/tmp/tmpd6f0x855.swift:22:69: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                                                       ^\n                  \
    \                                "
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        switch b { // Compare two ints\n        case .intValue(_):\n        \
    \    return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Compare two doubles\n\
    \        case .intValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Compare two strings\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp7yid9e2l.swift:22:41: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n            return .intValue(a.intValue > b.intValue)\n\
    \                                        ^\n/tmp/tmp7yid9e2l.swift:22:30: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue)\n                             ^\n       \
    \                      Value\n/tmp/tmp7yid9e2l.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue)\n                                        ^\n/tmp/tmp7yid9e2l.swift:22:41:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n            return .intValue(a.intValue > b.intValue)\n         \
    \                               ^\n/tmp/tmp7yid9e2l.swift:22:41: note: required\
    \ by referencing operator function '>' on 'Comparable' where 'Self' = '(Int) ->\
    \ Value'\n            return .intValue(a.intValue > b.intValue)\n            \
    \                            ^\n/tmp/tmp7yid9e2l.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue)\n                                          ^\n               \
    \                           Value\n/tmp/tmp7yid9e2l.swift:24:47: error: cannot\
    \ convert value of type 'Bool' to expected argument type 'Double'\n          \
    \  return .doubleValue(a.doubleValue > b.doubleValue)\n                      \
    \                        ^\n/tmp/tmp7yid9e2l.swift:24:33: error: enum case 'doubleValue'\
    \ cannot be used as an instance member\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n                                ^\n                      \
    \          Value\n/tmp/tmp7yid9e2l.swift:24:47: error: type '(Double) -> Value'\
    \ cannot conform to 'Comparable'\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n                                              ^\n/tmp/tmp7yid9e2l.swift:24:47:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ proto"
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        switch b { // Compare two integers\n        case .intValue(_):\n    \
    \        return a\n        case .doubleValue(_):\n            return b\n     \
    \   case .stringValue(_):\n            return b\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Compare two doubles\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { // Compare two strings\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return b\n        }\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: Exception
  stderr: 'tmpd6fg4wa3/tmpd6fg4wa3.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba22dea8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba22db9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba22db9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba22db9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd6fg4wa3                        0x000055f29c751a56 <unavailable> + 6742

    5    libc.so.6                          0x00002ba22e094460 __libc_start_main +
    245

    6    tmpd6fg4wa3                        0x000055f29c751499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        switch b { // Compare two integers\n        case .intValue(_):\n    \
    \        return a\n        case .doubleValue(_):\n            return b\n     \
    \   case .stringValue(_):\n            return b\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Compare two doubles\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { // Compare two strings\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return b\n        }\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: Exception
  stderr: 'tmpd6fg4wa3/tmpd6fg4wa3.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba22dea8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba22db9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba22db9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba22db9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd6fg4wa3                        0x000055f29c751a56 <unavailable> + 6742

    5    libc.so.6                          0x00002ba22e094460 __libc_start_main +
    245

    6    tmpd6fg4wa3                        0x000055f29c751499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n \
    \       case .doubleValue(_):\n            return .doubleValue(a.doubleValue >\
    \ b.doubleValue ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.intValue ? a.doubleValue : b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue\
    \ : b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.intValue ? a.stringValue : b.stringValue)\n        case .doubleValue(_):\n\
    \            return .stringValue(a.stringValue > b.doubleValue ? a.stringValue\
    \ : b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1),\
    \ b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp7yyyx55x.swift:22:54: error: cannot convert value of type '(Int)\
    \ -> Value' to expected argument type 'Int'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \                   ^\n/tmp/tmp7yyyx55x.swift:22:30: error: enum case 'intValue'\
    \ cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                             ^\n  \
    \                           Value\n/tmp/tmp7yyyx55x.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmp7yyyx55x.swift:22:41: note: only concrete types such as structs,\
    \ enums and classes can conform to protocols\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmp7yyyx55x.swift:22:41: note: required by referencing operator\
    \ function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                           ^\n/tmp/tmp7yyyx55x.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \        ^\n                                          Value\n/tmp/tmp7yyyx55x.swift:22:56:\
    \ error: enum case 'intValue' cannot be used as an instance member\n         \
    \   return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n    \
    \                                                   ^\n                      \
    \                                 Value\n/tmp/tmp7yyyx55x.swift:22:69: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                                                       ^\n                  \
    \                                "
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is larger\n    case .intValue(_):\n\
    \        switch b { // b is larger\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is larger\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is larger\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpvknks4wd/tmpvknks4wd.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad27d90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad27a87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad27a87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad27a867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvknks4wd                        0x00005626aa520a56 <unavailable> + 6742

    5    libc.so.6                          0x00002aad27f7c460 __libc_start_main +
    245

    6    tmpvknks4wd                        0x00005626aa520499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        switch b { // Compare two integers\n        case .intValue(_):\n    \
    \        return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Compare two doubles\n\
    \        case .intValue(_):\n            return .intValue(a.doubleValue > b.doubleValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Compare two strings\n        case .intValue(_):\n            return .intValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .doubleValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpr5qc8kox.swift:22:41: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n            return .intValue(a.intValue > b.intValue)\n\
    \                                        ^\n/tmp/tmpr5qc8kox.swift:22:30: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue)\n                             ^\n       \
    \                      Value\n/tmp/tmpr5qc8kox.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue)\n                                        ^\n/tmp/tmpr5qc8kox.swift:22:41:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n            return .intValue(a.intValue > b.intValue)\n         \
    \                               ^\n/tmp/tmpr5qc8kox.swift:22:41: note: required\
    \ by referencing operator function '>' on 'Comparable' where 'Self' = '(Int) ->\
    \ Value'\n            return .intValue(a.intValue > b.intValue)\n            \
    \                            ^\n/tmp/tmpr5qc8kox.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue)\n                                          ^\n               \
    \                           Value\n/tmp/tmpr5qc8kox.swift:24:47: error: cannot\
    \ convert value of type 'Bool' to expected argument type 'Double'\n          \
    \  return .doubleValue(a.doubleValue > b.doubleValue)\n                      \
    \                        ^\n/tmp/tmpr5qc8kox.swift:24:33: error: enum case 'doubleValue'\
    \ cannot be used as an instance member\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n                                ^\n                      \
    \          Value\n/tmp/tmpr5qc8kox.swift:24:47: error: type '(Double) -> Value'\
    \ cannot conform to 'Comparable'\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n                                              ^\n/tmp/tmpr5qc8kox.swift:24:47:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ proto"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is larger\n    case .intValue(_):\n\
    \        return b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    \n    switch b { // b is larger\n    case .intValue(_):\n\
    \        return a\n    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n\
    \        return a\n    }\n    \n    // both are strings\n    if a.stringValue\
    \ < b.stringValue {\n        return a\n    }\n    \n    return b\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp6ogassfc.swift:37:22: error: binary operator '<' cannot be applied\
    \ to two '(String) -> Value' operands\n    if a.stringValue < b.stringValue {\n\
    \       ~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Switch on b's type\n\
    \        case .intValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpv2k5crwr.swift:22:41: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n            return .intValue(a.intValue > b.intValue)\n\
    \                                        ^\n/tmp/tmpv2k5crwr.swift:22:30: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue)\n                             ^\n       \
    \                      Value\n/tmp/tmpv2k5crwr.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue)\n                                        ^\n/tmp/tmpv2k5crwr.swift:22:41:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n            return .intValue(a.intValue > b.intValue)\n         \
    \                               ^\n/tmp/tmpv2k5crwr.swift:22:41: note: required\
    \ by referencing operator function '>' on 'Comparable' where 'Self' = '(Int) ->\
    \ Value'\n            return .intValue(a.intValue > b.intValue)\n            \
    \                            ^\n/tmp/tmpv2k5crwr.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue)\n                                          ^\n               \
    \                           Value\n/tmp/tmpv2k5crwr.swift:24:47: error: cannot\
    \ convert value of type 'Bool' to expected argument type 'Double'\n          \
    \  return .doubleValue(a.doubleValue > b.doubleValue)\n                      \
    \                        ^\n/tmp/tmpv2k5crwr.swift:24:33: error: enum case 'doubleValue'\
    \ cannot be used as an instance member\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n                                ^\n                      \
    \          Value\n/tmp/tmpv2k5crwr.swift:24:47: error: type '(Double) -> Value'\
    \ cannot conform to 'Comparable'\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n                                              ^\n/tmp/tmpv2k5crwr.swift:24:47:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ proto"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Handle ints\n    case .intValue(_):\n\
    \        switch b { // Handle ints\n        case .intValue(_):\n            return\
    \ .intValue(a.intValue() < b.intValue())\n        case .doubleValue(_):\n    \
    \        return .doubleValue(a.doubleValue() < b.doubleValue())\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue() < b.stringValue())\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Handle doubles\n\
    \        case .intValue(_):\n            return .doubleValue(a.doubleValue() <\
    \ b.intValue())\n        case .doubleValue(_):\n            return .doubleValue(a.doubleValue()\
    \ < b.doubleValue())\n        case .stringValue(_):\n            return .stringValue(a.stringValue()\
    \ < b.stringValue())\n        }\n    case .stringValue(_):\n        switch b {\
    \ // Handle strings\n        case .intValue(_):\n            return .stringValue(a.stringValue()\
    \ < b.intValue())\n        case .doubleValue(_):\n            return .stringValue(a.stringValue()\
    \ < b.doubleValue())\n        case .stringValue(_):\n            return .stringValue(a.stringValue()\
    \ < b.stringValue())\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpwo4zy6j9.swift:22:43: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n            return .intValue(a.intValue() <\
    \ b.intValue())\n                                          ^\n/tmp/tmpwo4zy6j9.swift:22:41:\
    \ error: missing argument for parameter #1 in call\n            return .intValue(a.intValue()\
    \ < b.intValue())\n                                        ^\n               \
    \                         <#Int#>\n/tmp/tmpwo4zy6j9.swift:3:10: note: 'intValue'\
    \ declared here\n    case intValue(Int)\n         ^\n/tmp/tmpwo4zy6j9.swift:22:30:\
    \ error: enum case 'intValue' cannot be used as an instance member\n         \
    \   return .intValue(a.intValue() < b.intValue())\n                          \
    \   ^\n                             Value\n/tmp/tmpwo4zy6j9.swift:22:43: error:\
    \ referencing operator function '<' on 'Comparable' requires that 'Value' conform\
    \ to 'Comparable'\n            return .intValue(a.intValue() < b.intValue())\n\
    \                                          ^\nSwift.Comparable:1:17: note: where\
    \ 'Self' = 'Value'\npublic protocol Comparable : Equatable {\n               \
    \ ^\n/tmp/tmpwo4zy6j9.swift:22:43: note: binary operator '<' cannot be synthesized\
    \ for enums with associated values\n            return .intValue(a.intValue()\
    \ < b.intValue())\n                                          ^\n/tmp/tmpwo4zy6j9.swift:22:45:\
    \ error: enum case 'intValue' cannot be used as an instance member\n         \
    \   return .intValue(a.intValue() < b.intValue())\n                          \
    \                  ^\n                                            Value\n/tmp/tmpwo4zy6j9.swift:22:56:\
    \ error: missing argument for parameter #1 in call\n            return .intValue(a.intValue()\
    \ < b.intValue())\n                                                       ^\n\
    \                                                       <#Int#>\n/tmp/tmpwo4zy6j9.swift:3:10:\
    \ note: 'intValue' declared here\n    case intValue(Int)\n         ^\n/tmp/tmpwo4zy6j9.swift:24:49:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Double'\n\
    \            return .doubleValue(a."
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        switch b { // Compare two integers\n        case .intValue(_):\n    \
    \        return a\n        case .doubleValue(_):\n            return b\n     \
    \   case .stringValue(_):\n            return b\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Compare two doubles\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { // Compare two strings\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return b\n        }\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: Exception
  stderr: 'tmpd6fg4wa3/tmpd6fg4wa3.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba22dea8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba22db9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba22db9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba22db9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd6fg4wa3                        0x000055f29c751a56 <unavailable> + 6742

    5    libc.so.6                          0x00002ba22e094460 __libc_start_main +
    245

    6    tmpd6fg4wa3                        0x000055f29c751499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        return b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    \n    switch b { // b is smaller\n    case .intValue(_):\n\
    \        return a\n    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n\
    \        return a\n    }\n    \n    // Both are strings\n    if a.stringValue()\
    \ < b.stringValue() {\n        return a\n    }\n    \n    return b\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpbbxfb7a_.swift:37:8: error: enum case 'stringValue' cannot be used\
    \ as an instance member\n    if a.stringValue() < b.stringValue() {\n       ^\n\
    \       Value\n/tmp/tmpbbxfb7a_.swift:37:22: error: missing argument for parameter\
    \ #1 in call\n    if a.stringValue() < b.stringValue() {\n                   \
    \  ^\n                     <#String#>\n/tmp/tmpbbxfb7a_.swift:5:10: note: 'stringValue'\
    \ declared here\n    case stringValue(String)\n         ^\n/tmp/tmpbbxfb7a_.swift:37:24:\
    \ error: referencing operator function '<' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n    if a.stringValue() < b.stringValue() {\n      \
    \                 ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic\
    \ protocol Comparable : Equatable {\n                ^\n/tmp/tmpbbxfb7a_.swift:37:24:\
    \ note: binary operator '<' cannot be synthesized for enums with associated values\n\
    \    if a.stringValue() < b.stringValue() {\n                       ^\n/tmp/tmpbbxfb7a_.swift:37:26:\
    \ error: enum case 'stringValue' cannot be used as an instance member\n    if\
    \ a.stringValue() < b.stringValue() {\n                         ^\n          \
    \               Value\n/tmp/tmpbbxfb7a_.swift:37:40: error: missing argument for\
    \ parameter #1 in call\n    if a.stringValue() < b.stringValue() {\n         \
    \                              ^\n                                       <#String#>\n\
    /tmp/tmpbbxfb7a_.swift:5:10: note: 'stringValue' declared here\n    case stringValue(String)\n\
    \         ^\n"
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // case Int\n    case .intValue(_):\n   \
    \     switch b { // case Int\n        case .intValue(_):\n            return b\n\
    \        case .doubleValue(_):\n            return a\n        case .stringValue(_):\n\
    \            return a\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // case Double\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // case String\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return a\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmp3hu5dwb4/tmp3hu5dwb4.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5154bf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51548eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51548ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51548ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3hu5dwb4                        0x000055a18a2d4d54 <unavailable> + 7508

    5    libc.so.6                          0x00002b5154de3460 __libc_start_main +
    245

    6    tmp3hu5dwb4                        0x000055a18a2d4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        return b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    switch b { // b is smaller\n    case .intValue(_):\n\
    \        return a\n    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n\
    \        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a:\
    \ .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a:\
    \ .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5),\
    \ b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"\
    2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"\
    ), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmp7ichj13i/tmp7ichj13i.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af347505c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3471fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3471fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3471fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ichj13i                        0x000055ebdd94001a <unavailable> + 12314

    5    libc.so.6                          0x00002af3476f1460 __libc_start_main +
    245

    6    tmp7ichj13i                        0x000055ebdd93e499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(aInt):\n\
    \        switch b { // Compare two integers\n        case .intValue(bInt):\n \
    \           return aInt > bInt ? .intValue(aInt) : .intValue(bInt)\n        case\
    \ .doubleValue(bDouble):\n            return aInt > bDouble ? .intValue(aInt)\
    \ : .doubleValue(bDouble)\n        case .stringValue(bString):\n            return\
    \ aInt > bString ? .intValue(aInt) : .stringValue(bString)\n        }\n    case\
    \ .doubleValue(aDouble):\n        switch b { // Compare two doubles\n        case\
    \ .intValue(bInt):\n            return aDouble > bInt ? .doubleValue(aDouble)\
    \ : .intValue(bInt)\n        case .doubleValue(bDouble):\n            return aDouble\
    \ > bDouble ? .doubleValue(aDouble) : .doubleValue(bDouble)\n        case .stringValue(bString):\n\
    \            return aDouble > bString ? .doubleValue(aDouble) : .stringValue(bString)\n\
    \        }\n    case .stringValue(aString):\n        switch b { // Compare two\
    \ strings\n        case .intValue(bInt):\n            return aString > bInt ?\
    \ .stringValue(aString) : .intValue(bInt)\n        case .doubleValue(bDouble):\n\
    \            return aString > bDouble ? .stringValue(aString) : .doubleValue(bDouble)\n\
    \        case .stringValue(bString):\n            return aString > bString ? .stringValue(aString)\
    \ : .stringValue(bString)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp0ijw4vwv.swift:19:20: error: cannot find 'aInt' in scope\n    case\
    \ .intValue(aInt):\n                   ^~~~\n/tmp/tmp0ijw4vwv.swift:28:23: error:\
    \ cannot find 'aDouble' in scope\n    case .doubleValue(aDouble):\n          \
    \            ^~~~~~~\n/tmp/tmp0ijw4vwv.swift:37:23: error: cannot find 'aString'\
    \ in scope\n    case .stringValue(aString):\n                      ^~~~~~~\n/tmp/tmp0ijw4vwv.swift:21:24:\
    \ error: cannot find 'bInt' in scope\n        case .intValue(bInt):\n        \
    \               ^~~~\n/tmp/tmp0ijw4vwv.swift:23:27: error: cannot find 'bDouble'\
    \ in scope\n        case .doubleValue(bDouble):\n                          ^~~~~~~\n\
    /tmp/tmp0ijw4vwv.swift:25:27: error: cannot find 'bString' in scope\n        case\
    \ .stringValue(bString):\n                          ^~~~~~~\n/tmp/tmp0ijw4vwv.swift:22:20:\
    \ error: cannot find 'aInt' in scope\n            return aInt > bInt ? .intValue(aInt)\
    \ : .intValue(bInt)\n                   ^~~~\n/tmp/tmp0ijw4vwv.swift:22:27: error:\
    \ cannot find 'bInt' in scope\n            return aInt > bInt ? .intValue(aInt)\
    \ : .intValue(bInt)\n                          ^~~~\n/tmp/tmp0ijw4vwv.swift:22:44:\
    \ error: cannot find 'aInt' in scope\n            return aInt > bInt ? .intValue(aInt)\
    \ : .intValue(bInt)\n                                           ^~~~\n/tmp/tmp0ijw4vwv.swift:22:62:\
    \ error: cannot find 'bInt' in scope\n            return aInt > bInt ? .intValue(aInt)\
    \ : .intValue(bInt)\n                                                        \
    \     ^~~~\n/tmp/tmp0ijw4vwv.swift:24:20: error: cannot find 'aInt' in scope\n\
    \            return aInt > bDouble ? .intValue(aInt) : .doubleValue(bDouble)\n\
    \                   ^~~~\n/tmp/tmp0ijw4vwv.swift:24:27: error: cannot find 'bDouble'\
    \ in scope\n            return aInt > bDouble ? .intValue(aInt) : .doubleValue(bDouble)\n\
    \                          ^~~~~~~\n/tmp/tmp0ijw4vwv.swift:24:47: error: cannot\
    \ find 'aInt' in scope\n            return aInt > bDouble ? .intValue(aInt) :\
    \ .doubleValue(bDouble)\n                                              ^~~~\n\
    /tmp/tmp0ijw4vwv.swift:24:68: error: canno"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n            if aInt == bInt {\n                return\
    \ aDouble\n            } else if aDouble == bDouble {\n                return\
    \ aString\n            } else {\n                return bString\n            }\n\
    \        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp6h4u14gg.swift:18:31: error: cannot find 'aInt' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                            ^~~~\n/tmp/tmp6h4u14gg.swift:18:51: error: cannot\
    \ find 'aDouble' in scope\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n                                                  ^~~~~~~\n\
    /tmp/tmp6h4u14gg.swift:18:74: error: cannot find 'aString' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                                                                       ^~~~~~~\n\
    /tmp/tmp6h4u14gg.swift:19:35: error: cannot find 'bInt' in scope\n        switch\
    \ b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n  \
    \                                ^~~~\n/tmp/tmp6h4u14gg.swift:19:55: error: cannot\
    \ find 'bDouble' in scope\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n                                                   \
    \   ^~~~~~~\n/tmp/tmp6h4u14gg.swift:19:78: error: cannot find 'bString' in scope\n\
    \        switch b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n\
    \                                                                            \
    \ ^~~~~~~\n/tmp/tmp6h4u14gg.swift:20:16: error: cannot find 'aInt' in scope\n\
    \            if aInt == bInt {\n               ^~~~\n/tmp/tmp6h4u14gg.swift:20:24:\
    \ error: cannot find 'bInt' in scope\n            if aInt == bInt {\n        \
    \               ^~~~\n/tmp/tmp6h4u14gg.swift:21:24: error: cannot find 'aDouble'\
    \ in scope\n                return aDouble\n                       ^~~~~~~\n/tmp/tmp6h4u14gg.swift:22:23:\
    \ error: cannot find 'aDouble' in scope\n            } else if aDouble == bDouble\
    \ {\n                      ^~~~~~~\n/tmp/tmp6h4u14gg.swift:22:34: error: cannot\
    \ find 'bDouble' in scope\n            } else if aDouble == bDouble {\n      \
    \                           ^~~~~~~\n/tmp/tmp6h4u14gg.swift:23:24: error: cannot\
    \ find 'aString' in scope\n                return aString\n                "
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n            return aInt > bInt ? b : a\n        default:\n\
    \            return b\n        }\n    default:\n        return a\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpzvlii6jj.swift:18:31: error: cannot find 'aInt' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                            ^~~~\n/tmp/tmpzvlii6jj.swift:18:51: error: cannot\
    \ find 'aDouble' in scope\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n                                                  ^~~~~~~\n\
    /tmp/tmpzvlii6jj.swift:18:74: error: cannot find 'aString' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                                                                       ^~~~~~~\n\
    /tmp/tmpzvlii6jj.swift:19:35: error: cannot find 'bInt' in scope\n        switch\
    \ b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n  \
    \                                ^~~~\n/tmp/tmpzvlii6jj.swift:19:55: error: cannot\
    \ find 'bDouble' in scope\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n                                                   \
    \   ^~~~~~~\n/tmp/tmpzvlii6jj.swift:19:78: error: cannot find 'bString' in scope\n\
    \        switch b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n\
    \                                                                            \
    \ ^~~~~~~\n/tmp/tmpzvlii6jj.swift:20:20: error: cannot find 'aInt' in scope\n\
    \            return aInt > bInt ? b : a\n                   ^~~~\n/tmp/tmpzvlii6jj.swift:20:27:\
    \ error: cannot find 'bInt' in scope\n            return aInt > bInt ? b : a\n\
    \                          ^~~~\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString) where aInt == bInt where aDouble == bDouble where aString\
    \ == bString where aInt == bInt where aDouble == bDouble where aString == bString\
    \ where aInt == bInt where aDouble == bDouble where aString == bString where aInt\
    \ == bInt where aDouble == bDouble where aString == bString where aInt == bInt\
    \ where aDouble == bDouble where aString == bString where aInt == bInt where aDouble\
    \ == bDouble where aString == bString where aInt == bInt where aDouble == bDouble\
    \ where aString == bString where aInt == bInt where aDouble == bDouble where aString\
    \ == bString where aInt == bInt where aDouble == bDouble where aString == bString\
    \ where aInt == bInt where aDouble == bDouble where aString == bString where aInt\
    \ == bInt where aDouble == bDouble where aString == bString where aInt == bInt\
    \ where aDouble == bDouble where aString == bString where aInt == bInt where aDouble\
    \ == bDouble where aString == bString where aInt == bInt where aDouble == bDouble\
    \ where aString == bString where aInt == bInt where aDouble == bDouble where aString\
    \ == bString where aInt == bInt where aDouble == bDouble where aString == bString\
    \ where aInt == bInt where aDouble == bDouble where aString == bString where aInt\
    \ == bInt where aDouble == bDouble where aString == bString where aInt == bInt\
    \ where aDouble == bDouble where aString == bString where aInt == bInt where aDouble\
    \ == bDouble where aString == bString where aInt == bInt where aDouble == bDouble\
    \ where aString == bString where aInt == bInt where aDouble == bDouble where aString\
    \ == bString where aInt == bInt where aDouble == bDouble where aString == bString\
    \ where aInt == bInt where aDouble == bDouble where aString == bString where aInt\
    \ == bInt where aDou\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp8kozlnh0.swift:18:102: error: expected ':' after 'case'\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString) where\
    \ aInt == bInt where aDouble == bDouble where aString == bString where aInt ==\
    \ bInt where aDouble == bDouble where aString == bString where aInt == bInt where\
    \ aDouble == bDouble where aString == bString where aInt == bInt where aDouble\
    \ == bDouble where aString == bString where aInt == bInt where aDouble == bDouble\
    \ where aString == bString where aInt == bInt where aDouble == bDouble where aString\
    \ == bString where aInt == bInt where aDouble == bDouble where aString == bString\
    \ where aInt == bInt where aDouble == bDouble where aString == bString where aInt\
    \ == bInt where aDouble == bDouble where aString == bString where aInt == bInt\
    \ where aDouble == bDouble where aString == bString where aInt == bInt where aDouble\
    \ == bDouble where aString == bString where aInt == bInt where aDouble == bDouble\
    \ where aString == bString where aInt == bInt where aDouble == bDouble where aString\
    \ == bString where aInt == bInt where aDouble == bDouble where aString == bString\
    \ where aInt == bInt where aDouble == bDouble where aString == bString where aInt\
    \ == bInt where aDouble == bDouble where aString == bString where aInt == bInt\
    \ where aDouble == bDouble where aString == bString where aInt == bInt where aDouble\
    \ == bDouble where aString == bString where aInt == bInt where aDouble == bDouble\
    \ where aString == bString where aInt == bInt where aDouble == bDouble where aString\
    \ == bString where aInt == bInt where aDouble == bDouble where aString == bString\
    \ where aInt == bInt where aDouble == bDouble where aString == bString where aInt\
    \ == bInt where aDouble == bDouble where aString == bString where aInt == bInt\
    \ where aDouble == bDouble where aString == bString where aInt == bInt where aDou\n\
    \                                                                            \
    \                         ^\n/tmp/tmp8kozlnh0.swift:18:102: error: expected expression\n\
    \    switch a { case .intValue(aInt), .doubleValue(aDoub"
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpmzfiigdx/tmpmzfiigdx.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba5a3c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba5a0bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba5a0bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba5a0bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzfiigdx                        0x000055ebafbe4a56 <unavailable> + 6742

    5    libc.so.6                          0x00002aba5a5b2460 __libc_start_main +
    245

    6    tmpmzfiigdx                        0x000055ebafbe4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // case Int\n    case .intValue(_):\n   \
    \     switch b { // case Int\n        case .intValue(_):\n            return a\n\
    \        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // case Double\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // case String\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmp9cfzgw95/tmp9cfzgw95.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acea861dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acea8314b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acea8314988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acea83137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9cfzgw95                        0x00005616c52a8a56 <unavailable> + 6742

    5    libc.so.6                          0x00002acea8809460 __libc_start_main +
    245

    6    tmp9cfzgw95                        0x00005616c52a8499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // case Int\n    case .intValue(_):\n   \
    \     switch b { // case Int\n        case .intValue(_):\n            return a\n\
    \        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // case Double\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // case String\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmp9cfzgw95/tmp9cfzgw95.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acea861dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acea8314b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acea8314988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acea83137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9cfzgw95                        0x00005616c52a8a56 <unavailable> + 6742

    5    libc.so.6                          0x00002acea8809460 __libc_start_main +
    245

    6    tmp9cfzgw95                        0x00005616c52a8499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return a > b ? a : b\n        case .doubleValue(_):\n            return\
    \ a > b ? b : a\n        case .stringValue(_):\n            return a > b ? b :\
    \ a\n        }\n    case .doubleValue(_):\n        switch b { // Switch on b's\
    \ type\n        case .intValue(_):\n            return a > b ? b : a\n       \
    \ case .doubleValue(_):\n            return a > b ? a : b\n        case .stringValue(_):\n\
    \            return a > b ? a : b\n        }\n    case .stringValue(_):\n    \
    \    switch b { // Switch on b's type\n        case .intValue(_):\n          \
    \  return a > b ? b : a\n        case .doubleValue(_):\n            return a >\
    \ b ? a : b\n        case .stringValue(_):\n            return a > b ? a : b\n\
    \        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpdqpouttp.swift:22:22: error: referencing operator function '>'\
    \ on 'Comparable' requires that 'Value' conform to 'Comparable'\n            return\
    \ a > b ? a : b\n                     ^\nSwift.Comparable:1:17: note: where 'Self'\
    \ = 'Value'\npublic protocol Comparable : Equatable {\n                ^\n/tmp/tmpdqpouttp.swift:22:22:\
    \ note: binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? a : b\n                     ^\n/tmp/tmpdqpouttp.swift:24:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? b : a\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmpdqpouttp.swift:24:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? b : a\n                     ^\n/tmp/tmpdqpouttp.swift:26:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? b : a\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmpdqpouttp.swift:26:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? b : a\n                     ^\n/tmp/tmpdqpouttp.swift:31:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? b : a\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmpdqpouttp.swift:31:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? b : a\n                     ^\n/tmp/tmpdqpouttp.swift:33:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? a : b\n              "
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        switch b { // Compare two integers\n        case .intValue(_):\n    \
    \        return a\n        case .doubleValue(_):\n            return b\n     \
    \   case .stringValue(_):\n            return b\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Compare two doubles\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { // Compare two strings\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return b\n        }\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: Exception
  stderr: 'tmpd6fg4wa3/tmpd6fg4wa3.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba22dea8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba22db9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba22db9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba22db9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd6fg4wa3                        0x000055f29c751a56 <unavailable> + 6742

    5    libc.so.6                          0x00002ba22e094460 __libc_start_main +
    245

    6    tmpd6fg4wa3                        0x000055f29c751499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // case Int\n    case .intValue(_):\n   \
    \     switch b { // case Int\n        case .intValue(_):\n            return a\n\
    \        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // case Double\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // case String\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmp9cfzgw95/tmp9cfzgw95.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acea861dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acea8314b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acea8314988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acea83137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9cfzgw95                        0x00005616c52a8a56 <unavailable> + 6742

    5    libc.so.6                          0x00002acea8809460 __libc_start_main +
    245

    6    tmp9cfzgw95                        0x00005616c52a8499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(intVal):\n\
    \        switch b { // Compare two integers\n        case .intValue(intVal):\n\
    \            return intVal\n        case .doubleValue(doubleVal):\n          \
    \  return doubleVal\n        case .stringValue(stringVal):\n            return\
    \ stringVal\n        }\n    case .doubleValue(doubleVal):\n        switch b {\
    \ // Compare two doubles\n        case .intValue(intVal):\n            return\
    \ intVal\n        case .doubleValue(doubleVal):\n            return doubleVal\n\
    \        case .stringValue(stringVal):\n            return stringVal\n       \
    \ }\n    case .stringValue(stringVal):\n        switch b { // Compare two strings\n\
    \        case .intValue(intVal):\n            return intVal\n        case .doubleValue(doubleVal):\n\
    \            return doubleVal\n        case .stringValue(stringVal):\n       \
    \     return stringVal\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpyko0ewbj.swift:19:20: error: cannot find 'intVal' in scope\n  \
    \  case .intValue(intVal):\n                   ^~~~~~\n/tmp/tmpyko0ewbj.swift:28:23:\
    \ error: cannot find 'doubleVal' in scope\n    case .doubleValue(doubleVal):\n\
    \                      ^~~~~~~~~\n/tmp/tmpyko0ewbj.swift:37:23: error: cannot\
    \ find 'stringVal' in scope\n    case .stringValue(stringVal):\n             \
    \         ^~~~~~~~~\n/tmp/tmpyko0ewbj.swift:21:24: error: cannot find 'intVal'\
    \ in scope\n        case .intValue(intVal):\n                       ^~~~~~\n/tmp/tmpyko0ewbj.swift:23:27:\
    \ error: cannot find 'doubleVal' in scope\n        case .doubleValue(doubleVal):\n\
    \                          ^~~~~~~~~\n/tmp/tmpyko0ewbj.swift:25:27: error: cannot\
    \ find 'stringVal' in scope\n        case .stringValue(stringVal):\n         \
    \                 ^~~~~~~~~\n/tmp/tmpyko0ewbj.swift:22:20: error: cannot find\
    \ 'intVal' in scope\n            return intVal\n                   ^~~~~~\n/tmp/tmpyko0ewbj.swift:24:20:\
    \ error: cannot find 'doubleVal' in scope\n            return doubleVal\n    \
    \               ^~~~~~~~~\n/tmp/tmpyko0ewbj.swift:26:20: error: cannot find 'stringVal'\
    \ in scope\n            return stringVal\n                   ^~~~~~~~~\n/tmp/tmpyko0ewbj.swift:30:24:\
    \ error: cannot find 'intVal' in scope\n        case .intValue(intVal):\n    \
    \                   ^~~~~~\n/tmp/tmpyko0ewbj.swift:32:27: error: cannot find 'doubleVal'\
    \ in scope\n        case .doubleValue(doubleVal):\n                          ^~~~~~~~~\n\
    /tmp/tmpyko0ewbj.swift:34:27: error: cannot find 'stringVal' in scope\n      \
    \  case .stringValue(stringVal):\n                          ^~~~~~~~~\n/tmp/tmpyko0ewbj.swift:31:20:\
    \ error: cannot find 'intVal' in scope\n            return intVal\n          \
    \         ^~~~~~\n/tmp/tmpyko0ewbj.swift:33:20: error: cannot find 'doubleVal'\
    \ in scope\n            return doubleVal\n                   ^~~~~~~~~\n/tmp/tmpyko0ewbj.swift:35:20:\
    \ error: cannot find 'stringVal' in scope\n            return stringVal\n    \
    \               ^~~~~~~~~\n/tmp/tmpyko0ewbj.swift:39:24: error: cannot find 'intVal'\
    \ in scope\n    "
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Switch on b's type\n\
    \        case .intValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpv2k5crwr.swift:22:41: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n            return .intValue(a.intValue > b.intValue)\n\
    \                                        ^\n/tmp/tmpv2k5crwr.swift:22:30: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue)\n                             ^\n       \
    \                      Value\n/tmp/tmpv2k5crwr.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue)\n                                        ^\n/tmp/tmpv2k5crwr.swift:22:41:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n            return .intValue(a.intValue > b.intValue)\n         \
    \                               ^\n/tmp/tmpv2k5crwr.swift:22:41: note: required\
    \ by referencing operator function '>' on 'Comparable' where 'Self' = '(Int) ->\
    \ Value'\n            return .intValue(a.intValue > b.intValue)\n            \
    \                            ^\n/tmp/tmpv2k5crwr.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue)\n                                          ^\n               \
    \                           Value\n/tmp/tmpv2k5crwr.swift:24:47: error: cannot\
    \ convert value of type 'Bool' to expected argument type 'Double'\n          \
    \  return .doubleValue(a.doubleValue > b.doubleValue)\n                      \
    \                        ^\n/tmp/tmpv2k5crwr.swift:24:33: error: enum case 'doubleValue'\
    \ cannot be used as an instance member\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n                                ^\n                      \
    \          Value\n/tmp/tmpv2k5crwr.swift:24:47: error: type '(Double) -> Value'\
    \ cannot conform to 'Comparable'\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n                                              ^\n/tmp/tmpv2k5crwr.swift:24:47:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ proto"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue:\n\
    \        switch b { // Switch on b's type\n        case .intValue:\n         \
    \   return a.intValue > b.intValue ? a : b\n        case .doubleValue:\n     \
    \       return a.doubleValue > b.doubleValue ? a : b\n        case .stringValue:\n\
    \            return a.stringValue > b.stringValue ? a : b\n        }\n    case\
    \ .doubleValue:\n        switch b { // Switch on b's type\n        case .intValue:\n\
    \            return a.doubleValue > b.intValue ? a : b\n        case .doubleValue:\n\
    \            return a.doubleValue > b.doubleValue ? a : b\n        case .stringValue:\n\
    \            return a.doubleValue > b.stringValue ? a : b\n        }\n    case\
    \ .stringValue:\n        switch b { // Switch on b's type\n        case .intValue:\n\
    \            return a.stringValue > b.intValue ? a : b\n        case .doubleValue:\n\
    \            return a.stringValue > b.doubleValue ? a : b\n        case .stringValue:\n\
    \            return a.stringValue > b.stringValue ? a : b\n        }\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1),\
    \ b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp9amjf0rd.swift:22:20: error: enum case 'intValue' cannot be used\
    \ as an instance member\n            return a.intValue > b.intValue ? a : b\n\
    \                   ^\n                   Value\n/tmp/tmp9amjf0rd.swift:22:31:\
    \ error: type '(Int) -> Value' cannot conform to 'Comparable'\n            return\
    \ a.intValue > b.intValue ? a : b\n                              ^\n/tmp/tmp9amjf0rd.swift:22:31:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n            return a.intValue > b.intValue ? a : b\n            \
    \                  ^\n/tmp/tmp9amjf0rd.swift:22:31: note: required by referencing\
    \ operator function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n    \
    \        return a.intValue > b.intValue ? a : b\n                            \
    \  ^\n/tmp/tmp9amjf0rd.swift:22:33: error: enum case 'intValue' cannot be used\
    \ as an instance member\n            return a.intValue > b.intValue ? a : b\n\
    \                                ^\n                                Value\n/tmp/tmp9amjf0rd.swift:24:20:\
    \ error: enum case 'doubleValue' cannot be used as an instance member\n      \
    \      return a.doubleValue > b.doubleValue ? a : b\n                   ^\n  \
    \                 Value\n/tmp/tmp9amjf0rd.swift:24:34: error: type '(Double) ->\
    \ Value' cannot conform to 'Comparable'\n            return a.doubleValue > b.doubleValue\
    \ ? a : b\n                                 ^\n/tmp/tmp9amjf0rd.swift:24:34: note:\
    \ only concrete types such as structs, enums and classes can conform to protocols\n\
    \            return a.doubleValue > b.doubleValue ? a : b\n                  \
    \               ^\n/tmp/tmp9amjf0rd.swift:24:34: note: required by referencing\
    \ operator function '>' on 'Comparable' where 'Self' = '(Double) -> Value'\n \
    \           return a.doubleValue > b.doubleValue ? a : b\n                   \
    \              ^\n/tmp/tmp9amjf0rd.swift:24:36: error: enum case 'doubleValue'\
    \ cannot be used as an instance member\n            return a.doubleValue > b.doubleValue\
    \ ? a : b\n                                   ^\n                            \
    \       Value\n/"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // TODO: switch on type\n    case .intValue(_):\n\
    \        return b == .intValue(a)\n    case .doubleValue(_):\n        return b\
    \ == .doubleValue(a)\n    case .stringValue(_):\n        return b == .stringValue(a)\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpjci3nhqs.swift:20:18: error: cannot convert return expression of\
    \ type 'Bool' to return type 'Value?'\n        return b == .intValue(a)\n    \
    \           ~~^~~~~~~~~~~~~~~\n/tmp/tmpjci3nhqs.swift:20:31: error: cannot convert\
    \ value of type 'Value' to expected argument type 'Int'\n        return b == .intValue(a)\n\
    \                              ^\n/tmp/tmpjci3nhqs.swift:22:18: error: cannot\
    \ convert return expression of type 'Bool' to return type 'Value?'\n        return\
    \ b == .doubleValue(a)\n               ~~^~~~~~~~~~~~~~~~~~\n/tmp/tmpjci3nhqs.swift:22:34:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Double'\n\
    \        return b == .doubleValue(a)\n                                 ^\n/tmp/tmpjci3nhqs.swift:24:18:\
    \ error: cannot convert return expression of type 'Bool' to return type 'Value?'\n\
    \        return b == .stringValue(a)\n               ~~^~~~~~~~~~~~~~~~~~\n/tmp/tmpjci3nhqs.swift:24:34:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \        return b == .stringValue(a)\n                                 ^\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpmzfiigdx/tmpmzfiigdx.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba5a3c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba5a0bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba5a0bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba5a0bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzfiigdx                        0x000055ebafbe4a56 <unavailable> + 6742

    5    libc.so.6                          0x00002aba5a5b2460 __libc_start_main +
    245

    6    tmpmzfiigdx                        0x000055ebafbe4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpmzfiigdx/tmpmzfiigdx.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba5a3c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba5a0bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba5a0bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba5a0bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzfiigdx                        0x000055ebafbe4a56 <unavailable> + 6742

    5    libc.so.6                          0x00002aba5a5b2460 __libc_start_main +
    245

    6    tmpmzfiigdx                        0x000055ebafbe4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is larger\n    case .intValue(_):\n\
    \        return b == .intValue(a)\n    case .doubleValue(_):\n        return b\
    \ == .doubleValue(a)\n    case .stringValue(_):\n        return b == .stringValue(a)\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpbc7zhw2f.swift:20:18: error: cannot convert return expression of\
    \ type 'Bool' to return type 'Value?'\n        return b == .intValue(a)\n    \
    \           ~~^~~~~~~~~~~~~~~\n/tmp/tmpbc7zhw2f.swift:20:31: error: cannot convert\
    \ value of type 'Value' to expected argument type 'Int'\n        return b == .intValue(a)\n\
    \                              ^\n/tmp/tmpbc7zhw2f.swift:22:18: error: cannot\
    \ convert return expression of type 'Bool' to return type 'Value?'\n        return\
    \ b == .doubleValue(a)\n               ~~^~~~~~~~~~~~~~~~~~\n/tmp/tmpbc7zhw2f.swift:22:34:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Double'\n\
    \        return b == .doubleValue(a)\n                                 ^\n/tmp/tmpbc7zhw2f.swift:24:18:\
    \ error: cannot convert return expression of type 'Bool' to return type 'Value?'\n\
    \        return b == .stringValue(a)\n               ~~^~~~~~~~~~~~~~~~~~\n/tmp/tmpbc7zhw2f.swift:24:34:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \        return b == .stringValue(a)\n                                 ^\n"
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        switch b { // Compare two integers\n        case .intValue(_):\n    \
    \        return b\n        case .doubleValue(_):\n            return a\n     \
    \   case .stringValue(_):\n            return a\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Compare two doubles\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { // Compare two strings\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return a\n        }\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: Exception
  stderr: 'tmp703q6egw/tmp703q6egw.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b639f559c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b639f250b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b639f250988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b639f24f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp703q6egw                        0x0000558b2fff1d54 <unavailable> + 7508

    5    libc.so.6                          0x00002b639f745460 __libc_start_main +
    245

    6    tmp703q6egw                        0x0000558b2fff1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpmzfiigdx/tmpmzfiigdx.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba5a3c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba5a0bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba5a0bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba5a0bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzfiigdx                        0x000055ebafbe4a56 <unavailable> + 6742

    5    libc.so.6                          0x00002aba5a5b2460 __libc_start_main +
    245

    6    tmpmzfiigdx                        0x000055ebafbe4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n \
    \       case .doubleValue(_):\n            return .doubleValue(a.doubleValue >\
    \ b.doubleValue ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.intValue ? a.doubleValue : b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue\
    \ : b.doubleValue)\n        case .stringValue(_):\n            return .doubleValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    case .stringValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .stringValue(a.stringValue > b.intValue ? a.stringValue : b.stringValue)\n\
    \        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.doubleValue ? a.stringValue : b.stringValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp9mjalr9c.swift:22:54: error: cannot convert value of type '(Int)\
    \ -> Value' to expected argument type 'Int'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \                   ^\n/tmp/tmp9mjalr9c.swift:22:30: error: enum case 'intValue'\
    \ cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                             ^\n  \
    \                           Value\n/tmp/tmp9mjalr9c.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmp9mjalr9c.swift:22:41: note: only concrete types such as structs,\
    \ enums and classes can conform to protocols\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmp9mjalr9c.swift:22:41: note: required by referencing operator\
    \ function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                           ^\n/tmp/tmp9mjalr9c.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \        ^\n                                          Value\n/tmp/tmp9mjalr9c.swift:22:56:\
    \ error: enum case 'intValue' cannot be used as an instance member\n         \
    \   return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n    \
    \                                                   ^\n                      \
    \                                 Value\n/tmp/tmp9mjalr9c.swift:22:69: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                                                       ^\n                  \
    \                                "
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n            return aInt > bInt ? b : a\n        default:\
    \ return b\n        }\n    default: return a\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp29nhk_uu.swift:18:31: error: cannot find 'aInt' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                            ^~~~\n/tmp/tmp29nhk_uu.swift:18:51: error: cannot\
    \ find 'aDouble' in scope\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n                                                  ^~~~~~~\n\
    /tmp/tmp29nhk_uu.swift:18:74: error: cannot find 'aString' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                                                                       ^~~~~~~\n\
    /tmp/tmp29nhk_uu.swift:19:35: error: cannot find 'bInt' in scope\n        switch\
    \ b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n  \
    \                                ^~~~\n/tmp/tmp29nhk_uu.swift:19:55: error: cannot\
    \ find 'bDouble' in scope\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n                                                   \
    \   ^~~~~~~\n/tmp/tmp29nhk_uu.swift:19:78: error: cannot find 'bString' in scope\n\
    \        switch b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n\
    \                                                                            \
    \ ^~~~~~~\n/tmp/tmp29nhk_uu.swift:20:20: error: cannot find 'aInt' in scope\n\
    \            return aInt > bInt ? b : a\n                   ^~~~\n/tmp/tmp29nhk_uu.swift:20:27:\
    \ error: cannot find 'bInt' in scope\n            return aInt > bInt ? b : a\n\
    \                          ^~~~\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return a\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return b\n      \
    \  case .doubleValue(_):\n            return a\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return b\n      \
    \  case .doubleValue(_):\n            return a\n        case .stringValue(_):\n\
    \            return a\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpjn7zgbi4/tmpjn7zgbi4.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42cbac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe429b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe429b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe429b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjn7zgbi4                        0x0000559d58591a56 <unavailable> + 6742

    5    libc.so.6                          0x00002afe42ea6460 __libc_start_main +
    245

    6    tmpjn7zgbi4                        0x0000559d58591499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        switch b { // Compare two integers\n        case .intValue(_):\n    \
    \        return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Compare two doubles\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.intValue ? a.doubleValue : b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue\
    \ : b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    case .stringValue(_):\n\
    \        switch b { // Compare two strings\n        case .intValue(_):\n     \
    \       return .stringValue(a.stringValue > b.intValue ? a.stringValue : b.intValue)\n\
    \        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.doubleValue ? a.stringValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpa6sdpbv4.swift:22:54: error: cannot convert value of type '(Int)\
    \ -> Value' to expected argument type 'Int'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \                   ^\n/tmp/tmpa6sdpbv4.swift:22:30: error: enum case 'intValue'\
    \ cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                             ^\n  \
    \                           Value\n/tmp/tmpa6sdpbv4.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmpa6sdpbv4.swift:22:41: note: only concrete types such as structs,\
    \ enums and classes can conform to protocols\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmpa6sdpbv4.swift:22:41: note: required by referencing operator\
    \ function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                           ^\n/tmp/tmpa6sdpbv4.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \        ^\n                                          Value\n/tmp/tmpa6sdpbv4.swift:22:56:\
    \ error: enum case 'intValue' cannot be used as an instance member\n         \
    \   return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n    \
    \                                                   ^\n                      \
    \                                 Value\n/tmp/tmpa6sdpbv4.swift:22:69: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                                                       ^\n                  \
    \                                "
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(intVal):\n\
    \        switch b { // Compare two integers\n        case .intValue(intVal):\n\
    \            return intVal\n        case .doubleValue(doubleVal):\n          \
    \  if doubleVal == intVal {\n                return .intValue(intVal)\n      \
    \      }\n            return .doubleValue(doubleVal)\n        case .stringValue(stringVal):\n\
    \            if stringVal == intVal {\n                return .intValue(intVal)\n\
    \            }\n            if stringVal == doubleVal {\n                return\
    \ .doubleValue(doubleVal)\n            }\n            return .stringValue(stringVal)\n\
    \        }\n    case .doubleValue(doubleVal):\n        switch b { // Compare two\
    \ doubles\n        case .intValue(intVal):\n            if doubleVal == intVal\
    \ {\n                return .intValue(intVal)\n            }\n            return\
    \ .doubleValue(doubleVal)\n        case .doubleValue(doubleVal):\n           \
    \ return doubleVal\n        case .stringValue(stringVal):\n            if doubleVal\
    \ == stringVal {\n                return .stringValue(stringVal)\n           \
    \ }\n            if stringVal == doubleVal {\n                return .stringValue(stringVal)\n\
    \            }\n            return .doubleValue(doubleVal)\n        }\n    case\
    \ .stringValue(stringVal):\n        switch b { // Compare two strings\n      \
    \  case .intValue(intVal):\n            if stringVal == intVal {\n           \
    \     return .intValue(intVal)\n            }\n            if stringVal == doubleVal\
    \ {\n                return .doubleValue(doubleVal)\n            }\n         \
    \   return .stringValue(stringVal)\n        case .doubleValue(doubleVal):\n  \
    \          if stringVal == doubleVal {\n                return .stringValue(stringVal)\n\
    \            }\n            if stringVal == intVal {\n                return .stringValue(stringVal)\n\
    \            }\n            return .doubleValue(doubleVal)\n        }\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1),\
    \ b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpw7iyn39e.swift:19:20: error: cannot find 'intVal' in scope\n  \
    \  case .intValue(intVal):\n                   ^~~~~~\n/tmp/tmpw7iyn39e.swift:37:23:\
    \ error: cannot find 'doubleVal' in scope\n    case .doubleValue(doubleVal):\n\
    \                      ^~~~~~~~~\n/tmp/tmpw7iyn39e.swift:55:23: error: cannot\
    \ find 'stringVal' in scope\n    case .stringValue(stringVal):\n             \
    \         ^~~~~~~~~\n/tmp/tmpw7iyn39e.swift:21:24: error: cannot find 'intVal'\
    \ in scope\n        case .intValue(intVal):\n                       ^~~~~~\n/tmp/tmpw7iyn39e.swift:23:27:\
    \ error: cannot find 'doubleVal' in scope\n        case .doubleValue(doubleVal):\n\
    \                          ^~~~~~~~~\n/tmp/tmpw7iyn39e.swift:28:27: error: cannot\
    \ find 'stringVal' in scope\n        case .stringValue(stringVal):\n         \
    \                 ^~~~~~~~~\n/tmp/tmpw7iyn39e.swift:22:20: error: cannot find\
    \ 'intVal' in scope\n            return intVal\n                   ^~~~~~\n/tmp/tmpw7iyn39e.swift:24:16:\
    \ error: cannot find 'doubleVal' in scope\n            if doubleVal == intVal\
    \ {\n               ^~~~~~~~~\n/tmp/tmpw7iyn39e.swift:24:29: error: cannot find\
    \ 'intVal' in scope\n            if doubleVal == intVal {\n                  \
    \          ^~~~~~\n/tmp/tmpw7iyn39e.swift:25:34: error: cannot find 'intVal' in\
    \ scope\n                return .intValue(intVal)\n                          \
    \       ^~~~~~\n/tmp/tmpw7iyn39e.swift:27:33: error: cannot find 'doubleVal' in\
    \ scope\n            return .doubleValue(doubleVal)\n                        \
    \        ^~~~~~~~~\n/tmp/tmpw7iyn39e.swift:29:16: error: cannot find 'stringVal'\
    \ in scope\n            if stringVal == intVal {\n               ^~~~~~~~~\n/tmp/tmpw7iyn39e.swift:29:29:\
    \ error: cannot find 'intVal' in scope\n            if stringVal == intVal {\n\
    \                            ^~~~~~\n/tmp/tmpw7iyn39e.swift:30:34: error: cannot\
    \ find 'intVal' in scope\n                return .intValue(intVal)\n         \
    \                        ^~~~~~\n/tmp/tmpw7iyn39e.swift:32:16: error: cannot find\
    \ 'stringVal' in scope\n            if stringVal == doubleVal {\n            \
    \   ^"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(i):\n\
    \        switch b { // Switch on b's type\n        case .intValue(i):\n      \
    \      return i // Return i\n        case .doubleValue(let d):\n            return\
    \ d // Return d\n        case .stringValue(let s):\n            if s.isEmpty {\n\
    \                return s // Return s\n            }\n            if s.contains(\"\
    .\") {\n                return s // Return s\n            }\n            if s.contains(\"\
    ,\") {\n                return s // Return s\n            }\n            return\
    \ nil // Return nil\n        }\n    case .doubleValue(let d):\n        switch\
    \ b { // Switch on b's type\n        case .intValue(i):\n            return d\
    \ // Return d\n        case .doubleValue(let d):\n            return d // Return\
    \ d\n        case .stringValue(let s):\n            if s.isEmpty {\n         \
    \       return d // Return d\n            }\n            if s.contains(\".\")\
    \ {\n                return d // Return d\n            }\n            if s.contains(\"\
    ,\") {\n                return d // Return d\n            }\n            return\
    \ nil // Return nil\n        }\n    case .stringValue(let s):\n        switch\
    \ b { // Switch on b's type\n        case .intValue(i):\n            return s\
    \ // Return s\n        case .doubleValue(let d):\n            return s // Return\
    \ s\n        case .stringValue(let s):\n            if s.isEmpty {\n         \
    \       return s // Return s\n            }\n            if s.contains(\".\")\
    \ {\n                return s // Return s\n            }\n            if s.contains(\"\
    ,\") {\n                return s // Return s\n            }\n            return\
    \ nil // Return nil\n        }\n    }\n    return nil // Return nil\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp7g78pa2v.swift:19:20: error: cannot find 'i' in scope\n    case\
    \ .intValue(i):\n                   ^\n/tmp/tmp7g78pa2v.swift:21:24: error: cannot\
    \ find 'i' in scope\n        case .intValue(i):\n                       ^\n/tmp/tmp7g78pa2v.swift:22:20:\
    \ error: cannot find 'i' in scope\n            return i // Return i\n        \
    \           ^\n/tmp/tmp7g78pa2v.swift:24:20: error: cannot convert return expression\
    \ of type 'Double' to return type 'Value?'\n            return d // Return d\n\
    \                   ^\n/tmp/tmp7g78pa2v.swift:27:24: error: cannot convert return\
    \ expression of type 'String' to return type 'Value?'\n                return\
    \ s // Return s\n                       ^\n/tmp/tmp7g78pa2v.swift:30:24: error:\
    \ cannot convert return expression of type 'String' to return type 'Value?'\n\
    \                return s // Return s\n                       ^\n/tmp/tmp7g78pa2v.swift:33:24:\
    \ error: cannot convert return expression of type 'String' to return type 'Value?'\n\
    \                return s // Return s\n                       ^\n/tmp/tmp7g78pa2v.swift:39:24:\
    \ error: cannot find 'i' in scope\n        case .intValue(i):\n              \
    \         ^\n/tmp/tmp7g78pa2v.swift:40:20: error: cannot convert return expression\
    \ of type 'Double' to return type 'Value?'\n            return d // Return d\n\
    \                   ^\n/tmp/tmp7g78pa2v.swift:42:20: error: cannot convert return\
    \ expression of type 'Double' to return type 'Value?'\n            return d //\
    \ Return d\n                   ^\n/tmp/tmp7g78pa2v.swift:45:24: error: cannot\
    \ convert return expression of type 'Double' to return type 'Value?'\n       \
    \         return d // Return d\n                       ^\n/tmp/tmp7g78pa2v.swift:48:24:\
    \ error: cannot convert return expression of type 'Double' to return type 'Value?'\n\
    \                return d // Return d\n                       ^\n/tmp/tmp7g78pa2v.swift:51:24:\
    \ error: cannot convert return expression of type 'Double' to return type 'Value?'\n\
    \                return d // Return d\n                       ^\n/tmp/tmp7g78pa2v.swift:57:24:\
    \ error: cannot find 'i' in scope\n   "
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { case .intValue(_), .doubleValue(_), .stringValue(_)\n\
    \        case let .intValue(aInt), let .doubleValue(aDouble), let .stringValue(aString)\n\
    \            if b == .intValue(aInt) {\n                return b\n           \
    \ } else if b == .doubleValue(aDouble) {\n                return b\n         \
    \   } else if b == .stringValue(aString) {\n                return b\n       \
    \     }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp6m8zh48q.swift:18:67: error: expected ':' after 'case'\n    switch\
    \ a { case .intValue(_), .doubleValue(_), .stringValue(_)\n                  \
    \                                                ^\n/tmp/tmp6m8zh48q.swift:19:52:\
    \ error: 'aDouble' must be bound in every pattern\n        case let .intValue(aInt),\
    \ let .doubleValue(aDouble), let .stringValue(aString)\n                     \
    \                              ^\n/tmp/tmp6m8zh48q.swift:19:28: error: 'aInt'\
    \ must be bound in every pattern\n        case let .intValue(aInt), let .doubleValue(aDouble),\
    \ let .stringValue(aString)\n                           ^\n/tmp/tmp6m8zh48q.swift:19:79:\
    \ error: 'aString' must be bound in every pattern\n        case let .intValue(aInt),\
    \ let .doubleValue(aDouble), let .stringValue(aString)\n                     \
    \                                                         ^\n/tmp/tmp6m8zh48q.swift:19:28:\
    \ error: 'aInt' must be bound in every pattern\n        case let .intValue(aInt),\
    \ let .doubleValue(aDouble), let .stringValue(aString)\n                     \
    \      ^\n/tmp/tmp6m8zh48q.swift:19:87: error: expected ':' after 'case'\n   \
    \     case let .intValue(aInt), let .doubleValue(aDouble), let .stringValue(aString)\n\
    \                                                                            \
    \          ^\n/tmp/tmp6m8zh48q.swift:22:41: error: cannot find 'aDouble' in scope\n\
    \            } else if b == .doubleValue(aDouble) {\n                        \
    \                ^~~~~~~\n/tmp/tmp6m8zh48q.swift:24:41: error: cannot find 'aString'\
    \ in scope\n            } else if b == .stringValue(aString) {\n             \
    \                           ^~~~~~~\n/tmp/tmp6m8zh48q.swift:19:14: warning: case\
    \ is already handled by previous patterns; consider removing it\n        case\
    \ let .intValue(aInt), let .doubleValue(aDouble), let .stringValue(aString)\n\
    \             ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp6m8zh48q.swift:19:35: warning: case\
    \ is already handled by previous patterns; consider removing it\n        case\
    \ let .intValue(aInt), let .doubleValue(aDouble), let .stringValue(aString)\n\
    \              "
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a.\n    case .intValue(int(a)):\n\
    \        switch b { // Switch on b.\n        case .intValue(int(b)):\n       \
    \     return b\n        case .doubleValue(double(b)):\n            return b\n\
    \        case .stringValue(string(b)):\n            return b\n        }\n    case\
    \ .doubleValue(double(a)):\n        switch b { // Switch on b.\n        case .intValue(int(b)):\n\
    \            return b\n        case .doubleValue(double(b)):\n            return\
    \ b\n        case .stringValue(string(b)):\n            return b\n        }\n\
    \    case .stringValue(string(a)):\n        switch b { // Switch on b.\n     \
    \   case .intValue(int(b)):\n            return b\n        case .doubleValue(double(b)):\n\
    \            return b\n        case .stringValue(string(b)):\n            return\
    \ b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a:\
    \ .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a:\
    \ .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5),\
    \ b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"\
    2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"\
    ), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpumtz0xxu.swift:19:20: error: cannot find 'int' in scope\n    case\
    \ .intValue(int(a)):\n                   ^~~\n/tmp/tmpumtz0xxu.swift:28:23: error:\
    \ cannot find 'double' in scope\n    case .doubleValue(double(a)):\n         \
    \             ^~~~~~\n/tmp/tmpumtz0xxu.swift:37:23: error: cannot find 'string'\
    \ in scope\n    case .stringValue(string(a)):\n                      ^~~~~~\n\
    /tmp/tmpumtz0xxu.swift:21:24: error: cannot find 'int' in scope\n        case\
    \ .intValue(int(b)):\n                       ^~~\n/tmp/tmpumtz0xxu.swift:23:27:\
    \ error: cannot find 'double' in scope\n        case .doubleValue(double(b)):\n\
    \                          ^~~~~~\n/tmp/tmpumtz0xxu.swift:25:27: error: cannot\
    \ find 'string' in scope\n        case .stringValue(string(b)):\n            \
    \              ^~~~~~\n/tmp/tmpumtz0xxu.swift:30:24: error: cannot find 'int'\
    \ in scope\n        case .intValue(int(b)):\n                       ^~~\n/tmp/tmpumtz0xxu.swift:32:27:\
    \ error: cannot find 'double' in scope\n        case .doubleValue(double(b)):\n\
    \                          ^~~~~~\n/tmp/tmpumtz0xxu.swift:34:27: error: cannot\
    \ find 'string' in scope\n        case .stringValue(string(b)):\n            \
    \              ^~~~~~\n/tmp/tmpumtz0xxu.swift:39:24: error: cannot find 'int'\
    \ in scope\n        case .intValue(int(b)):\n                       ^~~\n/tmp/tmpumtz0xxu.swift:41:27:\
    \ error: cannot find 'double' in scope\n        case .doubleValue(double(b)):\n\
    \                          ^~~~~~\n/tmp/tmpumtz0xxu.swift:43:27: error: cannot\
    \ find 'string' in scope\n        case .stringValue(string(b)):\n            \
    \              ^~~~~~\n"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n            return aInt > bInt || (aInt == bInt && aDouble\
    \ > bDouble)\n                || (aInt == bInt && aDouble == bDouble && aString\
    \ > bString)\n                || (aInt == bInt && aDouble == bDouble && aString\
    \ == bString && aInt == bInt)\n                || (aInt == bInt && aDouble ==\
    \ bDouble && aString == bString && aInt == bInt && aDouble > bDouble)\n      \
    \          || (aInt == bInt && aDouble == bDouble && aString == bString && aInt\
    \ == bInt && aDouble == bDouble && aString > bString)\n                || (aInt\
    \ == bInt && aDouble == bDouble && aString == bString && aInt == bInt && aDouble\
    \ == bDouble && aString == bString && aInt == bInt && aDouble > bDouble && aString\
    \ > bString)\n                || (aInt == bInt && aDouble == bDouble && aString\
    \ == bString && aInt == bInt && aDouble == bDouble && aString == bString && aInt\
    \ == bInt && aDouble == bDouble && aString == bString && aInt == bInt && aDouble\
    \ > bDouble && aString == bString)\n                || (aInt == bInt && aDouble\
    \ == bDouble && aString == bString && aInt == bInt && aDouble == bDouble && aString\
    \ == bString && aInt == bInt && aDouble == bDouble && aString == bString && aInt\
    \ == bInt && aDouble == bDouble && aString == bString)\n                || (aInt\
    \ == bInt && aDouble == bDouble && aString == bString && aInt == bInt && aDouble\
    \ == bDouble && aString == bString && aInt == bInt && aDouble == bDouble && aString\
    \ == bString && aInt == bInt && aDouble == bDouble && aString == bString)\n  \
    \              || (aInt == bInt && aDouble == bDouble && aString == bString &&\
    \ aInt == bInt && aDouble == bDouble && aString == bString && aInt == bInt &&\
    \ aDouble == bDouble && aString == bString && aInt == bInt && aDouble == \n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmppbp7v6g9.swift:30:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmppbp7v6g9.swift:52:66: error: expected '}' at end of 'switch' statement\n\
    assert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n        \
    \                                                         ^\n/tmp/tmppbp7v6g9.swift:18:14:\
    \ note: to match this opening '{'\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n             ^\n/tmp/tmppbp7v6g9.swift:52:66: error:\
    \ expected '}' at end of brace statement\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)\n                                             \
    \                    ^\n/tmp/tmppbp7v6g9.swift:17:48: note: to match this opening\
    \ '{'\nfunc compare_one(a: Value, b: Value) -> Value? {\n                    \
    \                           ^\n/tmp/tmppbp7v6g9.swift:18:31: error: cannot find\
    \ 'aInt' in scope\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n                              ^~~~\n/tmp/tmppbp7v6g9.swift:18:51:\
    \ error: cannot find 'aDouble' in scope\n    switch a { case .intValue(aInt),\
    \ .doubleValue(aDouble), .stringValue(aString):\n                            \
    \                      ^~~~~~~\n/tmp/tmppbp7v6g9.swift:18:74: error: cannot find\
    \ 'aString' in scope\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n                                                   \
    \                      ^~~~~~~\n/tmp/tmppbp7v6g9.swift:19:35: error: cannot find\
    \ 'bInt' in scope\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n                                  ^~~~\n/tmp/tmppbp7v6g9.swift:19:55:\
    \ error: cannot find 'bDouble' in scope\n        switch b { case .intValue(bInt),\
    \ .doubleValue(bDouble), .stringValue(bString):\n                            \
    \                          ^~~~~~~\n/tmp/tmppbp7v6g9.swift:19:78: error: cannot\
    \ find 'bString' in scope\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n                                             "
  stdout: ''
  timestamp: 1659825010
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        switch b { // Compare two integers\n        case .intValue(_):\n    \
    \        return .intValue(a)\n        case .doubleValue(_):\n            return\
    \ .doubleValue(a)\n        case .stringValue(_):\n            return .stringValue(a)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Compare two doubles\n\
    \        case .intValue(_):\n            return .doubleValue(a)\n        case\
    \ .doubleValue(_):\n            return .doubleValue(a)\n        case .stringValue(_):\n\
    \            return .stringValue(a)\n        }\n    case .stringValue(_):\n  \
    \      switch b { // Compare two strings\n        case .intValue(_):\n       \
    \     return .stringValue(a)\n        case .doubleValue(_):\n            return\
    \ .stringValue(a)\n        case .stringValue(_):\n            return .stringValue(a)\n\
    \        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmph_rv0d_3.swift:22:30: error: cannot convert value of type 'Value'\
    \ to expected argument type 'Int'\n            return .intValue(a)\n         \
    \                    ^\n/tmp/tmph_rv0d_3.swift:24:33: error: cannot convert value\
    \ of type 'Value' to expected argument type 'Double'\n            return .doubleValue(a)\n\
    \                                ^\n/tmp/tmph_rv0d_3.swift:26:33: error: cannot\
    \ convert value of type 'Value' to expected argument type 'String'\n         \
    \   return .stringValue(a)\n                                ^\n/tmp/tmph_rv0d_3.swift:31:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Double'\n\
    \            return .doubleValue(a)\n                                ^\n/tmp/tmph_rv0d_3.swift:33:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Double'\n\
    \            return .doubleValue(a)\n                                ^\n/tmp/tmph_rv0d_3.swift:35:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \            return .stringValue(a)\n                                ^\n/tmp/tmph_rv0d_3.swift:40:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \            return .stringValue(a)\n                                ^\n/tmp/tmph_rv0d_3.swift:42:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \            return .stringValue(a)\n                                ^\n/tmp/tmph_rv0d_3.swift:44:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \            return .stringValue(a)\n                                ^\n"
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is larger\n    case .intValue(_):\n\
    \        switch b { // b is larger\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is larger\n        case .intValue(_):\n            return b\n       \
    \ case .doubleValue(_):\n            return a\n        case .stringValue(_):\n\
    \            return a\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is larger\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmp2hftwyap/tmp2hftwyap.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54d33c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54d30b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54d30b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54d30b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2hftwyap                        0x000055a967ccfa56 <unavailable> + 6742

    5    libc.so.6                          0x00002b54d35ad460 __libc_start_main +
    245

    6    tmp2hftwyap                        0x000055a967ccf499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is Int\n    case .intValue(a):\n   \
    \     switch b { // b is Int\n        case .intValue(b):\n            return a\
    \ > b ? .intValue(a) : .intValue(b)\n        case .doubleValue(b):\n         \
    \   return a > b ? .doubleValue(a) : .doubleValue(b)\n        case .stringValue(b):\n\
    \            return a > b ? .stringValue(a) : .stringValue(b)\n        }\n   \
    \ case .doubleValue(a):\n        switch b { // b is Double\n        case .intValue(b):\n\
    \            return a > b ? .doubleValue(a) : .doubleValue(b)\n        case .doubleValue(b):\n\
    \            return a > b ? .doubleValue(a) : .doubleValue(b)\n        case .stringValue(b):\n\
    \            return a > b ? .stringValue(a) : .stringValue(b)\n        }\n   \
    \ case .stringValue(a):\n        switch b { // b is String\n        case .intValue(b):\n\
    \            return a > b ? .stringValue(a) : .stringValue(b)\n        case .doubleValue(b):\n\
    \            return a > b ? .stringValue(a) : .stringValue(b)\n        case .stringValue(b):\n\
    \            return a > b ? .stringValue(a) : .stringValue(b)\n        }\n   \
    \ }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1),\
    \ b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp_gjd694d.swift:19:20: error: expression pattern of type 'Value'\
    \ cannot match values of type 'Int'\n    case .intValue(a):\n                \
    \   ^\n/tmp/tmp_gjd694d.swift:28:23: error: expression pattern of type 'Value'\
    \ cannot match values of type 'Double'\n    case .doubleValue(a):\n          \
    \            ^\n/tmp/tmp_gjd694d.swift:37:23: error: expression pattern of type\
    \ 'Value' cannot match values of type 'String'\n    case .stringValue(a):\n  \
    \                    ^\n/tmp/tmp_gjd694d.swift:37:23: note: overloads for '~='\
    \ exist with these partially matching parameter lists: (Substring, String)\n \
    \   case .stringValue(a):\n                      ^\n/tmp/tmp_gjd694d.swift:21:24:\
    \ error: expression pattern of type 'Value' cannot match values of type 'Int'\n\
    \        case .intValue(b):\n                       ^\n/tmp/tmp_gjd694d.swift:23:27:\
    \ error: expression pattern of type 'Value' cannot match values of type 'Double'\n\
    \        case .doubleValue(b):\n                          ^\n/tmp/tmp_gjd694d.swift:25:27:\
    \ error: expression pattern of type 'Value' cannot match values of type 'String'\n\
    \        case .stringValue(b):\n                          ^\n/tmp/tmp_gjd694d.swift:25:27:\
    \ note: overloads for '~=' exist with these partially matching parameter lists:\
    \ (Substring, String)\n        case .stringValue(b):\n                       \
    \   ^\n/tmp/tmp_gjd694d.swift:22:22: error: referencing operator function '>'\
    \ on 'Comparable' requires that 'Value' conform to 'Comparable'\n            return\
    \ a > b ? .intValue(a) : .intValue(b)\n                     ^\nSwift.Comparable:1:17:\
    \ note: where 'Self' = 'Value'\npublic protocol Comparable : Equatable {\n   \
    \             ^\n/tmp/tmp_gjd694d.swift:22:22: note: binary operator '>' cannot\
    \ be synthesized for enums with associated values\n            return a > b ?\
    \ .intValue(a) : .intValue(b)\n                     ^\n/tmp/tmp_gjd694d.swift:22:38:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Int'\n\
    \            return a > b ? .intValue(a) : .intValue(b)\n                    \
    \                 ^\n/tmp/tmp_gjd6"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is bigger\n    case .intValue(_):\n\
    \        return b == .intValue(a)\n    case .doubleValue(_):\n        return b\
    \ == .doubleValue(a)\n    case .stringValue(_):\n        return b == .stringValue(a)\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpgeo5wbmr.swift:20:18: error: cannot convert return expression of\
    \ type 'Bool' to return type 'Value?'\n        return b == .intValue(a)\n    \
    \           ~~^~~~~~~~~~~~~~~\n/tmp/tmpgeo5wbmr.swift:20:31: error: cannot convert\
    \ value of type 'Value' to expected argument type 'Int'\n        return b == .intValue(a)\n\
    \                              ^\n/tmp/tmpgeo5wbmr.swift:22:18: error: cannot\
    \ convert return expression of type 'Bool' to return type 'Value?'\n        return\
    \ b == .doubleValue(a)\n               ~~^~~~~~~~~~~~~~~~~~\n/tmp/tmpgeo5wbmr.swift:22:34:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Double'\n\
    \        return b == .doubleValue(a)\n                                 ^\n/tmp/tmpgeo5wbmr.swift:24:18:\
    \ error: cannot convert return expression of type 'Bool' to return type 'Value?'\n\
    \        return b == .stringValue(a)\n               ~~^~~~~~~~~~~~~~~~~~\n/tmp/tmpgeo5wbmr.swift:24:34:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \        return b == .stringValue(a)\n                                 ^\n"
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a\n    case .intValue(_):\n\
    \        switch b { // Switch on b\n        case .intValue(_):\n            return\
    \ b\n        case .doubleValue(_):\n            return a\n        case .stringValue(_):\n\
    \            return a\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // Switch on b\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // Switch on b\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return a\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpws7u_r7s/tmpws7u_r7s.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b920641ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9206115b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9206115988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92061147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpws7u_r7s                        0x000055bb376a9d54 <unavailable> + 7508

    5    libc.so.6                          0x00002b920660a460 __libc_start_main +
    245

    6    tmpws7u_r7s                        0x000055bb376a9499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return b\n        case .doubleValue(_):\n            return a\n       \
    \ case .stringValue(_):\n            return a\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return a\n        case .doubleValue(_):\n            return b\n       \
    \ case .stringValue(_):\n            return a\n        }\n    case .stringValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return a\n        case .doubleValue(_):\n            return b\n       \
    \ case .stringValue(_):\n            return a\n        }\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: Exception
  stderr: 'tmp5iihrj_b/tmp5iihrj_b.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0339a6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0339763b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0339763988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03397627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5iihrj_b                        0x00005637ad2a5d54 <unavailable> + 7508

    5    libc.so.6                          0x00002b0339c58460 __libc_start_main +
    245

    6    tmp5iihrj_b                        0x00005637ad2a5499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        return b == .intValue(_) ? .intValue(_) : .doubleValue(_)\n    case .doubleValue(_):\n\
    \        return b == .doubleValue(_) ? .doubleValue(_) : .stringValue(_)\n   \
    \ case .stringValue(_):\n        return b == .stringValue(_) ? .stringValue(_)\
    \ : .intValue(_)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpf43hdj0r.swift:20:31: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n        return b == .intValue(_) ? .intValue(_)\
    \ : .doubleValue(_)\n                              ^\n/tmp/tmpf43hdj0r.swift:22:34:\
    \ error: '_' can only appear in a pattern or on the left side of an assignment\n\
    \        return b == .doubleValue(_) ? .doubleValue(_) : .stringValue(_)\n   \
    \                              ^\n/tmp/tmpf43hdj0r.swift:24:34: error: '_' can\
    \ only appear in a pattern or on the left side of an assignment\n        return\
    \ b == .stringValue(_) ? .stringValue(_) : .intValue(_)\n                    \
    \             ^\n"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // case intValue:\n    case .intValue:\n\
    \        switch b { // case intValue:\n        case .intValue:\n            return\
    \ .intValue\n        case .doubleValue:\n            return .doubleValue\n   \
    \     case .stringValue:\n            return .stringValue\n        }\n    case\
    \ .doubleValue:\n        switch b { // case doubleValue:\n        case .intValue:\n\
    \            return .doubleValue\n        case .doubleValue:\n            return\
    \ .doubleValue\n        case .stringValue:\n            return .stringValue\n\
    \        case .stringValue:\n            return .stringValue\n        }\n    case\
    \ .stringValue:\n        switch b { // case stringValue:\n        case .intValue:\n\
    \            return .stringValue\n        case .doubleValue:\n            return\
    \ .stringValue\n        case .stringValue:\n            return .stringValue\n\
    \        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmph7hpngwc.swift:22:21: error: member 'intValue' expects argument\
    \ of type 'Int'\n            return .intValue\n                    ^\n/tmp/tmph7hpngwc.swift:24:21:\
    \ error: member 'doubleValue' expects argument of type 'Double'\n            return\
    \ .doubleValue\n                    ^\n/tmp/tmph7hpngwc.swift:26:21: error: member\
    \ 'stringValue' expects argument of type 'String'\n            return .stringValue\n\
    \                    ^\n/tmp/tmph7hpngwc.swift:31:21: error: member 'doubleValue'\
    \ expects argument of type 'Double'\n            return .doubleValue\n       \
    \             ^\n/tmp/tmph7hpngwc.swift:33:21: error: member 'doubleValue' expects\
    \ argument of type 'Double'\n            return .doubleValue\n               \
    \     ^\n/tmp/tmph7hpngwc.swift:35:21: error: member 'stringValue' expects argument\
    \ of type 'String'\n            return .stringValue\n                    ^\n/tmp/tmph7hpngwc.swift:37:21:\
    \ error: member 'stringValue' expects argument of type 'String'\n            return\
    \ .stringValue\n                    ^\n/tmp/tmph7hpngwc.swift:36:14: warning:\
    \ case is already handled by previous patterns; consider removing it\n       \
    \ case .stringValue:\n             ^~~~~~~~~~~~\n/tmp/tmph7hpngwc.swift:42:21:\
    \ error: member 'stringValue' expects argument of type 'String'\n            return\
    \ .stringValue\n                    ^\n/tmp/tmph7hpngwc.swift:44:21: error: member\
    \ 'stringValue' expects argument of type 'String'\n            return .stringValue\n\
    \                    ^\n/tmp/tmph7hpngwc.swift:46:21: error: member 'stringValue'\
    \ expects argument of type 'String'\n            return .stringValue\n       \
    \             ^\n"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return a > b ? a : b\n        case .doubleValue(_):\n            return\
    \ a > b ? b : a\n        case .stringValue(_):\n            return a > b ? a :\
    \ b\n        }\n    case .doubleValue(_):\n        switch b { // Switch on b's\
    \ type\n        case .intValue(_):\n            return a > b ? b : a\n       \
    \ case .doubleValue(_):\n            return a > b ? a : b\n        case .stringValue(_):\n\
    \            return a > b ? b : a\n        }\n    case .stringValue(_):\n    \
    \    switch b { // Switch on b's type\n        case .intValue(_):\n          \
    \  return a > b ? b : a\n        case .doubleValue(_):\n            return a >\
    \ b ? a : b\n        case .stringValue(_):\n            return a > b ? a : b\n\
    \        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpbkr1cd1u.swift:22:22: error: referencing operator function '>'\
    \ on 'Comparable' requires that 'Value' conform to 'Comparable'\n            return\
    \ a > b ? a : b\n                     ^\nSwift.Comparable:1:17: note: where 'Self'\
    \ = 'Value'\npublic protocol Comparable : Equatable {\n                ^\n/tmp/tmpbkr1cd1u.swift:22:22:\
    \ note: binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? a : b\n                     ^\n/tmp/tmpbkr1cd1u.swift:24:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? b : a\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmpbkr1cd1u.swift:24:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? b : a\n                     ^\n/tmp/tmpbkr1cd1u.swift:26:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? a : b\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmpbkr1cd1u.swift:26:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? a : b\n                     ^\n/tmp/tmpbkr1cd1u.swift:31:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? b : a\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmpbkr1cd1u.swift:31:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? b : a\n                     ^\n/tmp/tmpbkr1cd1u.swift:33:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? a : b\n              "
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a\n    case .intValue(_):\n\
    \        switch b { // Switch on b\n        case .intValue(_):\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue\
    \ : b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Switch on b\n        case .intValue(_):\n            return\
    \ .doubleValue(a.doubleValue > b.intValue ? a.doubleValue : b.doubleValue)\n \
    \       case .doubleValue(_):\n            return .doubleValue(a.doubleValue >\
    \ b.doubleValue ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    case .stringValue(_):\n\
    \        switch b { // Switch on b\n        case .intValue(_):\n            return\
    \ .stringValue(a.stringValue > b.intValue ? a.stringValue : b.stringValue)\n \
    \       case .doubleValue(_):\n            return .stringValue(a.stringValue >\
    \ b.doubleValue ? a.stringValue : b.stringValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpn08cpver.swift:22:54: error: cannot convert value of type '(Int)\
    \ -> Value' to expected argument type 'Int'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \                   ^\n/tmp/tmpn08cpver.swift:22:30: error: enum case 'intValue'\
    \ cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                             ^\n  \
    \                           Value\n/tmp/tmpn08cpver.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmpn08cpver.swift:22:41: note: only concrete types such as structs,\
    \ enums and classes can conform to protocols\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmpn08cpver.swift:22:41: note: required by referencing operator\
    \ function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                           ^\n/tmp/tmpn08cpver.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \        ^\n                                          Value\n/tmp/tmpn08cpver.swift:22:56:\
    \ error: enum case 'intValue' cannot be used as an instance member\n         \
    \   return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n    \
    \                                                   ^\n                      \
    \                                 Value\n/tmp/tmpn08cpver.swift:22:69: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                                                       ^\n                  \
    \                                "
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpmzfiigdx/tmpmzfiigdx.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba5a3c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba5a0bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba5a0bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba5a0bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzfiigdx                        0x000055ebafbe4a56 <unavailable> + 6742

    5    libc.so.6                          0x00002aba5a5b2460 __libc_start_main +
    245

    6    tmpmzfiigdx                        0x000055ebafbe4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is larger\n    case .intValue(_):\n\
    \        return b == .intValue(a)\n    case .doubleValue(_):\n        return b\
    \ == .doubleValue(a)\n    case .stringValue(_):\n        return b == .stringValue(a)\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpbc7zhw2f.swift:20:18: error: cannot convert return expression of\
    \ type 'Bool' to return type 'Value?'\n        return b == .intValue(a)\n    \
    \           ~~^~~~~~~~~~~~~~~\n/tmp/tmpbc7zhw2f.swift:20:31: error: cannot convert\
    \ value of type 'Value' to expected argument type 'Int'\n        return b == .intValue(a)\n\
    \                              ^\n/tmp/tmpbc7zhw2f.swift:22:18: error: cannot\
    \ convert return expression of type 'Bool' to return type 'Value?'\n        return\
    \ b == .doubleValue(a)\n               ~~^~~~~~~~~~~~~~~~~~\n/tmp/tmpbc7zhw2f.swift:22:34:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Double'\n\
    \        return b == .doubleValue(a)\n                                 ^\n/tmp/tmpbc7zhw2f.swift:24:18:\
    \ error: cannot convert return expression of type 'Bool' to return type 'Value?'\n\
    \        return b == .stringValue(a)\n               ~~^~~~~~~~~~~~~~~~~~\n/tmp/tmpbc7zhw2f.swift:24:34:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \        return b == .stringValue(a)\n                                 ^\n"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n \
    \       case .doubleValue(_):\n            return .doubleValue(a.doubleValue >\
    \ b.doubleValue ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.intValue ? a.doubleValue : b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue\
    \ : b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    case .stringValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .stringValue(a.stringValue > b.intValue ? a.stringValue : b.stringValue)\n\
    \        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.doubleValue ? a.stringValue : b.stringValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpt1cm97dk.swift:22:54: error: cannot convert value of type '(Int)\
    \ -> Value' to expected argument type 'Int'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \                   ^\n/tmp/tmpt1cm97dk.swift:22:30: error: enum case 'intValue'\
    \ cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                             ^\n  \
    \                           Value\n/tmp/tmpt1cm97dk.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmpt1cm97dk.swift:22:41: note: only concrete types such as structs,\
    \ enums and classes can conform to protocols\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmpt1cm97dk.swift:22:41: note: required by referencing operator\
    \ function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                           ^\n/tmp/tmpt1cm97dk.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \        ^\n                                          Value\n/tmp/tmpt1cm97dk.swift:22:56:\
    \ error: enum case 'intValue' cannot be used as an instance member\n         \
    \   return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n    \
    \                                                   ^\n                      \
    \                                 Value\n/tmp/tmpt1cm97dk.swift:22:69: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                                                       ^\n                  \
    \                                "
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare ints\n    case .intValue(aInt):\n\
    \        switch b { // Compare ints\n        case .intValue(bInt):\n         \
    \   return aInt > bInt ? .intValue(aInt) : .intValue(bInt)\n        case .doubleValue(bDouble):\n\
    \            return aInt > bDouble ? .intValue(aInt) : .doubleValue(bDouble)\n\
    \        case .stringValue(bString):\n            return aInt > bString ? .intValue(aInt)\
    \ : .stringValue(bString)\n        }\n    case .doubleValue(aDouble):\n      \
    \  switch b { // Compare doubles\n        case .intValue(bInt):\n            return\
    \ aDouble > bInt ? .doubleValue(aDouble) : .intValue(bInt)\n        case .doubleValue(bDouble):\n\
    \            return aDouble > bDouble ? .doubleValue(aDouble) : .doubleValue(bDouble)\n\
    \        case .stringValue(bString):\n            return aDouble > bString ? .doubleValue(aDouble)\
    \ : .stringValue(bString)\n        }\n    case .stringValue(aString):\n      \
    \  switch b { // Compare strings\n        case .intValue(bInt):\n            return\
    \ aString > bInt ? .stringValue(aString) : .intValue(bInt)\n        case .doubleValue(bDouble):\n\
    \            return aString > bDouble ? .stringValue(aString) : .doubleValue(bDouble)\n\
    \        case .stringValue(bString):\n            return aString > bString ? .stringValue(aString)\
    \ : .stringValue(bString)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp51hz2jw1.swift:19:20: error: cannot find 'aInt' in scope\n    case\
    \ .intValue(aInt):\n                   ^~~~\n/tmp/tmp51hz2jw1.swift:28:23: error:\
    \ cannot find 'aDouble' in scope\n    case .doubleValue(aDouble):\n          \
    \            ^~~~~~~\n/tmp/tmp51hz2jw1.swift:37:23: error: cannot find 'aString'\
    \ in scope\n    case .stringValue(aString):\n                      ^~~~~~~\n/tmp/tmp51hz2jw1.swift:21:24:\
    \ error: cannot find 'bInt' in scope\n        case .intValue(bInt):\n        \
    \               ^~~~\n/tmp/tmp51hz2jw1.swift:23:27: error: cannot find 'bDouble'\
    \ in scope\n        case .doubleValue(bDouble):\n                          ^~~~~~~\n\
    /tmp/tmp51hz2jw1.swift:25:27: error: cannot find 'bString' in scope\n        case\
    \ .stringValue(bString):\n                          ^~~~~~~\n/tmp/tmp51hz2jw1.swift:22:20:\
    \ error: cannot find 'aInt' in scope\n            return aInt > bInt ? .intValue(aInt)\
    \ : .intValue(bInt)\n                   ^~~~\n/tmp/tmp51hz2jw1.swift:22:27: error:\
    \ cannot find 'bInt' in scope\n            return aInt > bInt ? .intValue(aInt)\
    \ : .intValue(bInt)\n                          ^~~~\n/tmp/tmp51hz2jw1.swift:22:44:\
    \ error: cannot find 'aInt' in scope\n            return aInt > bInt ? .intValue(aInt)\
    \ : .intValue(bInt)\n                                           ^~~~\n/tmp/tmp51hz2jw1.swift:22:62:\
    \ error: cannot find 'bInt' in scope\n            return aInt > bInt ? .intValue(aInt)\
    \ : .intValue(bInt)\n                                                        \
    \     ^~~~\n/tmp/tmp51hz2jw1.swift:24:20: error: cannot find 'aInt' in scope\n\
    \            return aInt > bDouble ? .intValue(aInt) : .doubleValue(bDouble)\n\
    \                   ^~~~\n/tmp/tmp51hz2jw1.swift:24:27: error: cannot find 'bDouble'\
    \ in scope\n            return aInt > bDouble ? .intValue(aInt) : .doubleValue(bDouble)\n\
    \                          ^~~~~~~\n/tmp/tmp51hz2jw1.swift:24:47: error: cannot\
    \ find 'aInt' in scope\n            return aInt > bDouble ? .intValue(aInt) :\
    \ .doubleValue(bDouble)\n                                              ^~~~\n\
    /tmp/tmp51hz2jw1.swift:24:68: error: canno"
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return a\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return b\n      \
    \  case .doubleValue(_):\n            return a\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return a\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmp7uosvt_n/tmp7uosvt_n.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b986958fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9869286b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9869286988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98692857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7uosvt_n                        0x000055c025e3aa56 <unavailable> + 6742

    5    libc.so.6                          0x00002b986977b460 __libc_start_main +
    245

    6    tmp7uosvt_n                        0x000055c025e3a499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        switch b { // Compare two ints\n        case .intValue(_):\n        \
    \    return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Compare two doubles\n\
    \        case .intValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Compare two strings\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp7yid9e2l.swift:22:41: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n            return .intValue(a.intValue > b.intValue)\n\
    \                                        ^\n/tmp/tmp7yid9e2l.swift:22:30: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue)\n                             ^\n       \
    \                      Value\n/tmp/tmp7yid9e2l.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue)\n                                        ^\n/tmp/tmp7yid9e2l.swift:22:41:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n            return .intValue(a.intValue > b.intValue)\n         \
    \                               ^\n/tmp/tmp7yid9e2l.swift:22:41: note: required\
    \ by referencing operator function '>' on 'Comparable' where 'Self' = '(Int) ->\
    \ Value'\n            return .intValue(a.intValue > b.intValue)\n            \
    \                            ^\n/tmp/tmp7yid9e2l.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue)\n                                          ^\n               \
    \                           Value\n/tmp/tmp7yid9e2l.swift:24:47: error: cannot\
    \ convert value of type 'Bool' to expected argument type 'Double'\n          \
    \  return .doubleValue(a.doubleValue > b.doubleValue)\n                      \
    \                        ^\n/tmp/tmp7yid9e2l.swift:24:33: error: enum case 'doubleValue'\
    \ cannot be used as an instance member\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n                                ^\n                      \
    \          Value\n/tmp/tmp7yid9e2l.swift:24:47: error: type '(Double) -> Value'\
    \ cannot conform to 'Comparable'\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n                                              ^\n/tmp/tmp7yid9e2l.swift:24:47:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ proto"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on type to determine which case\
    \ to return\n    case .intValue(_):\n        switch b { // Switch on type to determine\
    \ which case to return\n        case .intValue(_):\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n        case .doubleValue(_):\n   \
    \         return .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue :\
    \ b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Switch on type to determine which case to return\n    \
    \    case .intValue(_):\n            return .doubleValue(a.doubleValue > b.intValue\
    \ ? a.doubleValue : b.doubleValue)\n        case .doubleValue(_):\n          \
    \  return .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue : b.doubleValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on type to determine which case to return\n        case .intValue(_):\n\
    \            return .stringValue(a.stringValue > b.intValue ? a.stringValue :\
    \ b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.doubleValue ? a.stringValue : b.stringValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp_vt7lyrl.swift:22:54: error: cannot convert value of type '(Int)\
    \ -> Value' to expected argument type 'Int'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \                   ^\n/tmp/tmp_vt7lyrl.swift:22:30: error: enum case 'intValue'\
    \ cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                             ^\n  \
    \                           Value\n/tmp/tmp_vt7lyrl.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmp_vt7lyrl.swift:22:41: note: only concrete types such as structs,\
    \ enums and classes can conform to protocols\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmp_vt7lyrl.swift:22:41: note: required by referencing operator\
    \ function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                           ^\n/tmp/tmp_vt7lyrl.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \        ^\n                                          Value\n/tmp/tmp_vt7lyrl.swift:22:56:\
    \ error: enum case 'intValue' cannot be used as an instance member\n         \
    \   return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n    \
    \                                                   ^\n                      \
    \                                 Value\n/tmp/tmp_vt7lyrl.swift:22:69: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                                                       ^\n                  \
    \                                "
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return a\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return b\n      \
    \  case .doubleValue(_):\n            return a\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return a\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmp7uosvt_n/tmp7uosvt_n.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b986958fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9869286b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9869286988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98692857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7uosvt_n                        0x000055c025e3aa56 <unavailable> + 6742

    5    libc.so.6                          0x00002b986977b460 __libc_start_main +
    245

    6    tmp7uosvt_n                        0x000055c025e3a499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        return b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    \n    switch b { // b is smaller\n    case .intValue(_):\n\
    \        return a\n    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n\
    \        return a\n    }\n    \n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmp77y6rx65/tmp77y6rx65.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fb31e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fb2edbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fb2edb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fb2eda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp77y6rx65                        0x0000558c1176b01a <unavailable> + 12314

    5    libc.so.6                          0x00002b0fb33d0460 __libc_start_main +
    245

    6    tmp77y6rx65                        0x0000558c11769499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        return b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    \n    switch b { // b is smaller\n    case .intValue(_):\n\
    \        return a\n    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n\
    \        return a\n    }\n    \n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmp77y6rx65/tmp77y6rx65.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fb31e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fb2edbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fb2edb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fb2eda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp77y6rx65                        0x0000558c1176b01a <unavailable> + 12314

    5    libc.so.6                          0x00002b0fb33d0460 __libc_start_main +
    245

    6    tmp77y6rx65                        0x0000558c11769499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n            return aInt > bInt || (aInt == bInt && aDouble\
    \ > bDouble)\n                || (aInt == bInt && aDouble == bDouble && aString\
    \ > bString)\n                || (aInt == bInt && aDouble == bDouble && aString\
    \ == bString && aInt < bInt)\n                || (aInt == bInt && aDouble == bDouble\
    \ && aString == bString && aInt == bInt)\n                || (aInt == bInt &&\
    \ aDouble == bDouble && aString == bString && aInt == bInt && aDouble < bDouble)\n\
    \                || (aInt == bInt && aDouble == bDouble && aString == bString\
    \ && aInt == bInt && aDouble == bDouble && aString < bString)\n              \
    \  || (aInt == bInt && aDouble == bDouble && aString == bString && aInt == bInt\
    \ && aDouble == bDouble && aString == bString)\n                || (aInt == bInt\
    \ && aDouble == bDouble && aString == bString && aInt == bInt && aDouble == bDouble\
    \ && aString == bString && aDouble < bDouble)\n                || (aInt == bInt\
    \ && aDouble == bDouble && aString == bString && aInt == bInt && aDouble == bDouble\
    \ && aString == bString && aDouble == bDouble && aString < bString)\n        \
    \        || (aInt == bInt && aDouble == bDouble && aString == bString && aInt\
    \ == bInt && aDouble == bDouble && aString == bString && aDouble == bDouble &&\
    \ aString == bString)\n                || (aInt == bInt && aDouble == bDouble\
    \ && aString == bString && aInt == bInt && aDouble == bDouble && aString == bString\
    \ && aDouble == bDouble && aString == bString && aDouble < bDouble)\n        \
    \        || (aInt == bInt && aDouble == bDouble && aString == bString && aInt\
    \ == bInt && aDouble == bDouble && aString == bString && aDouble == bDouble &&\
    \ aString == bString && aDouble == bDouble)\n                || (aInt == bInt\
    \ && aDouble == b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1),\
    \ b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpm2ymkahc.swift:33:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpm2ymkahc.swift:32:20: note: to match this opening '('\n           \
    \     || (aInt == bInt && aDouble == b\n                   ^\n/tmp/tmpm2ymkahc.swift:55:66:\
    \ error: expected '}' at end of 'switch' statement\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)\n                                             \
    \                    ^\n/tmp/tmpm2ymkahc.swift:18:14: note: to match this opening\
    \ '{'\n    switch a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n\
    \             ^\n/tmp/tmpm2ymkahc.swift:55:66: error: expected '}' at end of brace\
    \ statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n\
    \                                                                 ^\n/tmp/tmpm2ymkahc.swift:17:48:\
    \ note: to match this opening '{'\nfunc compare_one(a: Value, b: Value) -> Value?\
    \ {\n                                               ^\n/tmp/tmpm2ymkahc.swift:18:31:\
    \ error: cannot find 'aInt' in scope\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n                              ^~~~\n/tmp/tmpm2ymkahc.swift:18:51:\
    \ error: cannot find 'aDouble' in scope\n    switch a { case .intValue(aInt),\
    \ .doubleValue(aDouble), .stringValue(aString):\n                            \
    \                      ^~~~~~~\n/tmp/tmpm2ymkahc.swift:18:74: error: cannot find\
    \ 'aString' in scope\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n                                                   \
    \                      ^~~~~~~\n/tmp/tmpm2ymkahc.swift:19:35: error: cannot find\
    \ 'bInt' in scope\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n                                  ^~~~\n/tmp/tmpm2ymkahc.swift:19:55:\
    \ error: cannot find 'bDouble' in scope\n        switch b { case .intValue(bInt),\
    \ .doubleValue(bDouble), .stringValue(bString):\n                            \
    \                          ^~~~~~~\n/tmp/tmpm2ymkahc.swift:19:78: error: cannot\
    \ find 'bString' in scope\n   "
  stdout: ''
  timestamp: 1659825018
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // case is required because Value is a protocol\n\
    \    case .intValue(_):\n        switch b { // case is required because Value\
    \ is a protocol\n        case .intValue(_):\n            return a\n        case\
    \ .doubleValue(_):\n            return b\n        case .stringValue(_):\n    \
    \        return b\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ case is required because Value is a protocol\n        case .intValue(_):\n \
    \           return a\n        case .doubleValue(_):\n            return b\n  \
    \      case .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { // case is required because Value is a protocol\n        case\
    \ .intValue(_):\n            return a\n        case .doubleValue(_):\n       \
    \     return b\n        case .stringValue(_):\n            return b\n        }\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpq_rvj0zq/tmpq_rvj0zq.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bea557c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bea24eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bea24e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bea24d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq_rvj0zq                        0x000055b43f2c1a56 <unavailable> + 6742

    5    libc.so.6                          0x00002b7bea743460 __libc_start_main +
    245

    6    tmpq_rvj0zq                        0x000055b43f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a.\n    case .intValue(i):\n\
    \        switch b { // Switch on b.\n        case .intValue(i):\n            return\
    \ i\n        case .doubleValue(let d):\n            return d\n        case .stringValue(let\
    \ s):\n            if let i = Int(s) {\n                return i\n           \
    \ }\n            if let d = Double(s) {\n                return d\n          \
    \  }\n            return s\n        }\n    case .doubleValue(let d):\n       \
    \ switch b { // Switch on b.\n        case .intValue(i):\n            return d\n\
    \        case .doubleValue(let d):\n            return d\n        case .stringValue(let\
    \ s):\n            if let d = Double(s) {\n                return d\n        \
    \    }\n            if let i = Int(s) {\n                return i\n          \
    \  }\n            return s\n        }\n    case .stringValue(let s):\n       \
    \ switch b { // Switch on b.\n        case .intValue(i):\n            return s\n\
    \        case .doubleValue(let d):\n            return s\n        case .stringValue(let\
    \ s):\n            if let i = Int(s) {\n                return i\n           \
    \ }\n            if let d = Double(s) {\n                return d\n          \
    \  }\n            return s\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpvsy14_ci.swift:19:20: error: cannot find 'i' in scope\n    case\
    \ .intValue(i):\n                   ^\n/tmp/tmpvsy14_ci.swift:21:24: error: cannot\
    \ find 'i' in scope\n        case .intValue(i):\n                       ^\n/tmp/tmpvsy14_ci.swift:22:20:\
    \ error: cannot find 'i' in scope\n            return i\n                   ^\n\
    /tmp/tmpvsy14_ci.swift:24:20: error: cannot convert return expression of type\
    \ 'Double' to return type 'Value?'\n            return d\n                   ^\n\
    /tmp/tmpvsy14_ci.swift:27:24: error: cannot convert return expression of type\
    \ 'Int' to return type 'Value?'\n                return i\n                  \
    \     ^\n/tmp/tmpvsy14_ci.swift:30:24: error: cannot convert return expression\
    \ of type 'Double' to return type 'Value?'\n                return d\n       \
    \                ^\n/tmp/tmpvsy14_ci.swift:32:20: error: cannot convert return\
    \ expression of type 'String' to return type 'Value?'\n            return s\n\
    \                   ^\n/tmp/tmpvsy14_ci.swift:36:24: error: cannot find 'i' in\
    \ scope\n        case .intValue(i):\n                       ^\n/tmp/tmpvsy14_ci.swift:37:20:\
    \ error: cannot convert return expression of type 'Double' to return type 'Value?'\n\
    \            return d\n                   ^\n/tmp/tmpvsy14_ci.swift:39:20: error:\
    \ cannot convert return expression of type 'Double' to return type 'Value?'\n\
    \            return d\n                   ^\n/tmp/tmpvsy14_ci.swift:42:24: error:\
    \ cannot convert return expression of type 'Double' to return type 'Value?'\n\
    \                return d\n                       ^\n/tmp/tmpvsy14_ci.swift:45:24:\
    \ error: cannot convert return expression of type 'Int' to return type 'Value?'\n\
    \                return i\n                       ^\n/tmp/tmpvsy14_ci.swift:47:20:\
    \ error: cannot convert return expression of type 'String' to return type 'Value?'\n\
    \            return s\n                   ^\n/tmp/tmpvsy14_ci.swift:51:24: error:\
    \ cannot find 'i' in scope\n        case .intValue(i):\n                     \
    \  ^\n/tmp/tmpvsy14_ci.swift:52:20: error: cannot convert return expression of\
    \ type 'String' to ret"
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return b\n        case .doubleValue(_):\n            return a\n       \
    \ case .stringValue(_):\n            return a\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return b\n        case .doubleValue(_):\n            return a\n       \
    \ case .stringValue(_):\n            return a\n        }\n    case .stringValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return b\n        case .doubleValue(_):\n            return a\n       \
    \ case .stringValue(_):\n            return a\n        }\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: Exception
  stderr: 'tmpx2w48nht/tmpx2w48nht.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4388ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4385c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4385c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4385c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx2w48nht                        0x000055db306bad54 <unavailable> + 7508

    5    libc.so.6                          0x00002ae438ab8460 __libc_start_main +
    245

    6    tmpx2w48nht                        0x000055db306ba499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        return b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    \n    switch b { // b is smaller\n    case .intValue(_):\n\
    \        return a\n    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n\
    \        return a\n    }\n    \n    return nil // equal\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpyrs77rpd/tmpyrs77rpd.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeba5fdec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeba5cd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeba5cd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeba5cd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyrs77rpd                        0x00005566f318b01a <unavailable> + 12314

    5    libc.so.6                          0x00002aeba61ca460 __libc_start_main +
    245

    6    tmpyrs77rpd                        0x00005566f3189499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        switch b { // Compare two integers\n        case .intValue(_):\n    \
    \        return b\n        case .doubleValue(_):\n            return a\n     \
    \   case .stringValue(_):\n            return a\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Compare two doubles\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return a\n        }\n    case .stringValue(_):\n\
    \        switch b { // Compare two strings\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return a\n        }\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: Exception
  stderr: 'tmp_rgpbuiz/tmp_rgpbuiz.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a03d65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a03a5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a03a5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a03a5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_rgpbuiz                        0x000055bfbd7dfd54 <unavailable> + 7508

    5    libc.so.6                          0x00002b6a03f51460 __libc_start_main +
    245

    6    tmp_rgpbuiz                        0x000055bfbd7df499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return a > b ? a : b\n        case .doubleValue(_):\n            return\
    \ a > b ? b : a\n        case .stringValue(_):\n            return a > b ? a :\
    \ b\n        }\n    case .doubleValue(_):\n        switch b { // Switch on b's\
    \ type\n        case .intValue(_):\n            return a > b ? b : a\n       \
    \ case .doubleValue(_):\n            return a > b ? a : b\n        case .stringValue(_):\n\
    \            return a > b ? b : a\n        }\n    case .stringValue(_):\n    \
    \    switch b { // Switch on b's type\n        case .intValue(_):\n          \
    \  return a > b ? b : a\n        case .doubleValue(_):\n            return a >\
    \ b ? a : b\n        case .stringValue(_):\n            return a > b ? a : b\n\
    \        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpbkr1cd1u.swift:22:22: error: referencing operator function '>'\
    \ on 'Comparable' requires that 'Value' conform to 'Comparable'\n            return\
    \ a > b ? a : b\n                     ^\nSwift.Comparable:1:17: note: where 'Self'\
    \ = 'Value'\npublic protocol Comparable : Equatable {\n                ^\n/tmp/tmpbkr1cd1u.swift:22:22:\
    \ note: binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? a : b\n                     ^\n/tmp/tmpbkr1cd1u.swift:24:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? b : a\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmpbkr1cd1u.swift:24:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? b : a\n                     ^\n/tmp/tmpbkr1cd1u.swift:26:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? a : b\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmpbkr1cd1u.swift:26:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? a : b\n                     ^\n/tmp/tmpbkr1cd1u.swift:31:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? b : a\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmpbkr1cd1u.swift:31:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? b : a\n                     ^\n/tmp/tmpbkr1cd1u.swift:33:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? a : b\n              "
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is larger\n    case .intValue(_):\n\
    \        return b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    \n    switch b { // b is larger\n    case .intValue(_):\n\
    \        return a\n    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n\
    \        return a\n    }\n    \n    return nil // a is equal to b\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: Exception
  stderr: 'tmp91pzsp_u/tmp91pzsp_u.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4174c2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4174922b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4174922988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41749217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp91pzsp_u                        0x0000559bea3c601a <unavailable> + 12314

    5    libc.so.6                          0x00002b4174e17460 __libc_start_main +
    245

    6    tmp91pzsp_u                        0x0000559bea3c4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpmzfiigdx/tmpmzfiigdx.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba5a3c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba5a0bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba5a0bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba5a0bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzfiigdx                        0x000055ebafbe4a56 <unavailable> + 6742

    5    libc.so.6                          0x00002aba5a5b2460 __libc_start_main +
    245

    6    tmpmzfiigdx                        0x000055ebafbe4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpmzfiigdx/tmpmzfiigdx.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba5a3c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba5a0bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba5a0bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba5a0bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzfiigdx                        0x000055ebafbe4a56 <unavailable> + 6742

    5    libc.so.6                          0x00002aba5a5b2460 __libc_start_main +
    245

    6    tmpmzfiigdx                        0x000055ebafbe4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on type to determine which case\
    \ to return\n    case .intValue(_):\n        switch b { // Switch on type to determine\
    \ which case to return\n        case .intValue(_):\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n        case .doubleValue(_):\n   \
    \         return .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue :\
    \ b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Switch on type to determine which case to return\n    \
    \    case .intValue(_):\n            return .doubleValue(a.doubleValue > b.intValue\
    \ ? a.doubleValue : b.intValue)\n        case .doubleValue(_):\n            return\
    \ .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue : b.doubleValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    case .stringValue(_):\n\
    \        switch b { // Switch on type to determine which case to return\n    \
    \    case .intValue(_):\n            return .stringValue(a.stringValue > b.intValue\
    \ ? a.stringValue : b.intValue)\n        case .doubleValue(_):\n            return\
    \ .stringValue(a.stringValue > b.doubleValue ? a.stringValue : b.doubleValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1),\
    \ b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpckd1fsu8.swift:22:54: error: cannot convert value of type '(Int)\
    \ -> Value' to expected argument type 'Int'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \                   ^\n/tmp/tmpckd1fsu8.swift:22:30: error: enum case 'intValue'\
    \ cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                             ^\n  \
    \                           Value\n/tmp/tmpckd1fsu8.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmpckd1fsu8.swift:22:41: note: only concrete types such as structs,\
    \ enums and classes can conform to protocols\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmpckd1fsu8.swift:22:41: note: required by referencing operator\
    \ function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                           ^\n/tmp/tmpckd1fsu8.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \        ^\n                                          Value\n/tmp/tmpckd1fsu8.swift:22:56:\
    \ error: enum case 'intValue' cannot be used as an instance member\n         \
    \   return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n    \
    \                                                   ^\n                      \
    \                                 Value\n/tmp/tmpckd1fsu8.swift:22:69: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                                                       ^\n                  \
    \                                "
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue:\n\
    \        switch b { // Switch on b's type\n        case .intValue:\n         \
    \   return a.intValue > b.intValue ? a : b\n        case .doubleValue:\n     \
    \       return a.doubleValue > b.doubleValue ? a : b\n        case .stringValue:\n\
    \            return a.stringValue > b.stringValue ? a : b\n        }\n    case\
    \ .doubleValue:\n        switch b { // Switch on b's type\n        case .intValue:\n\
    \            return a.doubleValue > b.intValue ? a : b\n        case .doubleValue:\n\
    \            return a.doubleValue > b.doubleValue ? a : b\n        case .stringValue:\n\
    \            return a.doubleValue > b.stringValue ? a : b\n        }\n    case\
    \ .stringValue:\n        switch b { // Switch on b's type\n        case .intValue:\n\
    \            return a.stringValue > b.intValue ? a : b\n        case .doubleValue:\n\
    \            return a.stringValue > b.doubleValue ? a : b\n        case .stringValue:\n\
    \            return a.stringValue > b.stringValue ? a : b\n        }\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1),\
    \ b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp9amjf0rd.swift:22:20: error: enum case 'intValue' cannot be used\
    \ as an instance member\n            return a.intValue > b.intValue ? a : b\n\
    \                   ^\n                   Value\n/tmp/tmp9amjf0rd.swift:22:31:\
    \ error: type '(Int) -> Value' cannot conform to 'Comparable'\n            return\
    \ a.intValue > b.intValue ? a : b\n                              ^\n/tmp/tmp9amjf0rd.swift:22:31:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n            return a.intValue > b.intValue ? a : b\n            \
    \                  ^\n/tmp/tmp9amjf0rd.swift:22:31: note: required by referencing\
    \ operator function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n    \
    \        return a.intValue > b.intValue ? a : b\n                            \
    \  ^\n/tmp/tmp9amjf0rd.swift:22:33: error: enum case 'intValue' cannot be used\
    \ as an instance member\n            return a.intValue > b.intValue ? a : b\n\
    \                                ^\n                                Value\n/tmp/tmp9amjf0rd.swift:24:20:\
    \ error: enum case 'doubleValue' cannot be used as an instance member\n      \
    \      return a.doubleValue > b.doubleValue ? a : b\n                   ^\n  \
    \                 Value\n/tmp/tmp9amjf0rd.swift:24:34: error: type '(Double) ->\
    \ Value' cannot conform to 'Comparable'\n            return a.doubleValue > b.doubleValue\
    \ ? a : b\n                                 ^\n/tmp/tmp9amjf0rd.swift:24:34: note:\
    \ only concrete types such as structs, enums and classes can conform to protocols\n\
    \            return a.doubleValue > b.doubleValue ? a : b\n                  \
    \               ^\n/tmp/tmp9amjf0rd.swift:24:34: note: required by referencing\
    \ operator function '>' on 'Comparable' where 'Self' = '(Double) -> Value'\n \
    \           return a.doubleValue > b.doubleValue ? a : b\n                   \
    \              ^\n/tmp/tmp9amjf0rd.swift:24:36: error: enum case 'doubleValue'\
    \ cannot be used as an instance member\n            return a.doubleValue > b.doubleValue\
    \ ? a : b\n                                   ^\n                            \
    \       Value\n/"
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is larger\n    case .intValue(_):\n\
    \        switch b { // b is larger\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is larger\n        case .intValue(_):\n            return b\n       \
    \ case .doubleValue(_):\n            return a\n        case .stringValue(_):\n\
    \            return a\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is larger\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmp2hftwyap/tmp2hftwyap.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54d33c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54d30b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54d30b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54d30b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2hftwyap                        0x000055a967ccfa56 <unavailable> + 6742

    5    libc.so.6                          0x00002b54d35ad460 __libc_start_main +
    245

    6    tmp2hftwyap                        0x000055a967ccf499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // TODO: switch on type\n    case .intValue(_):\n\
    \        return b == .intValue(a)\n    case .doubleValue(_):\n        return b\
    \ == .doubleValue(a)\n    case .stringValue(_):\n        return b == .stringValue(a)\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpjci3nhqs.swift:20:18: error: cannot convert return expression of\
    \ type 'Bool' to return type 'Value?'\n        return b == .intValue(a)\n    \
    \           ~~^~~~~~~~~~~~~~~\n/tmp/tmpjci3nhqs.swift:20:31: error: cannot convert\
    \ value of type 'Value' to expected argument type 'Int'\n        return b == .intValue(a)\n\
    \                              ^\n/tmp/tmpjci3nhqs.swift:22:18: error: cannot\
    \ convert return expression of type 'Bool' to return type 'Value?'\n        return\
    \ b == .doubleValue(a)\n               ~~^~~~~~~~~~~~~~~~~~\n/tmp/tmpjci3nhqs.swift:22:34:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Double'\n\
    \        return b == .doubleValue(a)\n                                 ^\n/tmp/tmpjci3nhqs.swift:24:18:\
    \ error: cannot convert return expression of type 'Bool' to return type 'Value?'\n\
    \        return b == .stringValue(a)\n               ~~^~~~~~~~~~~~~~~~~~\n/tmp/tmpjci3nhqs.swift:24:34:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \        return b == .stringValue(a)\n                                 ^\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpmzfiigdx/tmpmzfiigdx.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba5a3c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba5a0bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba5a0bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba5a0bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzfiigdx                        0x000055ebafbe4a56 <unavailable> + 6742

    5    libc.so.6                          0x00002aba5a5b2460 __libc_start_main +
    245

    6    tmpmzfiigdx                        0x000055ebafbe4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n \
    \       case .doubleValue(_):\n            return .doubleValue(a.doubleValue >\
    \ b.doubleValue ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.intValue ? a.doubleValue : b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue\
    \ : b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.intValue ? a.stringValue : b.stringValue)\n        case .doubleValue(_):\n\
    \            return .stringValue(a.stringValue > b.doubleValue ? a.stringValue\
    \ : b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1),\
    \ b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp7yyyx55x.swift:22:54: error: cannot convert value of type '(Int)\
    \ -> Value' to expected argument type 'Int'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \                   ^\n/tmp/tmp7yyyx55x.swift:22:30: error: enum case 'intValue'\
    \ cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                             ^\n  \
    \                           Value\n/tmp/tmp7yyyx55x.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmp7yyyx55x.swift:22:41: note: only concrete types such as structs,\
    \ enums and classes can conform to protocols\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmp7yyyx55x.swift:22:41: note: required by referencing operator\
    \ function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                           ^\n/tmp/tmp7yyyx55x.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \        ^\n                                          Value\n/tmp/tmp7yyyx55x.swift:22:56:\
    \ error: enum case 'intValue' cannot be used as an instance member\n         \
    \   return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n    \
    \                                                   ^\n                      \
    \                                 Value\n/tmp/tmp7yyyx55x.swift:22:69: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                                                       ^\n                  \
    \                                "
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        switch b { // Compare two integers\n        case .intValue(_):\n    \
    \        return b\n        case .doubleValue(_):\n            return a\n     \
    \   case .stringValue(_):\n            return a\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Compare two doubles\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return a\n        }\n    case .stringValue(_):\n\
    \        switch b { // Compare two strings\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return a\n        }\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: Exception
  stderr: 'tmp_rgpbuiz/tmp_rgpbuiz.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a03d65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a03a5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a03a5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a03a5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_rgpbuiz                        0x000055bfbd7dfd54 <unavailable> + 7508

    5    libc.so.6                          0x00002b6a03f51460 __libc_start_main +
    245

    6    tmp_rgpbuiz                        0x000055bfbd7df499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        switch b { // Compare two integers\n        case .intValue(_):\n    \
    \        return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Compare two doubles\n\
    \        case .intValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Compare two strings\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp8uc8bo_m.swift:22:41: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n            return .intValue(a.intValue > b.intValue)\n\
    \                                        ^\n/tmp/tmp8uc8bo_m.swift:22:30: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue)\n                             ^\n       \
    \                      Value\n/tmp/tmp8uc8bo_m.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue)\n                                        ^\n/tmp/tmp8uc8bo_m.swift:22:41:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n            return .intValue(a.intValue > b.intValue)\n         \
    \                               ^\n/tmp/tmp8uc8bo_m.swift:22:41: note: required\
    \ by referencing operator function '>' on 'Comparable' where 'Self' = '(Int) ->\
    \ Value'\n            return .intValue(a.intValue > b.intValue)\n            \
    \                            ^\n/tmp/tmp8uc8bo_m.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue)\n                                          ^\n               \
    \                           Value\n/tmp/tmp8uc8bo_m.swift:24:47: error: cannot\
    \ convert value of type 'Bool' to expected argument type 'Double'\n          \
    \  return .doubleValue(a.doubleValue > b.doubleValue)\n                      \
    \                        ^\n/tmp/tmp8uc8bo_m.swift:24:33: error: enum case 'doubleValue'\
    \ cannot be used as an instance member\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n                                ^\n                      \
    \          Value\n/tmp/tmp8uc8bo_m.swift:24:47: error: type '(Double) -> Value'\
    \ cannot conform to 'Comparable'\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n                                              ^\n/tmp/tmp8uc8bo_m.swift:24:47:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ proto"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        switch b { // Compare two integers\n        case .intValue(_):\n    \
    \        return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Compare two doubles\n\
    \        case .intValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Compare two strings\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp8uc8bo_m.swift:22:41: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n            return .intValue(a.intValue > b.intValue)\n\
    \                                        ^\n/tmp/tmp8uc8bo_m.swift:22:30: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue)\n                             ^\n       \
    \                      Value\n/tmp/tmp8uc8bo_m.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue)\n                                        ^\n/tmp/tmp8uc8bo_m.swift:22:41:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n            return .intValue(a.intValue > b.intValue)\n         \
    \                               ^\n/tmp/tmp8uc8bo_m.swift:22:41: note: required\
    \ by referencing operator function '>' on 'Comparable' where 'Self' = '(Int) ->\
    \ Value'\n            return .intValue(a.intValue > b.intValue)\n            \
    \                            ^\n/tmp/tmp8uc8bo_m.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue)\n                                          ^\n               \
    \                           Value\n/tmp/tmp8uc8bo_m.swift:24:47: error: cannot\
    \ convert value of type 'Bool' to expected argument type 'Double'\n          \
    \  return .doubleValue(a.doubleValue > b.doubleValue)\n                      \
    \                        ^\n/tmp/tmp8uc8bo_m.swift:24:33: error: enum case 'doubleValue'\
    \ cannot be used as an instance member\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n                                ^\n                      \
    \          Value\n/tmp/tmp8uc8bo_m.swift:24:47: error: type '(Double) -> Value'\
    \ cannot conform to 'Comparable'\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n                                              ^\n/tmp/tmp8uc8bo_m.swift:24:47:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ proto"
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is larger\n    case .intValue(_):\n\
    \        return b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    \n    switch b { // b is larger\n    case .intValue(_):\n\
    \        return a\n    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n\
    \        return a\n    }\n    \n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpbypv9sh7/tmpbypv9sh7.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb34e67c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb34b5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb34b5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb34b5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbypv9sh7                        0x000055a69d87501a <unavailable> + 12314

    5    libc.so.6                          0x00002abb35053460 __libc_start_main +
    245

    6    tmpbypv9sh7                        0x000055a69d873499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare ints\n    case .intValue(_):\n\
    \        switch b { // Compare doubles\n        case .doubleValue(_):\n      \
    \      return .doubleValue(a.doubleValue() < b.doubleValue() ? a : b)\n      \
    \  case .stringValue(_):\n            return .stringValue(a.stringValue() < b.stringValue()\
    \ ? a : b)\n        }\n    case .doubleValue(_):\n        switch b { // Compare\
    \ strings\n        case .stringValue(_):\n            return .stringValue(a.stringValue()\
    \ < b.stringValue() ? a : b)\n        case .intValue(_):\n            return .intValue(a.intValue()\
    \ < b.intValue() ? a : b)\n        }\n    case .stringValue(_):\n        switch\
    \ b { // Compare strings\n        case .stringValue(_):\n            return .stringValue(a.stringValue()\
    \ < b.stringValue() ? a : b)\n        case .intValue(_):\n            return .intValue(a.intValue()\
    \ < b.intValue() ? a : b)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpicig_q1_.swift:22:67: error: cannot convert value of type 'Value'\
    \ to expected argument type 'Double'\n            return .doubleValue(a.doubleValue()\
    \ < b.doubleValue() ? a : b)\n                                               \
    \                   ^\n/tmp/tmpicig_q1_.swift:22:33: error: enum case 'doubleValue'\
    \ cannot be used as an instance member\n            return .doubleValue(a.doubleValue()\
    \ < b.doubleValue() ? a : b)\n                                ^\n            \
    \                    Value\n/tmp/tmpicig_q1_.swift:22:47: error: missing argument\
    \ for parameter #1 in call\n            return .doubleValue(a.doubleValue() <\
    \ b.doubleValue() ? a : b)\n                                              ^\n\
    \                                              <#Double#>\n/tmp/tmpicig_q1_.swift:4:10:\
    \ note: 'doubleValue' declared here\n    case doubleValue(Double)\n         ^\n\
    /tmp/tmpicig_q1_.swift:22:49: error: referencing operator function '<' on 'Comparable'\
    \ requires that 'Value' conform to 'Comparable'\n            return .doubleValue(a.doubleValue()\
    \ < b.doubleValue() ? a : b)\n                                               \
    \ ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol Comparable\
    \ : Equatable {\n                ^\n/tmp/tmpicig_q1_.swift:22:49: note: binary\
    \ operator '<' cannot be synthesized for enums with associated values\n      \
    \      return .doubleValue(a.doubleValue() < b.doubleValue() ? a : b)\n      \
    \                                          ^\n/tmp/tmpicig_q1_.swift:22:51: error:\
    \ enum case 'doubleValue' cannot be used as an instance member\n            return\
    \ .doubleValue(a.doubleValue() < b.doubleValue() ? a : b)\n                  \
    \                                ^\n                                         \
    \         Value\n/tmp/tmpicig_q1_.swift:22:65: error: missing argument for parameter\
    \ #1 in call\n            return .doubleValue(a.doubleValue() < b.doubleValue()\
    \ ? a : b)\n                                                                ^\n\
    \                                                                <#Double#>\n\
    /tmp/tmp"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString) where aInt == bInt where aDouble == bDouble where aString\
    \ == bString where aInt == bInt where aDouble == bDouble where aString == bString\
    \ where aInt == bInt where aDouble == bDouble where aString == bString where aInt\
    \ == bInt where aDouble == bDouble where aString == bString where aInt == bInt\
    \ where aDouble == bDouble where aString == bString where aInt == bInt where aDouble\
    \ == bDouble where aString == bString where aInt == bInt where aDouble == bDouble\
    \ where aString == bString where aInt == bInt where aDouble == bDouble where aString\
    \ == bString where aInt == bInt where aDouble == bDouble where aString == bString\
    \ where aInt == bInt where aDouble == bDouble where aString == bString where aInt\
    \ == bInt where aDouble == bDouble where aString == bString where aInt == bInt\
    \ where aDouble == bDouble where aString == bString where aInt == bInt where aDouble\
    \ == bDouble where aString == bString where aInt == bInt where aDouble == bDouble\
    \ where aString == bString where aInt == bInt where aDouble == bDouble where aString\
    \ == bString where aInt == bInt where aDouble == bDouble where aString == bString\
    \ where aInt == bInt where aDouble == bDouble where aString == bString where aInt\
    \ == bInt where aDouble == bDouble where aString == bString where aInt == bInt\
    \ where aDouble == bDouble where aString == bString where aInt == bInt where aDouble\
    \ == bDouble where aString == bString where aInt == bInt where aDouble == bDouble\
    \ where aString == bString where aInt == bInt where aDouble == bDouble where aString\
    \ == bString where aInt == bInt where aDouble == bDouble where aString == bString\
    \ where aInt == bInt where aDouble == bDouble where aString == bString where aInt\
    \ == bInt where aDou\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp8kozlnh0.swift:18:102: error: expected ':' after 'case'\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString) where\
    \ aInt == bInt where aDouble == bDouble where aString == bString where aInt ==\
    \ bInt where aDouble == bDouble where aString == bString where aInt == bInt where\
    \ aDouble == bDouble where aString == bString where aInt == bInt where aDouble\
    \ == bDouble where aString == bString where aInt == bInt where aDouble == bDouble\
    \ where aString == bString where aInt == bInt where aDouble == bDouble where aString\
    \ == bString where aInt == bInt where aDouble == bDouble where aString == bString\
    \ where aInt == bInt where aDouble == bDouble where aString == bString where aInt\
    \ == bInt where aDouble == bDouble where aString == bString where aInt == bInt\
    \ where aDouble == bDouble where aString == bString where aInt == bInt where aDouble\
    \ == bDouble where aString == bString where aInt == bInt where aDouble == bDouble\
    \ where aString == bString where aInt == bInt where aDouble == bDouble where aString\
    \ == bString where aInt == bInt where aDouble == bDouble where aString == bString\
    \ where aInt == bInt where aDouble == bDouble where aString == bString where aInt\
    \ == bInt where aDouble == bDouble where aString == bString where aInt == bInt\
    \ where aDouble == bDouble where aString == bString where aInt == bInt where aDouble\
    \ == bDouble where aString == bString where aInt == bInt where aDouble == bDouble\
    \ where aString == bString where aInt == bInt where aDouble == bDouble where aString\
    \ == bString where aInt == bInt where aDouble == bDouble where aString == bString\
    \ where aInt == bInt where aDouble == bDouble where aString == bString where aInt\
    \ == bInt where aDouble == bDouble where aString == bString where aInt == bInt\
    \ where aDouble == bDouble where aString == bString where aInt == bInt where aDou\n\
    \                                                                            \
    \                         ^\n/tmp/tmp8kozlnh0.swift:18:102: error: expected expression\n\
    \    switch a { case .intValue(aInt), .doubleValue(aDoub"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is larger\n    case .intValue(_):\n\
    \        return b == .intValue(a)\n    case .doubleValue(_):\n        return b\
    \ == .doubleValue(a)\n    case .stringValue(_):\n        return b == .stringValue(a)\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpbc7zhw2f.swift:20:18: error: cannot convert return expression of\
    \ type 'Bool' to return type 'Value?'\n        return b == .intValue(a)\n    \
    \           ~~^~~~~~~~~~~~~~~\n/tmp/tmpbc7zhw2f.swift:20:31: error: cannot convert\
    \ value of type 'Value' to expected argument type 'Int'\n        return b == .intValue(a)\n\
    \                              ^\n/tmp/tmpbc7zhw2f.swift:22:18: error: cannot\
    \ convert return expression of type 'Bool' to return type 'Value?'\n        return\
    \ b == .doubleValue(a)\n               ~~^~~~~~~~~~~~~~~~~~\n/tmp/tmpbc7zhw2f.swift:22:34:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Double'\n\
    \        return b == .doubleValue(a)\n                                 ^\n/tmp/tmpbc7zhw2f.swift:24:18:\
    \ error: cannot convert return expression of type 'Bool' to return type 'Value?'\n\
    \        return b == .stringValue(a)\n               ~~^~~~~~~~~~~~~~~~~~\n/tmp/tmpbc7zhw2f.swift:24:34:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \        return b == .stringValue(a)\n                                 ^\n"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n \
    \       case .doubleValue(_):\n            return .doubleValue(a.doubleValue >\
    \ b.doubleValue ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.intValue ? a.doubleValue : b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue\
    \ : b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    case .stringValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .stringValue(a.stringValue > b.intValue ? a.stringValue : b.stringValue)\n\
    \        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.doubleValue ? a.stringValue : b.stringValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpt1cm97dk.swift:22:54: error: cannot convert value of type '(Int)\
    \ -> Value' to expected argument type 'Int'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \                   ^\n/tmp/tmpt1cm97dk.swift:22:30: error: enum case 'intValue'\
    \ cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                             ^\n  \
    \                           Value\n/tmp/tmpt1cm97dk.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmpt1cm97dk.swift:22:41: note: only concrete types such as structs,\
    \ enums and classes can conform to protocols\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmpt1cm97dk.swift:22:41: note: required by referencing operator\
    \ function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                           ^\n/tmp/tmpt1cm97dk.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \        ^\n                                          Value\n/tmp/tmpt1cm97dk.swift:22:56:\
    \ error: enum case 'intValue' cannot be used as an instance member\n         \
    \   return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n    \
    \                                                   ^\n                      \
    \                                 Value\n/tmp/tmpt1cm97dk.swift:22:69: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                                                       ^\n                  \
    \                                "
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Switch on b's type\n\
    \        case .intValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpv2k5crwr.swift:22:41: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n            return .intValue(a.intValue > b.intValue)\n\
    \                                        ^\n/tmp/tmpv2k5crwr.swift:22:30: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue)\n                             ^\n       \
    \                      Value\n/tmp/tmpv2k5crwr.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue)\n                                        ^\n/tmp/tmpv2k5crwr.swift:22:41:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n            return .intValue(a.intValue > b.intValue)\n         \
    \                               ^\n/tmp/tmpv2k5crwr.swift:22:41: note: required\
    \ by referencing operator function '>' on 'Comparable' where 'Self' = '(Int) ->\
    \ Value'\n            return .intValue(a.intValue > b.intValue)\n            \
    \                            ^\n/tmp/tmpv2k5crwr.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue)\n                                          ^\n               \
    \                           Value\n/tmp/tmpv2k5crwr.swift:24:47: error: cannot\
    \ convert value of type 'Bool' to expected argument type 'Double'\n          \
    \  return .doubleValue(a.doubleValue > b.doubleValue)\n                      \
    \                        ^\n/tmp/tmpv2k5crwr.swift:24:33: error: enum case 'doubleValue'\
    \ cannot be used as an instance member\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n                                ^\n                      \
    \          Value\n/tmp/tmpv2k5crwr.swift:24:47: error: type '(Double) -> Value'\
    \ cannot conform to 'Comparable'\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n                                              ^\n/tmp/tmpv2k5crwr.swift:24:47:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ proto"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        return b == .intValue(a) ? .intValue(a) : .intValue(b)\n    case .doubleValue(_):\n\
    \        return b == .doubleValue(a) ? .doubleValue(a) : .doubleValue(b)\n   \
    \ case .stringValue(_):\n        return b == .stringValue(a) ? .stringValue(a)\
    \ : .stringValue(b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpg12m0whn.swift:20:31: error: cannot convert value of type 'Value'\
    \ to expected argument type 'Int'\n        return b == .intValue(a) ? .intValue(a)\
    \ : .intValue(b)\n                              ^\n/tmp/tmpg12m0whn.swift:20:46:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Int'\n\
    \        return b == .intValue(a) ? .intValue(a) : .intValue(b)\n            \
    \                                 ^\n/tmp/tmpg12m0whn.swift:20:61: error: cannot\
    \ convert value of type 'Value' to expected argument type 'Int'\n        return\
    \ b == .intValue(a) ? .intValue(a) : .intValue(b)\n                          \
    \                                  ^\n/tmp/tmpg12m0whn.swift:22:34: error: cannot\
    \ convert value of type 'Value' to expected argument type 'Double'\n        return\
    \ b == .doubleValue(a) ? .doubleValue(a) : .doubleValue(b)\n                 \
    \                ^\n/tmp/tmpg12m0whn.swift:22:52: error: cannot convert value\
    \ of type 'Value' to expected argument type 'Double'\n        return b == .doubleValue(a)\
    \ ? .doubleValue(a) : .doubleValue(b)\n                                      \
    \             ^\n/tmp/tmpg12m0whn.swift:22:70: error: cannot convert value of\
    \ type 'Value' to expected argument type 'Double'\n        return b == .doubleValue(a)\
    \ ? .doubleValue(a) : .doubleValue(b)\n                                      \
    \                               ^\n/tmp/tmpg12m0whn.swift:24:34: error: cannot\
    \ convert value of type 'Value' to expected argument type 'String'\n        return\
    \ b == .stringValue(a) ? .stringValue(a) : .stringValue(b)\n                 \
    \                ^\n/tmp/tmpg12m0whn.swift:24:52: error: cannot convert value\
    \ of type 'Value' to expected argument type 'String'\n        return b == .stringValue(a)\
    \ ? .stringValue(a) : .stringValue(b)\n                                      \
    \             ^\n/tmp/tmpg12m0whn.swift:24:70: error: cannot convert value of\
    \ type 'Value' to expected argument type 'String'\n        return b == .stringValue(a)\
    \ ? .stringValue(a) : .stringValue(b)\n                                      \
    \                             "
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        switch b { // Compare two integers\n        case .intValue(_):\n    \
    \        return a\n        case .doubleValue(_):\n            return b\n     \
    \   case .stringValue(_):\n            return b\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Compare two doubles\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { // Compare two strings\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return b\n        }\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: Exception
  stderr: 'tmpd6fg4wa3/tmpd6fg4wa3.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba22dea8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba22db9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba22db9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba22db9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd6fg4wa3                        0x000055f29c751a56 <unavailable> + 6742

    5    libc.so.6                          0x00002ba22e094460 __libc_start_main +
    245

    6    tmpd6fg4wa3                        0x000055f29c751499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpmzfiigdx/tmpmzfiigdx.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba5a3c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba5a0bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba5a0bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba5a0bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzfiigdx                        0x000055ebafbe4a56 <unavailable> + 6742

    5    libc.so.6                          0x00002aba5a5b2460 __libc_start_main +
    245

    6    tmpmzfiigdx                        0x000055ebafbe4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        switch b { // Compare two integers\n        case .intValue(_):\n    \
    \        return .intValue(a)\n        case .doubleValue(_):\n            return\
    \ .doubleValue(a)\n        case .stringValue(_):\n            return .stringValue(a)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Compare two doubles\n\
    \        case .intValue(_):\n            return .doubleValue(a)\n        case\
    \ .doubleValue(_):\n            return .doubleValue(a)\n        case .stringValue(_):\n\
    \            return .stringValue(a)\n        }\n    case .stringValue(_):\n  \
    \      switch b { // Compare two strings\n        case .intValue(_):\n       \
    \     return .stringValue(a)\n        case .doubleValue(_):\n            return\
    \ .stringValue(a)\n        case .stringValue(_):\n            return .stringValue(a)\n\
    \        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmph_rv0d_3.swift:22:30: error: cannot convert value of type 'Value'\
    \ to expected argument type 'Int'\n            return .intValue(a)\n         \
    \                    ^\n/tmp/tmph_rv0d_3.swift:24:33: error: cannot convert value\
    \ of type 'Value' to expected argument type 'Double'\n            return .doubleValue(a)\n\
    \                                ^\n/tmp/tmph_rv0d_3.swift:26:33: error: cannot\
    \ convert value of type 'Value' to expected argument type 'String'\n         \
    \   return .stringValue(a)\n                                ^\n/tmp/tmph_rv0d_3.swift:31:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Double'\n\
    \            return .doubleValue(a)\n                                ^\n/tmp/tmph_rv0d_3.swift:33:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Double'\n\
    \            return .doubleValue(a)\n                                ^\n/tmp/tmph_rv0d_3.swift:35:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \            return .stringValue(a)\n                                ^\n/tmp/tmph_rv0d_3.swift:40:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \            return .stringValue(a)\n                                ^\n/tmp/tmph_rv0d_3.swift:42:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \            return .stringValue(a)\n                                ^\n/tmp/tmph_rv0d_3.swift:44:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \            return .stringValue(a)\n                                ^\n"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ .intValue(a)\n        case .doubleValue(_):\n            return .doubleValue(a)\n\
    \        case .stringValue(_):\n            return .stringValue(a)\n        }\n\
    \    case .doubleValue(_):\n        switch b { // b is smaller\n        case .intValue(_):\n\
    \            return .doubleValue(a)\n        case .doubleValue(_):\n         \
    \   return .doubleValue(a)\n        case .stringValue(_):\n            return\
    \ .stringValue(a)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ b is smaller\n        case .intValue(_):\n            return .stringValue(a)\n\
    \        case .doubleValue(_):\n            return .stringValue(a)\n        case\
    \ .stringValue(_):\n            return .stringValue(a)\n        }\n    }\n   \
    \ return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1),\
    \ b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpuxws9iax.swift:22:30: error: cannot convert value of type 'Value'\
    \ to expected argument type 'Int'\n            return .intValue(a)\n         \
    \                    ^\n/tmp/tmpuxws9iax.swift:24:33: error: cannot convert value\
    \ of type 'Value' to expected argument type 'Double'\n            return .doubleValue(a)\n\
    \                                ^\n/tmp/tmpuxws9iax.swift:26:33: error: cannot\
    \ convert value of type 'Value' to expected argument type 'String'\n         \
    \   return .stringValue(a)\n                                ^\n/tmp/tmpuxws9iax.swift:31:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Double'\n\
    \            return .doubleValue(a)\n                                ^\n/tmp/tmpuxws9iax.swift:33:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Double'\n\
    \            return .doubleValue(a)\n                                ^\n/tmp/tmpuxws9iax.swift:35:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \            return .stringValue(a)\n                                ^\n/tmp/tmpuxws9iax.swift:40:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \            return .stringValue(a)\n                                ^\n/tmp/tmpuxws9iax.swift:42:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \            return .stringValue(a)\n                                ^\n/tmp/tmpuxws9iax.swift:44:33:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \            return .stringValue(a)\n                                ^\n"
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return b\n        case .doubleValue(_):\n            return a\n       \
    \ case .stringValue(_):\n            return a\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return a\n        case .doubleValue(_):\n            return b\n       \
    \ case .stringValue(_):\n            return a\n        }\n    case .stringValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return a\n        case .doubleValue(_):\n            return b\n       \
    \ case .stringValue(_):\n            return a\n        }\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: Exception
  stderr: 'tmp5iihrj_b/tmp5iihrj_b.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0339a6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0339763b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0339763988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03397627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5iihrj_b                        0x00005637ad2a5d54 <unavailable> + 7508

    5    libc.so.6                          0x00002b0339c58460 __libc_start_main +
    245

    6    tmp5iihrj_b                        0x00005637ad2a5499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        switch b { // Compare two integers\n        case .intValue(_):\n    \
    \        return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Compare two doubles\n        case .intValue(_):\n            return .intValue(a.doubleValue\
    \ > b.doubleValue ? a.doubleValue : b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue\
    \ : b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    case .stringValue(_):\n\
    \        switch b { // Compare two strings\n        case .intValue(_):\n     \
    \       return .intValue(a.stringValue > b.stringValue ? a.stringValue : b.stringValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp33oltfco.swift:22:54: error: cannot convert value of type '(Int)\
    \ -> Value' to expected argument type 'Int'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \                   ^\n/tmp/tmp33oltfco.swift:22:30: error: enum case 'intValue'\
    \ cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                             ^\n  \
    \                           Value\n/tmp/tmp33oltfco.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmp33oltfco.swift:22:41: note: only concrete types such as structs,\
    \ enums and classes can conform to protocols\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmp33oltfco.swift:22:41: note: required by referencing operator\
    \ function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                           ^\n/tmp/tmp33oltfco.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \        ^\n                                          Value\n/tmp/tmp33oltfco.swift:22:56:\
    \ error: enum case 'intValue' cannot be used as an instance member\n         \
    \   return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n    \
    \                                                   ^\n                      \
    \                                 Value\n/tmp/tmp33oltfco.swift:22:69: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                                                       ^\n                  \
    \                                "
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is larger\n    case .intValue(_):\n\
    \        switch b { // b is larger\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is larger\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is larger\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpvknks4wd/tmpvknks4wd.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad27d90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad27a87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad27a87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad27a867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvknks4wd                        0x00005626aa520a56 <unavailable> + 6742

    5    libc.so.6                          0x00002aad27f7c460 __libc_start_main +
    245

    6    tmpvknks4wd                        0x00005626aa520499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a.\n    case .intValue(i):\n\
    \        switch b { // Switch on b.\n        case .intValue(i):\n            return\
    \ i\n        case .doubleValue(let d):\n            return d > i ? d : i\n   \
    \     case .stringValue(let s):\n            if let i = Int(s) {\n           \
    \     return i\n            }\n            if let d = Double(s) {\n          \
    \      return d > i ? d : i\n            }\n            return s\n        }\n\
    \    case .doubleValue(let d):\n        switch b { // Switch on b.\n        case\
    \ .intValue(i):\n            return d > i ? d : i\n        case .doubleValue(let\
    \ d):\n            return d > i ? d : i\n        case .stringValue(let s):\n \
    \           if let i = Int(s) {\n                return i\n            }\n   \
    \         if let d = Double(s) {\n                return d > i ? d : i\n     \
    \       }\n            return s\n        }\n    case .stringValue(let s):\n  \
    \      switch b { // Switch on b.\n        case .intValue(i):\n            return\
    \ s\n        case .doubleValue(let d):\n            return s\n        case .stringValue(let\
    \ s):\n            if let i = Int(s) {\n                return s\n           \
    \ }\n            if let d = Double(s) {\n                return s\n          \
    \  }\n            return s\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmprhmreku2.swift:19:20: error: cannot find 'i' in scope\n    case\
    \ .intValue(i):\n                   ^\n/tmp/tmprhmreku2.swift:21:24: error: cannot\
    \ find 'i' in scope\n        case .intValue(i):\n                       ^\n/tmp/tmprhmreku2.swift:22:20:\
    \ error: cannot find 'i' in scope\n            return i\n                   ^\n\
    /tmp/tmprhmreku2.swift:24:24: error: cannot find 'i' in scope\n            return\
    \ d > i ? d : i\n                       ^\n/tmp/tmprhmreku2.swift:24:32: error:\
    \ cannot find 'i' in scope\n            return d > i ? d : i\n               \
    \                ^\n/tmp/tmprhmreku2.swift:24:26: error: cannot convert return\
    \ expression of type 'Double' to return type 'Value?'\n            return d >\
    \ i ? d : i\n                   ~~~~~~^~~~~~~\n/tmp/tmprhmreku2.swift:27:24: error:\
    \ cannot convert return expression of type 'Int' to return type 'Value?'\n   \
    \             return i\n                       ^\n/tmp/tmprhmreku2.swift:30:28:\
    \ error: cannot find 'i' in scope\n                return d > i ? d : i\n    \
    \                       ^\n/tmp/tmprhmreku2.swift:30:36: error: cannot find 'i'\
    \ in scope\n                return d > i ? d : i\n                           \
    \        ^\n/tmp/tmprhmreku2.swift:30:30: error: cannot convert return expression\
    \ of type 'Double' to return type 'Value?'\n                return d > i ? d :\
    \ i\n                       ~~~~~~^~~~~~~\n/tmp/tmprhmreku2.swift:32:20: error:\
    \ cannot convert return expression of type 'String' to return type 'Value?'\n\
    \            return s\n                   ^\n/tmp/tmprhmreku2.swift:36:24: error:\
    \ cannot find 'i' in scope\n        case .intValue(i):\n                     \
    \  ^\n/tmp/tmprhmreku2.swift:37:24: error: cannot find 'i' in scope\n        \
    \    return d > i ? d : i\n                       ^\n/tmp/tmprhmreku2.swift:37:32:\
    \ error: cannot find 'i' in scope\n            return d > i ? d : i\n        \
    \                       ^\n/tmp/tmprhmreku2.swift:37:26: error: cannot convert\
    \ return expression of type 'Double' to return type 'Value?'\n            return\
    \ d > i ? d : i\n                   ~~~~~~^~~~~~~\n"
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is Int\n    case .intValue(_):\n   \
    \     switch b { // b is Int\n        case .intValue(_):\n            return a\n\
    \        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is Double\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is String\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpqo15u7gt/tmpqo15u7gt.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf67f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf64eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf64ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf64ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqo15u7gt                        0x00005578b487aa56 <unavailable> + 6742

    5    libc.so.6                          0x00002b9cf69e3460 __libc_start_main +
    245

    6    tmpqo15u7gt                        0x00005578b487a499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        return b == .intValue(a)\n    case .doubleValue(_):\n        return b\
    \ == .doubleValue(a)\n    case .stringValue(_):\n        return b == .stringValue(a)\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpjmymllq5.swift:20:18: error: cannot convert return expression of\
    \ type 'Bool' to return type 'Value?'\n        return b == .intValue(a)\n    \
    \           ~~^~~~~~~~~~~~~~~\n/tmp/tmpjmymllq5.swift:20:31: error: cannot convert\
    \ value of type 'Value' to expected argument type 'Int'\n        return b == .intValue(a)\n\
    \                              ^\n/tmp/tmpjmymllq5.swift:22:18: error: cannot\
    \ convert return expression of type 'Bool' to return type 'Value?'\n        return\
    \ b == .doubleValue(a)\n               ~~^~~~~~~~~~~~~~~~~~\n/tmp/tmpjmymllq5.swift:22:34:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Double'\n\
    \        return b == .doubleValue(a)\n                                 ^\n/tmp/tmpjmymllq5.swift:24:18:\
    \ error: cannot convert return expression of type 'Bool' to return type 'Value?'\n\
    \        return b == .stringValue(a)\n               ~~^~~~~~~~~~~~~~~~~~\n/tmp/tmpjmymllq5.swift:24:34:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \        return b == .stringValue(a)\n                                 ^\n"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(aInt):\n\
    \        switch b { // Compare two integers\n        case .intValue(bInt):\n \
    \           return bInt > aInt // Compare two integers\n        case .doubleValue(bDouble):\n\
    \            return bDouble > aInt // Compare two doubles\n        case .stringValue(bString):\n\
    \            return bString > aInt // Compare two strings\n        }\n    case\
    \ .doubleValue(aDouble):\n        switch b { // Compare two doubles\n        case\
    \ .intValue(bInt):\n            return bInt > aDouble // Compare two integers\n\
    \        case .doubleValue(bDouble):\n            return bDouble > aDouble //\
    \ Compare two doubles\n        case .stringValue(bString):\n            return\
    \ bString > aDouble // Compare two strings\n        }\n    case .stringValue(aString):\n\
    \        switch b { // Compare two strings\n        case .intValue(bInt):\n  \
    \          return bInt > aString // Compare two integers\n        case .doubleValue(bDouble):\n\
    \            return bDouble > aString // Compare two doubles\n        case .stringValue(bString):\n\
    \            return bString > aString // Compare two strings\n        }\n    }\n\
    \    return nil // If values are equal, return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmps754od7o.swift:19:20: error: cannot find 'aInt' in scope\n    case\
    \ .intValue(aInt):\n                   ^~~~\n/tmp/tmps754od7o.swift:28:23: error:\
    \ cannot find 'aDouble' in scope\n    case .doubleValue(aDouble):\n          \
    \            ^~~~~~~\n/tmp/tmps754od7o.swift:37:23: error: cannot find 'aString'\
    \ in scope\n    case .stringValue(aString):\n                      ^~~~~~~\n/tmp/tmps754od7o.swift:21:24:\
    \ error: cannot find 'bInt' in scope\n        case .intValue(bInt):\n        \
    \               ^~~~\n/tmp/tmps754od7o.swift:23:27: error: cannot find 'bDouble'\
    \ in scope\n        case .doubleValue(bDouble):\n                          ^~~~~~~\n\
    /tmp/tmps754od7o.swift:25:27: error: cannot find 'bString' in scope\n        case\
    \ .stringValue(bString):\n                          ^~~~~~~\n/tmp/tmps754od7o.swift:22:20:\
    \ error: cannot find 'bInt' in scope\n            return bInt > aInt // Compare\
    \ two integers\n                   ^~~~\n/tmp/tmps754od7o.swift:22:27: error:\
    \ cannot find 'aInt' in scope\n            return bInt > aInt // Compare two integers\n\
    \                          ^~~~\n/tmp/tmps754od7o.swift:22:25: error: cannot convert\
    \ return expression of type 'Bool' to return type 'Value?'\n            return\
    \ bInt > aInt // Compare two integers\n                   ~~~~~^~~~~~\n/tmp/tmps754od7o.swift:24:20:\
    \ error: cannot find 'bDouble' in scope\n            return bDouble > aInt //\
    \ Compare two doubles\n                   ^~~~~~~\n/tmp/tmps754od7o.swift:24:30:\
    \ error: cannot find 'aInt' in scope\n            return bDouble > aInt // Compare\
    \ two doubles\n                             ^~~~\n/tmp/tmps754od7o.swift:24:28:\
    \ error: cannot convert return expression of type 'Bool' to return type 'Value?'\n\
    \            return bDouble > aInt // Compare two doubles\n                  \
    \ ~~~~~~~~^~~~~~\n/tmp/tmps754od7o.swift:26:20: error: cannot find 'bString' in\
    \ scope\n            return bString > aInt // Compare two strings\n          \
    \         ^~~~~~~\n/tmp/tmps754od7o.swift:26:30: error: cannot find 'aInt' in\
    \ scope\n            return bString > aInt // Compare two strings\n  "
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n            return aInt > bInt || (aInt == bInt && aDouble\
    \ > bDouble)\n        case .stringValue(bString):\n            return aString\
    \ > bString\n        case .doubleValue(bDouble):\n            return aDouble >\
    \ bDouble\n        case .intValue(bInt):\n            return aInt > bInt\n   \
    \     }\n    case .stringValue(aString):\n        switch b { case .intValue(bInt),\
    \ .doubleValue(bDouble), .stringValue(bString):\n            return aString <\
    \ bString\n        case .stringValue(bString):\n            return aString < bString\n\
    \        case .doubleValue(bDouble):\n            return aString < bString\n \
    \       case .intValue(bInt):\n            return aString < bString\n        }\n\
    \    case .doubleValue(aDouble):\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n            return aDouble < bDouble\n        case .stringValue(bString):\n\
    \            return aDouble < bString\n        case .doubleValue(bDouble):\n \
    \           return aDouble < bDouble\n        case .intValue(bInt):\n        \
    \    return aDouble < bDouble\n        }\n    case .intValue(aInt):\n        switch\
    \ b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n  \
    \          return aInt < bInt\n        case .stringValue(bString):\n         \
    \   return aInt < bString\n        case .doubleValue(bDouble):\n            return\
    \ aInt < bDouble\n        case .intValue(bInt):\n            return aInt < bInt\n\
    \        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp4ostx7ea.swift:18:31: error: cannot find 'aInt' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                            ^~~~\n/tmp/tmp4ostx7ea.swift:18:51: error: cannot\
    \ find 'aDouble' in scope\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n                                                  ^~~~~~~\n\
    /tmp/tmp4ostx7ea.swift:18:74: error: cannot find 'aString' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                                                                       ^~~~~~~\n\
    /tmp/tmp4ostx7ea.swift:28:23: error: cannot find 'aString' in scope\n    case\
    \ .stringValue(aString):\n                      ^~~~~~~\n/tmp/tmp4ostx7ea.swift:38:23:\
    \ error: cannot find 'aDouble' in scope\n    case .doubleValue(aDouble):\n   \
    \                   ^~~~~~~\n/tmp/tmp4ostx7ea.swift:48:20: error: cannot find\
    \ 'aInt' in scope\n    case .intValue(aInt):\n                   ^~~~\n/tmp/tmp4ostx7ea.swift:19:35:\
    \ error: cannot find 'bInt' in scope\n        switch b { case .intValue(bInt),\
    \ .doubleValue(bDouble), .stringValue(bString):\n                            \
    \      ^~~~\n/tmp/tmp4ostx7ea.swift:19:55: error: cannot find 'bDouble' in scope\n\
    \        switch b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n\
    \                                                      ^~~~~~~\n/tmp/tmp4ostx7ea.swift:19:78:\
    \ error: cannot find 'bString' in scope\n        switch b { case .intValue(bInt),\
    \ .doubleValue(bDouble), .stringValue(bString):\n                            \
    \                                                 ^~~~~~~\n/tmp/tmp4ostx7ea.swift:21:27:\
    \ error: cannot find 'bString' in scope\n        case .stringValue(bString):\n\
    \                          ^~~~~~~\n/tmp/tmp4ostx7ea.swift:23:27: error: cannot\
    \ find 'bDouble' in scope\n        case .doubleValue(bDouble):\n             \
    \             ^~~~~~~\n/tmp/tmp4ostx7ea.swift:25:24: error: cannot find 'bInt'\
    \ in scope\n        case .intValue(bInt):\n                       ^~~~\n/t"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return a > b ? a : b\n        case .doubleValue(_):\n            return\
    \ a > b ? b : a\n        case .stringValue(_):\n            return a > b ? b :\
    \ a\n        }\n    case .doubleValue(_):\n        switch b { // Switch on b's\
    \ type\n        case .intValue(_):\n            return a > b ? b : a\n       \
    \ case .doubleValue(_):\n            return a > b ? a : b\n        case .stringValue(_):\n\
    \            return a > b ? a : b\n        }\n    case .stringValue(_):\n    \
    \    switch b { // Switch on b's type\n        case .intValue(_):\n          \
    \  return a > b ? b : a\n        case .doubleValue(_):\n            return a >\
    \ b ? a : b\n        case .stringValue(_):\n            return a > b ? a : b\n\
    \        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpdqpouttp.swift:22:22: error: referencing operator function '>'\
    \ on 'Comparable' requires that 'Value' conform to 'Comparable'\n            return\
    \ a > b ? a : b\n                     ^\nSwift.Comparable:1:17: note: where 'Self'\
    \ = 'Value'\npublic protocol Comparable : Equatable {\n                ^\n/tmp/tmpdqpouttp.swift:22:22:\
    \ note: binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? a : b\n                     ^\n/tmp/tmpdqpouttp.swift:24:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? b : a\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmpdqpouttp.swift:24:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? b : a\n                     ^\n/tmp/tmpdqpouttp.swift:26:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? b : a\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmpdqpouttp.swift:26:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? b : a\n                     ^\n/tmp/tmpdqpouttp.swift:31:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? b : a\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmpdqpouttp.swift:31:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? b : a\n                     ^\n/tmp/tmpdqpouttp.swift:33:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? a : b\n              "
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n            return aInt > bInt || aDouble > bDouble\
    \ ? a : b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpmfhlyd8i.swift:18:31: error: cannot find 'aInt' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                            ^~~~\n/tmp/tmpmfhlyd8i.swift:18:51: error: cannot\
    \ find 'aDouble' in scope\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n                                                  ^~~~~~~\n\
    /tmp/tmpmfhlyd8i.swift:18:74: error: cannot find 'aString' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                                                                       ^~~~~~~\n\
    /tmp/tmpmfhlyd8i.swift:19:35: error: cannot find 'bInt' in scope\n        switch\
    \ b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n  \
    \                                ^~~~\n/tmp/tmpmfhlyd8i.swift:19:55: error: cannot\
    \ find 'bDouble' in scope\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n                                                   \
    \   ^~~~~~~\n/tmp/tmpmfhlyd8i.swift:19:78: error: cannot find 'bString' in scope\n\
    \        switch b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n\
    \                                                                            \
    \ ^~~~~~~\n/tmp/tmpmfhlyd8i.swift:20:20: error: cannot find 'aInt' in scope\n\
    \            return aInt > bInt || aDouble > bDouble ? a : b\n               \
    \    ^~~~\n/tmp/tmpmfhlyd8i.swift:20:27: error: cannot find 'bInt' in scope\n\
    \            return aInt > bInt || aDouble > bDouble ? a : b\n               \
    \           ^~~~\n/tmp/tmpmfhlyd8i.swift:20:35: error: cannot find 'aDouble' in\
    \ scope\n            return aInt > bInt || aDouble > bDouble ? a : b\n       \
    \                           ^~~~~~~\n/tmp/tmpmfhlyd8i.swift:20:45: error: cannot\
    \ find 'bDouble' in scope\n            return aInt > bInt || aDouble > bDouble\
    \ ? a : b\n                                            ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        return b == .intValue(a)\n    case .doubleValue(_):\n        return b\
    \ == .doubleValue(a)\n    case .stringValue(_):\n        return b == .stringValue(a)\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpy1zwp40_.swift:20:18: error: cannot convert return expression of\
    \ type 'Bool' to return type 'Value?'\n        return b == .intValue(a)\n    \
    \           ~~^~~~~~~~~~~~~~~\n/tmp/tmpy1zwp40_.swift:20:31: error: cannot convert\
    \ value of type 'Value' to expected argument type 'Int'\n        return b == .intValue(a)\n\
    \                              ^\n/tmp/tmpy1zwp40_.swift:22:18: error: cannot\
    \ convert return expression of type 'Bool' to return type 'Value?'\n        return\
    \ b == .doubleValue(a)\n               ~~^~~~~~~~~~~~~~~~~~\n/tmp/tmpy1zwp40_.swift:22:34:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Double'\n\
    \        return b == .doubleValue(a)\n                                 ^\n/tmp/tmpy1zwp40_.swift:24:18:\
    \ error: cannot convert return expression of type 'Bool' to return type 'Value?'\n\
    \        return b == .stringValue(a)\n               ~~^~~~~~~~~~~~~~~~~~\n/tmp/tmpy1zwp40_.swift:24:34:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \        return b == .stringValue(a)\n                                 ^\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n            return aInt > bInt || (aInt == bInt && aDouble\
    \ > bDouble)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpi0vubpy0.swift:18:31: error: cannot find 'aInt' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                            ^~~~\n/tmp/tmpi0vubpy0.swift:18:51: error: cannot\
    \ find 'aDouble' in scope\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n                                                  ^~~~~~~\n\
    /tmp/tmpi0vubpy0.swift:18:74: error: cannot find 'aString' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                                                                       ^~~~~~~\n\
    /tmp/tmpi0vubpy0.swift:19:35: error: cannot find 'bInt' in scope\n        switch\
    \ b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n  \
    \                                ^~~~\n/tmp/tmpi0vubpy0.swift:19:55: error: cannot\
    \ find 'bDouble' in scope\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n                                                   \
    \   ^~~~~~~\n/tmp/tmpi0vubpy0.swift:19:78: error: cannot find 'bString' in scope\n\
    \        switch b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n\
    \                                                                            \
    \ ^~~~~~~\n/tmp/tmpi0vubpy0.swift:20:20: error: cannot find 'aInt' in scope\n\
    \            return aInt > bInt || (aInt == bInt && aDouble > bDouble)\n     \
    \              ^~~~\n/tmp/tmpi0vubpy0.swift:20:27: error: cannot find 'bInt' in\
    \ scope\n            return aInt > bInt || (aInt == bInt && aDouble > bDouble)\n\
    \                          ^~~~\n/tmp/tmpi0vubpy0.swift:20:36: error: cannot find\
    \ 'aInt' in scope\n            return aInt > bInt || (aInt == bInt && aDouble\
    \ > bDouble)\n                                   ^~~~\n/tmp/tmpi0vubpy0.swift:20:44:\
    \ error: cannot find 'bInt' in scope\n            return aInt > bInt || (aInt\
    \ == bInt && aDouble > bDouble)\n                                           ^~~~\n\
    /tmp/tmpi0vubpy0.swift:20:52: error: cannot find 'aDouble' in scope\n        \
    \    return aInt >"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n            return aInt > bInt ? b : a\n        default:\n\
    \            return b\n        }\n    default:\n        return b\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp8qabid33.swift:18:31: error: cannot find 'aInt' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                            ^~~~\n/tmp/tmp8qabid33.swift:18:51: error: cannot\
    \ find 'aDouble' in scope\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n                                                  ^~~~~~~\n\
    /tmp/tmp8qabid33.swift:18:74: error: cannot find 'aString' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                                                                       ^~~~~~~\n\
    /tmp/tmp8qabid33.swift:19:35: error: cannot find 'bInt' in scope\n        switch\
    \ b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n  \
    \                                ^~~~\n/tmp/tmp8qabid33.swift:19:55: error: cannot\
    \ find 'bDouble' in scope\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n                                                   \
    \   ^~~~~~~\n/tmp/tmp8qabid33.swift:19:78: error: cannot find 'bString' in scope\n\
    \        switch b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n\
    \                                                                            \
    \ ^~~~~~~\n/tmp/tmp8qabid33.swift:20:20: error: cannot find 'aInt' in scope\n\
    \            return aInt > bInt ? b : a\n                   ^~~~\n/tmp/tmp8qabid33.swift:20:27:\
    \ error: cannot find 'bInt' in scope\n            return aInt > bInt ? b : a\n\
    \                          ^~~~\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare ints\n    case .intValue(_):\n\
    \        switch b { // Compare doubles\n        case .doubleValue(_):\n      \
    \      return b\n        case .stringValue(_):\n            return a\n       \
    \ }\n    case .doubleValue(_):\n        switch b { // Compare strings\n      \
    \  case .intValue(_):\n            return a\n        case .doubleValue(_):\n \
    \           return b\n        case .stringValue(_):\n            return a\n  \
    \      }\n    case .stringValue(_):\n        switch b { // Compare strings\n \
    \       case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return a\n \
    \       }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpmsnlczcl.swift:20:9: error: switch must be exhaustive\n       \
    \ switch b { // Compare doubles\n        ^\n/tmp/tmpmsnlczcl.swift:20:9: note:\
    \ add missing case: '.intValue(_)'\n        switch b { // Compare doubles\n  \
    \      ^\n"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n \
    \       case .doubleValue(_):\n            return .doubleValue(a.doubleValue >\
    \ b.doubleValue ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.intValue ? a.doubleValue : b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue\
    \ : b.doubleValue)\n        case .stringValue(_):\n            return .doubleValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        case .stringValue(_):\n\
    \            return .doubleValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.intValue ? a.stringValue : b.stringValue)\n        case .doubleValue(_):\n\
    \            return .stringValue(a.stringValue > b.doubleValue ? a.stringValue\
    \ : b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1),\
    \ b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpd6f0x855.swift:22:54: error: cannot convert value of type '(Int)\
    \ -> Value' to expected argument type 'Int'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \                   ^\n/tmp/tmpd6f0x855.swift:22:30: error: enum case 'intValue'\
    \ cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                             ^\n  \
    \                           Value\n/tmp/tmpd6f0x855.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmpd6f0x855.swift:22:41: note: only concrete types such as structs,\
    \ enums and classes can conform to protocols\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmpd6f0x855.swift:22:41: note: required by referencing operator\
    \ function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                           ^\n/tmp/tmpd6f0x855.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \        ^\n                                          Value\n/tmp/tmpd6f0x855.swift:22:56:\
    \ error: enum case 'intValue' cannot be used as an instance member\n         \
    \   return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n    \
    \                                                   ^\n                      \
    \                                 Value\n/tmp/tmpd6f0x855.swift:22:69: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                                                       ^\n                  \
    \                                "
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        return b == .intValue(_) ? .intValue(_) : .stringValue(_)\n    case .doubleValue(_):\n\
    \        return b == .doubleValue(_) ? .doubleValue(_) : .stringValue(_)\n   \
    \ case .stringValue(_):\n        return b == .stringValue(_) ? .stringValue(_)\
    \ : .intValue(_)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpsf04ksap.swift:20:31: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n        return b == .intValue(_) ? .intValue(_)\
    \ : .stringValue(_)\n                              ^\n/tmp/tmpsf04ksap.swift:22:34:\
    \ error: '_' can only appear in a pattern or on the left side of an assignment\n\
    \        return b == .doubleValue(_) ? .doubleValue(_) : .stringValue(_)\n   \
    \                              ^\n/tmp/tmpsf04ksap.swift:24:34: error: '_' can\
    \ only appear in a pattern or on the left side of an assignment\n        return\
    \ b == .stringValue(_) ? .stringValue(_) : .intValue(_)\n                    \
    \             ^\n"
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpmzfiigdx/tmpmzfiigdx.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba5a3c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba5a0bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba5a0bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba5a0bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzfiigdx                        0x000055ebafbe4a56 <unavailable> + 6742

    5    libc.so.6                          0x00002aba5a5b2460 __libc_start_main +
    245

    6    tmpmzfiigdx                        0x000055ebafbe4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpmzfiigdx/tmpmzfiigdx.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba5a3c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba5a0bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba5a0bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba5a0bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzfiigdx                        0x000055ebafbe4a56 <unavailable> + 6742

    5    libc.so.6                          0x00002aba5a5b2460 __libc_start_main +
    245

    6    tmpmzfiigdx                        0x000055ebafbe4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare ints\n    case .intValue(_):\n\
    \        switch b { // Compare doubles\n        case .doubleValue(_):\n      \
    \      return b\n        case .stringValue(_):\n            return a\n       \
    \ }\n    case .doubleValue(_):\n        switch b { // Compare strings\n      \
    \  case .intValue(_):\n            return a\n        case .doubleValue(_):\n \
    \           return b\n        case .stringValue(_):\n            return a\n  \
    \      }\n    case .stringValue(_):\n        switch b { // Compare strings\n \
    \       case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return a\n \
    \       }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpmsnlczcl.swift:20:9: error: switch must be exhaustive\n       \
    \ switch b { // Compare doubles\n        ^\n/tmp/tmpmsnlczcl.swift:20:9: note:\
    \ add missing case: '.intValue(_)'\n        switch b { // Compare doubles\n  \
    \      ^\n"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n            return aInt > bInt || (aInt == bInt && aDouble\
    \ > bDouble)\n                || (aInt == bInt && aDouble == bDouble && aString\
    \ > bString)\n                || (aInt == bInt && aDouble == bDouble && aString\
    \ == bString && aInt < bInt)\n                || (aInt == bInt && aDouble == bDouble\
    \ && aString == bString && aInt == bInt)\n                || (aInt == bInt &&\
    \ aDouble == bDouble && aString == bString && aInt == bInt && aDouble < bDouble)\n\
    \                || (aInt == bInt && aDouble == bDouble && aString == bString\
    \ && aInt == bInt && aDouble == bDouble)\n                || (aInt == bInt &&\
    \ aDouble == bDouble && aString == bString && aInt == bInt && aDouble == bDouble\
    \ && aString < bString)\n                || (aInt == bInt && aDouble == bDouble\
    \ && aString == bString && aInt == bInt && aDouble == bDouble && aString == bString)\n\
    \                || (aInt == bInt && aDouble == bDouble && aString == bString\
    \ && aInt == bInt && aDouble == bDouble && aString == bString && aInt > bInt)\n\
    \                || (aInt == bInt && aDouble == bDouble && aString == bString\
    \ && aInt == bInt && aDouble == bDouble && aString == bString && aInt == bInt)\n\
    \                || (aInt == bInt && aDouble == bDouble && aString == bString\
    \ && aInt == bInt && aDouble == bDouble && aString == bString && aInt == bInt\
    \ && aDouble < bDouble)\n                || (aInt == bInt && aDouble == bDouble\
    \ && aString == bString && aInt == bInt && aDouble == bDouble && aString == bString\
    \ && aInt == bInt && aDouble == bDouble)\n                || (aInt == bInt &&\
    \ aDouble == bDouble && aString == bString && aInt == bInt && aDouble == bDouble\
    \ && aString == bString && aInt == bInt && aDouble == bDouble && aString \n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp7_j55aoj.swift:33:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp7_j55aoj.swift:32:20: note: to match this opening '('\n           \
    \     || (aInt == bInt && aDouble == bDouble && aString == bString && aInt ==\
    \ bInt && aDouble == bDouble && aString == bString && aInt == bInt && aDouble\
    \ == bDouble && aString \n                   ^\n/tmp/tmp7_j55aoj.swift:55:66:\
    \ error: expected '}' at end of 'switch' statement\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)\n                                             \
    \                    ^\n/tmp/tmp7_j55aoj.swift:18:14: note: to match this opening\
    \ '{'\n    switch a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n\
    \             ^\n/tmp/tmp7_j55aoj.swift:55:66: error: expected '}' at end of brace\
    \ statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n\
    \                                                                 ^\n/tmp/tmp7_j55aoj.swift:17:48:\
    \ note: to match this opening '{'\nfunc compare_one(a: Value, b: Value) -> Value?\
    \ {\n                                               ^\n/tmp/tmp7_j55aoj.swift:18:31:\
    \ error: cannot find 'aInt' in scope\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n                              ^~~~\n/tmp/tmp7_j55aoj.swift:18:51:\
    \ error: cannot find 'aDouble' in scope\n    switch a { case .intValue(aInt),\
    \ .doubleValue(aDouble), .stringValue(aString):\n                            \
    \                      ^~~~~~~\n/tmp/tmp7_j55aoj.swift:18:74: error: cannot find\
    \ 'aString' in scope\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n                                                   \
    \                      ^~~~~~~\n/tmp/tmp7_j55aoj.swift:19:35: error: cannot find\
    \ 'bInt' in scope\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n                                  ^~~~\n/tmp/tmp7_j55aoj.swift:19:55:\
    \ error: cannot find 'bDouble' in scope\n        switch b { case .intValue(bInt),\
    \ .doubleValue(bDouble), .stringValue(bStri"
  stdout: ''
  timestamp: 1659825019
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // case Int\n    case .intValue(_):\n   \
    \     switch b { // case Int\n        case .intValue(_):\n            return a\n\
    \        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // case Double\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // case String\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmp9cfzgw95/tmp9cfzgw95.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acea861dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acea8314b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acea8314988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acea83137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9cfzgw95                        0x00005616c52a8a56 <unavailable> + 6742

    5    libc.so.6                          0x00002acea8809460 __libc_start_main +
    245

    6    tmp9cfzgw95                        0x00005616c52a8499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // TODO: Switch to switch on enum\n    case\
    \ .intValue(aInt):\n        switch b { // TODO: Switch to switch on enum\n   \
    \     case .intValue(bInt):\n            return aInt > bInt ? .intValue(aInt)\
    \ : .intValue(bInt)\n        case .doubleValue(bDouble):\n            return aInt\
    \ > bDouble ? .intValue(aInt) : .doubleValue(bDouble)\n        case .stringValue(bString):\n\
    \            return aInt > bString ? .intValue(aInt) : .stringValue(bString)\n\
    \        }\n    case .doubleValue(aDouble):\n        switch b { // TODO: Switch\
    \ to switch on enum\n        case .intValue(bInt):\n            return aDouble\
    \ > bInt ? .doubleValue(aDouble) : .intValue(bInt)\n        case .doubleValue(bDouble):\n\
    \            return aDouble > bDouble ? .doubleValue(aDouble) : .doubleValue(bDouble)\n\
    \        case .stringValue(bString):\n            return aDouble > bString ? .doubleValue(aDouble)\
    \ : .stringValue(bString)\n        }\n    case .stringValue(aString):\n      \
    \  switch b { // TODO: Switch to switch on enum\n        case .intValue(bInt):\n\
    \            return aString > bInt ? .stringValue(aString) : .intValue(bInt)\n\
    \        case .doubleValue(bDouble):\n            return aString > bDouble ? .stringValue(aString)\
    \ : .doubleValue(bDouble)\n        case .stringValue(bString):\n            return\
    \ aString > bString ? .stringValue(aString) : .stringValue(bString)\n        }\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpf85xybiu.swift:19:20: error: cannot find 'aInt' in scope\n    case\
    \ .intValue(aInt):\n                   ^~~~\n/tmp/tmpf85xybiu.swift:28:23: error:\
    \ cannot find 'aDouble' in scope\n    case .doubleValue(aDouble):\n          \
    \            ^~~~~~~\n/tmp/tmpf85xybiu.swift:37:23: error: cannot find 'aString'\
    \ in scope\n    case .stringValue(aString):\n                      ^~~~~~~\n/tmp/tmpf85xybiu.swift:21:24:\
    \ error: cannot find 'bInt' in scope\n        case .intValue(bInt):\n        \
    \               ^~~~\n/tmp/tmpf85xybiu.swift:23:27: error: cannot find 'bDouble'\
    \ in scope\n        case .doubleValue(bDouble):\n                          ^~~~~~~\n\
    /tmp/tmpf85xybiu.swift:25:27: error: cannot find 'bString' in scope\n        case\
    \ .stringValue(bString):\n                          ^~~~~~~\n/tmp/tmpf85xybiu.swift:22:20:\
    \ error: cannot find 'aInt' in scope\n            return aInt > bInt ? .intValue(aInt)\
    \ : .intValue(bInt)\n                   ^~~~\n/tmp/tmpf85xybiu.swift:22:27: error:\
    \ cannot find 'bInt' in scope\n            return aInt > bInt ? .intValue(aInt)\
    \ : .intValue(bInt)\n                          ^~~~\n/tmp/tmpf85xybiu.swift:22:44:\
    \ error: cannot find 'aInt' in scope\n            return aInt > bInt ? .intValue(aInt)\
    \ : .intValue(bInt)\n                                           ^~~~\n/tmp/tmpf85xybiu.swift:22:62:\
    \ error: cannot find 'bInt' in scope\n            return aInt > bInt ? .intValue(aInt)\
    \ : .intValue(bInt)\n                                                        \
    \     ^~~~\n/tmp/tmpf85xybiu.swift:24:20: error: cannot find 'aInt' in scope\n\
    \            return aInt > bDouble ? .intValue(aInt) : .doubleValue(bDouble)\n\
    \                   ^~~~\n/tmp/tmpf85xybiu.swift:24:27: error: cannot find 'bDouble'\
    \ in scope\n            return aInt > bDouble ? .intValue(aInt) : .doubleValue(bDouble)\n\
    \                          ^~~~~~~\n/tmp/tmpf85xybiu.swift:24:47: error: cannot\
    \ find 'aInt' in scope\n            return aInt > bDouble ? .intValue(aInt) :\
    \ .doubleValue(bDouble)\n                                              ^~~~\n\
    /tmp/tmpf85xybiu.swift:24:68: error: canno"
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return b\n        case .doubleValue(_):\n            return a\n       \
    \ case .stringValue(_):\n            return a\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return a\n        case .doubleValue(_):\n            return b\n       \
    \ case .stringValue(_):\n            return a\n        }\n    case .stringValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return a\n        case .doubleValue(_):\n            return b\n       \
    \ case .stringValue(_):\n            return a\n        }\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: Exception
  stderr: 'tmp5iihrj_b/tmp5iihrj_b.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0339a6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0339763b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0339763988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03397627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5iihrj_b                        0x00005637ad2a5d54 <unavailable> + 7508

    5    libc.so.6                          0x00002b0339c58460 __libc_start_main +
    245

    6    tmp5iihrj_b                        0x00005637ad2a5499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(aInt):\n\
    \        switch b { // Compare two ints\n        case .intValue(bInt):\n     \
    \       return bInt > aInt // Compare two ints\n        case .doubleValue(bDouble):\n\
    \            return bDouble > aInt // Compare two doubles\n        case .stringValue(bString):\n\
    \            return bString > aInt // Compare two strings\n        }\n    case\
    \ .doubleValue(aDouble):\n        switch b { // Compare two doubles\n        case\
    \ .intValue(bInt):\n            return bInt > aDouble // Compare two ints\n  \
    \      case .doubleValue(bDouble):\n            return bDouble > aDouble // Compare\
    \ two doubles\n        case .stringValue(bString):\n            return bString\
    \ > aDouble // Compare two strings\n        }\n    case .stringValue(aString):\n\
    \        switch b { // Compare two strings\n        case .intValue(bInt):\n  \
    \          return bInt > aString // Compare two ints\n        case .doubleValue(bDouble):\n\
    \            return bDouble > aString // Compare two doubles\n        case .stringValue(bString):\n\
    \            return bString > aString // Compare two strings\n        }\n    }\n\
    \    return nil // If values are equal, return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp3qdkhyp_.swift:19:20: error: cannot find 'aInt' in scope\n    case\
    \ .intValue(aInt):\n                   ^~~~\n/tmp/tmp3qdkhyp_.swift:28:23: error:\
    \ cannot find 'aDouble' in scope\n    case .doubleValue(aDouble):\n          \
    \            ^~~~~~~\n/tmp/tmp3qdkhyp_.swift:37:23: error: cannot find 'aString'\
    \ in scope\n    case .stringValue(aString):\n                      ^~~~~~~\n/tmp/tmp3qdkhyp_.swift:21:24:\
    \ error: cannot find 'bInt' in scope\n        case .intValue(bInt):\n        \
    \               ^~~~\n/tmp/tmp3qdkhyp_.swift:23:27: error: cannot find 'bDouble'\
    \ in scope\n        case .doubleValue(bDouble):\n                          ^~~~~~~\n\
    /tmp/tmp3qdkhyp_.swift:25:27: error: cannot find 'bString' in scope\n        case\
    \ .stringValue(bString):\n                          ^~~~~~~\n/tmp/tmp3qdkhyp_.swift:22:20:\
    \ error: cannot find 'bInt' in scope\n            return bInt > aInt // Compare\
    \ two ints\n                   ^~~~\n/tmp/tmp3qdkhyp_.swift:22:27: error: cannot\
    \ find 'aInt' in scope\n            return bInt > aInt // Compare two ints\n \
    \                         ^~~~\n/tmp/tmp3qdkhyp_.swift:22:25: error: cannot convert\
    \ return expression of type 'Bool' to return type 'Value?'\n            return\
    \ bInt > aInt // Compare two ints\n                   ~~~~~^~~~~~\n/tmp/tmp3qdkhyp_.swift:24:20:\
    \ error: cannot find 'bDouble' in scope\n            return bDouble > aInt //\
    \ Compare two doubles\n                   ^~~~~~~\n/tmp/tmp3qdkhyp_.swift:24:30:\
    \ error: cannot find 'aInt' in scope\n            return bDouble > aInt // Compare\
    \ two doubles\n                             ^~~~\n/tmp/tmp3qdkhyp_.swift:24:28:\
    \ error: cannot convert return expression of type 'Bool' to return type 'Value?'\n\
    \            return bDouble > aInt // Compare two doubles\n                  \
    \ ~~~~~~~~^~~~~~\n/tmp/tmp3qdkhyp_.swift:26:20: error: cannot find 'bString' in\
    \ scope\n            return bString > aInt // Compare two strings\n          \
    \         ^~~~~~~\n/tmp/tmp3qdkhyp_.swift:26:30: error: cannot find 'aInt' in\
    \ scope\n            return bString > aInt // Compare two strings\n          \
    \    "
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // TODO: switch to enum\n    case .intValue(aInt):\n\
    \        switch b { // TODO: switch to enum\n        case .intValue(bInt):\n \
    \           return aInt > bInt ? .intValue(aInt) : .intValue(bInt)\n        case\
    \ .doubleValue(bDouble):\n            return aInt > bDouble ? .doubleValue(aInt)\
    \ : .doubleValue(bDouble)\n        case .stringValue(bString):\n            return\
    \ aInt > bString ? .stringValue(aInt) : .stringValue(bString)\n        }\n   \
    \ case .doubleValue(aDouble):\n        switch b { // TODO: switch to enum\n  \
    \      case .intValue(bInt):\n            return aDouble > bInt ? .doubleValue(aDouble)\
    \ : .doubleValue(bInt)\n        case .doubleValue(bDouble):\n            return\
    \ aDouble > bDouble ? .doubleValue(aDouble) : .doubleValue(bDouble)\n        case\
    \ .stringValue(bString):\n            return aDouble > bString ? .doubleValue(aDouble)\
    \ : .doubleValue(bString)\n        }\n    case .stringValue(aString):\n      \
    \  switch b { // TODO: switch to enum\n        case .intValue(bInt):\n       \
    \     return aString > bInt ? .stringValue(aString) : .stringValue(bInt)\n   \
    \     case .doubleValue(bDouble):\n            return aString > bDouble ? .stringValue(aString)\
    \ : .stringValue(bDouble)\n        case .stringValue(bString):\n            return\
    \ aString > bString ? .stringValue(aString) : .stringValue(bString)\n        }\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpbf92752b.swift:19:20: error: cannot find 'aInt' in scope\n    case\
    \ .intValue(aInt):\n                   ^~~~\n/tmp/tmpbf92752b.swift:28:23: error:\
    \ cannot find 'aDouble' in scope\n    case .doubleValue(aDouble):\n          \
    \            ^~~~~~~\n/tmp/tmpbf92752b.swift:37:23: error: cannot find 'aString'\
    \ in scope\n    case .stringValue(aString):\n                      ^~~~~~~\n/tmp/tmpbf92752b.swift:21:24:\
    \ error: cannot find 'bInt' in scope\n        case .intValue(bInt):\n        \
    \               ^~~~\n/tmp/tmpbf92752b.swift:23:27: error: cannot find 'bDouble'\
    \ in scope\n        case .doubleValue(bDouble):\n                          ^~~~~~~\n\
    /tmp/tmpbf92752b.swift:25:27: error: cannot find 'bString' in scope\n        case\
    \ .stringValue(bString):\n                          ^~~~~~~\n/tmp/tmpbf92752b.swift:22:20:\
    \ error: cannot find 'aInt' in scope\n            return aInt > bInt ? .intValue(aInt)\
    \ : .intValue(bInt)\n                   ^~~~\n/tmp/tmpbf92752b.swift:22:27: error:\
    \ cannot find 'bInt' in scope\n            return aInt > bInt ? .intValue(aInt)\
    \ : .intValue(bInt)\n                          ^~~~\n/tmp/tmpbf92752b.swift:22:44:\
    \ error: cannot find 'aInt' in scope\n            return aInt > bInt ? .intValue(aInt)\
    \ : .intValue(bInt)\n                                           ^~~~\n/tmp/tmpbf92752b.swift:22:62:\
    \ error: cannot find 'bInt' in scope\n            return aInt > bInt ? .intValue(aInt)\
    \ : .intValue(bInt)\n                                                        \
    \     ^~~~\n/tmp/tmpbf92752b.swift:24:20: error: cannot find 'aInt' in scope\n\
    \            return aInt > bDouble ? .doubleValue(aInt) : .doubleValue(bDouble)\n\
    \                   ^~~~\n/tmp/tmpbf92752b.swift:24:27: error: cannot find 'bDouble'\
    \ in scope\n            return aInt > bDouble ? .doubleValue(aInt) : .doubleValue(bDouble)\n\
    \                          ^~~~~~~\n/tmp/tmpbf92752b.swift:24:50: error: cannot\
    \ find 'aInt' in scope\n            return aInt > bDouble ? .doubleValue(aInt)\
    \ : .doubleValue(bDouble)\n                                                 ^~~~\n\
    /tmp/tmpbf92752b.swift:24:71: "
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return b\n        case .doubleValue(_):\n            return a\n       \
    \ case .stringValue(_):\n            return a\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return b\n        case .doubleValue(_):\n            return a\n       \
    \ case .stringValue(_):\n            return a\n        }\n    case .stringValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return b\n        case .doubleValue(_):\n            return a\n       \
    \ case .stringValue(_):\n            return a\n        }\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: Exception
  stderr: 'tmpx2w48nht/tmpx2w48nht.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4388ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4385c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4385c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4385c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx2w48nht                        0x000055db306bad54 <unavailable> + 7508

    5    libc.so.6                          0x00002ae438ab8460 __libc_start_main +
    245

    6    tmpx2w48nht                        0x000055db306ba499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // case is exhaustive\n    case .intValue(i):\n\
    \        switch b { // case is exhaustive\n        case .intValue(i):\n      \
    \      return i\n        case .doubleValue(let d):\n            return d > i ?\
    \ .doubleValue(d) : .intValue(i)\n        case .stringValue(let s):\n        \
    \    if let i = Int(s) {\n                return .intValue(i)\n            }\n\
    \            if let d = Double(s) {\n                return .doubleValue(d) >\
    \ i ? .doubleValue(d) : .intValue(i)\n            }\n            return .stringValue(s)\n\
    \        }\n    case .doubleValue(let d):\n        switch b { // case is exhaustive\n\
    \        case .intValue(i):\n            return d\n        case .doubleValue(let\
    \ d):\n            return d > i ? .doubleValue(d) : .intValue(i)\n        case\
    \ .stringValue(let s):\n            if let i = Int(s) {\n                return\
    \ .intValue(i)\n            }\n            if let d = Double(s) {\n          \
    \      return .doubleValue(d) > i ? .doubleValue(d) : .intValue(i)\n         \
    \   }\n            return .stringValue(s)\n        }\n    case .stringValue(let\
    \ s):\n        switch b { // case is exhaustive\n        case .intValue(i):\n\
    \            return s\n        case .doubleValue(let d):\n            return d\
    \ > i ? .doubleValue(d) : .intValue(i)\n        case .stringValue(let s):\n  \
    \          if let i = Int(s) {\n                return .intValue(i)\n        \
    \    }\n            if let d = Double(s) {\n                return .doubleValue(d)\
    \ > i ? .doubleValue(d) : .intValue(i)\n            }\n            return .stringValue(s)\n\
    \        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp3hrm5g94.swift:19:20: error: cannot find 'i' in scope\n    case\
    \ .intValue(i):\n                   ^\n/tmp/tmp3hrm5g94.swift:21:24: error: cannot\
    \ find 'i' in scope\n        case .intValue(i):\n                       ^\n/tmp/tmp3hrm5g94.swift:22:20:\
    \ error: cannot find 'i' in scope\n            return i\n                   ^\n\
    /tmp/tmp3hrm5g94.swift:24:24: error: cannot find 'i' in scope\n            return\
    \ d > i ? .doubleValue(d) : .intValue(i)\n                       ^\n/tmp/tmp3hrm5g94.swift:24:56:\
    \ error: cannot find 'i' in scope\n            return d > i ? .doubleValue(d)\
    \ : .intValue(i)\n                                                       ^\n/tmp/tmp3hrm5g94.swift:30:42:\
    \ error: cannot find 'i' in scope\n                return .doubleValue(d) > i\
    \ ? .doubleValue(d) : .intValue(i)\n                                         ^\n\
    /tmp/tmp3hrm5g94.swift:30:74: error: cannot find 'i' in scope\n              \
    \  return .doubleValue(d) > i ? .doubleValue(d) : .intValue(i)\n             \
    \                                                            ^\n/tmp/tmp3hrm5g94.swift:30:25:\
    \ error: reference to member 'doubleValue' cannot be resolved without a contextual\
    \ type\n                return .doubleValue(d) > i ? .doubleValue(d) : .intValue(i)\n\
    \                        ^\n/tmp/tmp3hrm5g94.swift:36:24: error: cannot find 'i'\
    \ in scope\n        case .intValue(i):\n                       ^\n/tmp/tmp3hrm5g94.swift:37:20:\
    \ error: cannot convert return expression of type 'Double' to return type 'Value?'\n\
    \            return d\n                   ^\n/tmp/tmp3hrm5g94.swift:39:24: error:\
    \ cannot find 'i' in scope\n            return d > i ? .doubleValue(d) : .intValue(i)\n\
    \                       ^\n/tmp/tmp3hrm5g94.swift:39:56: error: cannot find 'i'\
    \ in scope\n            return d > i ? .doubleValue(d) : .intValue(i)\n      \
    \                                                 ^\n/tmp/tmp3hrm5g94.swift:45:42:\
    \ error: cannot find 'i' in scope\n                return .doubleValue(d) > i\
    \ ? .doubleValue(d) : .intValue(i)\n                                         ^\n\
    /tmp/tmp3hrm5g94.swi"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // TODO: Use a switch statement to compare\
    \ the values\n    case .intValue(aInt):\n        if b == .intValue(bInt) {\n \
    \           return aInt\n        } else if b == .doubleValue(bDouble) {\n    \
    \        return .doubleValue(bDouble)\n        } else if b == .stringValue(bString)\
    \ {\n            return .stringValue(bString)\n        }\n    case .doubleValue(aDouble):\n\
    \        if b == .intValue(bInt) {\n            return .intValue(bInt)\n     \
    \   } else if b == .doubleValue(bDouble) {\n            return aDouble\n     \
    \   } else if b == .stringValue(bString) {\n            return .stringValue(bString)\n\
    \        }\n    case .stringValue(aString):\n        if b == .intValue(bInt) {\n\
    \            return .intValue(bInt)\n        } else if b == .doubleValue(bDouble)\
    \ {\n            return .doubleValue(bDouble)\n        } else if b == .stringValue(bString)\
    \ {\n            return aString\n        }\n    }\n    return nil\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp5evozi1d.swift:19:20: error: cannot find 'aInt' in scope\n    case\
    \ .intValue(aInt):\n                   ^~~~\n/tmp/tmp5evozi1d.swift:27:23: error:\
    \ cannot find 'aDouble' in scope\n    case .doubleValue(aDouble):\n          \
    \            ^~~~~~~\n/tmp/tmp5evozi1d.swift:35:23: error: cannot find 'aString'\
    \ in scope\n    case .stringValue(aString):\n                      ^~~~~~~\n/tmp/tmp5evozi1d.swift:20:27:\
    \ error: cannot find 'bInt' in scope\n        if b == .intValue(bInt) {\n    \
    \                      ^~~~\n/tmp/tmp5evozi1d.swift:21:20: error: cannot find\
    \ 'aInt' in scope\n            return aInt\n                   ^~~~\n/tmp/tmp5evozi1d.swift:22:37:\
    \ error: cannot find 'bDouble' in scope\n        } else if b == .doubleValue(bDouble)\
    \ {\n                                    ^~~~~~~\n/tmp/tmp5evozi1d.swift:23:33:\
    \ error: cannot find 'bDouble' in scope\n            return .doubleValue(bDouble)\n\
    \                                ^~~~~~~\n/tmp/tmp5evozi1d.swift:24:37: error:\
    \ cannot find 'bString' in scope\n        } else if b == .stringValue(bString)\
    \ {\n                                    ^~~~~~~\n/tmp/tmp5evozi1d.swift:25:33:\
    \ error: cannot find 'bString' in scope\n            return .stringValue(bString)\n\
    \                                ^~~~~~~\n/tmp/tmp5evozi1d.swift:28:27: error:\
    \ cannot find 'bInt' in scope\n        if b == .intValue(bInt) {\n           \
    \               ^~~~\n/tmp/tmp5evozi1d.swift:29:30: error: cannot find 'bInt'\
    \ in scope\n            return .intValue(bInt)\n                             ^~~~\n\
    /tmp/tmp5evozi1d.swift:30:37: error: cannot find 'bDouble' in scope\n        }\
    \ else if b == .doubleValue(bDouble) {\n                                    ^~~~~~~\n\
    /tmp/tmp5evozi1d.swift:31:20: error: cannot find 'aDouble' in scope\n        \
    \    return aDouble\n                   ^~~~~~~\n/tmp/tmp5evozi1d.swift:32:37:\
    \ error: cannot find 'bString' in scope\n        } else if b == .stringValue(bString)\
    \ {\n                                    ^~~~~~~\n/tmp/tmp5evozi1d.swift:33:33:\
    \ error: cannot find 'bString' in scope\n            return .stringValue(bString)\n\
    \ "
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a\n    case .intValue(aInt):\n\
    \        switch b { // Switch on b\n        case .intValue(bInt):\n          \
    \  return bInt > aInt // Compare bInt to aInt\n        case .doubleValue(bDouble):\n\
    \            return bDouble > aInt // Compare bDouble to aInt\n        case .stringValue(bString):\n\
    \            return bString > aInt // Compare bString to aInt\n        }\n   \
    \ case .doubleValue(aDouble):\n        switch b { // Switch on b\n        case\
    \ .intValue(bInt):\n            return bInt > aDouble // Compare bInt to aDouble\n\
    \        case .doubleValue(bDouble):\n            return bDouble > aDouble //\
    \ Compare bDouble to aDouble\n        case .stringValue(bString):\n          \
    \  return bString > aDouble // Compare bString to aDouble\n        }\n    case\
    \ .stringValue(aString):\n        switch b { // Switch on b\n        case .intValue(bInt):\n\
    \            return bInt > aString // Compare bInt to aString\n        case .doubleValue(bDouble):\n\
    \            return bDouble > aString // Compare bDouble to aString\n        case\
    \ .stringValue(bString):\n            return bString > aString // Compare bString\
    \ to aString\n        }\n    }\n    return nil // If both are strings, compare\
    \ them alphabetically\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpq3sda50_.swift:19:20: error: cannot find 'aInt' in scope\n    case\
    \ .intValue(aInt):\n                   ^~~~\n/tmp/tmpq3sda50_.swift:28:23: error:\
    \ cannot find 'aDouble' in scope\n    case .doubleValue(aDouble):\n          \
    \            ^~~~~~~\n/tmp/tmpq3sda50_.swift:37:23: error: cannot find 'aString'\
    \ in scope\n    case .stringValue(aString):\n                      ^~~~~~~\n/tmp/tmpq3sda50_.swift:21:24:\
    \ error: cannot find 'bInt' in scope\n        case .intValue(bInt):\n        \
    \               ^~~~\n/tmp/tmpq3sda50_.swift:23:27: error: cannot find 'bDouble'\
    \ in scope\n        case .doubleValue(bDouble):\n                          ^~~~~~~\n\
    /tmp/tmpq3sda50_.swift:25:27: error: cannot find 'bString' in scope\n        case\
    \ .stringValue(bString):\n                          ^~~~~~~\n/tmp/tmpq3sda50_.swift:22:20:\
    \ error: cannot find 'bInt' in scope\n            return bInt > aInt // Compare\
    \ bInt to aInt\n                   ^~~~\n/tmp/tmpq3sda50_.swift:22:27: error:\
    \ cannot find 'aInt' in scope\n            return bInt > aInt // Compare bInt\
    \ to aInt\n                          ^~~~\n/tmp/tmpq3sda50_.swift:22:25: error:\
    \ cannot convert return expression of type 'Bool' to return type 'Value?'\n  \
    \          return bInt > aInt // Compare bInt to aInt\n                   ~~~~~^~~~~~\n\
    /tmp/tmpq3sda50_.swift:24:20: error: cannot find 'bDouble' in scope\n        \
    \    return bDouble > aInt // Compare bDouble to aInt\n                   ^~~~~~~\n\
    /tmp/tmpq3sda50_.swift:24:30: error: cannot find 'aInt' in scope\n           \
    \ return bDouble > aInt // Compare bDouble to aInt\n                         \
    \    ^~~~\n/tmp/tmpq3sda50_.swift:24:28: error: cannot convert return expression\
    \ of type 'Bool' to return type 'Value?'\n            return bDouble > aInt //\
    \ Compare bDouble to aInt\n                   ~~~~~~~~^~~~~~\n/tmp/tmpq3sda50_.swift:26:20:\
    \ error: cannot find 'bString' in scope\n            return bString > aInt //\
    \ Compare bString to aInt\n                   ^~~~~~~\n/tmp/tmpq3sda50_.swift:26:30:\
    \ error: cannot find 'aInt' in scope\n            return bString > aInt // Compar"
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpmzfiigdx/tmpmzfiigdx.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba5a3c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba5a0bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba5a0bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba5a0bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzfiigdx                        0x000055ebafbe4a56 <unavailable> + 6742

    5    libc.so.6                          0x00002aba5a5b2460 __libc_start_main +
    245

    6    tmpmzfiigdx                        0x000055ebafbe4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n \
    \       case .doubleValue(_):\n            return .doubleValue(a.doubleValue >\
    \ b.doubleValue ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.intValue ? a.doubleValue : b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue\
    \ : b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.intValue ? a.stringValue : b.stringValue)\n        case .doubleValue(_):\n\
    \            return .stringValue(a.stringValue > b.doubleValue ? a.stringValue\
    \ : b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1),\
    \ b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp7yyyx55x.swift:22:54: error: cannot convert value of type '(Int)\
    \ -> Value' to expected argument type 'Int'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \                   ^\n/tmp/tmp7yyyx55x.swift:22:30: error: enum case 'intValue'\
    \ cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                             ^\n  \
    \                           Value\n/tmp/tmp7yyyx55x.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmp7yyyx55x.swift:22:41: note: only concrete types such as structs,\
    \ enums and classes can conform to protocols\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmp7yyyx55x.swift:22:41: note: required by referencing operator\
    \ function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                           ^\n/tmp/tmp7yyyx55x.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \        ^\n                                          Value\n/tmp/tmp7yyyx55x.swift:22:56:\
    \ error: enum case 'intValue' cannot be used as an instance member\n         \
    \   return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n    \
    \                                                   ^\n                      \
    \                                 Value\n/tmp/tmp7yyyx55x.swift:22:69: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                                                       ^\n                  \
    \                                "
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Handle ints\n    case .intValue(_):\n\
    \        return b == .intValue(_) ? .intValue(_) : .intValue(_)\n    case .doubleValue(_):\n\
    \        return b == .doubleValue(_) ? .doubleValue(_) : .doubleValue(_)\n   \
    \ case .stringValue(_):\n        return b == .stringValue(_) ? .stringValue(_)\
    \ : .stringValue(_)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp9uz3m900.swift:20:31: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n        return b == .intValue(_) ? .intValue(_)\
    \ : .intValue(_)\n                              ^\n/tmp/tmp9uz3m900.swift:22:34:\
    \ error: '_' can only appear in a pattern or on the left side of an assignment\n\
    \        return b == .doubleValue(_) ? .doubleValue(_) : .doubleValue(_)\n   \
    \                              ^\n/tmp/tmp9uz3m900.swift:24:34: error: '_' can\
    \ only appear in a pattern or on the left side of an assignment\n        return\
    \ b == .stringValue(_) ? .stringValue(_) : .stringValue(_)\n                 \
    \                ^\n"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n            return aInt > bInt || (aInt == bInt && aDouble\
    \ > bDouble)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpi0vubpy0.swift:18:31: error: cannot find 'aInt' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                            ^~~~\n/tmp/tmpi0vubpy0.swift:18:51: error: cannot\
    \ find 'aDouble' in scope\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n                                                  ^~~~~~~\n\
    /tmp/tmpi0vubpy0.swift:18:74: error: cannot find 'aString' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                                                                       ^~~~~~~\n\
    /tmp/tmpi0vubpy0.swift:19:35: error: cannot find 'bInt' in scope\n        switch\
    \ b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n  \
    \                                ^~~~\n/tmp/tmpi0vubpy0.swift:19:55: error: cannot\
    \ find 'bDouble' in scope\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n                                                   \
    \   ^~~~~~~\n/tmp/tmpi0vubpy0.swift:19:78: error: cannot find 'bString' in scope\n\
    \        switch b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n\
    \                                                                            \
    \ ^~~~~~~\n/tmp/tmpi0vubpy0.swift:20:20: error: cannot find 'aInt' in scope\n\
    \            return aInt > bInt || (aInt == bInt && aDouble > bDouble)\n     \
    \              ^~~~\n/tmp/tmpi0vubpy0.swift:20:27: error: cannot find 'bInt' in\
    \ scope\n            return aInt > bInt || (aInt == bInt && aDouble > bDouble)\n\
    \                          ^~~~\n/tmp/tmpi0vubpy0.swift:20:36: error: cannot find\
    \ 'aInt' in scope\n            return aInt > bInt || (aInt == bInt && aDouble\
    \ > bDouble)\n                                   ^~~~\n/tmp/tmpi0vubpy0.swift:20:44:\
    \ error: cannot find 'bInt' in scope\n            return aInt > bInt || (aInt\
    \ == bInt && aDouble > bDouble)\n                                           ^~~~\n\
    /tmp/tmpi0vubpy0.swift:20:52: error: cannot find 'aDouble' in scope\n        \
    \    return aInt >"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Switch on b's type\n\
    \        case .intValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpv2k5crwr.swift:22:41: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n            return .intValue(a.intValue > b.intValue)\n\
    \                                        ^\n/tmp/tmpv2k5crwr.swift:22:30: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue)\n                             ^\n       \
    \                      Value\n/tmp/tmpv2k5crwr.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue)\n                                        ^\n/tmp/tmpv2k5crwr.swift:22:41:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n            return .intValue(a.intValue > b.intValue)\n         \
    \                               ^\n/tmp/tmpv2k5crwr.swift:22:41: note: required\
    \ by referencing operator function '>' on 'Comparable' where 'Self' = '(Int) ->\
    \ Value'\n            return .intValue(a.intValue > b.intValue)\n            \
    \                            ^\n/tmp/tmpv2k5crwr.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue)\n                                          ^\n               \
    \                           Value\n/tmp/tmpv2k5crwr.swift:24:47: error: cannot\
    \ convert value of type 'Bool' to expected argument type 'Double'\n          \
    \  return .doubleValue(a.doubleValue > b.doubleValue)\n                      \
    \                        ^\n/tmp/tmpv2k5crwr.swift:24:33: error: enum case 'doubleValue'\
    \ cannot be used as an instance member\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n                                ^\n                      \
    \          Value\n/tmp/tmpv2k5crwr.swift:24:47: error: type '(Double) -> Value'\
    \ cannot conform to 'Comparable'\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n                                              ^\n/tmp/tmpv2k5crwr.swift:24:47:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ proto"
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Compare two values\n    case .intValue(_):\n\
    \        switch b { // Compare two integers\n        case .intValue(_):\n    \
    \        return b\n        case .doubleValue(_):\n            return a\n     \
    \   case .stringValue(_):\n            return a\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Compare two doubles\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return a\n        }\n    case .stringValue(_):\n\
    \        switch b { // Compare two strings\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return a\n        }\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
    \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: Exception
  stderr: 'tmp_rgpbuiz/tmp_rgpbuiz.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a03d65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a03a5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a03a5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a03a5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_rgpbuiz                        0x000055bfbd7dfd54 <unavailable> + 7508

    5    libc.so.6                          0x00002b6a03f51460 __libc_start_main +
    245

    6    tmp_rgpbuiz                        0x000055bfbd7df499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        return b == .intValue(a) ? .intValue(a) : .intValue(b)\n    case .doubleValue(_):\n\
    \        return b == .doubleValue(a) ? .doubleValue(a) : .doubleValue(b)\n   \
    \ case .stringValue(_):\n        return b == .stringValue(a) ? .stringValue(a)\
    \ : .stringValue(b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpg12m0whn.swift:20:31: error: cannot convert value of type 'Value'\
    \ to expected argument type 'Int'\n        return b == .intValue(a) ? .intValue(a)\
    \ : .intValue(b)\n                              ^\n/tmp/tmpg12m0whn.swift:20:46:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Int'\n\
    \        return b == .intValue(a) ? .intValue(a) : .intValue(b)\n            \
    \                                 ^\n/tmp/tmpg12m0whn.swift:20:61: error: cannot\
    \ convert value of type 'Value' to expected argument type 'Int'\n        return\
    \ b == .intValue(a) ? .intValue(a) : .intValue(b)\n                          \
    \                                  ^\n/tmp/tmpg12m0whn.swift:22:34: error: cannot\
    \ convert value of type 'Value' to expected argument type 'Double'\n        return\
    \ b == .doubleValue(a) ? .doubleValue(a) : .doubleValue(b)\n                 \
    \                ^\n/tmp/tmpg12m0whn.swift:22:52: error: cannot convert value\
    \ of type 'Value' to expected argument type 'Double'\n        return b == .doubleValue(a)\
    \ ? .doubleValue(a) : .doubleValue(b)\n                                      \
    \             ^\n/tmp/tmpg12m0whn.swift:22:70: error: cannot convert value of\
    \ type 'Value' to expected argument type 'Double'\n        return b == .doubleValue(a)\
    \ ? .doubleValue(a) : .doubleValue(b)\n                                      \
    \                               ^\n/tmp/tmpg12m0whn.swift:24:34: error: cannot\
    \ convert value of type 'Value' to expected argument type 'String'\n        return\
    \ b == .stringValue(a) ? .stringValue(a) : .stringValue(b)\n                 \
    \                ^\n/tmp/tmpg12m0whn.swift:24:52: error: cannot convert value\
    \ of type 'Value' to expected argument type 'String'\n        return b == .stringValue(a)\
    \ ? .stringValue(a) : .stringValue(b)\n                                      \
    \             ^\n/tmp/tmpg12m0whn.swift:24:70: error: cannot convert value of\
    \ type 'Value' to expected argument type 'String'\n        return b == .stringValue(a)\
    \ ? .stringValue(a) : .stringValue(b)\n                                      \
    \                             "
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // case Int\n    case .intValue(_):\n   \
    \     switch b { // case Int\n        case .intValue(_):\n            return a\n\
    \        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // case Double\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // case String\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmp9cfzgw95/tmp9cfzgw95.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acea861dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acea8314b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acea8314988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acea83137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9cfzgw95                        0x00005616c52a8a56 <unavailable> + 6742

    5    libc.so.6                          0x00002acea8809460 __libc_start_main +
    245

    6    tmp9cfzgw95                        0x00005616c52a8499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // case Int\n    case .intValue(a):\n   \
    \     switch b { // case Int\n        case .intValue(b):\n            return b\n\
    \        case .doubleValue(b):\n            return a\n        case .stringValue(b):\n\
    \            return a\n        }\n    case .doubleValue(a):\n        switch b\
    \ { // case Double\n        case .intValue(b):\n            return a\n       \
    \ case .doubleValue(b):\n            return b\n        case .stringValue(b):\n\
    \            return a\n        }\n    case .stringValue(a):\n        switch b\
    \ { // case String\n        case .intValue(b):\n            return a\n       \
    \ case .doubleValue(b):\n            return b\n        case .stringValue(b):\n\
    \            return a\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp7t8xivxl.swift:19:20: error: expression pattern of type 'Value'\
    \ cannot match values of type 'Int'\n    case .intValue(a):\n                \
    \   ^\n/tmp/tmp7t8xivxl.swift:28:23: error: expression pattern of type 'Value'\
    \ cannot match values of type 'Double'\n    case .doubleValue(a):\n          \
    \            ^\n/tmp/tmp7t8xivxl.swift:37:23: error: expression pattern of type\
    \ 'Value' cannot match values of type 'String'\n    case .stringValue(a):\n  \
    \                    ^\n/tmp/tmp7t8xivxl.swift:37:23: note: overloads for '~='\
    \ exist with these partially matching parameter lists: (Substring, String)\n \
    \   case .stringValue(a):\n                      ^\n/tmp/tmp7t8xivxl.swift:21:24:\
    \ error: expression pattern of type 'Value' cannot match values of type 'Int'\n\
    \        case .intValue(b):\n                       ^\n/tmp/tmp7t8xivxl.swift:23:27:\
    \ error: expression pattern of type 'Value' cannot match values of type 'Double'\n\
    \        case .doubleValue(b):\n                          ^\n/tmp/tmp7t8xivxl.swift:25:27:\
    \ error: expression pattern of type 'Value' cannot match values of type 'String'\n\
    \        case .stringValue(b):\n                          ^\n/tmp/tmp7t8xivxl.swift:25:27:\
    \ note: overloads for '~=' exist with these partially matching parameter lists:\
    \ (Substring, String)\n        case .stringValue(b):\n                       \
    \   ^\n/tmp/tmp7t8xivxl.swift:30:24: error: expression pattern of type 'Value'\
    \ cannot match values of type 'Int'\n        case .intValue(b):\n            \
    \           ^\n/tmp/tmp7t8xivxl.swift:32:27: error: expression pattern of type\
    \ 'Value' cannot match values of type 'Double'\n        case .doubleValue(b):\n\
    \                          ^\n/tmp/tmp7t8xivxl.swift:34:27: error: expression\
    \ pattern of type 'Value' cannot match values of type 'String'\n        case .stringValue(b):\n\
    \                          ^\n/tmp/tmp7t8xivxl.swift:34:27: note: overloads for\
    \ '~=' exist with these partially matching parameter lists: (Substring, String)\n\
    \        case .stringValue(b):\n                          ^\n/tmp/tmp7t8xivxl.swift:39:24:\
    \ error: expressio"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n            if aInt == bInt { return .intValue(aInt)\
    \ }\n            if aDouble == bDouble { return .doubleValue(aDouble) }\n    \
    \        if aString == bString { return .stringValue(aString) }\n        }\n \
    \   }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpjyss7785.swift:18:31: error: cannot find 'aInt' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                            ^~~~\n/tmp/tmpjyss7785.swift:18:51: error: cannot\
    \ find 'aDouble' in scope\n    switch a { case .intValue(aInt), .doubleValue(aDouble),\
    \ .stringValue(aString):\n                                                  ^~~~~~~\n\
    /tmp/tmpjyss7785.swift:18:74: error: cannot find 'aString' in scope\n    switch\
    \ a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n  \
    \                                                                       ^~~~~~~\n\
    /tmp/tmpjyss7785.swift:19:35: error: cannot find 'bInt' in scope\n        switch\
    \ b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n  \
    \                                ^~~~\n/tmp/tmpjyss7785.swift:19:55: error: cannot\
    \ find 'bDouble' in scope\n        switch b { case .intValue(bInt), .doubleValue(bDouble),\
    \ .stringValue(bString):\n                                                   \
    \   ^~~~~~~\n/tmp/tmpjyss7785.swift:19:78: error: cannot find 'bString' in scope\n\
    \        switch b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n\
    \                                                                            \
    \ ^~~~~~~\n/tmp/tmpjyss7785.swift:20:16: error: cannot find 'aInt' in scope\n\
    \            if aInt == bInt { return .intValue(aInt) }\n               ^~~~\n\
    /tmp/tmpjyss7785.swift:20:24: error: cannot find 'bInt' in scope\n           \
    \ if aInt == bInt { return .intValue(aInt) }\n                       ^~~~\n/tmp/tmpjyss7785.swift:20:48:\
    \ error: cannot find 'aInt' in scope\n            if aInt == bInt { return .intValue(aInt)\
    \ }\n                                               ^~~~\n/tmp/tmpjyss7785.swift:21:16:\
    \ error: cannot find 'aDouble' in scope\n            if aDouble == bDouble { return\
    \ .doubleValue(aDouble) }\n               ^~~~~~~\n/tmp/tmpjyss7785.swift:21:27:\
    \ error: cannot find 'bDouble' in scope\n            if aDouble == bDouble { return\
    \ .doubleValue(aDouble) }\n                       "
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpmzfiigdx/tmpmzfiigdx.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba5a3c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba5a0bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba5a0bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba5a0bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzfiigdx                        0x000055ebafbe4a56 <unavailable> + 6742

    5    libc.so.6                          0x00002aba5a5b2460 __libc_start_main +
    245

    6    tmpmzfiigdx                        0x000055ebafbe4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824949
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return a\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return b\n      \
    \  case .doubleValue(_):\n            return a\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return b\n      \
    \  case .doubleValue(_):\n            return a\n        case .stringValue(_):\n\
    \            return a\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmpjn7zgbi4/tmpjn7zgbi4.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42cbac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe429b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe429b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe429b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjn7zgbi4                        0x0000559d58591a56 <unavailable> + 6742

    5    libc.so.6                          0x00002afe42ea6460 __libc_start_main +
    245

    6    tmpjn7zgbi4                        0x0000559d58591499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: -4
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // case Int\n    case .intValue(_):\n   \
    \     switch b { // case Int\n        case .intValue(_):\n            return a\n\
    \        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // case Double\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // case String\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\n\
    assert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\n\
    assert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a:\
    \ .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1),\
    \ b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"\
    5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
    \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
  status: Exception
  stderr: 'tmp9cfzgw95/tmp9cfzgw95.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acea861dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acea8314b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acea8314988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acea83137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9cfzgw95                        0x00005616c52a8a56 <unavailable> + 6742

    5    libc.so.6                          0x00002acea8809460 __libc_start_main +
    245

    6    tmp9cfzgw95                        0x00005616c52a8499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue:\n\
    \        switch b { // Switch on b's type\n        case .intValue:\n         \
    \   return a.intValue > b.intValue ? a : b\n        case .doubleValue:\n     \
    \       return a.doubleValue > b.doubleValue ? a : b\n        case .stringValue:\n\
    \            return a.stringValue > b.stringValue ? a : b\n        }\n    case\
    \ .doubleValue:\n        switch b { // Switch on b's type\n        case .intValue:\n\
    \            return a.doubleValue > b.intValue ? a : b\n        case .doubleValue:\n\
    \            return a.doubleValue > b.doubleValue ? a : b\n        case .stringValue:\n\
    \            return a.doubleValue > b.stringValue ? a : b\n        }\n    case\
    \ .stringValue:\n        switch b { // Switch on b's type\n        case .intValue:\n\
    \            return a.stringValue > b.intValue ? a : b\n        case .doubleValue:\n\
    \            return a.stringValue > b.doubleValue ? a : b\n        case .stringValue:\n\
    \            return a.stringValue > b.stringValue ? a : b\n        }\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1),\
    \ b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp9amjf0rd.swift:22:20: error: enum case 'intValue' cannot be used\
    \ as an instance member\n            return a.intValue > b.intValue ? a : b\n\
    \                   ^\n                   Value\n/tmp/tmp9amjf0rd.swift:22:31:\
    \ error: type '(Int) -> Value' cannot conform to 'Comparable'\n            return\
    \ a.intValue > b.intValue ? a : b\n                              ^\n/tmp/tmp9amjf0rd.swift:22:31:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n            return a.intValue > b.intValue ? a : b\n            \
    \                  ^\n/tmp/tmp9amjf0rd.swift:22:31: note: required by referencing\
    \ operator function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n    \
    \        return a.intValue > b.intValue ? a : b\n                            \
    \  ^\n/tmp/tmp9amjf0rd.swift:22:33: error: enum case 'intValue' cannot be used\
    \ as an instance member\n            return a.intValue > b.intValue ? a : b\n\
    \                                ^\n                                Value\n/tmp/tmp9amjf0rd.swift:24:20:\
    \ error: enum case 'doubleValue' cannot be used as an instance member\n      \
    \      return a.doubleValue > b.doubleValue ? a : b\n                   ^\n  \
    \                 Value\n/tmp/tmp9amjf0rd.swift:24:34: error: type '(Double) ->\
    \ Value' cannot conform to 'Comparable'\n            return a.doubleValue > b.doubleValue\
    \ ? a : b\n                                 ^\n/tmp/tmp9amjf0rd.swift:24:34: note:\
    \ only concrete types such as structs, enums and classes can conform to protocols\n\
    \            return a.doubleValue > b.doubleValue ? a : b\n                  \
    \               ^\n/tmp/tmp9amjf0rd.swift:24:34: note: required by referencing\
    \ operator function '>' on 'Comparable' where 'Self' = '(Double) -> Value'\n \
    \           return a.doubleValue > b.doubleValue ? a : b\n                   \
    \              ^\n/tmp/tmp9amjf0rd.swift:24:36: error: enum case 'doubleValue'\
    \ cannot be used as an instance member\n            return a.doubleValue > b.doubleValue\
    \ ? a : b\n                                   ^\n                            \
    \       Value\n/"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // a is smaller\n    case .intValue(_):\n\
    \        return b == .intValue(a)\n    case .doubleValue(_):\n        return b\
    \ == .doubleValue(a)\n    case .stringValue(_):\n        return b == .stringValue(a)\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpy1zwp40_.swift:20:18: error: cannot convert return expression of\
    \ type 'Bool' to return type 'Value?'\n        return b == .intValue(a)\n    \
    \           ~~^~~~~~~~~~~~~~~\n/tmp/tmpy1zwp40_.swift:20:31: error: cannot convert\
    \ value of type 'Value' to expected argument type 'Int'\n        return b == .intValue(a)\n\
    \                              ^\n/tmp/tmpy1zwp40_.swift:22:18: error: cannot\
    \ convert return expression of type 'Bool' to return type 'Value?'\n        return\
    \ b == .doubleValue(a)\n               ~~^~~~~~~~~~~~~~~~~~\n/tmp/tmpy1zwp40_.swift:22:34:\
    \ error: cannot convert value of type 'Value' to expected argument type 'Double'\n\
    \        return b == .doubleValue(a)\n                                 ^\n/tmp/tmpy1zwp40_.swift:24:18:\
    \ error: cannot convert return expression of type 'Bool' to return type 'Value?'\n\
    \        return b == .stringValue(a)\n               ~~^~~~~~~~~~~~~~~~~~\n/tmp/tmpy1zwp40_.swift:24:34:\
    \ error: cannot convert value of type 'Value' to expected argument type 'String'\n\
    \        return b == .stringValue(a)\n                                 ^\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return a > b ? a : b\n        case .doubleValue(_):\n            return\
    \ a > b ? b : a\n        case .stringValue(_):\n            return a > b ? a :\
    \ b\n        }\n    case .doubleValue(_):\n        switch b { // Switch on b's\
    \ type\n        case .intValue(_):\n            return a > b ? b : a\n       \
    \ case .doubleValue(_):\n            return a > b ? a : b\n        case .stringValue(_):\n\
    \            return a > b ? b : a\n        }\n    case .stringValue(_):\n    \
    \    switch b { // Switch on b's type\n        case .intValue(_):\n          \
    \  return a > b ? a : b\n        case .doubleValue(_):\n            return a >\
    \ b ? b : a\n        case .stringValue(_):\n            return a > b ? b : a\n\
    \        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a:\
    \ .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1),\
    \ b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2),\
    \ b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6))\
    \ == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\"\
    )) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b:\
    \ .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpgf6adgr5.swift:22:22: error: referencing operator function '>'\
    \ on 'Comparable' requires that 'Value' conform to 'Comparable'\n            return\
    \ a > b ? a : b\n                     ^\nSwift.Comparable:1:17: note: where 'Self'\
    \ = 'Value'\npublic protocol Comparable : Equatable {\n                ^\n/tmp/tmpgf6adgr5.swift:22:22:\
    \ note: binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? a : b\n                     ^\n/tmp/tmpgf6adgr5.swift:24:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? b : a\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmpgf6adgr5.swift:24:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? b : a\n                     ^\n/tmp/tmpgf6adgr5.swift:26:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? a : b\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmpgf6adgr5.swift:26:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? a : b\n                     ^\n/tmp/tmpgf6adgr5.swift:31:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? b : a\n                \
    \     ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol\
    \ Comparable : Equatable {\n                ^\n/tmp/tmpgf6adgr5.swift:31:22: note:\
    \ binary operator '>' cannot be synthesized for enums with associated values\n\
    \            return a > b ? b : a\n                     ^\n/tmp/tmpgf6adgr5.swift:33:22:\
    \ error: referencing operator function '>' on 'Comparable' requires that 'Value'\
    \ conform to 'Comparable'\n            return a > b ? a : b\n              "
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a.\n    case .intValue(int(a)):\n\
    \        switch b { // Switch on b.\n        case .intValue(int(b)):\n       \
    \     return b\n        case .doubleValue(double(b)):\n            return b\n\
    \        case .stringValue(string(b)):\n            return b\n        }\n    case\
    \ .doubleValue(double(a)):\n        switch b { // Switch on b.\n        case .intValue(int(b)):\n\
    \            return b\n        case .doubleValue(double(b)):\n            return\
    \ b\n        case .stringValue(string(b)):\n            return b\n        }\n\
    \    case .stringValue(string(a)):\n        switch b { // Switch on b.\n     \
    \   case .intValue(int(b)):\n            return b\n        case .doubleValue(double(b)):\n\
    \            return b\n        case .stringValue(string(b)):\n            return\
    \ b\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a:\
    \ .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a:\
    \ .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5),\
    \ b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"\
    2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"\
    ), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"\
    1\"), b: .intValue(1)) == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpumtz0xxu.swift:19:20: error: cannot find 'int' in scope\n    case\
    \ .intValue(int(a)):\n                   ^~~\n/tmp/tmpumtz0xxu.swift:28:23: error:\
    \ cannot find 'double' in scope\n    case .doubleValue(double(a)):\n         \
    \             ^~~~~~\n/tmp/tmpumtz0xxu.swift:37:23: error: cannot find 'string'\
    \ in scope\n    case .stringValue(string(a)):\n                      ^~~~~~\n\
    /tmp/tmpumtz0xxu.swift:21:24: error: cannot find 'int' in scope\n        case\
    \ .intValue(int(b)):\n                       ^~~\n/tmp/tmpumtz0xxu.swift:23:27:\
    \ error: cannot find 'double' in scope\n        case .doubleValue(double(b)):\n\
    \                          ^~~~~~\n/tmp/tmpumtz0xxu.swift:25:27: error: cannot\
    \ find 'string' in scope\n        case .stringValue(string(b)):\n            \
    \              ^~~~~~\n/tmp/tmpumtz0xxu.swift:30:24: error: cannot find 'int'\
    \ in scope\n        case .intValue(int(b)):\n                       ^~~\n/tmp/tmpumtz0xxu.swift:32:27:\
    \ error: cannot find 'double' in scope\n        case .doubleValue(double(b)):\n\
    \                          ^~~~~~\n/tmp/tmpumtz0xxu.swift:34:27: error: cannot\
    \ find 'string' in scope\n        case .stringValue(string(b)):\n            \
    \              ^~~~~~\n/tmp/tmpumtz0xxu.swift:39:24: error: cannot find 'int'\
    \ in scope\n        case .intValue(int(b)):\n                       ^~~\n/tmp/tmpumtz0xxu.swift:41:27:\
    \ error: cannot find 'double' in scope\n        case .doubleValue(double(b)):\n\
    \                          ^~~~~~\n/tmp/tmpumtz0xxu.swift:43:27: error: cannot\
    \ find 'string' in scope\n        case .stringValue(string(b)):\n            \
    \              ^~~~~~\n"
  stdout: ''
  timestamp: 1659824949
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n \
    \       case .doubleValue(_):\n            return .doubleValue(a.doubleValue >\
    \ b.doubleValue ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.intValue ? a.doubleValue : b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue\
    \ : b.doubleValue)\n        case .stringValue(_):\n            return .doubleValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        case .stringValue(_):\n\
    \            return .doubleValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.intValue ? a.stringValue : b.stringValue)\n        case .doubleValue(_):\n\
    \            return .stringValue(a.stringValue > b.doubleValue ? a.stringValue\
    \ : b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1),\
    \ b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmpd6f0x855.swift:22:54: error: cannot convert value of type '(Int)\
    \ -> Value' to expected argument type 'Int'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \                   ^\n/tmp/tmpd6f0x855.swift:22:30: error: enum case 'intValue'\
    \ cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                             ^\n  \
    \                           Value\n/tmp/tmpd6f0x855.swift:22:41: error: type '(Int)\
    \ -> Value' cannot conform to 'Comparable'\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmpd6f0x855.swift:22:41: note: only concrete types such as structs,\
    \ enums and classes can conform to protocols\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \      ^\n/tmp/tmpd6f0x855.swift:22:41: note: required by referencing operator\
    \ function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                           ^\n/tmp/tmpd6f0x855.swift:22:43: error: enum case\
    \ 'intValue' cannot be used as an instance member\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n                                  \
    \        ^\n                                          Value\n/tmp/tmpd6f0x855.swift:22:56:\
    \ error: enum case 'intValue' cannot be used as an instance member\n         \
    \   return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n    \
    \                                                   ^\n                      \
    \                                 Value\n/tmp/tmpd6f0x855.swift:22:69: error:\
    \ enum case 'intValue' cannot be used as an instance member\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n             \
    \                                                       ^\n                  \
    \                                "
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case\
    \ doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create\
    \ a function that takes integers, floats, or strings representing\n/// real numbers,\
    \ and returns the larger variable in its given variable type.\n/// Return None\
    \ if the values are equal.\n/// Note: If a real number is represented as a string,\
    \ the floating point might be . or ,\n/// compare_one(1, 2.5) \u279E 2.5\n///\
    \ compare_one(1, \"2,3\") \u279E \"2,3\"\n/// compare_one(\"5,1\", \"6\") \u279E\
    \ \"6\"\n/// compare_one(\"1\", 1) \u279E None\nfunc compare_one(a: Value, b:\
    \ Value) -> Value? {\n    switch a { // Switch on a's type\n    case .intValue:\n\
    \        switch b { // Switch on b's type\n        case .intValue:\n         \
    \   return a.intValue > b.intValue ? a : b\n        case .doubleValue:\n     \
    \       return a.doubleValue > b.doubleValue ? a : b\n        case .stringValue:\n\
    \            return a.stringValue > b.stringValue ? a : b\n        }\n    case\
    \ .doubleValue:\n        switch b { // Switch on b's type\n        case .intValue:\n\
    \            return a.doubleValue > b.intValue ? a : b\n        case .doubleValue:\n\
    \            return a.doubleValue > b.doubleValue ? a : b\n        case .stringValue:\n\
    \            return a.doubleValue > b.stringValue ? a : b\n        }\n    case\
    \ .stringValue:\n        switch b { // Switch on b's type\n        case .intValue:\n\
    \            return a.stringValue > b.intValue ? a : b\n        case .doubleValue:\n\
    \            return a.stringValue > b.doubleValue ? a : b\n        case .stringValue:\n\
    \            return a.stringValue > b.stringValue ? a : b\n        }\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1),\
    \ b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5))\
    \ == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3))\
    \ == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\n\
    assert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"\
    2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\
    \ == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"\
    2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1))\
    \ == nil)"
  status: SyntaxError
  stderr: "/tmp/tmp9amjf0rd.swift:22:20: error: enum case 'intValue' cannot be used\
    \ as an instance member\n            return a.intValue > b.intValue ? a : b\n\
    \                   ^\n                   Value\n/tmp/tmp9amjf0rd.swift:22:31:\
    \ error: type '(Int) -> Value' cannot conform to 'Comparable'\n            return\
    \ a.intValue > b.intValue ? a : b\n                              ^\n/tmp/tmp9amjf0rd.swift:22:31:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n            return a.intValue > b.intValue ? a : b\n            \
    \                  ^\n/tmp/tmp9amjf0rd.swift:22:31: note: required by referencing\
    \ operator function '>' on 'Comparable' where 'Self' = '(Int) -> Value'\n    \
    \        return a.intValue > b.intValue ? a : b\n                            \
    \  ^\n/tmp/tmp9amjf0rd.swift:22:33: error: enum case 'intValue' cannot be used\
    \ as an instance member\n            return a.intValue > b.intValue ? a : b\n\
    \                                ^\n                                Value\n/tmp/tmp9amjf0rd.swift:24:20:\
    \ error: enum case 'doubleValue' cannot be used as an instance member\n      \
    \      return a.doubleValue > b.doubleValue ? a : b\n                   ^\n  \
    \                 Value\n/tmp/tmp9amjf0rd.swift:24:34: error: type '(Double) ->\
    \ Value' cannot conform to 'Comparable'\n            return a.doubleValue > b.doubleValue\
    \ ? a : b\n                                 ^\n/tmp/tmp9amjf0rd.swift:24:34: note:\
    \ only concrete types such as structs, enums and classes can conform to protocols\n\
    \            return a.doubleValue > b.doubleValue ? a : b\n                  \
    \               ^\n/tmp/tmp9amjf0rd.swift:24:34: note: required by referencing\
    \ operator function '>' on 'Comparable' where 'Self' = '(Double) -> Value'\n \
    \           return a.doubleValue > b.doubleValue ? a : b\n                   \
    \              ^\n/tmp/tmp9amjf0rd.swift:24:36: error: enum case 'doubleValue'\
    \ cannot be used as an instance member\n            return a.doubleValue > b.doubleValue\
    \ ? a : b\n                                   ^\n                            \
    \       Value\n/"
  stdout: ''
  timestamp: 1659824948
