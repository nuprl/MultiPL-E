name: HumanEval_47_median
language: swift
prompt: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
  \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l:\
  \ [Int]) -> Double {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
  \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
  \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
completions: ["    var l = l\n    l.sort()\n    if l.count > 1 {\n        return Double(l.last!\
    \ + l.first!) / Double(l.count)\n    }\n    return Double(l.first!)", "    var\
    \ l = l\n    l.sort()\n    var mid = l.count / 2\n    if l.count % 2 == 0 {\n\
    \        return l[mid]\n    } else {\n        return (l[mid] + l[mid-1]) / 2\n\
    \    }", "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count\
    \ - 1) / 2 - 1]) / 2\n    }", "    var l = l.sorted()\n    if l.count < 2 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]", " \
    \   var l = l.sorted()\n    if l.count <= 1 {\n        return l[0]\n    }\n  \
    \  var mid = l.count / 2\n    return l[mid]", "    var l = l.sorted()\n    var\
    \ mid = l.count / 2\n    if l.count % 2 == 0 {\n        return l[mid]\n    } else\
    \ {\n        return (l[mid] + l[mid-1]) / 2\n    }", "    var l = l.sorted()\n\
    \    if l.count < 2 {\n        return l[0]\n    }\n    var mid = l.count / 2\n\
    \    return l[mid]", "    var l = l\n    l.sort()\n    if l.count > 1 {\n    \
    \    return Double(l.count / 2)\n    }\n    return Double(l.count)", '    return
    l.sorted().reduce(0.0, { $0 + Double($1) })', "    var l = l\n    l.sort()\n \
    \   if l.count % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2", "    var l = l\n   \
    \ l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n \
    \   } else {\n        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1])\
    \ / 2\n    }", "    var l = l.sorted()\n    if l.count % 2 == 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1) / 2] + l[(l.count -\
    \ 1) / 2 - 1]) / 2", "    let n = l.count\n    if n < 1 {\n        return 0\n\
    \    }\n    let mid = n / 2\n    let left = l[mid..<n]\n    let right = l[..<mid]\n\
    \    return Double(left.reduce(0.0, +) / Double(left.count) + right.reduce(0.0,\
    \ +) / Double(right.count))", "    var l = l.sorted()\n    if l.count < 2 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]", " \
    \   var n = l.count\n    if n < 1 {\n        return Double.nan\n    }\n    if\
    \ n % 2 == 0 {\n        return l[(n - 1) / 2]\n    }\n    return l[n / 2]", " \
    \   let sorted = l.sorted()\n    if sorted.isEmpty {\n        return Double.nan\n\
    \    }\n    let mid = sorted.count / 2\n    return Double(sorted[mid])", "   \
    \ let sorted = l.sorted()\n    if sorted.count < 2 {\n        return sorted[0]\n\
    \    }\n    return sorted[sorted.count / 2]", "    var l = l.sorted()\n    if\
    \ l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n    \
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", " \
    \   var n = l.count\n    if n < 1 {\n        return Double.nan\n    }\n    if\
    \ n % 2 == 0 {\n        return l[n/2]\n    }\n    var mid = n/2\n    var left\
    \ = l[0:mid]\n    var right = l[mid:n]\n    var m = Double.nan\n    for x in left\
    \ {\n        if x < m {\n            m = x\n        }\n    }\n    for x in right\
    \ {\n        if x > m {\n            m = x\n        }\n    }\n    return m", " \
    \   var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]"]
stop_tokens:
- "\n}"
