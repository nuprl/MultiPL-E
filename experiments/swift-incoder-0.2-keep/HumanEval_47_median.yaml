name: HumanEval_47_median
language: swift
prompt: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
  \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l:\
  \ [Int]) -> Double {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
  \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
  \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
completions: ["    var l = l\n    l.sort()\n    if l.count > 1 {\n        return Double(l.last!\
    \ + l.first!) / Double(l.count)\n    }\n    return Double(l.first!)", "    var\
    \ l = l\n    l.sort()\n    var mid = l.count / 2\n    if l.count % 2 == 0 {\n\
    \        return l[mid]\n    } else {\n        return (l[mid] + l[mid-1]) / 2\n\
    \    }", "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count\
    \ - 1) / 2 - 1]) / 2\n    }", "    var l = l.sorted()\n    if l.count < 2 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]", " \
    \   var l = l.sorted()\n    if l.count <= 1 {\n        return l[0]\n    }\n  \
    \  var mid = l.count / 2\n    return l[mid]", "    var l = l.sorted()\n    var\
    \ mid = l.count / 2\n    if l.count % 2 == 0 {\n        return l[mid]\n    } else\
    \ {\n        return (l[mid] + l[mid-1]) / 2\n    }", "    var l = l.sorted()\n\
    \    if l.count < 2 {\n        return l[0]\n    }\n    var mid = l.count / 2\n\
    \    return l[mid]", "    var l = l\n    l.sort()\n    if l.count > 1 {\n    \
    \    return Double(l.count / 2)\n    }\n    return Double(l.count)", '    return
    l.sorted().reduce(0.0, { $0 + Double($1) })', "    var l = l\n    l.sort()\n \
    \   if l.count % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2", "    var l = l\n   \
    \ l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n \
    \   } else {\n        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1])\
    \ / 2\n    }", "    var l = l.sorted()\n    if l.count % 2 == 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1) / 2] + l[(l.count -\
    \ 1) / 2 - 1]) / 2", "    let n = l.count\n    if n < 1 {\n        return 0\n\
    \    }\n    let mid = n / 2\n    let left = l[mid..<n]\n    let right = l[..<mid]\n\
    \    return Double(left.reduce(0.0, +) / Double(left.count) + right.reduce(0.0,\
    \ +) / Double(right.count))", "    var l = l.sorted()\n    if l.count < 2 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]", " \
    \   var n = l.count\n    if n < 1 {\n        return Double.nan\n    }\n    if\
    \ n % 2 == 0 {\n        return l[(n - 1) / 2]\n    }\n    return l[n / 2]", " \
    \   let sorted = l.sorted()\n    if sorted.isEmpty {\n        return Double.nan\n\
    \    }\n    let mid = sorted.count / 2\n    return Double(sorted[mid])", "   \
    \ let sorted = l.sorted()\n    if sorted.count < 2 {\n        return sorted[0]\n\
    \    }\n    return sorted[sorted.count / 2]", "    var l = l.sorted()\n    if\
    \ l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n    \
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", " \
    \   var n = l.count\n    if n < 1 {\n        return Double.nan\n    }\n    if\
    \ n % 2 == 0 {\n        return l[n/2]\n    }\n    var mid = n/2\n    var left\
    \ = l[0:mid]\n    var right = l[mid:n]\n    var m = Double.nan\n    for x in left\
    \ {\n        if x < m {\n            m = x\n        }\n    }\n    for x in right\
    \ {\n        if x > m {\n            m = x\n        }\n    }\n    return m", " \
    \   var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]", "    let sorted\
    \ = l.sorted()\n    if sorted.count % 2 == 0 {\n        return sorted[(sorted.count\
    \ - 1) / 2]\n    }\n    return sorted[(sorted.count - 1) / 2] + sorted[(sorted.count\
    \ - 1) / 2 - 1]", "    var l = l\n    l.sort()\n    if l.count % 2 == 1 {\n  \
    \      return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    let n = l.count\n    if\
    \ n < 2 {\n        return l[0]\n    }\n    let mid = n / 2\n    let m1 = median(l[0..<mid])\n\
    \    let m2 = median(l[mid..<n])\n    return m1 + (m2 - m1) / (n - 1)", "    var\
    \ n = l.count\n    if n < 1 {\n        return Double.nan\n    }\n    var m = Double.nan\n\
    \    var l2 = l.sorted()\n    if l2.count > 1 {\n        m = l2[Int(l2.count /\
    \ 2)]\n    }\n    if n == 1 {\n        return m\n    }\n    var l3 = l.sorted()\n\
    \    if l3.count > 2 {\n        m = l3[Int(l3.count / 2)]\n    }\n    if n ==\
    \ 2 {\n        return m\n    }\n    if n == 3 {\n        return l2[Int(l2.count\
    \ / 2)]\n    }\n    if n == 4 {\n        return l3[Int(l3.count / 2)]\n    }\n\
    \    if n == 5 {\n        return Double.nan\n    }\n    return m", "    var l\
    \ = l.sorted()\n    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n\
    \    }\n    return l[(l.count - 1) / 2] + l[l.count / 2]", "    var l = l\n  \
    \  l.sort()\n    if l.count % 2 == 1 {\n        return l[(l.count - 1) / 2]\n\
    \    }\n    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2", " \
    \   var l = l.sorted()\n    if l.count % 2 == 0 {\n        return l[(l.count -\
    \ 1) / 2]\n    }\n    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1])\
    \ / 2", "    var l = l.sorted()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count -\
    \ 1) / 2 - 1]) / 2\n    }", "    var l = l.sorted()\n    if l.count % 2 == 0 {\n\
    \        return l[l.count / 2]\n    } else {\n        return (l[l.count / 2] +\
    \ l[l.count / 2 - 1]) / 2\n    }", "    var l = l\n    l.sort()\n    if l.count\
    \ > 0 {\n        return Double(l.count / 2)\n    }\n    return Double(0)", " \
    \   var l = l.sorted()\n    if l.count % 2 == 1 {\n        return l[(l.count -\
    \ 1) / 2]\n    }\n    return (l[(l.count - 1) / 2] - l[(l.count - 2) / 2].0) /\
    \ 2.0", "    var l = l.sorted()\n    if l.count % 2 == 1 {\n        return l[(l.count\
    \ - 1) / 2]\n    }\n    return (l[(l.count - 1) / 2] - l[(l.count - 1) / 2 - 1]\
    \ + l[(l.count - 1) / 2 + 1]) / 2.0", "    let sorted = l.sorted()\n    if sorted.count\
    \ < 2 {\n        return sorted[0]\n    }\n    let middle = sorted.count / 2\n\
    \    return Double(sorted[middle])", "    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count / 2) - 1]\n    } else {\n        return\
    \ l[(l.count / 2)]\n    }", "    let n = l.count\n    if n < 1 {\n        return\
    \ 0\n    }\n    let mid = n / 2\n    let left = l[0..<mid]\n    let right = l[mid..<n]\n\
    \    return left.reduce(0, combine: +) / Double(left.count) + right.reduce(0,\
    \ combine: +) / Double(right.count)", "    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", '    return l.sorted
    { $0 < $1 }.mid', "    var l = l.sorted()\n    if l.count % 2 == 0 {\n       \
    \ return l[(l.count - 1) / 2]\n    }\n    return l[(l.count - 1) / 2] + l[l.count\
    \ / 2]", "    var l = l.sorted()\n    if l.count <= 1 {\n        return l[0]\n\
    \    }\n    var mid = l.count / 2\n    return Double(l[mid]) + Double(l[mid-1])\
    \ / 2", "    let n = l.count\n    if n < 2 {\n        return Double(0)\n    }\n\
    \    let mid = Double(l.count / 2)\n    let left = l[mid..<n]\n    let right =\
    \ l[..<mid]\n    return Double(l.count % 2 == 0 ? median(left) + median(right)\
    \ : median(left))", "    var l = l.sorted()\n    if l.count <= 1 {\n        return\
    \ l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]", "    var l = l.sorted()\n\
    \    var mid = l.count / 2\n    if l.count % 2 == 0 {\n        return l[mid]\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2\n    }", "    var l = l\n\
    \    l.sort()\n    if l.count > 1 {\n        return Double(l[l.count / 2])\n \
    \   }\n    return Double(0)", "    var l = l\n    l.sort()\n    if l.count > 1\
    \ {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n    }\n\
    \    return l.first!", "    let sorted = l.sorted()\n    if sorted.count % 2 ==\
    \ 0 {\n        return sorted[(sorted.count - 1) / 2]\n    }\n    return sorted[(sorted.count\
    \ - 1) / 2] + sorted[(sorted.count - 1) / 2 - 1]", "    let sorted = l.sorted()\n\
    \    if sorted.count < 2 {\n        return sorted[0]\n    }\n    let mid = sorted.count\
    \ / 2\n    return Double(sorted[mid])", "    var l = l\n    l.sort()\n    return\
    \ l[(l.count - 1) / 2]", "    var l = l\n    l.sort()\n    if l.count > 1 {\n\
    \        return l[(l.count - 1) / 2]\n    }\n    return l[0]", '    return l.sorted().reduce(0.0,
    { $0 + Double($1) })', "    let sorted = l.sorted()\n    if sorted.count % 2 ==\
    \ 0 {\n        return sorted[(sorted.count - 1) / 2]\n    }\n    return sorted[(sorted.count\
    \ - 1) / 2] + sorted[(sorted.count - 1) / 2 - 1]", '    return l.sorted().reduce(0.0,
    { $0 + Double($1) })', "    var n = l.count\n    if n < 1 {\n        return 0\n\
    \    }\n    var mid = n / 2\n    var left = l[mid..<n]\n    var right = l[0..<mid]\n\
    \    return median(left) + median(right)", "    let n = l.count\n    if n < 2\
    \ {\n        return Double(0)\n    }\n    let mid = n / 2\n    let left = l[0\
    \ ..< mid]\n    let right = l[mid..<n]\n    return median(left) + median(right)\
    \ / 2.0", "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count\
    \ - 1) / 2 - 1]) / 2\n    }", "    let n = l.count\n    if n < 1 {\n        return\
    \ Double.nan\n    }\n    if n % 2 == 0 {\n        return l[n/2]\n    } else {\n\
    \        let mid = Double(l[n/2-1] + l[n/2])/2\n        return mid\n    }", " \
    \   let n = l.count\n    if n < 1 {\n        return Double.nan\n    }\n    let\
    \ mid = n / 2\n    let left = l[0..<mid]\n    let right = l[mid..<n]\n    let\
    \ midValue = median(left)\n    let rightValue = median(right)\n    if midValue\
    \ < rightValue {\n        return midValue\n    } else {\n        return rightValue\n\
    \    }", "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return Double(l.last!\
    \ + l.first!) / Double(l.count - 1)\n    }\n    return l.first!", '    return
    l.sorted().reduce(0.0, { $0 + Double($1) })', "    let sorted = l.sorted()\n \
    \   if sorted.count % 2 == 0 {\n        return sorted[(sorted.count - 1) / 2]\n\
    \    }\n    return sorted[(sorted.count - 1) / 2] + sorted[(sorted.count - 1)\
    \ / 2 - 1]", "    var l = l.sorted()\n    if l.count % 2 == 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1) / 2] + l[(l.count -\
    \ 1) / 2 - 1]) / 2", "    var l = l\n    l.sort()\n    if l.count % 2 == 1 {\n\
    \        return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    var l = l.sorted()\n\
    \    if l.count <= 1 {\n        return l[0]\n    }\n    var mid = l.count / 2\n\
    \    var m1 = l[mid]\n    var m2 = l[mid-1]\n    return Double(m1) + Double(m2)/2",
  '    return l.sorted { $0 < $1 }.mid', "    let n = l.count\n    if n < 1 {\n  \
    \      return Double.nan\n    }\n    let mid = n / 2\n    let left = l[mid..<n]\n\
    \    let right = l[..<mid]\n    return Double(left.reduce(0.0, +) / Double(left.count)\
    \ + right.reduce(0.0, +) / Double(right.count))", "    let count = l.count\n \
    \   if count < 2 {\n        return Double(l.first!)\n    }\n    let mid = count\
    \ / 2\n    let left = l[..mid]\n    let right = l[mid..<count]\n    return median(left)\
    \ + median(right) / 2.0", "    var l = l.sorted()\n    if l.count % 2 == 1 {\n\
    \        return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    var l = l.sorted()\n\
    \    if l.count <= 1 {\n        return l[0]\n    }\n    var mid = l.count / 2\n\
    \    if l.count % 2 == 0 {\n        return l[mid]\n    }\n    return Double(l[mid-1]\
    \ + l[mid])/2", "    var l = l.sorted()\n    var mid = Double(l.count / 2)\n \
    \   if l.count % 2 == 1 {\n        return l[mid]\n    }\n    var low = mid\n \
    \   var high = mid\n    while low < high {\n        if l[low] > l[high] {\n  \
    \          low++\n        } else {\n            high--\n        }\n    }\n   \
    \ return l[low]", "    var l = l.sorted()\n    if l.count % 2 == 0 {\n       \
    \ return l[(l.count - 1) / 2]\n    } else {\n        return l[(l.count - 1) /\
    \ 2] + l[l.count / 2]\n    }", '    return l.sorted().reduce(0.0, { $0 + Double($1)
    })', "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count -\
    \ 1) / 2 - 1]) / 2\n    }", "    let count = l.count\n    if count == 0 {\n  \
    \      return Double.nan\n    }\n    let sorted = l.sorted()\n    if count % 2\
    \ == 0 {\n        return sorted[(count - 1) / 2]\n    }\n    let mid = count /\
    \ 2\n    return sorted[mid] + sorted[mid - 1]", "    var l = l\n    l.sort()\n\
    \    if l.count > 1 {\n        return (l[0] + l[l.count - 1]) / 2\n    }\n   \
    \ return l[0]", "    var n = l.count\n    if n < 1 {\n        return Double(l.first!)\n\
    \    }\n    var m = Double(l.first!)\n    for x in l.dropFirst() {\n        if\
    \ x < m {\n            m = x\n        }\n    }\n    return m", "    var l = l.sorted()\n\
    \    if l.count <= 1 {\n        return l[0]\n    }\n    var mid = l.count / 2\n\
    \    var a = l[mid]\n    var b = l[mid-1]\n    if a < b {\n        return b\n\
    \    }\n    return a", "    var l = l.sorted()\n    if l.count <= 1 {\n      \
    \  return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]", "    var\
    \ l = l.sorted()\n    if l.count <= 1 {\n        return l[0]\n    }\n    var mid\
    \ = l.count / 2\n    var a = l[mid]\n    var b = l[mid-1]\n    if a < b {\n  \
    \      return b\n    }\n    return a", "    var l = l.sorted()\n    if l.count\
    \ < 2 {\n        return l[0]\n    }\n    var mid = l.count / 2\n    return Double(l[mid])\
    \ + Double(l[mid - 1]) / 2", "    let count = l.count\n    if count < 2 {\n  \
    \      return Double(l.first!)\n    }\n    let mid = count / 2\n    let left =\
    \ l[mid..<count]\n    let right = l[1..<mid]\n    return median(left) + median(right)\
    \ / 2.0", '    return l.sorted().reduce(0.0, { $0 + Double($1) })', "    var l\
    \ = l.sorted()\n    var mid = l.count / 2\n    if l.count % 2 == 0 {\n       \
    \ return l[mid]\n    } else {\n        return (l[mid] + l[mid-1]) / 2\n    }",
  "    let sorted = l.sorted()\n    if sorted.count % 2 == 0 {\n        return sorted[(sorted.count\
    \ - 1) / 2]\n    } else {\n        return (sorted[(sorted.count - 1) / 2] - sorted[(sorted.count\
    \ - 1) / 2 - 1]) / 2\n    }", "    var l = l\n    l.sort()\n    if l.count > 1\
    \ {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n    }\n\
    \    return l.first!", "    let n = l.count\n    if n < 1 {\n        return Double.nan\n\
    \    }\n    let mid = n / 2\n    if n % 2 == 0 {\n        return Double(l.sorted()[mid])\n\
    \    } else {\n        let a = Double(l.sorted()[mid])\n        let b = Double(l.sorted()[mid+1])\n\
    \        return (a+b)/2\n    }", "    var l = l\n    l.sort()\n    if l.count\
    \ > 0 {\n        return Double(l.last!) / Double(l.count)\n    }\n    return Double(l.first!)",
  "    var l = l.sorted()\n    if l.count < 2 {\n        return l[0]\n    }\n    var\
    \ mid = l.count / 2\n    return Double(l.sorted()[mid])", "    var l = l.sorted()\n\
    \    if l.count < 2 {\n        return l[0]\n    }\n    var mid = l.count / 2\n\
    \    return Double(l.sorted()[mid])", "    var l = l.sorted()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2", '    return l.sorted().reduce(0.0,
    { $0 + Double($1) })', "    let sortedArray = l.sorted()\n    if sortedArray.count\
    \ % 2 == 0 {\n        return sortedArray[sortedArray.count / 2]\n    } else {\n\
    \        let middle = sortedArray.count / 2\n        let leftMedian = median(sortedArray[0..<middle])\n\
    \        let rightMedian = median(sortedArray[middle..<sortedArray.count])\n \
    \       return Double(leftMedian) + Double(rightMedian) / 2\n    }", "    var\
    \ l = l\n    l.sort()\n    var mid = l.count / 2\n    if l.count % 2 == 0 {\n\
    \        return l[mid]\n    } else {\n        return (l[mid] + l[mid-1]) / 2\n\
    \    }", "    var l = l.sorted()\n    if l.count <= 1 {\n        return l[0]\n\
    \    }\n    var mid = l.count / 2\n    return l[mid]", "    var l = l\n    l.sort()\n\
    \    if l.count > 1 {\n        return Double(l.count / 2)\n    }\n    return l[0]",
  '    return l.sorted().reduce(0.0, { $0 + Double($1) })', "    var l = l\n    l.sort()\n\
    \    if l.count > 1 {\n        return Double(l.last! + l.first!) / Double(l.count\
    \ - 1)\n    } else {\n        return Double(l.first!)\n    }", '    return Double(l.sorted().reduce(0.0,
    { $0 + $1.doubleValue / 2.0 }))', "    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return (l[0] + l[l.count - 1]) / 2\n    }\n    return l[0]",
  "    var l = l.sorted()\n    if l.count % 2 == 0 {\n        return l[(l.count -\
    \ 1) / 2]\n    }\n    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1])\
    \ / 2", "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return (l[0]\
    \ + l[l.count - 1]) / 2\n    }\n    return l[0]", "    let sorted = l.sorted()\n\
    \    if sorted.count < 2 {\n        return sorted[0]\n    }\n    return sorted[(sorted.count\
    \ - 1) / 2]", "    let count = l.count\n    if count == 0 {\n        return Double.nan\n\
    \    }\n    if count == 1 {\n        return l[0]\n    }\n    if count == 2 {\n\
    \        return 0.5 * (l[0] + l[1])\n    }\n    if count < 3 {\n        return\
    \ Double.nan\n    }\n    let mid = count / 2\n    let left = median(l[0..<mid])\n\
    \    let right = median(l[mid..<count])\n    return 0.5 * (left + right)", " \
    \   var l = l.sorted()\n    if l.count % 2 == 0 {\n        return l[(l.count -\
    \ 1) / 2]\n    }\n    return l[(l.count - 1) / 2] + l[l.count / 2 - 1]", "   \
    \ let n = l.count\n    if n < 1 {\n        return Double.nan\n    }\n    let mid\
    \ = n / 2\n    let left = l[0..<mid]\n    let right = l[mid..<n]\n    return median(left)\
    \ + median(right) / 2.0", "    let sorted = l.sorted()\n    if sorted.isEmpty\
    \ {\n        return 0\n    }\n    let mid = sorted.count / 2\n    return sorted[mid]",
  '    return l.sorted { $0 < $1 }.last!', "    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n   \
    \ }\n    return l.first!", "    var l = l\n    l.sort()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    var l = l.sorted()\n\
    \    if l.count <= 1 {\n        return l[0]\n    }\n    var mid = l.count / 2\n\
    \    return l[mid]", "    let count = l.count\n    if count < 2 {\n        return\
    \ Double(l.first!)\n    }\n    let middle = count / 2\n    let left = l.prefix(middle)\n\
    \    let right = l.suffix(middle)\n    return median(left) + median(right) / 2.0",
  "    var l = l.sorted()\n    if l.count <= 1 {\n        return l[0]\n    }\n   \
    \ var mid = l.count / 2\n    return Double(l.sorted()[mid])", "    var l = l.sorted()\n\
    \    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2", "    var l = l.sorted()\n\
    \    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]", "    var l = l.sorted()\n\
    \    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n\
    \        return l[(l.count - 1) / 2] + l[l.count / 2]\n    }", "    var l = l.sorted()\n\
    \    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }",
  "    let sorted = l.sorted()\n    if sorted.isEmpty {\n        return Double.nan\n\
    \    }\n    let mid = sorted.count / 2\n    return sorted[mid]", "    var l =\
    \ l.sorted()\n    if l.count % 2 == 0 {\n        return Double(l[l.count / 2 -\
    \ 1] + l[l.count / 2])\n    }\n    return Double(l[l.count / 2])", "    var l\
    \ = l.sorted()\n    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n\
    \    }\n    return l[(l.count - 1) / 2] + l[l.count / 2 - 1]", "    var l = l.sorted()\n\
    \    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }",
  "    let sorted = l.sorted()\n    if sorted.count < 2 {\n        return sorted[0]\n\
    \    }\n    let mid = sorted.count / 2\n    return sorted[mid]", '    return l.sorted().reduce(0.0,
    { $0 + Double($1) })', "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n\
    \        return l[(l.count - 1) / 2]\n    } else {\n        return l[(l.count\
    \ - 1) / 2] + l[l.count / 2]\n    }", '    return l.sorted().reduce(0.0, { $0
    + Double($1) })', "    var l = l.sorted()\n    if l.count % 2 == 0 {\n       \
    \ return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1) /\
    \ 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    var l = l\n    l.sort()\n \
    \   if l.count > 1 {\n        return Double(l.last! + l.first!) / 2.0\n    }\n\
    \    return l.first!", "    var l = l.sorted()\n    if l.count % 2 == 0 {\n  \
    \      return l[(l.count - 1) / 2]\n    }\n    return l[(l.count - 1) / 2] + l[(l.count\
    \ - 1) / 2 - 1]", "    var l = l\n    l.sort()\n    if l.count % 2 == 1 {\n  \
    \      return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    var l = l\n    l.sort()\n\
    \    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]", "    let count = l.count\n\
    \    if count < 2 {\n        return Double(l.first!)\n    }\n    var middle =\
    \ count / 2\n    var left = l.subarray(0, middle)\n    var right = l.subarray(middle,\
    \ count)\n    return median(left) + median(right) / 2.0", "    var l = l\n   \
    \ l.sort()\n    if l.count > 0 {\n        return Double(l.count / 2)\n    }\n\
    \    return Double(0)", "    var l = l\n    l.sort()\n    if l.count > 0 {\n \
    \       return l[(l.count - 1) / 2]\n    }\n    return 0", "    let n = l.count\n\
    \    if n < 2 {\n        return l[0]\n    }\n    var l = l.sorted()\n    if n\
    \ % 2 == 0 {\n        return l[n / 2]\n    }\n    return l[(n - 1) / 2]", "  \
    \  let count = l.count\n    if count < 2 {\n        return Double(l.first!)\n\
    \    }\n    let middle = count / 2\n    let left = l[..middle]\n    let right\
    \ = l[middle..<count]\n    return median(left) + median(right) / 2.0", "    var\
    \ n = l.count\n    if n < 2 {\n        return l[0]\n    }\n    var m = Double(0)\n\
    \    var m2 = Double(0)\n    for x in l {\n        m2 = m * m\n        if m2 <\
    \ x {\n            m = x\n        }\n    }\n    return m", "    var l = l.sorted()\n\
    \    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2", "    var l = l\n   \
    \ l.sort()\n    if l.count > 1 {\n        return (l[0] + l[l.count - 1]) / 2.0\n\
    \    }\n    return l[0]", "    var l = l\n    l.sort()\n    if l.count > 1 {\n\
    \        return (l[0] + l[l.count - 1]) / 2\n    }\n    return l[0]", "    var\
    \ l = l.sorted()\n    if l.count % 2 == 1 {\n        return l[(l.count - 1) /\
    \ 2]\n    }\n    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2",
  "    var n = l.count\n    if n < 1 {\n        return Double.nan\n    }\n    var\
    \ m = Double.nan\n    var m2 = Double.nan\n    var m3 = Double.nan\n    var m4\
    \ = Double.nan\n    var m5 = Double.nan\n    var m6 = Double.nan\n    var m7 =\
    \ Double.nan\n    var m8 = Double.nan\n    var m9 = Double.nan\n    var m10 =\
    \ Double.nan\n    var m11 = Double.nan\n    var m12 = Double.nan\n    var m13\
    \ = Double.nan\n    var m14 = Double.nan\n    var m15 = Double.nan\n    var m16\
    \ = Double.nan\n    var m17 = Double.nan\n    var m18 = Double.nan\n    var m19\
    \ = Double.nan\n    var m20 = Double.nan\n    var m21 = Double.nan\n    var m22\
    \ = Double.nan\n    var m23 = Double.nan\n    var m24 = Double.nan\n    var m25\
    \ = Double.nan\n    var m26 = Double.nan\n    var m27 = Double.nan\n    var m28\
    \ = Double.nan\n    var m29 = Double.nan\n    var m30 = Double.nan\n    var m31\
    \ = Double.nan\n    var m32 = Double.nan\n    var m33 = Double.nan\n    var m34\
    \ = Double.nan\n    var m35 = Double.nan\n    var m36 = Double.nan\n    var m37\
    \ = Double.nan\n    var m38 = Double.nan\n    var m39 = Double.nan\n    var m40\
    \ = Double.nan\n    var m41 = Double.nan\n    var m42 = Double.nan\n    var m43\
    \ = Double.nan\n    var m44 = Double.nan\n    var m45 = Double.nan\n    var m46\
    \ = Double.nan\n    var m47 = Double.nan\n    var m48 = Double.nan\n    var m49\
    \ = Double.nan\n    var m50 = Double.nan\n    var m51 = Double.nan\n    var m52\
    \ = Double.nan\n    var m53 = Double.nan\n    var m54 = Double.nan\n    var m55\
    \ = Double.nan\n    var m56 = Double.nan\n    var m57 = Double.nan\n    var m58\
    \ = Double.nan\n    var m59 = Double.nan\n    var m60 = Double.nan\n    var m61\
    \ = Double.nan\n    var m62 = Double.nan\n    var m63 = Double.nan\n    var m64\
    \ = Double.nan", "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    } else {\n        return 0\n    }", "    let sorted\
    \ = l.sorted()\n    if sorted.isEmpty {\n        return Double.nan\n    }\n  \
    \  let mid = sorted.count / 2\n    return sorted[mid]", "    var l = l.sorted()\n\
    \    if l.count < 2 {\n        return l[0]\n    }\n    var mid = l.count / 2\n\
    \    if l.count % 2 == 0 {\n        return l[mid]\n    }\n    return Double(l[mid-1]\
    \ + l[mid])/2", "    let n = l.count\n    let mid = n / 2\n    if n % 2 == 1 {\n\
    \        return l[mid]\n    } else {\n        return (l[mid] + l[mid-1]) / 2\n\
    \    }", "    var l = l.sorted()\n    if l.count % 2 == 1 {\n        return l[(l.count\
    \ - 1) / 2]\n    }\n    var mid = l.count / 2\n    return Double(l.sorted()[mid])\
    \ + Double(l.sorted()[mid - 1])", "    var l = l\n    l.sort()\n    var mid =\
    \ l.count / 2\n    if l.count % 2 == 0 {\n        return l[mid]\n    } else {\n\
    \        return (l[mid] + l[mid-1]) / 2\n    }", "    var n = l.count\n    if\
    \ n < 1 {\n        return Double.nan\n    }\n    if n % 2 == 0 {\n        return\
    \ l[n/2]\n    }\n    var low = l[0]\n    var high = l[0]\n    for i in 1..n {\n\
    \        if l[i] < low {\n            low = l[i]\n        }\n        if l[i] >\
    \ high {\n            high = l[i]\n        }\n    }\n    return Double(low+high)/Double(n)",
  "    var l = l.sorted()\n    if l.count % 2 == 1 {\n        return l[(l.count -\
    \ 1) / 2]\n    }\n    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1])\
    \ / 2", '    return l.sorted().reduce(0.0, { $0 + Double($1) })', "    var l =\
    \ l\n    l.sort()\n    if l.count > 0 {\n        return l[(l.count - 1) / 2]\n\
    \    }\n    return Double(0)", "    var l = l.sorted()\n    if l.count <= 1 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]", " \
    \   var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] - l[(l.count -\
    \ 2) / 2].0) / 2.0\n    }", "    let n = l.count\n    if n < 2 {\n        return\
    \ Double(l.first!)\n    }\n    let mid = n / 2\n    let left = l[..<mid]\n   \
    \ let right = l[mid..<n]\n    return median(left) + median(right) / 2.0", "  \
    \  var l = l.sorted()\n    if l.count % 2 == 0 {\n        return Double(l[l.count\
    \ / 2 - 1] + l[l.count / 2]) / 2.0\n    }\n    return Double(l[l.count / 2] +\
    \ l[l.count / 2 - 1]) / 2.0", '    return l.sorted().reduce(0.0, { $0 + Double($1)
    })', "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return Double(l.count\
    \ / 2)\n    }\n    return l[0]", "    var l = l\n    l.sort()\n    var mid = l.count\
    \ / 2\n    if l.count % 2 == 0 {\n        return l[mid]\n    } else {\n      \
    \  return (l[mid] + l[mid-1]) / 2\n    }", "    let n = l.count\n    if n < 1\
    \ {\n        return Double.nan\n    }\n    let mid = n / 2\n    let left = l[..<mid]\n\
    \    let right = l[mid..<n]\n    return median(left) + median(right) / 2.0", " \
    \   var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count -\
    \ 1) / 2 - 1]) / 2\n    }", "    var l = l\n    l.sort()\n    if l.count > 1 {\n\
    \        return Double(l.count / 2)\n    }\n    return l[0]", "    var l = l\n\
    \    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n\
    \    } else {\n        return l[(l.count - 1) / 2] + l[l.count / 2]\n    }", " \
    \   var l = l\n    l.sort()\n    if l.count > 1 {\n        return (l[(l.count\
    \ - 1) / 2] + l[l.count / 2]) / 2.0\n    }\n    return l[0]", "    var l = l.sorted()\n\
    \    if l.count < 2 {\n        return l[0]\n    }\n    var mid = l.count / 2\n\
    \    return Double(l.sorted()[mid])", "    let n = l.count\n    if n < 1 {\n \
    \       return Double.nan\n    }\n    let mid = n / 2\n    let leftMedian = median(l[0..<mid])\n\
    \    let rightMedian = median(l[mid..<n])\n    return Double(leftMedian) + Double(rightMedian)\
    \ / 2.0", "    var l = l.sorted()\n    if l.count % 2 == 1 {\n        return l[(l.count\
    \ - 1) / 2]\n    }\n    return (l[(l.count - 1) / 2] - l[(l.count - 1) / 2 - 1]\
    \ + l[(l.count - 1) / 2]) / 2", "    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2", "    var l = l\n    l.sort()\n \
    \   if l.count > 0 {\n        return Double(l.count / 2)\n    }\n    return Double(0)",
  "    var l = l.sorted()\n    if l.count % 2 == 0 {\n        return l[(l.count -\
    \ 1) / 2]\n    }\n    return (l[(l.count - 1) / 2] - l[(l.count - 2) / 2].0) /\
    \ 2.0", "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return Double(l.count\
    \ / 2)\n    } else {\n        return Double(l.count)\n    }", "    var l = l.sorted()\n\
    \    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }",
  "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return Double(l.count\
    \ / 2)\n    }\n    return l[0]", "    let n = l.count\n    if n < 1 {\n      \
    \  return Double.nan\n    }\n    let mid = n / 2\n    let pivot = l[mid]\n   \
    \ var left = l[0..<mid]\n    var right = l[mid+1..<n]\n    var m1 = median(left)\n\
    \    var m2 = median(right)\n    if m1 < m2 {\n        return pivot\n    } else\
    \ {\n        return m1\n    }", "    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[(sorted.count - 1) / 2])\n    } else\
    \ {\n        return Double(sorted[(sorted.count - 1) / 2 - 1] + sorted[(sorted.count\
    \ - 1) / 2])\n    }", "    var l = l.sorted()\n    if l.count <= 1 {\n       \
    \ return l[0]\n    }\n    var mid = l.count / 2\n    return Double(l.sorted()[mid])",
  "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return Double(l.last!\
    \ + l.first!) / Double(l.count)\n    }\n    return l.first!", "    var l = l\n\
    \    l.sort()\n    var mid = l.count / 2\n    if l.count % 2 == 0 {\n        return\
    \ l[mid]\n    }\n    var low = mid\n    var high = mid\n    for _ in 0..<(l.count\
    \ - 1) {\n        if l[low] > l[high] {\n            high = low\n        } else\
    \ {\n            low = high\n        }\n    }\n    return l[low]", "    let n\
    \ = l.count\n    if n < 1 {\n        return 0\n    }\n    let mid = n / 2\n  \
    \  let left = l[0..<mid]\n    let right = l[mid..<n]\n    return Double(left.reduce(0.0,\
    \ +) / Double(left.count + right.count))", "    let n = l.count\n    if n < 1\
    \ {\n        return Double.nan\n    }\n    if n % 2 == 0 {\n        return l.sorted()[n\
    \ / 2]\n    }\n    let mid = n / 2\n    let left = l.sorted()[..mid]\n    let\
    \ right = l.sorted()[mid + 1..<n]\n    return Double(left + right).sorted()[mid]",
  '    return l.sorted { $0 < $1 }.mid', '    return l.sorted().reduce(0.0, { $0 +
    Double($1) })', "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ (l[0] + l[l.count - 1]) / 2\n    }\n    return l[0]", "    var l = l.sorted()\n\
    \    if l.count < 2 {\n        return l[0]\n    }\n    var mid = l.count / 2\n\
    \    return Double(l.sorted()[mid])", "    let n = l.count\n    if n < 1 {\n \
    \       return Double.nan\n    }\n    let mid = n / 2\n    let low = l[mid]\n\
    \    let high = l[n - 1]\n    let midVal = Double(low) + Double(high) / 2\n  \
    \  return midVal", "    var l = l\n    l.sort()\n    if l.count > 1 {\n      \
    \  return Double(l[l.count / 2])\n    }\n    return Double(0)", "    var l = l\n\
    \    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n\
    \    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1])\
    \ / 2\n    }", "    var n = l.count\n    if n < 1 {\n        return Double.nan\n\
    \    }\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    var low = l[0]\n\
    \    var high = l[0]\n    for i in 1..n {\n        if l[i] < low {\n         \
    \   low = l[i]\n        }\n        if l[i] > high {\n            high = l[i]\n\
    \        }\n    }\n    return Double(low) + Double(high)/2.0", "    var l = l\n\
    \    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n\
    \    }\n    return l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]", "    var\
    \ n = l.count\n    if n < 1 {\n        return Double.nan\n    }\n    if n % 2\
    \ == 0 {\n        return l[n/2]\n    }\n    var low = l[0]\n    var high = l[0]\n\
    \    for i in 1..n {\n        if l[i] < low {\n            low = l[i]\n      \
    \  }\n        if l[i] > high {\n            high = l[i]\n        }\n    }\n  \
    \  return Double(low+high)/2.0", "    let n = l.count\n    if n < 1 {\n      \
    \  return 0\n    }\n    let mid = n / 2\n    let left = l[0 ..< mid]\n    let\
    \ right = l[mid..<n]\n    return median(left) + median(right) / 2.0", "    var\
    \ l = l.sorted()\n    if l.count % 2 == 0 {\n        return l[(l.count - 1) /\
    \ 2]\n    }\n    return l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]", "  \
    \  var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    }\n    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1])\
    \ / 2", "    var l = l\n    l.sort()\n    if l.count % 2 == 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1) / 2] + l[(l.count -\
    \ 1) / 2 - 1]) / 2", "    var l = l\n    l.sort()\n    return l[(l.count - 1)\
    \ / 2]", "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return Double(l.last!\
    \ + l.first!) / 2.0\n    }\n    return l.first!", "    let sorted = l.sorted()\n\
    \    if sorted.isEmpty {\n        return Double.nan\n    }\n    let middle = sorted.count\
    \ / 2\n    return sorted[middle]", "    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.last! + l.first!) / Double(l.count)\n    }\n\
    \    return l.first!", "    var l = l.sorted()\n    if l.count % 2 == 1 {\n  \
    \      return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1) / 2] +\
    \ l[(l.count - 1) / 2 - 1]) / 2", "    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    var l =\
    \ l\n    l.sort()\n    if l.count > 1 {\n        return (l[0] + l[l.count - 1])\
    \ / 2\n    }\n    return l[0]", "    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[0]", "    let\
    \ sorted = l.sorted()\n    if sorted.count % 2 == 0 {\n        return sorted[(sorted.count\
    \ - 1) / 2]\n    }\n    return sorted[(sorted.count - 1) / 2] + sorted[(sorted.count\
    \ - 1) / 2 - 1]", "    let n = l.count\n    if n < 2 {\n        return Double(l.first!)\n\
    \    }\n    let mid = n / 2\n    let low = median(l[0..<mid])\n    let high =\
    \ median(l[mid..<n])\n    return low + (high - low) / 2"]
stop_tokens:
- "\n}"
