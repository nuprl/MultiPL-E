language: swift
name: HumanEval_98_count_upper
results:
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count++\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpt8qo8xbn.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpt8qo8xbn.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmpt8qo8xbn.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpt8qo8xbn.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpt8qo8xbn.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmptpti0ufg.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmptpti0ufg.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmptpti0ufg.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmptpti0ufg.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmptpti0ufg.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count++\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpt8qo8xbn.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpt8qo8xbn.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmpt8qo8xbn.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpt8qo8xbn.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpt8qo8xbn.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count++\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpt8qo8xbn.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpt8qo8xbn.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmpt8qo8xbn.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpt8qo8xbn.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpt8qo8xbn.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count++\n        }\n        if s[i] ==\
    \ 'E' || s[i] == 'e' {\n            count++\n        }\n        if s[i] == 'I'\
    \ || s[i] == 'i' {\n            count++\n        }\n        if s[i] == 'O' ||\
    \ s[i] == 'o' {\n            count++\n        }\n        if s[i] == 'U' || s[i]\
    \ == 'u' {\n            count++\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmppfrzcsib.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmppfrzcsib.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmppfrzcsib.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmppfrzcsib.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmppfrzcsib.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmppfrzcsib.swift:13:20: error: single-quoted string\
    \ literal found, use '\"'\n        if s[i] == 'E' || s[i] == 'e' {\n         \
    \          ^~~\n                   \"E\"\n/tmp/tmppfrzcsib.swift:13:35: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'E' || s[i]\
    \ == 'e' {\n                                  ^~~\n                          \
    \        \"e\"\n/tmp/tmppfrzcsib.swift:16:20: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'I' || s[i] == 'i' {\n                 \
    \  ^~~\n                   \"I\"\n/tmp/tmppfrzcsib.swift:16:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'I' || s[i] == 'i' {\n  \
    \                                ^~~\n                                  \"i\"\n\
    /tmp/tmppfrzcsib.swift:19:20: error: single-quoted string literal found, use '\"\
    '\n        if s[i] == 'O' || s[i] == 'o' {\n                   ^~~\n         \
    \          \"O\"\n/tmp/tmppfrzcsib.swift:19:35: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'O' || s[i] == 'o' {\n                 \
    \                 ^~~\n                                  \"o\"\n/tmp/tmppfrzcsib.swift:22:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'U'\
    \ || s[i] == 'u' {\n                   ^~~\n                   \"U\"\n/tmp/tmppfrzcsib.swift:22:35:\
    \ error: single-quoted string"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n\tlet vowels = \"aeiouAEIOU\"\n\tvar count = 0\n\tfor i := 0; i < len(s);\
    \ i++ {\n\t\tif s[i] == vowels[i] {\n\t\t\tcount += 1\n\t\t}\n\t}\n\treturn count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpaqoivj_3.swift:10:9: error: expected type\n        for i := 0;\
    \ i < len(s); i++ {\n               ^\n                <#type#>\n/tmp/tmpaqoivj_3.swift:10:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < len(s);\
    \ i++ {\n               ^\n/tmp/tmpaqoivj_3.swift:10:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 0; i < len(s); i++ {\n      \
    \         ^\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count++\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count++\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count++\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count++\n        } else if s[i] == 'E' || s[i] == 'e' {\n   \
    \         count++\n        } else if s[i] == 'F' || s[i] == 'f' {\n          \
    \  count++\n        } else if s[i] == 'G' || s[i] == 'g' {\n            count++\n\
    \        } else if s[i] == 'H' || s[i] == 'h' {\n            count++\n       \
    \ } else if s[i] == 'I' || s[i] == 'i' {\n            count++\n        } else\
    \ if s[i] == 'J' || s[i] == 'j' {\n            count++\n        } else if s[i]\
    \ == 'K' || s[i] == 'k' {\n            count++\n        } else if s[i] == 'L'\
    \ || s[i] == 'l' {\n            count++\n        } else if s[i] == 'M' || s[i]\
    \ == 'm' {\n            count++\n        } else if s[i] == 'N' || s[i] == 'n'\
    \ {\n            count++\n        } else if s[i] == 'O' || s[i] == 'o' {\n   \
    \         count++\n        } else if s[i] == 'P' || s[i] == 'p' {\n          \
    \  count++\n        } else if s[i] == 'Q' || s[i] == 'q' {\n            count++\n\
    \        } else if s[i] == 'R' || s[i] == 'r' {\n            count++\n       \
    \ } else if s[i] == 'S' || s[i] == 's' {\n            count++\n        } else\
    \ if s[i] == 'T' || s[i] == 't' {\n            count++\n        } else if s[i]\
    \ == 'U' || s[i] == 'u' {\n            count++\n        } else if s[i] == 'V'\
    \ || s[i] == 'v' {\n            count++\n        } else if s[i] == 'W' || s[i]\
    \ == 'w' {\n            count++\n        } else if s[i] == 'X' || s[i] == 'x'\
    \ {\n            count++\n        } else if s[i] == 'Y' || s[i] == 'y' {\n   \
    \         count++\n        } else if s[i] == 'Z' || s[i] == 'z' {\n          \
    \  count++\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\"\
    ) == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s: \"B\") ==\
    \ 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\") == 0)\n\
    assert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmppb5k95zz.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmppb5k95zz.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmppb5k95zz.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmppb5k95zz.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmppb5k95zz.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmppb5k95zz.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmppb5k95zz.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmppb5k95zz.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmppb5k95zz.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmppb5k95zz.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmppb5k95zz.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmppb5k95zz.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n\tlet len = s.count\n\tvar count = 0\n\tfor i in 0..<len {\n\t\tif s[i]\
    \ == 'A' || s[i] == 'a' {\n\t\t\tcount += 1\n\t\t}\n\t}\n\treturn count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpi3jhgqsf.swift:11:14: error: single-quoted string literal found,\
    \ use '\"'\n                if s[i] == 'A' || s[i] == 'a' {\n                \
    \           ^~~\n                           \"A\"\n/tmp/tmpi3jhgqsf.swift:11:29:\
    \ error: single-quoted string literal found, use '\"'\n                if s[i]\
    \ == 'A' || s[i] == 'a' {\n                                          ^~~\n   \
    \                                       \"a\"\n/tmp/tmpi3jhgqsf.swift:11:6: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s[i] == 'A' || s[i] == 'a' {\n                \
    \   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n/tmp/tmpi3jhgqsf.swift:11:21: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s[i] == 'A' || s[i] == 'a' {\n                                  ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n\tlet len = s.characters.count\n\tvar count = 0\n\tfor i : Int in 0..<len\
    \ {\n\t\tif s[i] == 'A' || s[i] == 'a' {\n\t\t\tcount += 1\n\t\t}\n\t\tif s[i]\
    \ == 'B' || s[i] == 'b' {\n\t\t\tcount += 1\n\t\t}\n\t\tif s[i] == 'C' || s[i]\
    \ == 'c' {\n\t\t\tcount += 1\n\t\t}\n\t\tif s[i] == 'D' || s[i] == 'd' {\n\t\t\
    \tcount += 1\n\t\t}\n\t\tif s[i] == 'E' || s[i] == 'e' {\n\t\t\tcount += 1\n\t\
    \t}\n\t\tif s[i] == 'F' || s[i] == 'f' {\n\t\t\tcount += 1\n\t\t}\n\t\tif s[i]\
    \ == 'G' || s[i] == 'g' {\n\t\t\tcount += 1\n\t\t}\n\t}\n\treturn count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpfolo46rz.swift:11:14: error: single-quoted string literal found,\
    \ use '\"'\n                if s[i] == 'A' || s[i] == 'a' {\n                \
    \           ^~~\n                           \"A\"\n/tmp/tmpfolo46rz.swift:11:29:\
    \ error: single-quoted string literal found, use '\"'\n                if s[i]\
    \ == 'A' || s[i] == 'a' {\n                                          ^~~\n   \
    \                                       \"a\"\n/tmp/tmpfolo46rz.swift:14:14: error:\
    \ single-quoted string literal found, use '\"'\n                if s[i] == 'B'\
    \ || s[i] == 'b' {\n                           ^~~\n                         \
    \  \"B\"\n/tmp/tmpfolo46rz.swift:14:29: error: single-quoted string literal found,\
    \ use '\"'\n                if s[i] == 'B' || s[i] == 'b' {\n                \
    \                          ^~~\n                                          \"b\"\
    \n/tmp/tmpfolo46rz.swift:17:14: error: single-quoted string literal found, use\
    \ '\"'\n                if s[i] == 'C' || s[i] == 'c' {\n                    \
    \       ^~~\n                           \"C\"\n/tmp/tmpfolo46rz.swift:17:29: error:\
    \ single-quoted string literal found, use '\"'\n                if s[i] == 'C'\
    \ || s[i] == 'c' {\n                                          ^~~\n          \
    \                                \"c\"\n/tmp/tmpfolo46rz.swift:20:14: error: single-quoted\
    \ string literal found, use '\"'\n                if s[i] == 'D' || s[i] == 'd'\
    \ {\n                           ^~~\n                           \"D\"\n/tmp/tmpfolo46rz.swift:20:29:\
    \ error: single-quoted string literal found, use '\"'\n                if s[i]\
    \ == 'D' || s[i] == 'd' {\n                                          ^~~\n   \
    \                                       \"d\"\n/tmp/tmpfolo46rz.swift:23:14: error:\
    \ single-quoted string literal found, use '\"'\n                if s[i] == 'E'\
    \ || s[i] == 'e' {\n                           ^~~\n                         \
    \  \"E\"\n/tmp/tmpfolo46rz.swift:23:29: error: single-quoted string literal found,\
    \ use '\"'\n                if s[i] == 'E' || s[i] == 'e' {\n                \
    \                          ^~~\n                                  "
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count++\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_xwk4hwe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp_xwk4hwe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp_xwk4hwe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp_xwk4hwe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_xwk4hwe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_xwk4hwe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_xwk4hwe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_xwk4hwe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmptpti0ufg.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmptpti0ufg.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmptpti0ufg.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmptpti0ufg.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmptpti0ufg.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count++\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count++\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count++\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count++\n        } else if s[i] == 'E' || s[i] == 'e' {\n   \
    \         count++\n        } else if s[i] == 'F' || s[i] == 'f' {\n          \
    \  count++\n        } else if s[i] == 'G' || s[i] == 'g' {\n            count++\n\
    \        } else if s[i] == 'H' || s[i] == 'h' {\n            count++\n       \
    \ } else if s[i] == 'I' || s[i] == 'i' {\n            count++\n        } else\
    \ if s[i] == 'J' || s[i] == 'j' {\n            count++\n        } else if s[i]\
    \ == 'K' || s[i] == 'k' {\n            count++\n        } else if s[i] == 'L'\
    \ || s[i] == 'l' {\n            count++\n        } else if s[i] == 'M' || s[i]\
    \ == 'm' {\n            count++\n        } else if s[i] == 'N' || s[i] == 'n'\
    \ {\n            count++\n        } else if s[i] == 'O' || s[i] == 'o' {\n   \
    \         count++\n        } else if s[i] == 'P' || s[i] == 'p' {\n          \
    \  count++\n        } else if s[i] == 'Q' || s[i] == 'q' {\n            count++\n\
    \        } else if s[i] == 'R' || s[i] == 'r' {\n            count++\n       \
    \ } else if s[i] == 'S' || s[i] == 's' {\n            count++\n        } else\
    \ if s[i] == 'T' || s[i] == 't' {\n            count++\n        } else if s[i]\
    \ == 'U' || s[i] == 'u' {\n            count++\n        } else if s[i] == 'V'\
    \ || s[i] == 'v' {\n            count++\n        } else if s[i] == 'W' || s[i]\
    \ == 'w' {\n            count++\n        } else if s[i] == 'X' || s[i] == 'x'\
    \ {\n            count++\n        } else if s[i] == 'Y' || s[i] == 'y' {\n   \
    \         count++\n        } else if s[i] == 'Z' || s[i] == 'z' {\n          \
    \  count++\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\"\
    ) == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s: \"B\") ==\
    \ 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\") == 0)\n\
    assert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmppb5k95zz.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmppb5k95zz.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmppb5k95zz.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmppb5k95zz.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmppb5k95zz.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmppb5k95zz.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmppb5k95zz.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmppb5k95zz.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmppb5k95zz.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmppb5k95zz.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmppb5k95zz.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmppb5k95zz.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count++\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count++\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count++\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count++\n        } else if s[i] == 'E' || s[i] == 'e' {\n   \
    \         count++\n        } else if s[i] == 'F' || s[i] == 'f' {\n          \
    \  count++\n        } else if s[i] == 'G' || s[i] == 'g' {\n            count++\n\
    \        } else if s[i] == 'H' || s[i] == 'h' {\n            count++\n       \
    \ } else if s[i] == 'I' || s[i] == 'i' {\n            count++\n        } else\
    \ if s[i] == 'J' || s[i] == 'j' {\n            count++\n        } else if s[i]\
    \ == 'K' || s[i] == 'k' {\n            count++\n        } else if s[i] == 'L'\
    \ || s[i] == 'l' {\n            count++\n        } else if s[i] == 'M' || s[i]\
    \ == 'm' {\n            count++\n        } else if s[i] == 'N' || s[i] == 'n'\
    \ {\n            count++\n        } else if s[i] == 'O' || s[i] == 'o' {\n   \
    \         count++\n        } else if s[i] == 'P' || s[i] == 'p' {\n          \
    \  count++\n        } else if s[i] == 'Q' || s[i] == 'q' {\n            count++\n\
    \        } else if s[i] == 'R' || s[i] == 'r' {\n            count++\n       \
    \ } else if s[i] == 'S' || s[i] == 's' {\n            count++\n        } else\
    \ if s[i] == 'T' || s[i] == 't' {\n            count++\n        } else if s[i]\
    \ == 'U' || s[i] == 'u' {\n            count++\n        } else if s[i] == 'V'\
    \ || s[i] == 'v' {\n            count++\n        } else if s[i] == 'W' || s[i]\
    \ == 'w' {\n            count++\n        } else if s[i] == 'X' || s[i] == 'x'\
    \ {\n            count++\n        } else if s[i] == 'Y' || s[i] == 'y' {\n   \
    \         count++\n        } else if s[i] == 'Z' || s[i] == 'z' {\n          \
    \  count++\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\"\
    ) == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s: \"B\") ==\
    \ 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\") == 0)\n\
    assert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmppb5k95zz.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmppb5k95zz.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmppb5k95zz.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmppb5k95zz.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmppb5k95zz.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmppb5k95zz.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmppb5k95zz.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmppb5k95zz.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmppb5k95zz.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmppb5k95zz.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmppb5k95zz.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmppb5k95zz.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmptpti0ufg.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmptpti0ufg.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmptpti0ufg.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmptpti0ufg.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmptpti0ufg.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmptpti0ufg.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmptpti0ufg.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmptpti0ufg.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmptpti0ufg.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmptpti0ufg.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count++\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_xwk4hwe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp_xwk4hwe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp_xwk4hwe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp_xwk4hwe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_xwk4hwe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_xwk4hwe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_xwk4hwe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_xwk4hwe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n\tlet len = s.characters.count\n\tvar count = 0\n\tfor i in  0 ..< len\
    \ {\n\t\tif s[i] == 'A' || s[i] == 'a' {\n\t\t\tcount += 1\n\t\t}\n\t}\n\treturn\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtjqz9ia.swift:11:14: error: single-quoted string literal found,\
    \ use '\"'\n                if s[i] == 'A' || s[i] == 'a' {\n                \
    \           ^~~\n                           \"A\"\n/tmp/tmprtjqz9ia.swift:11:29:\
    \ error: single-quoted string literal found, use '\"'\n                if s[i]\
    \ == 'A' || s[i] == 'a' {\n                                          ^~~\n   \
    \                                       \"a\"\n/tmp/tmprtjqz9ia.swift:8:14: error:\
    \ 'characters' is unavailable: Please use String directly\n        let len = s.characters.count\n\
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmprtjqz9ia.swift:11:6: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                if\
    \ s[i] == 'A' || s[i] == 'a' {\n                   ^~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmprtjqz9ia.swift:11:21: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s[i] == 'A' || s[i] == 'a' {\n                \
    \                  ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmptpti0ufg.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmptpti0ufg.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmptpti0ufg.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmptpti0ufg.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmptpti0ufg.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmptpti0ufg.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmptpti0ufg.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmptpti0ufg.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmptpti0ufg.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmptpti0ufg.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmptpti0ufg.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmptpti0ufg.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmptpti0ufg.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmptpti0ufg.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmptpti0ufg.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n\tlet mut count = 0\n\tfor c in s.chars() {\n\t\tif c.isUpper() {\n\t\
    \t\tcount += 1\n\t\t}\n\t\tif c.isUpper() && count % 2 == 0 {\n\t\t\tbreak\n\t\
    \t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphse7d6tt.swift:8:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut count\
    \ = 0\n                ^\n/tmp/tmphse7d6tt.swift:8:10: note: join the identifiers\
    \ together\n        let mut count = 0\n            ~~~~^~~~~\n            mutcount\n\
    /tmp/tmphse7d6tt.swift:8:10: note: join the identifiers together with camel-case\n\
    \        let mut count = 0\n            ~~~~^~~~~\n            mutCount\n/tmp/tmphse7d6tt.swift:9:13:\
    \ error: value of type 'String' has no member 'chars'\n        for c in s.chars()\
    \ {\n                 ~ ^~~~~\n/tmp/tmphse7d6tt.swift:17:9: error: cannot find\
    \ 'count' in scope\n        return count\n               ^~~~~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmptpti0ufg.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmptpti0ufg.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmptpti0ufg.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmptpti0ufg.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmptpti0ufg.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count++\n        }\n        if s[i] ==\
    \ 'E' || s[i] == 'e' {\n            count++\n        }\n        if s[i] == 'I'\
    \ || s[i] == 'i' {\n            count++\n        }\n        if s[i] == 'O' ||\
    \ s[i] == 'o' {\n            count++\n        }\n        if s[i] == 'U' || s[i]\
    \ == 'u' {\n            count++\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmppfrzcsib.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmppfrzcsib.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmppfrzcsib.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmppfrzcsib.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmppfrzcsib.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmppfrzcsib.swift:13:20: error: single-quoted string\
    \ literal found, use '\"'\n        if s[i] == 'E' || s[i] == 'e' {\n         \
    \          ^~~\n                   \"E\"\n/tmp/tmppfrzcsib.swift:13:35: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'E' || s[i]\
    \ == 'e' {\n                                  ^~~\n                          \
    \        \"e\"\n/tmp/tmppfrzcsib.swift:16:20: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'I' || s[i] == 'i' {\n                 \
    \  ^~~\n                   \"I\"\n/tmp/tmppfrzcsib.swift:16:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'I' || s[i] == 'i' {\n  \
    \                                ^~~\n                                  \"i\"\n\
    /tmp/tmppfrzcsib.swift:19:20: error: single-quoted string literal found, use '\"\
    '\n        if s[i] == 'O' || s[i] == 'o' {\n                   ^~~\n         \
    \          \"O\"\n/tmp/tmppfrzcsib.swift:19:35: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'O' || s[i] == 'o' {\n                 \
    \                 ^~~\n                                  \"o\"\n/tmp/tmppfrzcsib.swift:22:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'U'\
    \ || s[i] == 'u' {\n                   ^~~\n                   \"U\"\n/tmp/tmppfrzcsib.swift:22:35:\
    \ error: single-quoted string"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n\tlet len = s.characters.count\n\tvar count = 0\n\tfor i in 0..<len {\n\
    \t\tif s[i] == 'A' || s[i] == 'a' {\n\t\t\tif s[i+2] == 'A' || s[i+2] == 'a' {\n\
    \t\t\t\tcount += 1\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzwwm5tsb.swift:11:14: error: single-quoted string literal found,\
    \ use '\"'\n                if s[i] == 'A' || s[i] == 'a' {\n                \
    \           ^~~\n                           \"A\"\n/tmp/tmpzwwm5tsb.swift:11:29:\
    \ error: single-quoted string literal found, use '\"'\n                if s[i]\
    \ == 'A' || s[i] == 'a' {\n                                          ^~~\n   \
    \                                       \"a\"\n/tmp/tmpzwwm5tsb.swift:12:17: error:\
    \ single-quoted string literal found, use '\"'\n                        if s[i+2]\
    \ == 'A' || s[i+2] == 'a' {\n                                     ^~~\n      \
    \                               \"A\"\n/tmp/tmpzwwm5tsb.swift:12:34: error: single-quoted\
    \ string literal found, use '\"'\n                        if s[i+2] == 'A' ||\
    \ s[i+2] == 'a' {\n                                                      ^~~\n\
    \                                                      \"a\"\n/tmp/tmpzwwm5tsb.swift:8:14:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ len = s.characters.count\n                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpzwwm5tsb.swift:11:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s[i] == 'A' || s[i] == 'a' {\n                   ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpzwwm5tsb.swift:11:21:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s[i] == 'A' || s[i] == 'a' {\n\
    \                                  ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpzwwm5tsb.swift:12:7: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \             "
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n\tlet vowels = \"aeiouAEIOU\"\n\tvar count = 0\n\tfor i := 0; i < len(s);\
    \ i++ {\n\t\tif s[i] == vowels[i] {\n\t\t\tcount += 1\n\t\t}\n\t}\n\treturn count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpaqoivj_3.swift:10:9: error: expected type\n        for i := 0;\
    \ i < len(s); i++ {\n               ^\n                <#type#>\n/tmp/tmpaqoivj_3.swift:10:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < len(s);\
    \ i++ {\n               ^\n/tmp/tmpaqoivj_3.swift:10:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 0; i < len(s); i++ {\n      \
    \         ^\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n        if s[i]\
    \ == 'E' || s[i] == 'e' {\n            count += 1\n        }\n        if s[i]\
    \ == 'I' || s[i] == 'i' {\n            count += 1\n        }\n        if s[i]\
    \ == 'O' || s[i] == 'o' {\n            count += 1\n        }\n        if s[i]\
    \ == 'U' || s[i] == 'u' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3ps9fzlc.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp3ps9fzlc.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp3ps9fzlc.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp3ps9fzlc.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp3ps9fzlc.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp3ps9fzlc.swift:13:20: error: single-quoted string\
    \ literal found, use '\"'\n        if s[i] == 'E' || s[i] == 'e' {\n         \
    \          ^~~\n                   \"E\"\n/tmp/tmp3ps9fzlc.swift:13:35: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'E' || s[i]\
    \ == 'e' {\n                                  ^~~\n                          \
    \        \"e\"\n/tmp/tmp3ps9fzlc.swift:16:20: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'I' || s[i] == 'i' {\n                 \
    \  ^~~\n                   \"I\"\n/tmp/tmp3ps9fzlc.swift:16:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'I' || s[i] == 'i' {\n  \
    \                                ^~~\n                                  \"i\"\n\
    /tmp/tmp3ps9fzlc.swift:19:20: error: single-quoted string literal found, use '\"\
    '\n        if s[i] == 'O' || s[i] == 'o' {\n                   ^~~\n         \
    \          \"O\"\n/tmp/tmp3ps9fzlc.swift:19:35: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'O' || s[i] == 'o' {\n                 \
    \                 ^~~\n                                  \"o\"\n/tmp/tmp3ps9fzlc.swift:22:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'U'\
    \ || s[i] == 'u' {\n                   ^~~\n                   \"U\"\n/tmp/tmp3ps9fzlc.swift:22:35:\
    \ error: single-quoted string"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n\tlet len = s.characters.count\n\tvar count = 0\n\tfor i : Int in 0..<len\
    \ {\n\t\tif s[i] == 'A' || s[i] == 'a' {\n\t\t\tif i % 2 == 0 {\n\t\t\t\tcount\
    \ += 1\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\"\
    ) == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s: \"B\") ==\
    \ 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\") == 0)\n\
    assert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp0jhrfi7_.swift:11:14: error: single-quoted string literal found,\
    \ use '\"'\n                if s[i] == 'A' || s[i] == 'a' {\n                \
    \           ^~~\n                           \"A\"\n/tmp/tmp0jhrfi7_.swift:11:29:\
    \ error: single-quoted string literal found, use '\"'\n                if s[i]\
    \ == 'A' || s[i] == 'a' {\n                                          ^~~\n   \
    \                                       \"a\"\n/tmp/tmp0jhrfi7_.swift:8:14: error:\
    \ 'characters' is unavailable: Please use String directly\n        let len = s.characters.count\n\
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp0jhrfi7_.swift:11:6: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                if\
    \ s[i] == 'A' || s[i] == 'a' {\n                   ^~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp0jhrfi7_.swift:11:21: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s[i] == 'A' || s[i] == 'a' {\n                \
    \                  ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmptpti0ufg.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmptpti0ufg.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmptpti0ufg.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmptpti0ufg.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmptpti0ufg.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmptpti0ufg.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmptpti0ufg.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmptpti0ufg.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmptpti0ufg.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmptpti0ufg.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count++\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_xwk4hwe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp_xwk4hwe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp_xwk4hwe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp_xwk4hwe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_xwk4hwe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_xwk4hwe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_xwk4hwe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_xwk4hwe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmptpti0ufg.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmptpti0ufg.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmptpti0ufg.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmptpti0ufg.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmptpti0ufg.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count++\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpt8qo8xbn.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpt8qo8xbn.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmpt8qo8xbn.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpt8qo8xbn.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpt8qo8xbn.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmptpti0ufg.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmptpti0ufg.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmptpti0ufg.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmptpti0ufg.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmptpti0ufg.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n        if s[i]\
    \ == 'B' || s[i] == 'b' {\n            count += 1\n        }\n        if s[i]\
    \ == 'C' || s[i] == 'c' {\n            count += 1\n        }\n        if s[i]\
    \ == 'D' || s[i] == 'd' {\n            count += 1\n        }\n        if s[i]\
    \ == 'E' || s[i] == 'e' {\n            count += 1\n        }\n        if s[i]\
    \ == 'F' || s[i] == 'f' {\n            count += 1\n        }\n        if s[i]\
    \ == 'G' || s[i] == 'g' {\n            count += 1\n        }\n        if s[i]\
    \ == 'H' || s[i] == 'h' {\n            count += 1\n        }\n        if s[i]\
    \ == 'I' || s[i] == 'i' {\n            count += 1\n        }\n        if s[i]\
    \ == 'J' || s[i] == 'j' {\n            count += 1\n        }\n        if s[i]\
    \ == 'K' || s[i] == 'k' {\n            count += 1\n        }\n        if s[i]\
    \ == 'L' || s[i] == 'l' {\n            count += 1\n        }\n        if s[i]\
    \ == 'M' || s[i] == 'm' {\n            count += 1\n        }\n        if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        }\n        if s[i]\
    \ == 'O' || s[i] == 'o' {\n            count += 1\n        }\n        if s[i]\
    \ == 'P' || s[i] == 'p' {\n            count += 1\n        }\n        if s[i]\
    \ == 'Q' || s[i] == 'q' {\n            count += 1\n        }\n        if s[i]\
    \ == 'R' || s[i] == 'r' {\n            count += 1\n        }\n        if s[i]\
    \ == 'S' || s[i] == 's' {\n            count += 1\n        }\n        if s[i]\
    \ == 'T' || s[i] == 't' {\n            count += 1\n        }\n        if s[i]\
    \ == 'U' || s[i] == 'u' {\n            count += 1\n        }\n        if s[i]\
    \ == 'V' || s[i] == 'v' {\n            count += 1\n        }\n        if s[i]\
    \ == 'W' || s[i] == 'w' {\n            count += 1\n        }\n        if s[i]\
    \ == 'X' || s[i] == 'x' {\n            count += 1\n        }\n        if s[i]\
    \ == 'Y' || s[i] == 'y' {\n            count += 1\n        }\n        if s[i]\
    \ == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp5ydwo2gy.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp5ydwo2gy.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp5ydwo2gy.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp5ydwo2gy.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp5ydwo2gy.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp5ydwo2gy.swift:13:20: error: single-quoted string\
    \ literal found, use '\"'\n        if s[i] == 'B' || s[i] == 'b' {\n         \
    \          ^~~\n                   \"B\"\n/tmp/tmp5ydwo2gy.swift:13:35: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'B' || s[i]\
    \ == 'b' {\n                                  ^~~\n                          \
    \        \"b\"\n/tmp/tmp5ydwo2gy.swift:16:20: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'C' || s[i] == 'c' {\n                 \
    \  ^~~\n                   \"C\"\n/tmp/tmp5ydwo2gy.swift:16:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'C' || s[i] == 'c' {\n  \
    \                                ^~~\n                                  \"c\"\n\
    /tmp/tmp5ydwo2gy.swift:19:20: error: single-quoted string literal found, use '\"\
    '\n        if s[i] == 'D' || s[i] == 'd' {\n                   ^~~\n         \
    \          \"D\"\n/tmp/tmp5ydwo2gy.swift:19:35: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'D' || s[i] == 'd' {\n                 \
    \                 ^~~\n                                  \"d\"\n/tmp/tmp5ydwo2gy.swift:22:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'E'\
    \ || s[i] == 'e' {\n                   ^~~\n                   \"E\"\n/tmp/tmp5ydwo2gy.swift:22:35:\
    \ error: single-quoted string"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n\tlet vowels = \"aeiouAEIOU\"\n\tvar count = 0\n\tfor i := 0; i < len(s);\
    \ i++ {\n\t\tif s[i] == vowels[i] {\n\t\t\tcount += 1\n\t\t}\n\t}\n\treturn count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpaqoivj_3.swift:10:9: error: expected type\n        for i := 0;\
    \ i < len(s); i++ {\n               ^\n                <#type#>\n/tmp/tmpaqoivj_3.swift:10:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < len(s);\
    \ i++ {\n               ^\n/tmp/tmpaqoivj_3.swift:10:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 0; i < len(s); i++ {\n      \
    \         ^\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmptpti0ufg.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmptpti0ufg.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmptpti0ufg.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmptpti0ufg.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmptpti0ufg.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count++\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count++\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count++\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count++\n        } else if s[i] == 'E' || s[i] == 'e' {\n   \
    \         count++\n        } else if s[i] == 'F' || s[i] == 'f' {\n          \
    \  count++\n        } else if s[i] == 'G' || s[i] == 'g' {\n            count++\n\
    \        } else if s[i] == 'H' || s[i] == 'h' {\n            count++\n       \
    \ } else if s[i] == 'I' || s[i] == 'i' {\n            count++\n        } else\
    \ if s[i] == 'J' || s[i] == 'j' {\n            count++\n        } else if s[i]\
    \ == 'K' || s[i] == 'k' {\n            count++\n        } else if s[i] == 'L'\
    \ || s[i] == 'l' {\n            count++\n        } else if s[i] == 'M' || s[i]\
    \ == 'm' {\n            count++\n        } else if s[i] == 'N' || s[i] == 'n'\
    \ {\n            count++\n        } else if s[i] == 'O' || s[i] == 'o' {\n   \
    \         count++\n        } else if s[i] == 'P' || s[i] == 'p' {\n          \
    \  count++\n        } else if s[i] == 'Q' || s[i] == 'q' {\n            count++\n\
    \        } else if s[i] == 'R' || s[i] == 'r' {\n            count++\n       \
    \ } else if s[i] == 'S' || s[i] == 's' {\n            count++\n        } else\
    \ if s[i] == 'T' || s[i] == 't' {\n            count++\n        } else if s[i]\
    \ == 'U' || s[i] == 'u' {\n            count++\n        } else if s[i] == 'V'\
    \ || s[i] == 'v' {\n            count++\n        } else if s[i] == 'W' || s[i]\
    \ == 'w' {\n            count++\n        } else if s[i] == 'X' || s[i] == 'x'\
    \ {\n            count++\n        } else if s[i] == 'Y' || s[i] == 'y' {\n   \
    \         count++\n        } else if s[i] == 'Z' || s[i] == 'z' {\n          \
    \  count++\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\"\
    ) == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s: \"B\") ==\
    \ 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\") == 0)\n\
    assert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmppb5k95zz.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmppb5k95zz.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmppb5k95zz.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmppb5k95zz.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmppb5k95zz.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmppb5k95zz.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmppb5k95zz.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmppb5k95zz.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmppb5k95zz.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmppb5k95zz.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmppb5k95zz.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmppb5k95zz.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count++\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_xwk4hwe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp_xwk4hwe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp_xwk4hwe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp_xwk4hwe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_xwk4hwe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_xwk4hwe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_xwk4hwe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_xwk4hwe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count++\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_xwk4hwe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp_xwk4hwe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp_xwk4hwe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp_xwk4hwe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_xwk4hwe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_xwk4hwe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_xwk4hwe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_xwk4hwe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n\tlet len = s.characters.count\n\tvar count = 0\n\tfor i : Int in 0..<len\
    \ {\n\t\tif i % 2 == 0 {\n\t\t\tif s[i] == 'A' || s[i] == 'E' || s[i] == 'I' ||\
    \ s[i] == 'O' || s[i] == 'U' {\n\t\t\t\tcount += 1\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpi2op1luf.swift:12:15: error: single-quoted string literal found,\
    \ use '\"'\n                        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I'\
    \ || s[i] == 'O' || s[i] == 'U' {\n                                   ^~~\n  \
    \                                 \"A\"\n/tmp/tmpi2op1luf.swift:12:30: error:\
    \ single-quoted string literal found, use '\"'\n                        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \                                             ^~~\n                          \
    \                        \"E\"\n/tmp/tmpi2op1luf.swift:12:45: error: single-quoted\
    \ string literal found, use '\"'\n                        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                                             ^~~\n                          \
    \                                       \"I\"\n/tmp/tmpi2op1luf.swift:12:60: error:\
    \ single-quoted string literal found, use '\"'\n                        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \                                                                           ^~~\n\
    \                                                                            \
    \    \"O\"\n/tmp/tmpi2op1luf.swift:12:75: error: single-quoted string literal\
    \ found, use '\"'\n                        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                   \
    \                                                            ^~~\n           \
    \                                                                            \
    \        \"U\"\n/tmp/tmpi2op1luf.swift:8:14: error: 'characters' is unavailable:\
    \ Please use String directly\n        let len = s.characters.count\n         \
    \           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpi2op1luf.swift:12:7: error: 'subscript(_:)' is unavailable: cannot subscript\
    \ String with an Int, use a String.Index instead.\n                        if "
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmptpti0ufg.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmptpti0ufg.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmptpti0ufg.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmptpti0ufg.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmptpti0ufg.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count++\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpt8qo8xbn.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpt8qo8xbn.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmpt8qo8xbn.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpt8qo8xbn.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpt8qo8xbn.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n\tlet vowels = \"aeiouAEIOU\"\n\tvar count = 0\n\tfor i := 0; i < len(s);\
    \ i++ {\n\t\tif s[i] == vowels[i] {\n\t\t\tcount += 1\n\t\t}\n\t}\n\treturn count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpaqoivj_3.swift:10:9: error: expected type\n        for i := 0;\
    \ i < len(s); i++ {\n               ^\n                <#type#>\n/tmp/tmpaqoivj_3.swift:10:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < len(s);\
    \ i++ {\n               ^\n/tmp/tmpaqoivj_3.swift:10:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 0; i < len(s); i++ {\n      \
    \         ^\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count++\n        }\n        if s[i] ==\
    \ 'E' || s[i] == 'e' {\n            count++\n        }\n        if s[i] == 'I'\
    \ || s[i] == 'i' {\n            count++\n        }\n        if s[i] == 'O' ||\
    \ s[i] == 'o' {\n            count++\n        }\n        if s[i] == 'U' || s[i]\
    \ == 'u' {\n            count++\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmppfrzcsib.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmppfrzcsib.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmppfrzcsib.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmppfrzcsib.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmppfrzcsib.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmppfrzcsib.swift:13:20: error: single-quoted string\
    \ literal found, use '\"'\n        if s[i] == 'E' || s[i] == 'e' {\n         \
    \          ^~~\n                   \"E\"\n/tmp/tmppfrzcsib.swift:13:35: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'E' || s[i]\
    \ == 'e' {\n                                  ^~~\n                          \
    \        \"e\"\n/tmp/tmppfrzcsib.swift:16:20: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'I' || s[i] == 'i' {\n                 \
    \  ^~~\n                   \"I\"\n/tmp/tmppfrzcsib.swift:16:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'I' || s[i] == 'i' {\n  \
    \                                ^~~\n                                  \"i\"\n\
    /tmp/tmppfrzcsib.swift:19:20: error: single-quoted string literal found, use '\"\
    '\n        if s[i] == 'O' || s[i] == 'o' {\n                   ^~~\n         \
    \          \"O\"\n/tmp/tmppfrzcsib.swift:19:35: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'O' || s[i] == 'o' {\n                 \
    \                 ^~~\n                                  \"o\"\n/tmp/tmppfrzcsib.swift:22:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'U'\
    \ || s[i] == 'u' {\n                   ^~~\n                   \"U\"\n/tmp/tmppfrzcsib.swift:22:35:\
    \ error: single-quoted string"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count++\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count++\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count++\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count++\n        } else if s[i] == 'E' || s[i] == 'e' {\n   \
    \         count++\n        } else if s[i] == 'F' || s[i] == 'f' {\n          \
    \  count++\n        } else if s[i] == 'G' || s[i] == 'g' {\n            count++\n\
    \        } else if s[i] == 'H' || s[i] == 'h' {\n            count++\n       \
    \ } else if s[i] == 'I' || s[i] == 'i' {\n            count++\n        } else\
    \ if s[i] == 'J' || s[i] == 'j' {\n            count++\n        } else if s[i]\
    \ == 'K' || s[i] == 'k' {\n            count++\n        } else if s[i] == 'L'\
    \ || s[i] == 'l' {\n            count++\n        } else if s[i] == 'M' || s[i]\
    \ == 'm' {\n            count++\n        } else if s[i] == 'N' || s[i] == 'n'\
    \ {\n            count++\n        } else if s[i] == 'O' || s[i] == 'o' {\n   \
    \         count++\n        } else if s[i] == 'P' || s[i] == 'p' {\n          \
    \  count++\n        } else if s[i] == 'Q' || s[i] == 'q' {\n            count++\n\
    \        } else if s[i] == 'R' || s[i] == 'r' {\n            count++\n       \
    \ } else if s[i] == 'S' || s[i] == 's' {\n            count++\n        } else\
    \ if s[i] == 'T' || s[i] == 't' {\n            count++\n        } else if s[i]\
    \ == 'U' || s[i] == 'u' {\n            count++\n        } else if s[i] == 'V'\
    \ || s[i] == 'v' {\n            count++\n        } else if s[i] == 'W' || s[i]\
    \ == 'w' {\n            count++\n        } else if s[i] == 'X' || s[i] == 'x'\
    \ {\n            count++\n        } else if s[i] == 'Y' || s[i] == 'y' {\n   \
    \         count++\n        } else if s[i] == 'Z' || s[i] == 'z' {\n          \
    \  count++\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\"\
    ) == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s: \"B\") ==\
    \ 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\") == 0)\n\
    assert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmppb5k95zz.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmppb5k95zz.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmppb5k95zz.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmppb5k95zz.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmppb5k95zz.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmppb5k95zz.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmppb5k95zz.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmppb5k95zz.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmppb5k95zz.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmppb5k95zz.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmppb5k95zz.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmppb5k95zz.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n\tlet len = s.count\n\tlet mut count = 0\n\tfor idx in 0..len {\n\t\t\
    if idx % 2 == 0 {\n\t\t\tif s[idx].isUpper() {\n\t\t\t\tcount += 1\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpq7jnfuk7.swift:9:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut count\
    \ = 0\n                ^\n/tmp/tmpq7jnfuk7.swift:9:10: note: join the identifiers\
    \ together\n        let mut count = 0\n            ~~~~^~~~~\n            mutcount\n\
    /tmp/tmpq7jnfuk7.swift:9:10: note: join the identifiers together with camel-case\n\
    \        let mut count = 0\n            ~~~~^~~~~\n            mutCount\n/tmp/tmpq7jnfuk7.swift:10:14:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n        for\
    \ idx in 0..len {\n                    ^~\n                    ...\n/tmp/tmpq7jnfuk7.swift:17:9:\
    \ error: cannot find 'count' in scope\n        return count\n               ^~~~~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7wnbsi1o.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7wnbsi1o.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7wnbsi1o.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7wnbsi1o.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7wnbsi1o.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7wnbsi1o.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7wnbsi1o.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7wnbsi1o.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ab6xeoe.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp_ab6xeoe.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmp_ab6xeoe.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp_ab6xeoe.swift:10:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp_ab6xeoe.swift:10:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp_ab6xeoe.swift:10:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp_ab6xeoe.swift:10:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        } else if s[i] == 'B'\
    \ || s[i] == 'b' {\n            count += 1\n        } else if s[i] == 'C' || s[i]\
    \ == 'c' {\n            count += 1\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n            count += 1\n        } else if s[i] == 'E' || s[i] == 'e' {\n\
    \            count += 1\n        } else if s[i] == 'F' || s[i] == 'f' {\n    \
    \        count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n        \
    \    count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n            count\
    \ += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n            count += 1\n\
    \        } else if s[i] == 'J' || s[i] == 'j' {\n            count += 1\n    \
    \    } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n        }\
    \ else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n        } else\
    \ if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        } else if s[i]\
    \ == 'N' || s[i] == 'n' {\n            count += 1\n        } else if s[i] == 'O'\
    \ || s[i] == 'o' {\n            count += 1\n        } else if s[i] == 'P' || s[i]\
    \ == 'p' {\n            count += 1\n        } else if s[i] == 'Q' || s[i] == 'q'\
    \ {\n            count += 1\n        } else if s[i] == 'R' || s[i] == 'r' {\n\
    \            count += 1\n        } else if s[i] == 'S' || s[i] == 's' {\n    \
    \        count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n        \
    \    count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n            count\
    \ += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n            count += 1\n\
    \        } else if s[i] == 'W' || s[i] == 'w' {\n            count += 1\n    \
    \    } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n        }\
    \ else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n        } else\
    \ if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7acqg1sd.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7acqg1sd.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7acqg1sd.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7acqg1sd.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp7acqg1sd.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmp7acqg1sd.swift:12:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmp7acqg1sd.swift:12:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmp7acqg1sd.swift:14:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmp7acqg1sd.swift:14:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmp7acqg1sd.swift:16:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmp7acqg1sd.swift:16:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmp7acqg1sd.swift:18:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count++\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpt8qo8xbn.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpt8qo8xbn.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmpt8qo8xbn.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpt8qo8xbn.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpt8qo8xbn.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n\tlet vowels = \"aeiouAEIOU\"\n\tvar count = 0\n\tfor i := 0; i < len(s);\
    \ i++ {\n\t\tif s[i] == vowels[i] {\n\t\t\tcount += 1\n\t\t}\n\t}\n\treturn count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpaqoivj_3.swift:10:9: error: expected type\n        for i := 0;\
    \ i < len(s); i++ {\n               ^\n                <#type#>\n/tmp/tmpaqoivj_3.swift:10:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < len(s);\
    \ i++ {\n               ^\n/tmp/tmpaqoivj_3.swift:10:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 0; i < len(s); i++ {\n      \
    \         ^\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) ->\
    \ Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwty2ts.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwwwty2ts.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpwwwty2ts.swift:10:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpwwwty2ts.swift:10:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824581
