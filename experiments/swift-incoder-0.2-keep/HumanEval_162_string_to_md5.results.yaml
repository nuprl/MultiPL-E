language: swift
name: HumanEval_162_string_to_md5
results:
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    let hash = data.md5()\n    return hash.base64EncodedString()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpft8x12y0.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpft8x12y0.swift:9:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: CString?\n\
    \    let result = MD5Init(&md5)\n    if result != 0 {\n        return nil\n  \
    \  }\n    let result = MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding))\n\
    \    if result != 0 {\n        return nil\n    }\n    let result = MD5Final(&md5)\n\
    \    if result != 0 {\n        return nil\n    }\n    return String(bytes: md5,\
    \ encoding: NSUTF8StringEncoding)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp91zby203.swift:9:14: error: cannot find type 'CString' in scope\n\
    \    var md5: CString?\n             ^~~~~~~\n/tmp/tmp91zby203.swift:10:18: error:\
    \ cannot find 'MD5Init' in scope\n    let result = MD5Init(&md5)\n           \
    \      ^~~~~~~\n/tmp/tmp91zby203.swift:14:18: error: cannot find 'MD5Update' in\
    \ scope\n    let result = MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding))\n\
    \                 ^~~~~~~~~\n/tmp/tmp91zby203.swift:14:60: error: cannot find\
    \ 'NSUTF8StringEncoding' in scope\n    let result = MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding))\n\
    \                                                           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp91zby203.swift:14:39: error: value of type 'String' has no member 'cStringUsingEncoding'\n\
    \    let result = MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding))\n\
    \                                 ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp91zby203.swift:18:18:\
    \ error: cannot find 'MD5Final' in scope\n    let result = MD5Final(&md5)\n  \
    \               ^~~~~~~~\n/tmp/tmp91zby203.swift:22:41: error: cannot find 'NSUTF8StringEncoding'\
    \ in scope\n    return String(bytes: md5, encoding: NSUTF8StringEncoding)\n  \
    \                                      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp91zby203.swift:22:41:\
    \ error: extra argument 'encoding' in call\n    return String(bytes: md5, encoding:\
    \ NSUTF8StringEncoding)\n                 ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: Data = Data()\n\
    \    md5.withUnsafeMutableBytes { (bytes: UnsafeMutablePointer<UInt8>) -> Void\
    \ in\n        text.utf8.withUnsafeBytes { (bytes: UnsafePointer<UInt8>) -> Void\
    \ in\n            CC_MD5Init(bytes)\n            CC_MD5Update(bytes, bytes, text.utf8.count)\n\
    \            CC_MD5Final(bytes, md5)\n        }\n    }\n    return String(data:\
    \ md5, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpt6ssz5fk.swift:9:14: error: cannot find type 'Data' in scope\n\
    \    var md5: Data = Data()\n             ^~~~\n/tmp/tmpt6ssz5fk.swift:12:13:\
    \ error: cannot find 'CC_MD5Init' in scope\n            CC_MD5Init(bytes)\n  \
    \          ^~~~~~~~~~\n/tmp/tmpt6ssz5fk.swift:13:13: error: cannot find 'CC_MD5Update'\
    \ in scope\n            CC_MD5Update(bytes, bytes, text.utf8.count)\n        \
    \    ^~~~~~~~~~~~\n/tmp/tmpt6ssz5fk.swift:14:13: error: cannot find 'CC_MD5Final'\
    \ in scope\n            CC_MD5Final(bytes, md5)\n            ^~~~~~~~~~~\n/tmp/tmpt6ssz5fk.swift:17:41:\
    \ error: extra argument 'encoding' in call\n    return String(data: md5, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpt6ssz5fk.swift:17:41:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: md5, encoding: .utf8)\n                                       ~^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp0mpriw6d.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp0mpriw6d.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp0mpriw6d.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp0mpriw6d.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp0mpriw6d.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5Hash = MD5()\n\
    \    md5Hash.update(text.data(using: .utf8)!)\n    return String(data: md5Hash.bytes,\
    \ encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpcdsd1jom.swift:9:19: error: cannot find 'MD5' in scope\n    var\
    \ md5Hash = MD5()\n                  ^~~\n/tmp/tmpcdsd1jom.swift:10:25: error:\
    \ value of type 'String' has no member 'data'\n    md5Hash.update(text.data(using:\
    \ .utf8)!)\n                   ~~~~ ^~~~\n/tmp/tmpcdsd1jom.swift:10:38: error:\
    \ cannot infer contextual base in reference to member 'utf8'\n    md5Hash.update(text.data(using:\
    \ .utf8)!)\n                                    ~^~~~\n/tmp/tmpcdsd1jom.swift:11:51:\
    \ error: extra argument 'encoding' in call\n    return String(data: md5Hash.bytes,\
    \ encoding: .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpcdsd1jom.swift:11:51: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    return String(data: md5Hash.bytes, encoding: .utf8)\n\
    \                                                 ~^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5(data: data)\n    return hash.hexString\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpz6j7im43.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpz6j7im43.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpz6j7im43.swift:10:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpnt6w4zvs.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpnt6w4zvs.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpnt6w4zvs.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp6dbjo2s5.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp6dbjo2s5.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp6dbjo2s5.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: CC_MD5_CTX\
    \ = CC_MD5_CTX()\n    defer { CC_MD5_CTX_free(md5) }\n    CC_MD5Init(md5)\n  \
    \  CC_MD5Update(md5, text.data(using: .utf8)!)\n    guard let result = CC_MD5Final(md5,\
    \ nil) else {\n        return nil\n    }\n    return String(data: result, encoding:\
    \ .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjaccmuvg.swift:9:14: error: cannot find type 'CC_MD5_CTX' in scope\n\
    \    var md5: CC_MD5_CTX = CC_MD5_CTX()\n             ^~~~~~~~~~\n/tmp/tmpjaccmuvg.swift:10:13:\
    \ error: cannot find 'CC_MD5_CTX_free' in scope\n    defer { CC_MD5_CTX_free(md5)\
    \ }\n            ^~~~~~~~~~~~~~~\n/tmp/tmpjaccmuvg.swift:11:5: error: cannot find\
    \ 'CC_MD5Init' in scope\n    CC_MD5Init(md5)\n    ^~~~~~~~~~\n/tmp/tmpjaccmuvg.swift:12:5:\
    \ error: cannot find 'CC_MD5Update' in scope\n    CC_MD5Update(md5, text.data(using:\
    \ .utf8)!)\n    ^~~~~~~~~~~~\n/tmp/tmpjaccmuvg.swift:12:28: error: value of type\
    \ 'String' has no member 'data'\n    CC_MD5Update(md5, text.data(using: .utf8)!)\n\
    \                      ~~~~ ^~~~\n/tmp/tmpjaccmuvg.swift:12:41: error: cannot\
    \ infer contextual base in reference to member 'utf8'\n    CC_MD5Update(md5, text.data(using:\
    \ .utf8)!)\n                                       ~^~~~\n/tmp/tmpjaccmuvg.swift:13:24:\
    \ error: cannot find 'CC_MD5Final' in scope\n    guard let result = CC_MD5Final(md5,\
    \ nil) else {\n                       ^~~~~~~~~~~\n/tmp/tmpjaccmuvg.swift:13:41:\
    \ error: 'nil' requires a contextual type\n    guard let result = CC_MD5Final(md5,\
    \ nil) else {\n                                        ^\n/tmp/tmpjaccmuvg.swift:16:44:\
    \ error: extra argument 'encoding' in call\n    return String(data: result, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpjaccmuvg.swift:16:44:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: result, encoding: .utf8)\n                                    \
    \      ~^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: Array<UInt8>\
    \ = Array<UInt8>(repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    guard let\
    \ data = text.data(using: String.Encoding.utf8) else {\n        return nil\n \
    \   }\n    guard let result = CC_MD5(data.bytes, CC_LONG(data.count), &md5) else\
    \ {\n        return nil\n    }\n    return String(data: Data(bytes: md5), encoding:\
    \ String.Encoding.utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3xkv54qi.swift:9:67: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5: Array<UInt8> = Array<UInt8>(repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                                  ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3xkv54qi.swift:10:27: error: value of type 'String' has no member 'data'\n\
    \    guard let data = text.data(using: String.Encoding.utf8) else {\n        \
    \             ~~~~ ^~~~\n/tmp/tmp3xkv54qi.swift:10:46: error: type 'String' has\
    \ no member 'Encoding'\n    guard let data = text.data(using: String.Encoding.utf8)\
    \ else {\n                                      ~~~~~~ ^~~~~~~~\n/tmp/tmp3xkv54qi.swift:13:24:\
    \ error: cannot find 'CC_MD5' in scope\n    guard let result = CC_MD5(data.bytes,\
    \ CC_LONG(data.count), &md5) else {\n                       ^~~~~~\n/tmp/tmp3xkv54qi.swift:13:43:\
    \ error: cannot find 'CC_LONG' in scope\n    guard let result = CC_MD5(data.bytes,\
    \ CC_LONG(data.count), &md5) else {\n                                        \
    \  ^~~~~~~\n/tmp/tmp3xkv54qi.swift:16:25: error: cannot find 'Data' in scope\n\
    \    return String(data: Data(bytes: md5), encoding: String.Encoding.utf8)\n \
    \                       ^~~~\n/tmp/tmp3xkv54qi.swift:16:69: error: extra argument\
    \ 'encoding' in call\n    return String(data: Data(bytes: md5), encoding: String.Encoding.utf8)\n\
    \                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp3xkv54qi.swift:16:60:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: Data(bytes:\
    \ md5), encoding: String.Encoding.utf8)\n                                    \
    \                ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    if let hash = data.md5() {\n        return String(hash)\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6xb41cd_.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp6xb41cd_.swift:9:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp0mpriw6d.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp0mpriw6d.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp0mpriw6d.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp0mpriw6d.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp0mpriw6d.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    let hash = MD5(data!)\n    return hash.base64EncodedString()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp0kbj_s2q.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp0kbj_s2q.swift:9:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmp0kbj_s2q.swift:10:16:\
    \ error: cannot find 'MD5' in scope\n    let hash = MD5(data!)\n             \
    \  ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(data:\
    \ hash, encoding: String.Encoding.utf8)\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp6mzjmhei.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmp6mzjmhei.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmp6mzjmhei.swift:11:61: error:\
    \ extra argument 'encoding' in call\n        return String(data: hash, encoding:\
    \ String.Encoding.utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmp6mzjmhei.swift:11:52: error: type 'String' has no member 'Encoding'\n\
    \        return String(data: hash, encoding: String.Encoding.utf8)\n         \
    \                                   ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp0mpriw6d.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp0mpriw6d.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp0mpriw6d.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp0mpriw6d.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp0mpriw6d.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5.hash(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpkbbyi6z4.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpkbbyi6z4.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpkbbyi6z4.swift:10:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5.hash(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data: hash,\
    \ encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmplz_9v7lm.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmplz_9v7lm.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmplz_9v7lm.swift:10:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5.hash(data: data)\n               ^~~\n/tmp/tmplz_9v7lm.swift:11:42:\
    \ error: extra argument 'encoding' in call\n    return String(data: hash, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmplz_9v7lm.swift:11:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \  ~^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = MD5(data!)\n    return hash.hexString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpmksoumbh.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpmksoumbh.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpmksoumbh.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data!)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: CString?\n\
    \    let result = MD5Hash(text.cStringUsingEncoding(NSUTF8StringEncoding), &md5)\n\
    \    if result == noErr {\n        return String(cString: md5!)\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(string_to_md5(text: \"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxmdc9grl.swift:9:14: error: cannot find type 'CString' in scope\n\
    \    var md5: CString?\n             ^~~~~~~\n/tmp/tmpxmdc9grl.swift:10:18: error:\
    \ cannot find 'MD5Hash' in scope\n    let result = MD5Hash(text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ &md5)\n                 ^~~~~~~\n/tmp/tmpxmdc9grl.swift:10:52: error: cannot\
    \ find 'NSUTF8StringEncoding' in scope\n    let result = MD5Hash(text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ &md5)\n                                                   ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpxmdc9grl.swift:10:31: error: value of type 'String' has no member 'cStringUsingEncoding'\n\
    \    let result = MD5Hash(text.cStringUsingEncoding(NSUTF8StringEncoding), &md5)\n\
    \                         ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxmdc9grl.swift:11:18:\
    \ error: cannot find 'noErr' in scope\n    if result == noErr {\n            \
    \     ^~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(data:\
    \ hash, encoding: .utf8)\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpk1wdsrj_.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpk1wdsrj_.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpk1wdsrj_.swift:11:46: error:\
    \ extra argument 'encoding' in call\n        return String(data: hash, encoding:\
    \ .utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpk1wdsrj_.swift:11:46:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n        return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \      ~^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    return data.md5()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpl2ttlg4m.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpl2ttlg4m.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp33bujdvt.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp33bujdvt.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp33bujdvt.swift:10:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp33bujdvt.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp33bujdvt.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp33bujdvt.swift:10:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return hash.hexString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmppqgwvwpt.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmppqgwvwpt.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmppqgwvwpt.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    return String(data: data, encoding: String.Encoding.md5)\
    \ ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmplbcgm0s4.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmplbcgm0s4.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmplbcgm0s4.swift:10:57: error:\
    \ extra argument 'encoding' in call\n    return String(data: data, encoding: String.Encoding.md5)\
    \ ?? nil\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~\n/tmp/tmplbcgm0s4.swift:10:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: data,\
    \ encoding: String.Encoding.md5) ?? nil\n                                    \
    \    ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return hash.hexString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmppqgwvwpt.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmppqgwvwpt.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmppqgwvwpt.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5(data: data)\n    return hash.hexString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp3yd9qoz7.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp3yd9qoz7.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp3yd9qoz7.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    guard let data = text.data(using:\
    \ String.Encoding.utf8) else {\n        return nil\n    }\n    guard let result\
    \ = CC_MD5(data.bytes, CC_LONG(data.count), &md5) else {\n        return nil\n\
    \    }\n    return String(data: data, encoding: String.Encoding.utf8)?.lowercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpgys1l2qd.swift:9:48: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgys1l2qd.swift:10:27:\
    \ error: value of type 'String' has no member 'data'\n    guard let data = text.data(using:\
    \ String.Encoding.utf8) else {\n                     ~~~~ ^~~~\n/tmp/tmpgys1l2qd.swift:10:46:\
    \ error: type 'String' has no member 'Encoding'\n    guard let data = text.data(using:\
    \ String.Encoding.utf8) else {\n                                      ~~~~~~ ^~~~~~~~\n\
    /tmp/tmpgys1l2qd.swift:13:24: error: cannot find 'CC_MD5' in scope\n    guard\
    \ let result = CC_MD5(data.bytes, CC_LONG(data.count), &md5) else {\n        \
    \               ^~~~~~\n/tmp/tmpgys1l2qd.swift:13:43: error: cannot find 'CC_LONG'\
    \ in scope\n    guard let result = CC_MD5(data.bytes, CC_LONG(data.count), &md5)\
    \ else {\n                                          ^~~~~~~\n/tmp/tmpgys1l2qd.swift:16:57:\
    \ error: extra argument 'encoding' in call\n    return String(data: data, encoding:\
    \ String.Encoding.utf8)?.lowercased()\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpgys1l2qd.swift:16:48: error: type 'String' has no member 'Encoding'\n\
    \    return String(data: data, encoding: String.Encoding.utf8)?.lowercased()\n\
    \                                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi38x6967.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpi38x6967.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpi38x6967.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpi38x6967.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpi38x6967.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp0mpriw6d.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp0mpriw6d.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp0mpriw6d.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp0mpriw6d.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp0mpriw6d.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    if let hash = data.md5() {\n        return String(hash)\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6xb41cd_.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp6xb41cd_.swift:9:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi38x6967.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpi38x6967.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpi38x6967.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpi38x6967.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpi38x6967.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: CString?\n\
    \    MD5Init(&md5)\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.characters.count)\n    MD5Final(&md5)\n    return String(data: md5!, encoding:\
    \ NSUTF8StringEncoding)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmplhtl_2rj.swift:9:14: error: cannot find type 'CString' in scope\n\
    \    var md5: CString?\n             ^~~~~~~\n/tmp/tmplhtl_2rj.swift:10:5: error:\
    \ cannot find 'MD5Init' in scope\n    MD5Init(&md5)\n    ^~~~~~~\n/tmp/tmplhtl_2rj.swift:11:5:\
    \ error: cannot find 'MD5Update' in scope\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.characters.count)\n    ^~~~~~~~~\n/tmp/tmplhtl_2rj.swift:11:47: error:\
    \ cannot find 'NSUTF8StringEncoding' in scope\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.characters.count)\n                                              ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplhtl_2rj.swift:11:26: error: value of type 'String' has no member 'cStringUsingEncoding'\n\
    \    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding), text.characters.count)\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplhtl_2rj.swift:12:5: error:\
    \ cannot find 'MD5Final' in scope\n    MD5Final(&md5)\n    ^~~~~~~~\n/tmp/tmplhtl_2rj.swift:13:41:\
    \ error: cannot find 'NSUTF8StringEncoding' in scope\n    return String(data:\
    \ md5!, encoding: NSUTF8StringEncoding)\n                                    \
    \    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplhtl_2rj.swift:13:41: error: extra argument\
    \ 'encoding' in call\n    return String(data: md5!, encoding: NSUTF8StringEncoding)\n\
    \                 ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    if let hash = data.md5() {\n        return String(hash)\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6xb41cd_.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp6xb41cd_.swift:9:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: CString?\n\
    \    MD5_CTX ctx\n    MD5_Init(&ctx)\n    MD5_Update(&ctx, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.count)\n    MD5_Final(&md5, &ctx)\n    return String(md5!)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp3xgswsg8.swift:10:12: error: consecutive statements on a line must\
    \ be separated by ';'\n    MD5_CTX ctx\n           ^\n           ;\n/tmp/tmp3xgswsg8.swift:9:14:\
    \ error: cannot find type 'CString' in scope\n    var md5: CString?\n        \
    \     ^~~~~~~\n/tmp/tmp3xgswsg8.swift:10:5: error: cannot find 'MD5_CTX' in scope\n\
    \    MD5_CTX ctx\n    ^~~~~~~\n/tmp/tmp3xgswsg8.swift:10:13: error: cannot find\
    \ 'ctx' in scope\n    MD5_CTX ctx\n            ^~~\n/tmp/tmp3xgswsg8.swift:11:5:\
    \ error: cannot find 'MD5_Init' in scope\n    MD5_Init(&ctx)\n    ^~~~~~~~\n/tmp/tmp3xgswsg8.swift:11:15:\
    \ error: cannot find 'ctx' in scope\n    MD5_Init(&ctx)\n              ^~~\n/tmp/tmp3xgswsg8.swift:12:5:\
    \ error: cannot find 'MD5_Update' in scope\n    MD5_Update(&ctx, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.count)\n    ^~~~~~~~~~\n/tmp/tmp3xgswsg8.swift:12:17: error: cannot find\
    \ 'ctx' in scope\n    MD5_Update(&ctx, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.count)\n                ^~~\n/tmp/tmp3xgswsg8.swift:12:48: error: cannot\
    \ find 'NSUTF8StringEncoding' in scope\n    MD5_Update(&ctx, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.count)\n                                               ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3xgswsg8.swift:12:27: error: value of type 'String' has no member 'cStringUsingEncoding'\n\
    \    MD5_Update(&ctx, text.cStringUsingEncoding(NSUTF8StringEncoding), text.count)\n\
    \                     ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3xgswsg8.swift:13:5:\
    \ error: cannot find 'MD5_Final' in scope\n    MD5_Final(&md5, &ctx)\n    ^~~~~~~~~\n\
    /tmp/tmp3xgswsg8.swift:13:22: error: cannot find 'ctx' in scope\n    MD5_Final(&md5,\
    \ &ctx)\n                     ^~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp6dbjo2s5.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp6dbjo2s5.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp6dbjo2s5.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: CString?\n\
    \    MD5Init(&md5)\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.count)\n    MD5Final(&md5)\n    return String(md5!)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpoxui4e17.swift:9:14: error: cannot find type 'CString' in scope\n\
    \    var md5: CString?\n             ^~~~~~~\n/tmp/tmpoxui4e17.swift:10:5: error:\
    \ cannot find 'MD5Init' in scope\n    MD5Init(&md5)\n    ^~~~~~~\n/tmp/tmpoxui4e17.swift:11:5:\
    \ error: cannot find 'MD5Update' in scope\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.count)\n    ^~~~~~~~~\n/tmp/tmpoxui4e17.swift:11:47: error: cannot find\
    \ 'NSUTF8StringEncoding' in scope\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.count)\n                                              ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpoxui4e17.swift:11:26: error: value of type 'String' has no member 'cStringUsingEncoding'\n\
    \    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding), text.count)\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoxui4e17.swift:12:5: error:\
    \ cannot find 'MD5Final' in scope\n    MD5Final(&md5)\n    ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: CString?\n\
    \    MD5Init(&md5)\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.characters.count)\n    MD5Final(&md5)\n    return String(data: md5!, encoding:\
    \ NSUTF8StringEncoding)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmplhtl_2rj.swift:9:14: error: cannot find type 'CString' in scope\n\
    \    var md5: CString?\n             ^~~~~~~\n/tmp/tmplhtl_2rj.swift:10:5: error:\
    \ cannot find 'MD5Init' in scope\n    MD5Init(&md5)\n    ^~~~~~~\n/tmp/tmplhtl_2rj.swift:11:5:\
    \ error: cannot find 'MD5Update' in scope\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.characters.count)\n    ^~~~~~~~~\n/tmp/tmplhtl_2rj.swift:11:47: error:\
    \ cannot find 'NSUTF8StringEncoding' in scope\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.characters.count)\n                                              ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplhtl_2rj.swift:11:26: error: value of type 'String' has no member 'cStringUsingEncoding'\n\
    \    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding), text.characters.count)\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplhtl_2rj.swift:12:5: error:\
    \ cannot find 'MD5Final' in scope\n    MD5Final(&md5)\n    ^~~~~~~~\n/tmp/tmplhtl_2rj.swift:13:41:\
    \ error: cannot find 'NSUTF8StringEncoding' in scope\n    return String(data:\
    \ md5!, encoding: NSUTF8StringEncoding)\n                                    \
    \    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplhtl_2rj.swift:13:41: error: extra argument\
    \ 'encoding' in call\n    return String(data: md5!, encoding: NSUTF8StringEncoding)\n\
    \                 ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: MD5\n    md5.CalculateString(text)\n\
    \    return md5.GetMD5String()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxbcg384t.swift:9:14: error: cannot find type 'MD5' in scope\n \
    \   var md5: MD5\n             ^~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data: hash,\
    \ encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmplz_9v7lm.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmplz_9v7lm.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmplz_9v7lm.swift:10:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5.hash(data: data)\n               ^~~\n/tmp/tmplz_9v7lm.swift:11:42:\
    \ error: extra argument 'encoding' in call\n    return String(data: hash, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmplz_9v7lm.swift:11:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \  ~^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(hash)\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpq5k2mf2t.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpq5k2mf2t.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    if let hash = data.md5() {\n        return String(hash)\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6xb41cd_.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp6xb41cd_.swift:9:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return hash.hexString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmppqgwvwpt.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmppqgwvwpt.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmppqgwvwpt.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return hash.hexString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmppqgwvwpt.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmppqgwvwpt.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmppqgwvwpt.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi38x6967.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpi38x6967.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpi38x6967.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpi38x6967.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpi38x6967.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return hash.hexString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmppqgwvwpt.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmppqgwvwpt.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmppqgwvwpt.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5(data: data)\n    return hash.hexString\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpz6j7im43.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpz6j7im43.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpz6j7im43.swift:10:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: CC_MD5_CTX\
    \ = CC_MD5_CTX()\n    defer { CC_MD5_CTX_free(md5) }\n    CC_MD5_CTX_init(md5)\n\
    \    defer { CC_MD5_CTX_cleanup(md5) }\n    CC_MD5_Update(md5, text.bytes, text.count)\n\
    \    var md5String: String = String()\n    CC_MD5_Final(md5String.bytes, &md5)\n\
    \    return md5String\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpkaijfcr2.swift:9:14: error: cannot find type 'CC_MD5_CTX' in scope\n\
    \    var md5: CC_MD5_CTX = CC_MD5_CTX()\n             ^~~~~~~~~~\n/tmp/tmpkaijfcr2.swift:10:13:\
    \ error: cannot find 'CC_MD5_CTX_free' in scope\n    defer { CC_MD5_CTX_free(md5)\
    \ }\n            ^~~~~~~~~~~~~~~\n/tmp/tmpkaijfcr2.swift:11:5: error: cannot find\
    \ 'CC_MD5_CTX_init' in scope\n    CC_MD5_CTX_init(md5)\n    ^~~~~~~~~~~~~~~\n\
    /tmp/tmpkaijfcr2.swift:12:13: error: cannot find 'CC_MD5_CTX_cleanup' in scope\n\
    \    defer { CC_MD5_CTX_cleanup(md5) }\n            ^~~~~~~~~~~~~~~~~~\n/tmp/tmpkaijfcr2.swift:13:5:\
    \ error: cannot find 'CC_MD5_Update' in scope\n    CC_MD5_Update(md5, text.bytes,\
    \ text.count)\n    ^~~~~~~~~~~~~\n/tmp/tmpkaijfcr2.swift:13:29: error: value of\
    \ type 'String' has no member 'bytes'\n    CC_MD5_Update(md5, text.bytes, text.count)\n\
    \                       ~~~~ ^~~~~\n/tmp/tmpkaijfcr2.swift:15:5: error: cannot\
    \ find 'CC_MD5_Final' in scope\n    CC_MD5_Final(md5String.bytes, &md5)\n    ^~~~~~~~~~~~\n\
    /tmp/tmpkaijfcr2.swift:15:28: error: value of type 'String' has no member 'bytes'\n\
    \    CC_MD5_Final(md5String.bytes, &md5)\n                 ~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n    return hash.hexString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpawygao5l.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpawygao5l.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpawygao5l.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: MD5\n    md5.CalculateString(text)\n\
    \    return md5.GetMD5String()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxbcg384t.swift:9:14: error: cannot find type 'MD5' in scope\n \
    \   var md5: MD5\n             ^~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? \"\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2zl2gk7u.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp2zl2gk7u.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp2zl2gk7u.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp2zl2gk7u.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? \"\"\n     \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp2zl2gk7u.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? \"\"\n                                  \
    \      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp0mpriw6d.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp0mpriw6d.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp0mpriw6d.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp0mpriw6d.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp0mpriw6d.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    guard let data = text.data(using:\
    \ String.Encoding.utf8) else {\n        return nil\n    }\n    guard let _ = CC_MD5(data.bytes,\
    \ CC_LONG(data.count), &md5) else {\n        return nil\n    }\n    return String(data:\
    \ Data(bytes: md5), encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpb71bb_d5.swift:9:48: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb71bb_d5.swift:10:27:\
    \ error: value of type 'String' has no member 'data'\n    guard let data = text.data(using:\
    \ String.Encoding.utf8) else {\n                     ~~~~ ^~~~\n/tmp/tmpb71bb_d5.swift:10:46:\
    \ error: type 'String' has no member 'Encoding'\n    guard let data = text.data(using:\
    \ String.Encoding.utf8) else {\n                                      ~~~~~~ ^~~~~~~~\n\
    /tmp/tmpb71bb_d5.swift:13:19: error: cannot find 'CC_MD5' in scope\n    guard\
    \ let _ = CC_MD5(data.bytes, CC_LONG(data.count), &md5) else {\n             \
    \     ^~~~~~\n/tmp/tmpb71bb_d5.swift:13:38: error: cannot find 'CC_LONG' in scope\n\
    \    guard let _ = CC_MD5(data.bytes, CC_LONG(data.count), &md5) else {\n    \
    \                                 ^~~~~~~\n/tmp/tmpb71bb_d5.swift:16:25: error:\
    \ cannot find 'Data' in scope\n    return String(data: Data(bytes: md5), encoding:\
    \ String.Encoding.utf8)\n                        ^~~~\n/tmp/tmpb71bb_d5.swift:16:69:\
    \ error: extra argument 'encoding' in call\n    return String(data: Data(bytes:\
    \ md5), encoding: String.Encoding.utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpb71bb_d5.swift:16:60: error: type 'String' has no member 'Encoding'\n\
    \    return String(data: Data(bytes: md5), encoding: String.Encoding.utf8)\n \
    \                                                   ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp6dbjo2s5.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp6dbjo2s5.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp6dbjo2s5.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(hash)\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpq5k2mf2t.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpq5k2mf2t.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)),\
    \ &md5)\n    return String(cString: md5)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpu5fuf690.swift:9:48: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpu5fuf690.swift:10:5:\
    \ error: cannot find 'CC_MD5' in scope\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)),\
    \ &md5)\n    ^~~~~~\n/tmp/tmpu5fuf690.swift:10:29: error: cannot find 'CC_LONG'\
    \ in scope\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)), &md5)\n          \
    \                  ^~~~~~~\n/tmp/tmpu5fuf690.swift:10:37: error: cannot find 'len'\
    \ in scope\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)), &md5)\n          \
    \                          ^~~\n/tmp/tmpu5fuf690.swift:10:22: error: value of\
    \ type 'String.UTF8View' has no member 'bytes'\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)),\
    \ &md5)\n           ~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    _ = text.data(using: String.Encoding.utf8)?.withUnsafeBytes\
    \ { text in\n        CC_MD5(text.bytes, CC_LONG(text.count), &md5)\n    }\n  \
    \  return String(data: Data(bytes: md5), encoding: .utf8)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpymvy8vzc.swift:9:48: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpymvy8vzc.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(text.bytes, CC_LONG(text.count),\
    \ &md5)\n        ^~~~~~\n/tmp/tmpymvy8vzc.swift:11:28: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(text.bytes, CC_LONG(text.count), &md5)\n          \
    \                 ^~~~~~~\n/tmp/tmpymvy8vzc.swift:13:25: error: cannot find 'Data'\
    \ in scope\n    return String(data: Data(bytes: md5), encoding: .utf8)\n     \
    \                   ^~~~\n/tmp/tmpymvy8vzc.swift:13:54: error: extra argument\
    \ 'encoding' in call\n    return String(data: Data(bytes: md5), encoding: .utf8)\n\
    \                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpymvy8vzc.swift:13:54:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: Data(bytes: md5), encoding: .utf8)\n                          \
    \                          ~^~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(hash)\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpq5k2mf2t.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpq5k2mf2t.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    if let hash = data.md5() {\n        return String(hash)\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6xb41cd_.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp6xb41cd_.swift:9:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data: hash,\
    \ encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmplz_9v7lm.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmplz_9v7lm.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmplz_9v7lm.swift:10:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5.hash(data: data)\n               ^~~\n/tmp/tmplz_9v7lm.swift:11:42:\
    \ error: extra argument 'encoding' in call\n    return String(data: hash, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmplz_9v7lm.swift:11:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \  ~^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return hash.hexString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmppqgwvwpt.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmppqgwvwpt.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmppqgwvwpt.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi38x6967.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpi38x6967.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpi38x6967.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpi38x6967.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpi38x6967.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    _ = text.utf8.withUnsafeBufferPointer\
    \ {\n        CC_MD5(CC_MD5_DIGEST_LENGTH, $0.baseAddress, &md5[0], CC_LONG(text.utf8.count))\n\
    \    }\n    let md5String = String(cString: md5)\n    return md5String\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpz6qaq5yg.swift:9:48: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpz6qaq5yg.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(CC_MD5_DIGEST_LENGTH, $0.baseAddress,\
    \ &md5[0], CC_LONG(text.utf8.count))\n        ^~~~~~\n/tmp/tmpz6qaq5yg.swift:11:16:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        CC_MD5(CC_MD5_DIGEST_LENGTH,\
    \ $0.baseAddress, &md5[0], CC_LONG(text.utf8.count))\n               ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpz6qaq5yg.swift:11:63: error: cannot find 'CC_LONG' in scope\n        CC_MD5(CC_MD5_DIGEST_LENGTH,\
    \ $0.baseAddress, &md5[0], CC_LONG(text.utf8.count))\n                       \
    \                                       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(data:\
    \ hash, encoding: String.Encoding.utf8)\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp6mzjmhei.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmp6mzjmhei.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmp6mzjmhei.swift:11:61: error:\
    \ extra argument 'encoding' in call\n        return String(data: hash, encoding:\
    \ String.Encoding.utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmp6mzjmhei.swift:11:52: error: type 'String' has no member 'Encoding'\n\
    \        return String(data: hash, encoding: String.Encoding.utf8)\n         \
    \                                   ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = MD5(data!)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp626j2vgu.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmp626j2vgu.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmp626j2vgu.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data!)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi38x6967.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpi38x6967.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpi38x6967.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpi38x6967.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpi38x6967.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5Hash = MD5()\n\
    \    md5Hash.update(text.data(using: .utf8)!)\n    return String(data: md5Hash.bytes,\
    \ encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpcdsd1jom.swift:9:19: error: cannot find 'MD5' in scope\n    var\
    \ md5Hash = MD5()\n                  ^~~\n/tmp/tmpcdsd1jom.swift:10:25: error:\
    \ value of type 'String' has no member 'data'\n    md5Hash.update(text.data(using:\
    \ .utf8)!)\n                   ~~~~ ^~~~\n/tmp/tmpcdsd1jom.swift:10:38: error:\
    \ cannot infer contextual base in reference to member 'utf8'\n    md5Hash.update(text.data(using:\
    \ .utf8)!)\n                                    ~^~~~\n/tmp/tmpcdsd1jom.swift:11:51:\
    \ error: extra argument 'encoding' in call\n    return String(data: md5Hash.bytes,\
    \ encoding: .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpcdsd1jom.swift:11:51: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    return String(data: md5Hash.bytes, encoding: .utf8)\n\
    \                                                 ~^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp6dbjo2s5.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp6dbjo2s5.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp6dbjo2s5.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: CString?\n\
    \    MD5_CTX ctx\n    MD5_Init(&ctx)\n    MD5_Update(&ctx, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.characters.count)\n    MD5_Final(&md5, &ctx)\n    return String(md5!)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpik0pc6_g.swift:10:12: error: consecutive statements on a line must\
    \ be separated by ';'\n    MD5_CTX ctx\n           ^\n           ;\n/tmp/tmpik0pc6_g.swift:9:14:\
    \ error: cannot find type 'CString' in scope\n    var md5: CString?\n        \
    \     ^~~~~~~\n/tmp/tmpik0pc6_g.swift:10:5: error: cannot find 'MD5_CTX' in scope\n\
    \    MD5_CTX ctx\n    ^~~~~~~\n/tmp/tmpik0pc6_g.swift:10:13: error: cannot find\
    \ 'ctx' in scope\n    MD5_CTX ctx\n            ^~~\n/tmp/tmpik0pc6_g.swift:11:5:\
    \ error: cannot find 'MD5_Init' in scope\n    MD5_Init(&ctx)\n    ^~~~~~~~\n/tmp/tmpik0pc6_g.swift:11:15:\
    \ error: cannot find 'ctx' in scope\n    MD5_Init(&ctx)\n              ^~~\n/tmp/tmpik0pc6_g.swift:12:5:\
    \ error: cannot find 'MD5_Update' in scope\n    MD5_Update(&ctx, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.characters.count)\n    ^~~~~~~~~~\n/tmp/tmpik0pc6_g.swift:12:17: error:\
    \ cannot find 'ctx' in scope\n    MD5_Update(&ctx, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.characters.count)\n                ^~~\n/tmp/tmpik0pc6_g.swift:12:48: error:\
    \ cannot find 'NSUTF8StringEncoding' in scope\n    MD5_Update(&ctx, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.characters.count)\n                                               ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpik0pc6_g.swift:12:27: error: value of type 'String' has no member 'cStringUsingEncoding'\n\
    \    MD5_Update(&ctx, text.cStringUsingEncoding(NSUTF8StringEncoding), text.characters.count)\n\
    \                     ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpik0pc6_g.swift:13:5:\
    \ error: cannot find 'MD5_Final' in scope\n    MD5_Final(&md5, &ctx)\n    ^~~~~~~~~\n\
    /tmp/tmpik0pc6_g.swift:13:22: error: cannot find 'ctx' in scope\n    MD5_Final(&md5,\
    \ &ctx)\n                     ^~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    CC_MD5(text.utf8, CC_LONG(len(text)),\
    \ &md5)\n    return String(cString: md5)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp86508a41.swift:9:48: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86508a41.swift:10:5:\
    \ error: cannot find 'CC_MD5' in scope\n    CC_MD5(text.utf8, CC_LONG(len(text)),\
    \ &md5)\n    ^~~~~~\n/tmp/tmp86508a41.swift:10:23: error: cannot find 'CC_LONG'\
    \ in scope\n    CC_MD5(text.utf8, CC_LONG(len(text)), &md5)\n                \
    \      ^~~~~~~\n/tmp/tmp86508a41.swift:10:31: error: cannot find 'len' in scope\n\
    \    CC_MD5(text.utf8, CC_LONG(len(text)), &md5)\n                           \
    \   ^~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    _ = text.utf8.withUnsafeBufferPointer\
    \ { (textBuffer: UnsafeBufferPointer<UInt8>) in\n        CC_MD5(textBuffer.baseAddress,\
    \ CC_LONG(textBuffer.count), &md5[0], CC_LONG(md5.count))\n    }\n    let result\
    \ = String(cString: md5)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp1u8aejdu.swift:9:48: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1u8aejdu.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(textBuffer.baseAddress,\
    \ CC_LONG(textBuffer.count), &md5[0], CC_LONG(md5.count))\n        ^~~~~~\n/tmp/tmp1u8aejdu.swift:11:40:\
    \ error: cannot find 'CC_LONG' in scope\n        CC_MD5(textBuffer.baseAddress,\
    \ CC_LONG(textBuffer.count), &md5[0], CC_LONG(md5.count))\n                  \
    \                     ^~~~~~~\n/tmp/tmp1u8aejdu.swift:11:76: error: cannot find\
    \ 'CC_LONG' in scope\n        CC_MD5(textBuffer.baseAddress, CC_LONG(textBuffer.count),\
    \ &md5[0], CC_LONG(md5.count))\n                                             \
    \                              ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    guard let data = text.data(using:\
    \ String.Encoding.utf8) else {\n        return nil\n    }\n    let hash = data.md5()\n\
    \    return hash?.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpl5mpwjan.swift:9:27: error: value of type 'String' has no member\
    \ 'data'\n    guard let data = text.data(using: String.Encoding.utf8) else {\n\
    \                     ~~~~ ^~~~\n/tmp/tmpl5mpwjan.swift:9:46: error: type 'String'\
    \ has no member 'Encoding'\n    guard let data = text.data(using: String.Encoding.utf8)\
    \ else {\n                                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi38x6967.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpi38x6967.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpi38x6967.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpi38x6967.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpi38x6967.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp33bujdvt.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp33bujdvt.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp33bujdvt.swift:10:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(hash)\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpq5k2mf2t.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpq5k2mf2t.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = data.md5()\n    return hash?.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpza8upvjz.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpza8upvjz.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    guard let data = text.data(using:\
    \ String.Encoding.utf8) else {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes\
    \ {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n   \
    \     return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return\
    \ nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n \
    \   }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n \
    \   guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n    guard\
    \ let _ = data.withUnsafeBytes {\n        return nil\n    }\n    guard let _ =\
    \ data.withUnsafeBytes {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes\
    \ {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n   \
    \     return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return\
    \ nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n \
    \   }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n \
    \   guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n    guard\
    \ let _ = data.withUnsafeBytes {\n        return nil\n    }\n    guard let _ =\
    \ data.withUnsafeBytes {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes\
    \ {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n   \
    \     return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return\
    \ nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n \
    \   }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n \
    \   guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n    guard\
    \ let _ = data.withUnsafeBytes {\n        return nil\n    }\n    guard let _ =\
    \ data.withUnsafeBytes {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes\
    \ {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n   \
    \     return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return\
    \ nil\n    }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp006m11wb.swift:13:40: error: expected 'else' after 'guard' condition\n\
    \    guard let _ = data.withUnsafeBytes {\n                                  \
    \     ^\n                                       else \n/tmp/tmp006m11wb.swift:16:40:\
    \ error: expected 'else' after 'guard' condition\n    guard let _ = data.withUnsafeBytes\
    \ {\n                                       ^\n                              \
    \         else \n/tmp/tmp006m11wb.swift:19:40: error: expected 'else' after 'guard'\
    \ condition\n    guard let _ = data.withUnsafeBytes {\n                      \
    \                 ^\n                                       else \n/tmp/tmp006m11wb.swift:22:40:\
    \ error: expected 'else' after 'guard' condition\n    guard let _ = data.withUnsafeBytes\
    \ {\n                                       ^\n                              \
    \         else \n/tmp/tmp006m11wb.swift:25:40: error: expected 'else' after 'guard'\
    \ condition\n    guard let _ = data.withUnsafeBytes {\n                      \
    \                 ^\n                                       else \n/tmp/tmp006m11wb.swift:28:40:\
    \ error: expected 'else' after 'guard' condition\n    guard let _ = data.withUnsafeBytes\
    \ {\n                                       ^\n                              \
    \         else \n/tmp/tmp006m11wb.swift:31:40: error: expected 'else' after 'guard'\
    \ condition\n    guard let _ = data.withUnsafeBytes {\n                      \
    \                 ^\n                                       else \n/tmp/tmp006m11wb.swift:34:40:\
    \ error: expected 'else' after 'guard' condition\n    guard let _ = data.withUnsafeBytes\
    \ {\n                                       ^\n                              \
    \         else \n/tmp/tmp006m11wb.swift:37:40: error: expected 'else' after 'guard'\
    \ condition\n    guard let _ = data.withUnsafeBytes {\n                      \
    \                 ^\n                                       else \n/tmp/tmp006m11wb.swift:40:40:\
    \ error: expected 'else' after 'guard' condition\n    guard let _ = data.withUnsafeBytes\
    \ {\n                                       ^\n                              \
    \         else \n/tmp/tmp"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp0mpriw6d.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp0mpriw6d.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp0mpriw6d.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp0mpriw6d.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp0mpriw6d.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    _ = text.utf8.withUnsafeBufferPointer\
    \ {\n        CC_MD5(UnsafePointer($0.baseAddress), CC_LONG($0.count), md5)\n \
    \   }\n    return String(cString: md5)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpefuxl0uw.swift:9:48: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpefuxl0uw.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(UnsafePointer($0.baseAddress),\
    \ CC_LONG($0.count), md5)\n        ^~~~~~\n/tmp/tmpefuxl0uw.swift:11:47: error:\
    \ cannot find 'CC_LONG' in scope\n        CC_MD5(UnsafePointer($0.baseAddress),\
    \ CC_LONG($0.count), md5)\n                                              ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = MD5(data!)\n    return hash.hexString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpmksoumbh.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpmksoumbh.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpmksoumbh.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data!)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    let hash = MD5.hash(data!)\n    return String(data: hash, encoding:\
    \ .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpm8_b7zg5.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpm8_b7zg5.swift:9:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmpm8_b7zg5.swift:10:16:\
    \ error: cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n        \
    \       ^~~\n/tmp/tmpm8_b7zg5.swift:11:42: error: extra argument 'encoding' in\
    \ call\n    return String(data: hash, encoding: .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpm8_b7zg5.swift:11:42: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    return String(data: hash, encoding: .utf8)\n         \
    \                               ~^~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: CString?\n\
    \    MD5Init(&md5)\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.characters.count)\n    MD5Final(&md5)\n    return String(data: md5!, encoding:\
    \ NSUTF8StringEncoding)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmplhtl_2rj.swift:9:14: error: cannot find type 'CString' in scope\n\
    \    var md5: CString?\n             ^~~~~~~\n/tmp/tmplhtl_2rj.swift:10:5: error:\
    \ cannot find 'MD5Init' in scope\n    MD5Init(&md5)\n    ^~~~~~~\n/tmp/tmplhtl_2rj.swift:11:5:\
    \ error: cannot find 'MD5Update' in scope\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.characters.count)\n    ^~~~~~~~~\n/tmp/tmplhtl_2rj.swift:11:47: error:\
    \ cannot find 'NSUTF8StringEncoding' in scope\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.characters.count)\n                                              ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplhtl_2rj.swift:11:26: error: value of type 'String' has no member 'cStringUsingEncoding'\n\
    \    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding), text.characters.count)\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplhtl_2rj.swift:12:5: error:\
    \ cannot find 'MD5Final' in scope\n    MD5Final(&md5)\n    ^~~~~~~~\n/tmp/tmplhtl_2rj.swift:13:41:\
    \ error: cannot find 'NSUTF8StringEncoding' in scope\n    return String(data:\
    \ md5!, encoding: NSUTF8StringEncoding)\n                                    \
    \    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplhtl_2rj.swift:13:41: error: extra argument\
    \ 'encoding' in call\n    return String(data: md5!, encoding: NSUTF8StringEncoding)\n\
    \                 ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5.hash(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpkbbyi6z4.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpkbbyi6z4.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpkbbyi6z4.swift:10:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5.hash(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(data:\
    \ hash, encoding: String.Encoding.utf8)\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp6mzjmhei.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmp6mzjmhei.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmp6mzjmhei.swift:11:61: error:\
    \ extra argument 'encoding' in call\n        return String(data: hash, encoding:\
    \ String.Encoding.utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmp6mzjmhei.swift:11:52: error: type 'String' has no member 'Encoding'\n\
    \        return String(data: hash, encoding: String.Encoding.utf8)\n         \
    \                                   ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: Array<UInt8>\
    \ = Array<UInt8>(repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    guard let\
    \ data = text.data(using: String.Encoding.utf8) else {\n        return nil\n \
    \   }\n    guard let result = CC_MD5(data.bytes, CC_LONG(data.count), &md5) else\
    \ {\n        return nil\n    }\n    let hexString = String(data: Data(bytes: md5),\
    \ encoding: String.Encoding.utf8) ?? \"\"\n    return hexString.lowercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp0f55mu3n.swift:9:67: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5: Array<UInt8> = Array<UInt8>(repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                                  ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0f55mu3n.swift:10:27: error: value of type 'String' has no member 'data'\n\
    \    guard let data = text.data(using: String.Encoding.utf8) else {\n        \
    \             ~~~~ ^~~~\n/tmp/tmp0f55mu3n.swift:10:46: error: type 'String' has\
    \ no member 'Encoding'\n    guard let data = text.data(using: String.Encoding.utf8)\
    \ else {\n                                      ~~~~~~ ^~~~~~~~\n/tmp/tmp0f55mu3n.swift:13:24:\
    \ error: cannot find 'CC_MD5' in scope\n    guard let result = CC_MD5(data.bytes,\
    \ CC_LONG(data.count), &md5) else {\n                       ^~~~~~\n/tmp/tmp0f55mu3n.swift:13:43:\
    \ error: cannot find 'CC_LONG' in scope\n    guard let result = CC_MD5(data.bytes,\
    \ CC_LONG(data.count), &md5) else {\n                                        \
    \  ^~~~~~~\n/tmp/tmp0f55mu3n.swift:16:34: error: cannot find 'Data' in scope\n\
    \    let hexString = String(data: Data(bytes: md5), encoding: String.Encoding.utf8)\
    \ ?? \"\"\n                                 ^~~~\n/tmp/tmp0f55mu3n.swift:16:78:\
    \ error: extra argument 'encoding' in call\n    let hexString = String(data: Data(bytes:\
    \ md5), encoding: String.Encoding.utf8) ?? \"\"\n                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmp0f55mu3n.swift:16:69: error: type 'String' has no member 'Encoding'\n\
    \    let hexString = String(data: Data(bytes: md5), encoding: String.Encoding.utf8)\
    \ ?? \"\"\n                                                             ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n    return hash.hexString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpawygao5l.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpawygao5l.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpawygao5l.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = data.md5()\n    return hash?.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpza8upvjz.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpza8upvjz.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    if let hash = data.md5() {\n        return String(data: hash, encoding:\
    \ .utf8)\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7zfua5p5.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp7zfua5p5.swift:9:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmp7zfua5p5.swift:11:46:\
    \ error: extra argument 'encoding' in call\n        return String(data: hash,\
    \ encoding: .utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp7zfua5p5.swift:11:46:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n        return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \      ~^~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? \"\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2zl2gk7u.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp2zl2gk7u.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp2zl2gk7u.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp2zl2gk7u.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? \"\"\n     \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp2zl2gk7u.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? \"\"\n                                  \
    \      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp6dbjo2s5.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp6dbjo2s5.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp6dbjo2s5.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5.hash(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpkbbyi6z4.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpkbbyi6z4.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpkbbyi6z4.swift:10:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5.hash(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let digest = MD5(data: data)\n    return digest.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpxavhxhmz.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpxavhxhmz.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpxavhxhmz.swift:10:18: error: cannot find 'MD5'\
    \ in scope\n    let digest = MD5(data: data)\n                 ^~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data: hash,\
    \ encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmplz_9v7lm.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmplz_9v7lm.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmplz_9v7lm.swift:10:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5.hash(data: data)\n               ^~~\n/tmp/tmplz_9v7lm.swift:11:42:\
    \ error: extra argument 'encoding' in call\n    return String(data: hash, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmplz_9v7lm.swift:11:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \  ~^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return hash.map\
    \ { String(format: \"%02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmprpznnpq0.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmprpznnpq0.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmprpznnpq0.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmprpznnpq0.swift:11:29: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n    return hash.map { String(format:\
    \ \"%02x\", $0) }.joined()\n                            ^~~~~~~\n            \
    \                 repeating       count: \n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    _ = CC_MD5(text.utf8, CC_LONG(len(text)),\
    \ md5)\n    return String(cString: md5)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpzq6i69rf.swift:9:48: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzq6i69rf.swift:10:9:\
    \ error: cannot find 'CC_MD5' in scope\n    _ = CC_MD5(text.utf8, CC_LONG(len(text)),\
    \ md5)\n        ^~~~~~\n/tmp/tmpzq6i69rf.swift:10:27: error: cannot find 'CC_LONG'\
    \ in scope\n    _ = CC_MD5(text.utf8, CC_LONG(len(text)), md5)\n             \
    \             ^~~~~~~\n/tmp/tmpzq6i69rf.swift:10:35: error: cannot find 'len'\
    \ in scope\n    _ = CC_MD5(text.utf8, CC_LONG(len(text)), md5)\n             \
    \                     ^~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5.hash(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpkbbyi6z4.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpkbbyi6z4.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpkbbyi6z4.swift:10:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5.hash(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp33bujdvt.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp33bujdvt.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp33bujdvt.swift:10:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5 = MD5()\n \
    \   md5.update(text.data(using: .utf8)!)\n    return String(data: md5.digest(),\
    \ encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp5lnk9ape.swift:9:15: error: cannot find 'MD5' in scope\n    var\
    \ md5 = MD5()\n              ^~~\n/tmp/tmp5lnk9ape.swift:10:21: error: value of\
    \ type 'String' has no member 'data'\n    md5.update(text.data(using: .utf8)!)\n\
    \               ~~~~ ^~~~\n/tmp/tmp5lnk9ape.swift:10:34: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n    md5.update(text.data(using: .utf8)!)\n\
    \                                ~^~~~\n/tmp/tmp5lnk9ape.swift:11:50: error: extra\
    \ argument 'encoding' in call\n    return String(data: md5.digest(), encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp5lnk9ape.swift:11:50:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: md5.digest(), encoding: .utf8)\n                              \
    \                  ~^~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp33bujdvt.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp33bujdvt.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp33bujdvt.swift:10:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = data.md5()\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp1ahy72zx.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmp1ahy72zx.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    if let hash = data.md5() {\n        return String(hash)\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6xb41cd_.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp6xb41cd_.swift:9:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp6dbjo2s5.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp6dbjo2s5.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp6dbjo2s5.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi38x6967.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpi38x6967.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpi38x6967.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpi38x6967.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpi38x6967.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(hash)\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpq5k2mf2t.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpq5k2mf2t.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    _ = text.utf8.withUnsafeBytes { (bytes:\
    \ UnsafePointer<CChar>) in\n        CC_MD5(bytes, CC_LONG(text.utf8.count), &md5[0])\n\
    \    }\n    return String(cString: md5)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmplh9ys2f_.swift:9:48: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplh9ys2f_.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(text.utf8.count),\
    \ &md5[0])\n        ^~~~~~\n/tmp/tmplh9ys2f_.swift:11:23: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes, CC_LONG(text.utf8.count), &md5[0])\n       \
    \               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5Hash = MD5()\n\
    \    md5Hash.update(text.data(using: .utf8)!)\n    return String(data: md5Hash.bytes,\
    \ encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpcdsd1jom.swift:9:19: error: cannot find 'MD5' in scope\n    var\
    \ md5Hash = MD5()\n                  ^~~\n/tmp/tmpcdsd1jom.swift:10:25: error:\
    \ value of type 'String' has no member 'data'\n    md5Hash.update(text.data(using:\
    \ .utf8)!)\n                   ~~~~ ^~~~\n/tmp/tmpcdsd1jom.swift:10:38: error:\
    \ cannot infer contextual base in reference to member 'utf8'\n    md5Hash.update(text.data(using:\
    \ .utf8)!)\n                                    ~^~~~\n/tmp/tmpcdsd1jom.swift:11:51:\
    \ error: extra argument 'encoding' in call\n    return String(data: md5Hash.bytes,\
    \ encoding: .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpcdsd1jom.swift:11:51: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    return String(data: md5Hash.bytes, encoding: .utf8)\n\
    \                                                 ~^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    if let hash = data.md5() {\n        return String(hash)\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6xb41cd_.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp6xb41cd_.swift:9:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5Hash = MD5()\n\
    \    md5Hash.update(text.data(using: String.Encoding.utf8))\n    return md5Hash.digest().base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpll4zdpn8.swift:9:19: error: cannot find 'MD5' in scope\n    var\
    \ md5Hash = MD5()\n                  ^~~\n/tmp/tmpll4zdpn8.swift:10:25: error:\
    \ value of type 'String' has no member 'data'\n    md5Hash.update(text.data(using:\
    \ String.Encoding.utf8))\n                   ~~~~ ^~~~\n/tmp/tmpll4zdpn8.swift:10:44:\
    \ error: type 'String' has no member 'Encoding'\n    md5Hash.update(text.data(using:\
    \ String.Encoding.utf8))\n                                    ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n    return String(data:\
    \ hash!, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpe5mhrwma.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpe5mhrwma.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpe5mhrwma.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n               ^~~\n\
    /tmp/tmpe5mhrwma.swift:11:58: error: extra argument 'encoding' in call\n    return\
    \ String(data: hash!, encoding: String.Encoding.utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpe5mhrwma.swift:11:49: error: type 'String' has no member 'Encoding'\n\
    \    return String(data: hash!, encoding: String.Encoding.utf8)\n            \
    \                             ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi38x6967.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpi38x6967.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpi38x6967.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpi38x6967.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpi38x6967.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    _ = text.utf8.withUnsafeBytes { (bytes:\
    \ UnsafePointer<CChar>) in\n        CC_MD5(bytes, CC_LONG(text.utf8.count), &md5)\n\
    \    }\n    return String(data: Data(bytes: md5), encoding: .utf8)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpu2nytb78.swift:9:48: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpu2nytb78.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(text.utf8.count),\
    \ &md5)\n        ^~~~~~\n/tmp/tmpu2nytb78.swift:11:23: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes, CC_LONG(text.utf8.count), &md5)\n          \
    \            ^~~~~~~\n/tmp/tmpu2nytb78.swift:13:25: error: cannot find 'Data'\
    \ in scope\n    return String(data: Data(bytes: md5), encoding: .utf8)\n     \
    \                   ^~~~\n/tmp/tmpu2nytb78.swift:13:54: error: extra argument\
    \ 'encoding' in call\n    return String(data: Data(bytes: md5), encoding: .utf8)\n\
    \                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpu2nytb78.swift:13:54:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: Data(bytes: md5), encoding: .utf8)\n                          \
    \                          ~^~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    if let hash = data.md5() {\n        return String(hash)\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6xb41cd_.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp6xb41cd_.swift:9:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp6dbjo2s5.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp6dbjo2s5.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp6dbjo2s5.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: CString?\n\
    \    md5_CSTRING(&md5, text)\n    return md5\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpzhyajq_4.swift:9:14: error: cannot find type 'CString' in scope\n\
    \    var md5: CString?\n             ^~~~~~~\n/tmp/tmpzhyajq_4.swift:10:5: error:\
    \ cannot find 'md5_CSTRING' in scope\n    md5_CSTRING(&md5, text)\n    ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: MD5\n    md5.CalculateString(text)\n\
    \    return md5.GetMD5String()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxbcg384t.swift:9:14: error: cannot find type 'MD5' in scope\n \
    \   var md5: MD5\n             ^~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let digest = MD5(data: data)\n    return digest.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpxavhxhmz.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpxavhxhmz.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpxavhxhmz.swift:10:18: error: cannot find 'MD5'\
    \ in scope\n    let digest = MD5(data: data)\n                 ^~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    if let hash = data.md5() {\n        return String(hash)\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6xb41cd_.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp6xb41cd_.swift:9:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    let hash = MD5(data!)\n    return hash.base64EncodedString()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp0kbj_s2q.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp0kbj_s2q.swift:9:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmp0kbj_s2q.swift:10:16:\
    \ error: cannot find 'MD5' in scope\n    let hash = MD5(data!)\n             \
    \  ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    let hash = MD5(data!)\n    return hash.base64EncodedString()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp0kbj_s2q.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp0kbj_s2q.swift:9:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmp0kbj_s2q.swift:10:16:\
    \ error: cannot find 'MD5' in scope\n    let hash = MD5(data!)\n             \
    \  ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi38x6967.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpi38x6967.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpi38x6967.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpi38x6967.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpi38x6967.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: CString?\n\
    \    MD5Init(&md5)\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.count)\n    MD5Final(&md5, nil)\n    return String(data: md5!, encoding:\
    \ NSUTF8StringEncoding)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp5ro5q096.swift:9:14: error: cannot find type 'CString' in scope\n\
    \    var md5: CString?\n             ^~~~~~~\n/tmp/tmp5ro5q096.swift:10:5: error:\
    \ cannot find 'MD5Init' in scope\n    MD5Init(&md5)\n    ^~~~~~~\n/tmp/tmp5ro5q096.swift:11:5:\
    \ error: cannot find 'MD5Update' in scope\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.count)\n    ^~~~~~~~~\n/tmp/tmp5ro5q096.swift:11:47: error: cannot find\
    \ 'NSUTF8StringEncoding' in scope\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.count)\n                                              ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp5ro5q096.swift:11:26: error: value of type 'String' has no member 'cStringUsingEncoding'\n\
    \    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding), text.count)\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5ro5q096.swift:12:5: error:\
    \ cannot find 'MD5Final' in scope\n    MD5Final(&md5, nil)\n    ^~~~~~~~\n/tmp/tmp5ro5q096.swift:12:20:\
    \ error: 'nil' requires a contextual type\n    MD5Final(&md5, nil)\n         \
    \          ^\n/tmp/tmp5ro5q096.swift:13:41: error: cannot find 'NSUTF8StringEncoding'\
    \ in scope\n    return String(data: md5!, encoding: NSUTF8StringEncoding)\n  \
    \                                      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5ro5q096.swift:13:41:\
    \ error: extra argument 'encoding' in call\n    return String(data: md5!, encoding:\
    \ NSUTF8StringEncoding)\n                 ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: Data = Data()\n\
    \    let data = text.data(using: String.Encoding.utf8)!\n    md5.update(data)\n\
    \    let md5String = md5.base64EncodedString()\n    return md5String\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpsjqdu1ao.swift:9:14: error: cannot find type 'Data' in scope\n\
    \    var md5: Data = Data()\n             ^~~~\n/tmp/tmpsjqdu1ao.swift:10:21:\
    \ error: value of type 'String' has no member 'data'\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n               ~~~~ ^~~~\n/tmp/tmpsjqdu1ao.swift:10:40:\
    \ error: type 'String' has no member 'Encoding'\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n                                ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp6dbjo2s5.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp6dbjo2s5.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp6dbjo2s5.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp33bujdvt.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp33bujdvt.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp33bujdvt.swift:10:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    _ = CC_MD5(text.utf8, CC_LONG(len(text)),\
    \ &md5)\n    return String(cString: md5)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpgowzaoia.swift:9:48: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgowzaoia.swift:10:9:\
    \ error: cannot find 'CC_MD5' in scope\n    _ = CC_MD5(text.utf8, CC_LONG(len(text)),\
    \ &md5)\n        ^~~~~~\n/tmp/tmpgowzaoia.swift:10:27: error: cannot find 'CC_LONG'\
    \ in scope\n    _ = CC_MD5(text.utf8, CC_LONG(len(text)), &md5)\n            \
    \              ^~~~~~~\n/tmp/tmpgowzaoia.swift:10:35: error: cannot find 'len'\
    \ in scope\n    _ = CC_MD5(text.utf8, CC_LONG(len(text)), &md5)\n            \
    \                      ^~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    guard let data = text.data(using:\
    \ String.Encoding.utf8) else {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes\
    \ {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n   \
    \     return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return\
    \ nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n \
    \   }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n \
    \   guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n    guard\
    \ let _ = data.withUnsafeBytes {\n        return nil\n    }\n    guard let _ =\
    \ data.withUnsafeBytes {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes\
    \ {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n   \
    \     return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return\
    \ nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n \
    \   }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n \
    \   guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n    guard\
    \ let _ = data.withUnsafeBytes {\n        return nil\n    }\n    guard let _ =\
    \ data.withUnsafeBytes {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes\
    \ {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n   \
    \     return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return\
    \ nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n \
    \   }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n \
    \   guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n    guard\
    \ let _ = data.withUnsafeBytes {\n        return nil\n    }\n    guard let _ =\
    \ data.withUnsafeBytes {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes\
    \ {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n   \
    \     return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return\
    \ nil\n    }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp006m11wb.swift:13:40: error: expected 'else' after 'guard' condition\n\
    \    guard let _ = data.withUnsafeBytes {\n                                  \
    \     ^\n                                       else \n/tmp/tmp006m11wb.swift:16:40:\
    \ error: expected 'else' after 'guard' condition\n    guard let _ = data.withUnsafeBytes\
    \ {\n                                       ^\n                              \
    \         else \n/tmp/tmp006m11wb.swift:19:40: error: expected 'else' after 'guard'\
    \ condition\n    guard let _ = data.withUnsafeBytes {\n                      \
    \                 ^\n                                       else \n/tmp/tmp006m11wb.swift:22:40:\
    \ error: expected 'else' after 'guard' condition\n    guard let _ = data.withUnsafeBytes\
    \ {\n                                       ^\n                              \
    \         else \n/tmp/tmp006m11wb.swift:25:40: error: expected 'else' after 'guard'\
    \ condition\n    guard let _ = data.withUnsafeBytes {\n                      \
    \                 ^\n                                       else \n/tmp/tmp006m11wb.swift:28:40:\
    \ error: expected 'else' after 'guard' condition\n    guard let _ = data.withUnsafeBytes\
    \ {\n                                       ^\n                              \
    \         else \n/tmp/tmp006m11wb.swift:31:40: error: expected 'else' after 'guard'\
    \ condition\n    guard let _ = data.withUnsafeBytes {\n                      \
    \                 ^\n                                       else \n/tmp/tmp006m11wb.swift:34:40:\
    \ error: expected 'else' after 'guard' condition\n    guard let _ = data.withUnsafeBytes\
    \ {\n                                       ^\n                              \
    \         else \n/tmp/tmp006m11wb.swift:37:40: error: expected 'else' after 'guard'\
    \ condition\n    guard let _ = data.withUnsafeBytes {\n                      \
    \                 ^\n                                       else \n/tmp/tmp006m11wb.swift:40:40:\
    \ error: expected 'else' after 'guard' condition\n    guard let _ = data.withUnsafeBytes\
    \ {\n                                       ^\n                              \
    \         else \n/tmp/tmp"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp6dbjo2s5.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp6dbjo2s5.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp6dbjo2s5.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp0mpriw6d.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp0mpriw6d.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp0mpriw6d.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp0mpriw6d.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp0mpriw6d.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi38x6967.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpi38x6967.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpi38x6967.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpi38x6967.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpi38x6967.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp6dbjo2s5.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp6dbjo2s5.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp6dbjo2s5.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi38x6967.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpi38x6967.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpi38x6967.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpi38x6967.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpi38x6967.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi38x6967.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpi38x6967.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpi38x6967.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpi38x6967.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpi38x6967.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(hash)\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpq5k2mf2t.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpq5k2mf2t.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    CC_MD5(text.utf8.bytes, CC_LONG(text.utf8.count),\
    \ &md5)\n    return String(data: &md5, encoding: .utf8)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp4fi2wloj.swift:9:48: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4fi2wloj.swift:10:5:\
    \ error: cannot find 'CC_MD5' in scope\n    CC_MD5(text.utf8.bytes, CC_LONG(text.utf8.count),\
    \ &md5)\n    ^~~~~~\n/tmp/tmp4fi2wloj.swift:10:29: error: cannot find 'CC_LONG'\
    \ in scope\n    CC_MD5(text.utf8.bytes, CC_LONG(text.utf8.count), &md5)\n    \
    \                        ^~~~~~~\n/tmp/tmp4fi2wloj.swift:10:22: error: value of\
    \ type 'String.UTF8View' has no member 'bytes'\n    CC_MD5(text.utf8.bytes, CC_LONG(text.utf8.count),\
    \ &md5)\n           ~~~~~~~~~ ^~~~~\n/tmp/tmp4fi2wloj.swift:11:18: error: incorrect\
    \ argument labels in call (have 'data:encoding:', expected 'decodingCString:as:')\n\
    \    return String(data: &md5, encoding: .utf8)\n                 ^~~~~      \
    \  ~~~~~~~~\n                  decodingCString as\n/tmp/tmp4fi2wloj.swift:11:12:\
    \ error: generic parameter 'Encoding' could not be inferred\n    return String(data:\
    \ &md5, encoding: .utf8)\n           ^\nSwift.String:29:23: note: in call to initializer\n\
    \    @inlinable public init<Encoding>(decodingCString nullTerminatedCodeUnits:\
    \ inout Encoding.CodeUnit, as sourceEncoding: Encoding.Type) where Encoding :\
    \ _UnicodeEncoding\n                      ^\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp0mpriw6d.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp0mpriw6d.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp0mpriw6d.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp0mpriw6d.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp0mpriw6d.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi38x6967.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpi38x6967.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpi38x6967.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpi38x6967.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpi38x6967.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    if let hash = data.md5() {\n        return String(hash)\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6xb41cd_.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp6xb41cd_.swift:9:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi38x6967.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpi38x6967.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpi38x6967.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpi38x6967.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpi38x6967.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n    return String(data:\
    \ hash!, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpe5mhrwma.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpe5mhrwma.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpe5mhrwma.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n               ^~~\n\
    /tmp/tmpe5mhrwma.swift:11:58: error: extra argument 'encoding' in call\n    return\
    \ String(data: hash!, encoding: String.Encoding.utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpe5mhrwma.swift:11:49: error: type 'String' has no member 'Encoding'\n\
    \    return String(data: hash!, encoding: String.Encoding.utf8)\n            \
    \                             ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi38x6967.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpi38x6967.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpi38x6967.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpi38x6967.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpi38x6967.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(hash)\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpq5k2mf2t.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpq5k2mf2t.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5 = MD5()\n \
    \   md5.update(text.data(using: .utf8)!)\n    return String(data: md5.digest(),\
    \ encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp5lnk9ape.swift:9:15: error: cannot find 'MD5' in scope\n    var\
    \ md5 = MD5()\n              ^~~\n/tmp/tmp5lnk9ape.swift:10:21: error: value of\
    \ type 'String' has no member 'data'\n    md5.update(text.data(using: .utf8)!)\n\
    \               ~~~~ ^~~~\n/tmp/tmp5lnk9ape.swift:10:34: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n    md5.update(text.data(using: .utf8)!)\n\
    \                                ~^~~~\n/tmp/tmp5lnk9ape.swift:11:50: error: extra\
    \ argument 'encoding' in call\n    return String(data: md5.digest(), encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp5lnk9ape.swift:11:50:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: md5.digest(), encoding: .utf8)\n                              \
    \                  ~^~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = data.md5()\n    return hash?.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpza8upvjz.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpza8upvjz.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi38x6967.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpi38x6967.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpi38x6967.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpi38x6967.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpi38x6967.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(hash)\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpq5k2mf2t.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpq5k2mf2t.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi38x6967.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpi38x6967.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpi38x6967.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpi38x6967.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpi38x6967.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: CString?\n\
    \    MD5Init(&md5)\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.characters.count)\n    MD5Final(&md5)\n    return md5?.utf8CString\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp41wrwg2h.swift:9:14: error: cannot find type 'CString' in scope\n\
    \    var md5: CString?\n             ^~~~~~~\n/tmp/tmp41wrwg2h.swift:10:5: error:\
    \ cannot find 'MD5Init' in scope\n    MD5Init(&md5)\n    ^~~~~~~\n/tmp/tmp41wrwg2h.swift:11:5:\
    \ error: cannot find 'MD5Update' in scope\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.characters.count)\n    ^~~~~~~~~\n/tmp/tmp41wrwg2h.swift:11:47: error:\
    \ cannot find 'NSUTF8StringEncoding' in scope\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.characters.count)\n                                              ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp41wrwg2h.swift:11:26: error: value of type 'String' has no member 'cStringUsingEncoding'\n\
    \    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding), text.characters.count)\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp41wrwg2h.swift:12:5: error:\
    \ cannot find 'MD5Final' in scope\n    MD5Final(&md5)\n    ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp33bujdvt.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp33bujdvt.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp33bujdvt.swift:10:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data: hash,\
    \ encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmplz_9v7lm.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmplz_9v7lm.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmplz_9v7lm.swift:10:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5.hash(data: data)\n               ^~~\n/tmp/tmplz_9v7lm.swift:11:42:\
    \ error: extra argument 'encoding' in call\n    return String(data: hash, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmplz_9v7lm.swift:11:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \  ~^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp0mpriw6d.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp0mpriw6d.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp0mpriw6d.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp0mpriw6d.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp0mpriw6d.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = MD5(data!)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp626j2vgu.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmp626j2vgu.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmp626j2vgu.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data!)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp0mpriw6d.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp0mpriw6d.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp0mpriw6d.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp0mpriw6d.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp0mpriw6d.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp5srs65ar.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmp5srs65ar.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmp5srs65ar.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n               ^~~\n\
    /tmp/tmp5srs65ar.swift:11:57: error: extra argument 'encoding' in call\n    return\
    \ String(data: hash, encoding: String.Encoding.utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmp5srs65ar.swift:11:48: error: type 'String' has no member 'Encoding'\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \                           ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)),\
    \ &md5)\n    return String(data: &md5, encoding: .utf8)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpndalde6c.swift:9:48: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpndalde6c.swift:10:5:\
    \ error: cannot find 'CC_MD5' in scope\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)),\
    \ &md5)\n    ^~~~~~\n/tmp/tmpndalde6c.swift:10:29: error: cannot find 'CC_LONG'\
    \ in scope\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)), &md5)\n          \
    \                  ^~~~~~~\n/tmp/tmpndalde6c.swift:10:37: error: cannot find 'len'\
    \ in scope\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)), &md5)\n          \
    \                          ^~~\n/tmp/tmpndalde6c.swift:10:22: error: value of\
    \ type 'String.UTF8View' has no member 'bytes'\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)),\
    \ &md5)\n           ~~~~~~~~~ ^~~~~\n/tmp/tmpndalde6c.swift:11:18: error: incorrect\
    \ argument labels in call (have 'data:encoding:', expected 'decodingCString:as:')\n\
    \    return String(data: &md5, encoding: .utf8)\n                 ^~~~~      \
    \  ~~~~~~~~\n                  decodingCString as\n/tmp/tmpndalde6c.swift:11:12:\
    \ error: generic parameter 'Encoding' could not be inferred\n    return String(data:\
    \ &md5, encoding: .utf8)\n           ^\nSwift.String:29:23: note: in call to initializer\n\
    \    @inlinable public init<Encoding>(decodingCString nullTerminatedCodeUnits:\
    \ inout Encoding.CodeUnit, as sourceEncoding: Encoding.Type) where Encoding :\
    \ _UnicodeEncoding\n                      ^\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    let hash = MD5(data!)\n    return hash.hexString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp_sovtfi6.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp_sovtfi6.swift:9:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmp_sovtfi6.swift:10:16:\
    \ error: cannot find 'MD5' in scope\n    let hash = MD5(data!)\n             \
    \  ^~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    _ = text.utf8.withUnsafeBufferPointer\
    \ {\n        CC_MD5(UnsafePointer($0.baseAddress), CC_LONG($0.count))\n    }\n\
    \    return String(data: Data(bytes: md5), encoding: .utf8)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpxf9nl_1a.swift:9:48: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxf9nl_1a.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(UnsafePointer($0.baseAddress),\
    \ CC_LONG($0.count))\n        ^~~~~~\n/tmp/tmpxf9nl_1a.swift:11:47: error: cannot\
    \ find 'CC_LONG' in scope\n        CC_MD5(UnsafePointer($0.baseAddress), CC_LONG($0.count))\n\
    \                                              ^~~~~~~\n/tmp/tmpxf9nl_1a.swift:13:25:\
    \ error: cannot find 'Data' in scope\n    return String(data: Data(bytes: md5),\
    \ encoding: .utf8)\n                        ^~~~\n/tmp/tmpxf9nl_1a.swift:13:54:\
    \ error: extra argument 'encoding' in call\n    return String(data: Data(bytes:\
    \ md5), encoding: .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpxf9nl_1a.swift:13:54: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    return String(data: Data(bytes: md5), encoding: .utf8)\n\
    \                                                    ~^~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp0mpriw6d.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp0mpriw6d.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp0mpriw6d.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp0mpriw6d.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp0mpriw6d.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(hash)\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpq5k2mf2t.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpq5k2mf2t.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5Hash = MD5()\n\
    \    md5Hash.update(text.data(using: .utf8)!)\n    return md5Hash.digest().base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp83fpxhhf.swift:9:19: error: cannot find 'MD5' in scope\n    var\
    \ md5Hash = MD5()\n                  ^~~\n/tmp/tmp83fpxhhf.swift:10:25: error:\
    \ value of type 'String' has no member 'data'\n    md5Hash.update(text.data(using:\
    \ .utf8)!)\n                   ~~~~ ^~~~\n/tmp/tmp83fpxhhf.swift:10:38: error:\
    \ cannot infer contextual base in reference to member 'utf8'\n    md5Hash.update(text.data(using:\
    \ .utf8)!)\n                                    ~^~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5(data: data)\n    return hash.hexString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp3yd9qoz7.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp3yd9qoz7.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp3yd9qoz7.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let digest = MD5(data: data)\n    return digest.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpxavhxhmz.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpxavhxhmz.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpxavhxhmz.swift:10:18: error: cannot find 'MD5'\
    \ in scope\n    let digest = MD5(data: data)\n                 ^~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi38x6967.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpi38x6967.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpi38x6967.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpi38x6967.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpi38x6967.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: CC_MD5_CTX\
    \ = CC_MD5_CTX()\n    defer { CC_MD5_free(md5) }\n    CC_MD5_Init(md5)\n    CC_MD5_Update(md5,\
    \ text.bytes, text.count)\n    return CC_MD5_Final(md5, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp1d786sho.swift:9:14: error: cannot find type 'CC_MD5_CTX' in scope\n\
    \    var md5: CC_MD5_CTX = CC_MD5_CTX()\n             ^~~~~~~~~~\n/tmp/tmp1d786sho.swift:10:13:\
    \ error: cannot find 'CC_MD5_free' in scope\n    defer { CC_MD5_free(md5) }\n\
    \            ^~~~~~~~~~~\n/tmp/tmp1d786sho.swift:11:5: error: cannot find 'CC_MD5_Init'\
    \ in scope\n    CC_MD5_Init(md5)\n    ^~~~~~~~~~~\n/tmp/tmp1d786sho.swift:12:5:\
    \ error: cannot find 'CC_MD5_Update' in scope\n    CC_MD5_Update(md5, text.bytes,\
    \ text.count)\n    ^~~~~~~~~~~~~\n/tmp/tmp1d786sho.swift:12:29: error: value of\
    \ type 'String' has no member 'bytes'\n    CC_MD5_Update(md5, text.bytes, text.count)\n\
    \                       ~~~~ ^~~~~\n/tmp/tmp1d786sho.swift:13:12: error: cannot\
    \ find 'CC_MD5_Final' in scope\n    return CC_MD5_Final(md5, nil)\n          \
    \ ^~~~~~~~~~~~\n/tmp/tmp1d786sho.swift:13:30: error: 'nil' requires a contextual\
    \ type\n    return CC_MD5_Final(md5, nil)\n                             ^\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: CString?\n\
    \    MD5Init(&md5)\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.characters.count)\n    MD5Final(&md5)\n    return String(data: md5!, encoding:\
    \ NSUTF8StringEncoding)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmplhtl_2rj.swift:9:14: error: cannot find type 'CString' in scope\n\
    \    var md5: CString?\n             ^~~~~~~\n/tmp/tmplhtl_2rj.swift:10:5: error:\
    \ cannot find 'MD5Init' in scope\n    MD5Init(&md5)\n    ^~~~~~~\n/tmp/tmplhtl_2rj.swift:11:5:\
    \ error: cannot find 'MD5Update' in scope\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.characters.count)\n    ^~~~~~~~~\n/tmp/tmplhtl_2rj.swift:11:47: error:\
    \ cannot find 'NSUTF8StringEncoding' in scope\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.characters.count)\n                                              ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplhtl_2rj.swift:11:26: error: value of type 'String' has no member 'cStringUsingEncoding'\n\
    \    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding), text.characters.count)\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplhtl_2rj.swift:12:5: error:\
    \ cannot find 'MD5Final' in scope\n    MD5Final(&md5)\n    ^~~~~~~~\n/tmp/tmplhtl_2rj.swift:13:41:\
    \ error: cannot find 'NSUTF8StringEncoding' in scope\n    return String(data:\
    \ md5!, encoding: NSUTF8StringEncoding)\n                                    \
    \    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplhtl_2rj.swift:13:41: error: extra argument\
    \ 'encoding' in call\n    return String(data: md5!, encoding: NSUTF8StringEncoding)\n\
    \                 ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi38x6967.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpi38x6967.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpi38x6967.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpi38x6967.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpi38x6967.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n    return hash.hexString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpawygao5l.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpawygao5l.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpawygao5l.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp6dbjo2s5.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp6dbjo2s5.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp6dbjo2s5.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    \n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    \n    if let hash = data.md5() {\n        return\
    \ String(hash)\n    }\n    \n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpf0ee66v3.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpf0ee66v3.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi38x6967.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpi38x6967.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpi38x6967.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpi38x6967.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpi38x6967.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp33bujdvt.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp33bujdvt.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp33bujdvt.swift:10:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: MD5\n    md5.CalculateString(text.utf8CString)\n\
    \    return String(format: \"%08x\", md5.GetDigest())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpd25ciy9n.swift:9:14: error: cannot find type 'MD5' in scope\n \
    \   var md5: MD5\n             ^~~\n/tmp/tmpd25ciy9n.swift:11:18: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  return String(format: \"%08x\", md5.GetDigest())\n                 ^~~~~~~\n\
    \                  repeating       count: \n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(hash)\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpq5k2mf2t.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpq5k2mf2t.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5Hash = MD5()\n\
    \    md5Hash.update(text.data(using: .utf8)!)\n    return md5Hash.digest().base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp83fpxhhf.swift:9:19: error: cannot find 'MD5' in scope\n    var\
    \ md5Hash = MD5()\n                  ^~~\n/tmp/tmp83fpxhhf.swift:10:25: error:\
    \ value of type 'String' has no member 'data'\n    md5Hash.update(text.data(using:\
    \ .utf8)!)\n                   ~~~~ ^~~~\n/tmp/tmp83fpxhhf.swift:10:38: error:\
    \ cannot infer contextual base in reference to member 'utf8'\n    md5Hash.update(text.data(using:\
    \ .utf8)!)\n                                    ~^~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)),\
    \ &md5)\n    return String(data: &md5, encoding: .utf8)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpndalde6c.swift:9:48: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpndalde6c.swift:10:5:\
    \ error: cannot find 'CC_MD5' in scope\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)),\
    \ &md5)\n    ^~~~~~\n/tmp/tmpndalde6c.swift:10:29: error: cannot find 'CC_LONG'\
    \ in scope\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)), &md5)\n          \
    \                  ^~~~~~~\n/tmp/tmpndalde6c.swift:10:37: error: cannot find 'len'\
    \ in scope\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)), &md5)\n          \
    \                          ^~~\n/tmp/tmpndalde6c.swift:10:22: error: value of\
    \ type 'String.UTF8View' has no member 'bytes'\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)),\
    \ &md5)\n           ~~~~~~~~~ ^~~~~\n/tmp/tmpndalde6c.swift:11:18: error: incorrect\
    \ argument labels in call (have 'data:encoding:', expected 'decodingCString:as:')\n\
    \    return String(data: &md5, encoding: .utf8)\n                 ^~~~~      \
    \  ~~~~~~~~\n                  decodingCString as\n/tmp/tmpndalde6c.swift:11:12:\
    \ error: generic parameter 'Encoding' could not be inferred\n    return String(data:\
    \ &md5, encoding: .utf8)\n           ^\nSwift.String:29:23: note: in call to initializer\n\
    \    @inlinable public init<Encoding>(decodingCString nullTerminatedCodeUnits:\
    \ inout Encoding.CodeUnit, as sourceEncoding: Encoding.Type) where Encoding :\
    \ _UnicodeEncoding\n                      ^\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n    return String(data:\
    \ hash!, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpe5mhrwma.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpe5mhrwma.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpe5mhrwma.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n               ^~~\n\
    /tmp/tmpe5mhrwma.swift:11:58: error: extra argument 'encoding' in call\n    return\
    \ String(data: hash!, encoding: String.Encoding.utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpe5mhrwma.swift:11:49: error: type 'String' has no member 'Encoding'\n\
    \    return String(data: hash!, encoding: String.Encoding.utf8)\n            \
    \                             ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: Array<UInt8>\
    \ = Array<UInt8>(repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    CC_MD5(text.utf8.bytes,\
    \ CC_LONG(len(text)), &md5)\n    return String(bytes: &md5, encoding: .utf8)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpgkberxnj.swift:9:67: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5: Array<UInt8> = Array<UInt8>(repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                                  ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgkberxnj.swift:10:5: error: cannot find 'CC_MD5' in scope\n    CC_MD5(text.utf8.bytes,\
    \ CC_LONG(len(text)), &md5)\n    ^~~~~~\n/tmp/tmpgkberxnj.swift:10:29: error:\
    \ cannot find 'CC_LONG' in scope\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)),\
    \ &md5)\n                            ^~~~~~~\n/tmp/tmpgkberxnj.swift:10:37: error:\
    \ cannot find 'len' in scope\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)),\
    \ &md5)\n                                    ^~~\n/tmp/tmpgkberxnj.swift:10:22:\
    \ error: value of type 'String.UTF8View' has no member 'bytes'\n    CC_MD5(text.utf8.bytes,\
    \ CC_LONG(len(text)), &md5)\n           ~~~~~~~~~ ^~~~~\n/tmp/tmpgkberxnj.swift:11:18:\
    \ error: incorrect argument labels in call (have 'bytes:encoding:', expected 'decodingCString:as:')\n\
    \    return String(bytes: &md5, encoding: .utf8)\n                 ^~~~~~    \
    \    ~~~~~~~~\n                  decodingCString as\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: MD5\n    md5.CalculateString(text.utf8)\n\
    \    return String(data: md5.bytes, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpl1a6_qtd.swift:9:14: error: cannot find type 'MD5' in scope\n \
    \   var md5: MD5\n             ^~~\n/tmp/tmpl1a6_qtd.swift:11:47: error: extra\
    \ argument 'encoding' in call\n    return String(data: md5.bytes, encoding: .utf8)\n\
    \                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpl1a6_qtd.swift:11:47:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: md5.bytes, encoding: .utf8)\n                                 \
    \            ~^~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: MD5\n    md5.CalculateString(text)\n\
    \    return String(format: \"%x\", md5.GetDigest())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpvtehtpx7.swift:9:14: error: cannot find type 'MD5' in scope\n \
    \   var md5: MD5\n             ^~~\n/tmp/tmpvtehtpx7.swift:11:18: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  return String(format: \"%x\", md5.GetDigest())\n                 ^~~~~~~\n\
    \                  repeating     count: \n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp0mpriw6d.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp0mpriw6d.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp0mpriw6d.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp0mpriw6d.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp0mpriw6d.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = MD5(data!) {\n        return hash.base64EncodedString()\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpu0nn0173.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpu0nn0173.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpu0nn0173.swift:10:19: error:\
    \ cannot find 'MD5' in scope\n    if let hash = MD5(data!) {\n               \
    \   ^~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(data:\
    \ hash, encoding: String.Encoding.utf8)\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp6mzjmhei.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmp6mzjmhei.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmp6mzjmhei.swift:11:61: error:\
    \ extra argument 'encoding' in call\n        return String(data: hash, encoding:\
    \ String.Encoding.utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmp6mzjmhei.swift:11:52: error: type 'String' has no member 'Encoding'\n\
    \        return String(data: hash, encoding: String.Encoding.utf8)\n         \
    \                                   ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi38x6967.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpi38x6967.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpi38x6967.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpi38x6967.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpi38x6967.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi38x6967.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpi38x6967.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpi38x6967.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpi38x6967.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpi38x6967.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi38x6967.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpi38x6967.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpi38x6967.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpi38x6967.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpi38x6967.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    let hash = MD5(data!)\n    return hash.hexString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp_sovtfi6.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp_sovtfi6.swift:9:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmp_sovtfi6.swift:10:16:\
    \ error: cannot find 'MD5' in scope\n    let hash = MD5(data!)\n             \
    \  ^~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    _ = text.utf8.withUnsafeBytes { str\
    \ in\n        CC_MD5(str, CC_LONG(len(str)), &md5)\n    }\n    let hexString =\
    \ String(format: \"%0*x\", Int(CC_MD5_DIGEST_LENGTH), md5)\n    return hexString.lowercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpbqlg_akv.swift:9:48: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbqlg_akv.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(str, CC_LONG(len(str)),\
    \ &md5)\n        ^~~~~~\n/tmp/tmpbqlg_akv.swift:11:21: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(str, CC_LONG(len(str)), &md5)\n                   \
    \ ^~~~~~~\n/tmp/tmpbqlg_akv.swift:11:29: error: cannot find 'len' in scope\n \
    \       CC_MD5(str, CC_LONG(len(str)), &md5)\n                            ^~~\n\
    /tmp/tmpbqlg_akv.swift:13:48: error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n\
    \    let hexString = String(format: \"%0*x\", Int(CC_MD5_DIGEST_LENGTH), md5)\n\
    \                                               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbqlg_akv.swift:13:27:\
    \ error: incorrect argument labels in call (have 'format:_:_:', expected '_:radix:uppercase:')\n\
    \    let hexString = String(format: \"%0*x\", Int(CC_MD5_DIGEST_LENGTH), md5)\n\
    \                          ^~~~~~~~~\n                                       \
    \    radix:                     uppercase: \n/tmp/tmpbqlg_akv.swift:13:21: error:\
    \ initializer 'init(_:radix:uppercase:)' requires that 'String' conform to 'BinaryInteger'\n\
    \    let hexString = String(format: \"%0*x\", Int(CC_MD5_DIGEST_LENGTH), md5)\n\
    \                    ^\nSwift.String:2:12: note: where 'T' = 'String'\n    public\
    \ init<T>(_ value: T, radix: Int = 10, uppercase: Bool = false) where T : BinaryInteger\n\
    \           ^\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)),\
    \ &md5)\n    return String(cString: md5)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpu5fuf690.swift:9:48: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpu5fuf690.swift:10:5:\
    \ error: cannot find 'CC_MD5' in scope\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)),\
    \ &md5)\n    ^~~~~~\n/tmp/tmpu5fuf690.swift:10:29: error: cannot find 'CC_LONG'\
    \ in scope\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)), &md5)\n          \
    \                  ^~~~~~~\n/tmp/tmpu5fuf690.swift:10:37: error: cannot find 'len'\
    \ in scope\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)), &md5)\n          \
    \                          ^~~\n/tmp/tmpu5fuf690.swift:10:22: error: value of\
    \ type 'String.UTF8View' has no member 'bytes'\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)),\
    \ &md5)\n           ~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(data:\
    \ hash, encoding: .utf8)\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpk1wdsrj_.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpk1wdsrj_.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpk1wdsrj_.swift:11:46: error:\
    \ extra argument 'encoding' in call\n        return String(data: hash, encoding:\
    \ .utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpk1wdsrj_.swift:11:46:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n        return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \      ~^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5(data: data)\n    return hash.hexString\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpz6j7im43.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpz6j7im43.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpz6j7im43.swift:10:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n    return hash?.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmphzuha5v4.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmphzuha5v4.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmphzuha5v4.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp33bujdvt.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp33bujdvt.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp33bujdvt.swift:10:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: CString?\n\
    \    let result = MD5Hash(text.utf8)\n    if let cstr = result {\n        md5\
    \ = cstr\n    }\n    return md5\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpt630us_x.swift:9:14: error: cannot find type 'CString' in scope\n\
    \    var md5: CString?\n             ^~~~~~~\n/tmp/tmpt630us_x.swift:10:18: error:\
    \ cannot find 'MD5Hash' in scope\n    let result = MD5Hash(text.utf8)\n      \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    return data.md5()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpl2ttlg4m.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpl2ttlg4m.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5.hash(data: data)\n    return hash.hexString\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpzmdiw7nu.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpzmdiw7nu.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpzmdiw7nu.swift:10:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5.hash(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = md5(data)\n    return hash.base64EncodedString()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpdqj1tlx3.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpdqj1tlx3.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpdqj1tlx3.swift:10:16: error: cannot find 'md5'\
    \ in scope\n    let hash = md5(data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    _ = text.utf8.withUnsafeBytes { (bytes:\
    \ UnsafePointer<CChar>) in\n        CC_MD5(bytes, CC_LONG(text.utf8.count), md5)\n\
    \    }\n    return String(data: Data(bytes: md5), encoding: .utf8)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpinvcf3tf.swift:9:48: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpinvcf3tf.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(text.utf8.count),\
    \ md5)\n        ^~~~~~\n/tmp/tmpinvcf3tf.swift:11:23: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes, CC_LONG(text.utf8.count), md5)\n           \
    \           ^~~~~~~\n/tmp/tmpinvcf3tf.swift:13:25: error: cannot find 'Data' in\
    \ scope\n    return String(data: Data(bytes: md5), encoding: .utf8)\n        \
    \                ^~~~\n/tmp/tmpinvcf3tf.swift:13:54: error: extra argument 'encoding'\
    \ in call\n    return String(data: Data(bytes: md5), encoding: .utf8)\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpinvcf3tf.swift:13:54:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: Data(bytes: md5), encoding: .utf8)\n                          \
    \                          ~^~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi38x6967.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpi38x6967.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpi38x6967.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpi38x6967.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpi38x6967.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi38x6967.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpi38x6967.swift:9:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpi38x6967.swift:10:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpi38x6967.swift:11:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpi38x6967.swift:11:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: CString?\n\
    \    MD5Init(&md5)\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.characters.count)\n    MD5Final(&md5)\n    return String(data: md5!, encoding:\
    \ NSUTF8StringEncoding)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmplhtl_2rj.swift:9:14: error: cannot find type 'CString' in scope\n\
    \    var md5: CString?\n             ^~~~~~~\n/tmp/tmplhtl_2rj.swift:10:5: error:\
    \ cannot find 'MD5Init' in scope\n    MD5Init(&md5)\n    ^~~~~~~\n/tmp/tmplhtl_2rj.swift:11:5:\
    \ error: cannot find 'MD5Update' in scope\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.characters.count)\n    ^~~~~~~~~\n/tmp/tmplhtl_2rj.swift:11:47: error:\
    \ cannot find 'NSUTF8StringEncoding' in scope\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.characters.count)\n                                              ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplhtl_2rj.swift:11:26: error: value of type 'String' has no member 'cStringUsingEncoding'\n\
    \    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding), text.characters.count)\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplhtl_2rj.swift:12:5: error:\
    \ cannot find 'MD5Final' in scope\n    MD5Final(&md5)\n    ^~~~~~~~\n/tmp/tmplhtl_2rj.swift:13:41:\
    \ error: cannot find 'NSUTF8StringEncoding' in scope\n    return String(data:\
    \ md5!, encoding: NSUTF8StringEncoding)\n                                    \
    \    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplhtl_2rj.swift:13:41: error: extra argument\
    \ 'encoding' in call\n    return String(data: md5!, encoding: NSUTF8StringEncoding)\n\
    \                 ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text == \"\" {\n        return nil\n    }\n    var md5: CInt = 0\n\
    \    let result = MD5Hash(text.utf8)\n    md5 = result.md5\n    return String(format:\
    \ \"%08x\", md5)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxqvddfxy.swift:10:18: error: cannot find 'MD5Hash' in scope\n \
    \   let result = MD5Hash(text.utf8)\n                 ^~~~~~~\n/tmp/tmpxqvddfxy.swift:12:12:\
    \ error: no exact matches in call to initializer \n    return String(format: \"\
    %08x\", md5)\n           ^\nSwift.String:4:23: note: candidate '(String) -> String'\
    \ requires 1 argument, but 2 were provided\n    @inlinable public init<T>(_ value:\
    \ T) where T : LosslessStringConvertible\n                      ^\n/tmp/tmpxqvddfxy.swift:12:12:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n    return String(format: \"%08x\", md5)\n           ^\nSwift.String:3:12:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    public init<S>(_ other: S) where S : LosslessStringConvertible, S : Sequence,\
    \ S.Element == Character\n           ^\nSwift.String:4:12: note: candidate '(String)\
    \ -> String' requires 1 argument, but 2 were provided\n    public init<S>(_ characters:\
    \ S) where S : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\n"
  stdout: ''
  timestamp: 1660013667
