name: HumanEval_90_next_smallest
language: swift
prompt: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n/// Return None if there is\
  \ no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
  \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1]) ==\
  \ None\nfunc next_smallest(lst: [Int]) -> Int? {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\n\
  assert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as\
  \ [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
  \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
  \ [-35, 34, 12, -45]) == -35)"
completions: ["    if lst.count < 2 {\n        return nil\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for index in 2..lst.count {\n\
    \        if lst[index] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[index]\n        } else if lst[index] < secondSmallest\
    \ {\n            secondSmallest = lst[index]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    var smallest: Int?\
    \ = nil\n    var smallestIndex: Int = 0\n    for index in 0..<lst.count {\n  \
    \      if smallestIndex == 0 {\n            smallest = lst[index]\n          \
    \  smallestIndex = index\n        } else if lst[index] < smallest {\n        \
    \    smallest = lst[index]\n            smallestIndex = index\n        }\n   \
    \ }\n    return smallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for el in lst {\n        if el < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = el\n        } else if el < secondSmallest\
    \ {\n            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    for x in lst {\n        if x < smallest {\n    \
    \        smallest = x\n        }\n    }\n    return smallest", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for element in lst {\n      \
    \  if element < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = element\n        } else if element < secondSmallest {\n        \
    \    secondSmallest = element\n        }\n    }\n    return secondSmallest", " \
    \   guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ <= 2 else {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    for\
    \ el in lst {\n        if el < smallest {\n            smallest = el\n       \
    \ }\n    }\n    return smallest", "    var smallest = lst[0]\n    var smallestIndex\
    \ = -1\n    for index in 0..<lst.count {\n        if smallestIndex == -1 || lst[index]\
    \ < smallest {\n            smallest = lst[index]\n            smallestIndex =\
    \ index\n        }\n    }\n    return smallestIndex < lst.count ? lst[smallestIndex\
    \ + 1] : nil", "    if lst.count == 0 {\n        return nil\n    }\n    if lst.count\
    \ == 1 {\n        return lst[0]\n    }\n    if lst[0] < lst[1] {\n        return\
    \ lst[1]\n    }\n    return lst[0]", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    guard lst.count <= 2 else {\n        return nil\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i\
    \ in 2..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n\
    \        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..lst.count {\n        if lst[i] < smallest {\n    \
    \        secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n        }\n\
    \    }\n    return secondSmallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for el in lst {\n        if el < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = el\n        } else if el < secondSmallest\
    \ {\n            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for x in lst {\n\
    \        if x < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = x\n        } else if x < secondSmallest {\n            secondSmallest\
    \ = x\n        }\n    }\n    return secondSmallest", "    guard lst.count > 0\
    \ else {\n        return nil\n    }\n\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n\n    for i in 1..lst.count {\n        if lst[i] < smallest {\n  \
    \          secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else {\n            if lst[i] < secondSmallest {\n                secondSmallest\
    \ = lst[i]\n            }\n        }\n    }\n\n    return secondSmallest", " \
    \   var smallest: Int?\n    var smallestIndex: Int?\n    for index in 0..<lst.count\
    \ {\n        if smallest == nil || lst[index] < smallest {\n            smallest\
    \ = lst[index]\n            smallestIndex = index\n        }\n    }\n    return\
    \ smallest", "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n   \
    \ for el in lst {\n        if el < smallest {\n            secondSmallest = smallest\n\
    \            smallest = el\n        } else if el < secondSmallest {\n        \
    \    secondSmallest = el\n        }\n    }\n    return secondSmallest", "    var\
    \ smallest: Int? = nil\n    for value in lst {\n        if smallest == nil ||\
    \ value < smallest {\n            smallest = value\n        }\n    }\n    return\
    \ smallest"]
stop_tokens:
- "\n}"
