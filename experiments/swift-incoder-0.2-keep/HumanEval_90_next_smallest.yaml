name: HumanEval_90_next_smallest
language: swift
prompt: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n/// Return None if there is\
  \ no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
  \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1]) ==\
  \ None\nfunc next_smallest(lst: [Int]) -> Int? {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\n\
  assert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as\
  \ [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
  \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
  \ [-35, 34, 12, -45]) == -35)"
completions: ["    if lst.count < 2 {\n        return nil\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for index in 2..lst.count {\n\
    \        if lst[index] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[index]\n        } else if lst[index] < secondSmallest\
    \ {\n            secondSmallest = lst[index]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    var smallest: Int?\
    \ = nil\n    var smallestIndex: Int = 0\n    for index in 0..<lst.count {\n  \
    \      if smallestIndex == 0 {\n            smallest = lst[index]\n          \
    \  smallestIndex = index\n        } else if lst[index] < smallest {\n        \
    \    smallest = lst[index]\n            smallestIndex = index\n        }\n   \
    \ }\n    return smallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for el in lst {\n        if el < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = el\n        } else if el < secondSmallest\
    \ {\n            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    for x in lst {\n        if x < smallest {\n    \
    \        smallest = x\n        }\n    }\n    return smallest", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for element in lst {\n      \
    \  if element < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = element\n        } else if element < secondSmallest {\n        \
    \    secondSmallest = element\n        }\n    }\n    return secondSmallest", " \
    \   guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ <= 2 else {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    for\
    \ el in lst {\n        if el < smallest {\n            smallest = el\n       \
    \ }\n    }\n    return smallest", "    var smallest = lst[0]\n    var smallestIndex\
    \ = -1\n    for index in 0..<lst.count {\n        if smallestIndex == -1 || lst[index]\
    \ < smallest {\n            smallest = lst[index]\n            smallestIndex =\
    \ index\n        }\n    }\n    return smallestIndex < lst.count ? lst[smallestIndex\
    \ + 1] : nil", "    if lst.count == 0 {\n        return nil\n    }\n    if lst.count\
    \ == 1 {\n        return lst[0]\n    }\n    if lst[0] < lst[1] {\n        return\
    \ lst[1]\n    }\n    return lst[0]", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    guard lst.count <= 2 else {\n        return nil\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i\
    \ in 2..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n\
    \        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..lst.count {\n        if lst[i] < smallest {\n    \
    \        secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n        }\n\
    \    }\n    return secondSmallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for el in lst {\n        if el < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = el\n        } else if el < secondSmallest\
    \ {\n            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for x in lst {\n\
    \        if x < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = x\n        } else if x < secondSmallest {\n            secondSmallest\
    \ = x\n        }\n    }\n    return secondSmallest", "    guard lst.count > 0\
    \ else {\n        return nil\n    }\n\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n\n    for i in 1..lst.count {\n        if lst[i] < smallest {\n  \
    \          secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else {\n            if lst[i] < secondSmallest {\n                secondSmallest\
    \ = lst[i]\n            }\n        }\n    }\n\n    return secondSmallest", " \
    \   var smallest: Int?\n    var smallestIndex: Int?\n    for index in 0..<lst.count\
    \ {\n        if smallest == nil || lst[index] < smallest {\n            smallest\
    \ = lst[index]\n            smallestIndex = index\n        }\n    }\n    return\
    \ smallest", "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n   \
    \ for el in lst {\n        if el < smallest {\n            secondSmallest = smallest\n\
    \            smallest = el\n        } else if el < secondSmallest {\n        \
    \    secondSmallest = el\n        }\n    }\n    return secondSmallest", "    var\
    \ smallest: Int? = nil\n    for value in lst {\n        if smallest == nil ||\
    \ value < smallest {\n            smallest = value\n        }\n    }\n    return\
    \ smallest", "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n   \
    \ for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in\
    \ lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for value in lst\
    \ {\n        if value < smallest {\n            secondSmallest = smallest\n  \
    \          smallest = value\n        } else if value < secondSmallest {\n    \
    \        secondSmallest = value\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    for x in lst {\n        if x < smallest {\n    \
    \        smallest = x\n        }\n    }\n    return smallest", "    var smallest\
    \ = lst[0]\n    for x in lst {\n        if x < smallest {\n            smallest\
    \ = x\n        }\n    }\n    return smallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    guard lst.count <= 2 else {\n        return nil\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i\
    \ in 2..<lst.count {\n        if smallest.isLess(lst[i]) {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var smallestIndex = -1\n    for index in 0..<lst.count\
    \ {\n        if smallest > lst[index] {\n            smallest = lst[index]\n \
    \           smallestIndex = index\n        }\n    }\n    return smallestIndex\
    \ < lst.count ? smallestIndex : nil", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for element in lst {\n        if element < smallest {\n      \
    \      secondSmallest = smallest\n            smallest = element\n        } else\
    \ if element < secondSmallest {\n            secondSmallest = element\n      \
    \  }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n   \
    \ for index in lst.indices {\n        if smallest*smallest > index*index {\n \
    \           secondSmallest = index\n        }\n        if secondSmallest*secondSmallest\
    \ > index*index {\n            secondSmallest = index\n        }\n        if secondSmallest*secondSmallest\
    \ > index*index {\n            secondSmallest = index\n        }\n        if secondSmallest*secondSmallest\
    \ > index*index {\n            secondSmallest = index\n        }\n        if secondSmallest*secondSmallest\
    \ > index*index {\n            secondSmallest = index\n        }\n        if secondSmallest*secondSmallest\
    \ > index*index {\n            secondSmallest = index\n        }\n        if secondSmallest*secondSmallest\
    \ > index*index {\n            secondSmallest = index\n        }\n        if secondSmallest*secondSmallest\
    \ > index*index {\n            secondSmallest = index\n        }\n        if secondSmallest*secondSmallest\
    \ > index*index {\n            secondSmallest = index\n        }\n        if secondSmallest*secondSmallest\
    \ > index*index {\n            secondSmallest = index\n        }\n        if secondSmallest*secondSmallest\
    \ > index*index {\n            secondSmallest = index\n        }\n        if secondSmallest*secondSmallest\
    \ > index*index {\n            secondSmallest = index\n        }\n        if secondSmallest*secondSmallest\
    \ > index*index {\n            secondSmallest = index\n        }\n        if secondSmallest*secondSmallest\
    \ > index*index {\n            secondSmallest = index\n        }\n        if secondSmallest*secondSmallest\
    \ > index*index {\n            secondSmallest = index\n        }\n        if secondSmallest*secondSmallest\
    \ > index*index {\n            secondSmallest = index\n        }\n        if secondSmallest*secondSmallest\
    \ > index*index {\n            secondSmallest = index\n        }\n        if secondSmallest*secondSmallest\
    \ > index*index {\n            secondSmallest = index\n        }\n        if secondSmallest*secondSmallest\
    \ > index*index {\n            secondSmallest = index\n        }\n        if secondSmallest*secondSmalle",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n\
    \    var smallestIndex = -1\n    for index in 0..<lst.count {\n        if smallest\
    \ > lst[index] {\n            smallest = lst[index]\n            smallestIndex\
    \ = index\n        }\n    }\n    if smallestIndex == -1 {\n        return nil\n\
    \    }\n    return smallest", "    guard lst.count > 0 else { return nil }\n \
    \   var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if smallest*i < lst[i] {\n            secondSmallest = smallest\n\
    \            smallest = lst[i]\n        } else {\n            if secondSmallest*i\
    \ < lst[i] {\n                secondSmallest = lst[i]\n            }\n       \
    \ }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    for x\
    \ in lst {\n        if x < smallest {\n            smallest = x\n        }\n \
    \   }\n    return smallest", "    guard lst.count > 0 else {\n        return nil\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element\
    \ in lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ <= 2 else {\n        return nil\n    }\n    guard lst[0] != lst[1] else {\n\
    \        return nil\n    }\n    return lst[1]", "    var smallest = lst[0]\n \
    \   var secondSmallest = lst[0]\n    for element in lst {\n        if element\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ element\n        } else if element < secondSmallest {\n            secondSmallest\
    \ = element\n        }\n    }\n    return secondSmallest", "    var smallestIndex\
    \ = lst.startIndex\n    var smallestValue = lst[smallestIndex]\n    for index\
    \ in lst.startIndex..<lst.endIndex {\n        if smallestValue < lst[index] {\n\
    \            smallestIndex = index\n            smallestValue = lst[index]\n \
    \       }\n    }\n    return smallestIndex < lst.endIndex ? smallestValue : nil",
  "    if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest", "    guard lst.count\
    \ > 0 else {\n        return nil\n    }\n\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[0]\n\n    for i in 1..<lst.count {\n        if lst[i] <\
    \ smallest {\n            secondSmallest = smallest\n            smallest = lst[i]\n\
    \        } else if lst[i] > smallest {\n            secondSmallest = lst[i]\n\
    \        }\n    }\n\n    return secondSmallest", "    var smallest: Int?\n   \
    \ for el in lst {\n        if smallest == nil || el < smallest {\n           \
    \ smallest = el\n        }\n    }\n    return smallest", "    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for el in lst {\n        if el < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = el\n      \
    \  } else if el < secondSmallest {\n            secondSmallest = el\n        }\n\
    \    }\n    return secondSmallest", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n    guard lst.count <= 2 else {\n        return nil\n    }\n   \
    \ var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest: Int? = nil\n    var smallestIndex: Int = 0\n    for index in\
    \ 0..<lst.count {\n        if smallestIndex == lst.count - 1 {\n            if\
    \ let value = lst[index] {\n                smallest = value\n               \
    \ smallestIndex = index\n            }\n        } else {\n            if let value\
    \ = lst[index] {\n                if value < smallest! {\n                   \
    \ smallest = value\n                    smallestIndex = index\n              \
    \  }\n            }\n        }\n    }\n    return smallest", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..lst.count {\n        if lst[i] < smallest {\n    \
    \        secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n        }\n\
    \    }\n    return secondSmallest", "    if lst.count == 0 {\n        return nil\n\
    \    }\n    if lst.count == 1 {\n        return lst[0]\n    }\n    if lst[0] <\
    \ lst[1] {\n        return lst[1]\n    }\n    return lst[0]", "    guard lst.count\
    \ > 0 else { return nil }\n    var smallest = lst[0]\n    var smallestIndex =\
    \ lst.startIndex\n    for i in 1..lst.count {\n        if lst[i] < smallest {\n\
    \            smallest = lst[i]\n            smallestIndex = i\n        }\n   \
    \ }\n    return smallest", "    guard lst.count > 0 else { return nil }\n    guard\
    \ lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n        if smallest\
    \ > lst[i] {\n            secondSmallest = smallest\n            smallest = lst[i]\n\
    \        } else {\n            if secondSmallest > lst[i] {\n                secondSmallest\
    \ = lst[i]\n            }\n        }\n    }\n    return secondSmallest", "   \
    \ var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    guard lst.count > 0\
    \ else {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for element in lst {\n        if element < smallest {\n      \
    \      secondSmallest = smallest\n            smallest = element\n        } else\
    \ if element < secondSmallest {\n            secondSmallest = element\n      \
    \  }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n   \
    \     return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for i in 1..lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else {\n            if\
    \ lst[i] < secondSmallest {\n                secondSmallest = lst[i]\n       \
    \     }\n        }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n\
    \        return nil\n    }\n    var smallest = lst[0]\n    for x in lst {\n  \
    \      if x < smallest {\n            smallest = x\n        }\n    }\n    return\
    \ smallest", "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n   \
    \ for i in 1..<lst.count {\n        if smallest*i < secondSmallest {\n       \
    \     secondSmallest = smallest\n            smallest = lst[i]\n        }\n  \
    \  }\n    return secondSmallest", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n   \
    \ for i in 1..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else {\n            if\
    \ lst[i] < secondSmallest {\n                secondSmallest = lst[i]\n       \
    \     }\n        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest", "    var smallest: Int?\
    \ = nil\n    for el in lst {\n        if smallest == nil || el < smallest {\n\
    \            smallest = el\n        }\n    }\n    return smallest", "    guard\
    \ lst.count > 0 else {\n        return nil\n    }\n    guard lst.count > 1 else\
    \ {\n        return lst[0]\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if smallest.isLess(lst[i]) {\n\
    \            secondSmallest = smallest\n            smallest = lst[i]\n      \
    \  }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for el in lst {\n        if el < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = el\n        } else if el < secondSmallest\
    \ {\n            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var smallestIndex = lst.startIndex\n    for i in 1..lst.count {\n       \
    \ if lst[i] < smallest {\n            smallest = lst[i]\n            smallestIndex\
    \ = i\n        }\n    }\n    return smallest", "    var smallest: Int? = nil\n\
    \    for el in lst {\n        if smallest == nil || el < smallest {\n        \
    \    smallest = el\n        }\n    }\n    return smallest", "    var smallest:\
    \ Int?\n    for element in lst {\n        if smallest == nil || element < smallest\
    \ {\n            smallest = element\n        }\n    }\n    return smallest", " \
    \   var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst\
    \ {\n        if el < smallest {\n            secondSmallest = smallest\n     \
    \       smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for el in lst {\n        if el < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = el\n      \
    \  } else if el < secondSmallest {\n            secondSmallest = el\n        }\n\
    \    }\n    return secondSmallest", "    var smallest = lst[0]\n    for x in lst\
    \ {\n        if x < smallest {\n            smallest = x\n        }\n    }\n \
    \   return smallest", "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n\n    var smallest =\
    \ lst[0]\n    var secondSmallest = lst[0]\n\n    for i in 1..<lst.count {\n  \
    \      if smallest.isLess(lst[i]) {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        }\n    }\n\n    return secondSmallest",
  "    if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    for index in 2..<lst.count {\n        if\
    \ lst[index] < smallest {\n            secondSmallest = smallest\n           \
    \ smallest = lst[index]\n        } else if lst[index] < secondSmallest {\n   \
    \         secondSmallest = lst[index]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    for value in lst {\n        if value < smallest\
    \ {\n            smallest = value\n        }\n    }\n    return smallest", " \
    \   var smallest = lst[0]\n    for x in lst {\n        if x < smallest {\n   \
    \         smallest = x\n        }\n    }\n    return smallest", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n        if el\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ el\n        } else if el < secondSmallest {\n            secondSmallest = el\n\
    \        }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..lst.count {\n        if smallest > lst[i] {\n    \
    \        secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ {\n            if secondSmallest > lst[i] {\n                secondSmallest\
    \ = lst[i]\n            }\n        }\n    }\n    return secondSmallest", "   \
    \ guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count >\
    \ 1 else {\n        return lst[0]\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\n\
    \        if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n \
    \       }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    guard lst.count <= 2 else {\n        return nil\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index\
    \ in 2..<lst.count {\n        if smallest > lst[index] {\n            secondSmallest\
    \ = smallest\n            smallest = lst[index]\n        } else {\n          \
    \  secondSmallest = lst[index]\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ <= 2 else {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[0]\n    for el in lst {\n        if el < smallest {\n \
    \           secondSmallest = smallest\n            smallest = el\n        } else\
    \ if el < secondSmallest {\n            secondSmallest = el\n        }\n    }\n\
    \    return secondSmallest", "    guard lst.count > 0 else {\n        return nil\n\
    \    }\n    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in\
    \ lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    for element in lst {\n        if element < smallest\
    \ {\n            smallest = element\n        }\n    }\n    return smallest", " \
    \   guard lst.count > 0 else {\n        return nil\n    }\n    var smallest =\
    \ lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count {\n    \
    \    if lst[i] < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n         \
    \   secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest", " \
    \   var smallest = lst[0]\n    for value in lst {\n        if value < smallest\
    \ {\n            smallest = value\n        }\n    }\n    return smallest", " \
    \   if lst.count == 0 {\n        return nil\n    }\n    if lst.count > 1 {\n \
    \       return lst[1]\n    }\n    return nil", "    var smallest = lst[0]\n  \
    \  var smallestIndex = -1\n    var secondSmallest = lst[0]\n    var secondSmallestIndex\
    \ = -1\n    for index in 1..<lst.count {\n        if smallestIndex == -1 && lst[index]\
    \ < smallest {\n            smallestIndex = index\n            smallest = lst[index]\n\
    \        } else if lst[index] < smallest {\n            secondSmallestIndex =\
    \ index\n            secondSmallest = lst[index]\n        }\n    }\n    if secondSmallestIndex\
    \ == -1 {\n        return nil\n    }\n    return secondSmallest", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n        if el\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ el\n        } else if el < secondSmallest {\n            secondSmallest = el\n\
    \        }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    guard lst.count > 1 else {\n        return lst[0]\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i\
    \ in 1..lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in\
    \ lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    for x in lst {\n        if x < smallest {\n    \
    \        smallest = x\n        }\n    }\n    return smallest", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for element in lst {\n      \
    \  if element < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = element\n        } else if element < secondSmallest {\n        \
    \    secondSmallest = element\n        }\n    }\n    return secondSmallest", " \
    \   var smallest = lst[0]\n    for x in lst {\n        if x < smallest {\n   \
    \         smallest = x\n        }\n    }\n    return smallest", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for element in lst {\n      \
    \  if element < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = element\n        } else if element < secondSmallest {\n        \
    \    secondSmallest = element\n        }\n    }\n    return secondSmallest", " \
    \   guard lst.count > 0 else {\n        return nil\n    }\n    var smallest =\
    \ lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count {\n    \
    \    if lst[i] < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n         \
    \   secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest", " \
    \   guard lst.count > 0 else {\n        return nil\n    }\n\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n\n    for i in 1..<lst.count {\n\
    \        if lst[i] < smallest {\n            secondSmallest = smallest\n     \
    \       smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n     \
    \       secondSmallest = lst[i]\n        }\n    }\n\n    return secondSmallest",
  "    var smallest = lst[0]\n    for el in lst {\n        if el < smallest {\n  \
    \          smallest = el\n        }\n    }\n    return smallest", "    guard lst.count\
    \ > 0 else {\n        return nil\n    }\n    guard lst.count >= 2 else {\n   \
    \     return nil\n    }\n    let min = lst[0]\n    let minIndex = lst.index(of:\
    \ min)\n    if minIndex == 0 {\n        return nil\n    }\n    let minIndex =\
    \ minIndex! + 1\n    if minIndex == lst.count {\n        return nil\n    }\n \
    \   return lst[minIndex]", "    guard lst.count > 0 else {\n        return nil\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for value\
    \ in lst {\n        if value < smallest {\n            secondSmallest = smallest\n\
    \            smallest = value\n        } else if value < secondSmallest {\n  \
    \          secondSmallest = value\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ <= 2 else {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for element in lst {\n        if element < smallest {\n      \
    \      secondSmallest = smallest\n            smallest = element\n        } else\
    \ if element < secondSmallest {\n            secondSmallest = element\n      \
    \  }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in lst {\n        if i < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = i\n        } else if i == smallest {\n  \
    \          secondSmallest = i\n        }\n    }\n    return secondSmallest", " \
    \   var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst\
    \ {\n        if el < smallest {\n            secondSmallest = smallest\n     \
    \       smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    guard lst.count > 0\
    \ else { return nil }\n    guard lst.count > 1 else {\n        return lst[0]\n\
    \    }\n    guard lst.count > 2 else {\n        return lst[1]\n    }\n    guard\
    \ lst.count > 3 else {\n        return lst[2]\n    }\n    guard lst.count > 4\
    \ else {\n        return lst[3]\n    }\n    guard lst.count > 5 else {\n     \
    \   return lst[4]\n    }\n    guard lst.count > 6 else {\n        return lst[5]\n\
    \    }\n    guard lst.count > 7 else {\n        return lst[6]\n    }\n    guard\
    \ lst.count > 8 else {\n        return lst[7]\n    }\n    guard lst.count > 9\
    \ else {\n        return lst[8]\n    }\n    guard lst.count > 10 else {\n    \
    \    return lst[9]\n    }\n    guard lst.count > 11 else {\n        return lst[10]\n\
    \    }\n    guard lst.count > 12 else {\n        return lst[11]\n    }\n    guard\
    \ lst.count > 13 else {\n        return lst[12]\n    }\n    guard lst.count >\
    \ 14 else {\n        return lst[13]\n    }\n    guard lst.count > 15 else {\n\
    \        return lst[14]\n    }\n    guard lst.count > 16 else {\n        return\
    \ lst[15]\n    }\n    guard lst.count > 17 else {\n        return lst[16]\n  \
    \  }\n    guard lst.count > 18 else {\n        return lst[17]\n    }\n    guard\
    \ lst.count > 19 else {\n        return lst[18]\n    }\n    guard lst.count >\
    \ 20 else {\n        return lst[19]\n    }\n    guard lst.count > 21 else {\n\
    \        return lst[20]\n    }\n    guard lst.count > 22 else {\n        return\
    \ lst[21]\n    }\n    guard lst.count > 23 else {\n        return lst[22]\n  \
    \  }\n    guard lst.count > 24 else {\n        return lst[23]\n    }\n    guard\
    \ lst.count > 25 else {\n        return lst[24]\n    }\n    guard lst.count >\
    \ 26 else {\n        return lst[25]\n    }\n    guard lst.count > 27 else {\n\
    \        return lst[26]\n    }\n    guard lst.count > 28 else {\n        return\
    \ lst[27]\n    }\n    guard lst.count > 29 else {\n        return lst[28]", " \
    \   var smallest = lst[0]\n    for el in lst {\n        if el < smallest {\n \
    \           smallest = el\n        }\n    }\n    return smallest", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for element in lst {\n      \
    \  if element < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = element\n        } else if element < secondSmallest {\n        \
    \    secondSmallest = element\n        }\n    }\n    return secondSmallest", " \
    \   var smallest: Int? = nil\n    for x in lst {\n        if smallest == nil ||\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in\
    \ lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ >= 2 else {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if smallest.isLess(lst[i]) {\n\
    \            secondSmallest = smallest\n            smallest = lst[i]\n      \
    \  }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for el in lst {\n        if el < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = el\n        } else if el < secondSmallest\
    \ {\n            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for el in lst {\n        if el < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = el\n      \
    \  } else if el < secondSmallest {\n            secondSmallest = el\n        }\n\
    \    }\n    return secondSmallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    for\
    \ el in lst {\n        if el < smallest {\n            smallest = el\n       \
    \ }\n    }\n    return smallest", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n    guard lst.count <= 2 else {\n        return nil\n    }\n   \
    \ var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        }\n        if lst[i] < secondSmallest {\n\
    \            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n\
    \    var smallestIndex = -1\n    for index in 0..<lst.count {\n        if smallestIndex\
    \ == -1 || smallestIndex > index {\n            smallestIndex = index\n      \
    \      smallest = lst[index]\n        }\n        if smallest > lst[index] {\n\
    \            smallestIndex = index\n            smallest = lst[index]\n      \
    \  }\n    }\n    return smallestIndex == lst.count ? nil : smallest", "    guard\
    \ lst.count > 0 else {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest", "    var smallest =\
    \ lst[0]\n    for x in lst {\n        if x < smallest {\n            smallest\
    \ = x\n        }\n    }\n    return smallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..lst.count {\n        if lst[i] < smallest {\n    \
    \        secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n        }\n\
    \    }\n    return secondSmallest", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n   \
    \ for i in 1..lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for element in lst {\n        if element\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ element\n        } else if element < secondSmallest {\n            secondSmallest\
    \ = element\n        }\n    }\n    return secondSmallest", "    if lst.count <\
    \ 2 {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for index in 2..<lst.count {\n        if lst[index] < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = lst[index]\n\
    \        } else if lst[index] < secondSmallest {\n            secondSmallest =\
    \ lst[index]\n        }\n    }\n    return secondSmallest", "    guard lst.count\
    \ > 0 else { return nil }\n    var smallest = lst[0]\n    var secondSmallest =\
    \ lst[0]\n    for element in lst {\n        if element < smallest {\n        \
    \    secondSmallest = smallest\n            smallest = element\n        } else\
    \ if element < secondSmallest {\n            secondSmallest = element\n      \
    \  }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for el in lst {\n        if el < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = el\n        } else if el < secondSmallest\
    \ {\n            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    guard lst.count > 0\
    \ else {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for element in lst {\n        if element < smallest {\n      \
    \      secondSmallest = smallest\n            smallest = element\n        } else\
    \ if element < secondSmallest {\n            secondSmallest = element\n      \
    \  }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n   \
    \     return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for i in 1..lst.count {\n        if smallest.isLess(lst[i]) {\n         \
    \   secondSmallest = smallest\n            smallest = lst[i]\n        } else {\n\
    \            if secondSmallest.isLess(lst[i]) {\n                secondSmallest\
    \ = lst[i]\n            }\n        }\n    }\n    return secondSmallest", "   \
    \ var smallest: Int? = nil\n    for x in lst {\n        if smallest == nil ||\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n        if smallest.isLess(lst[i])\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      } else {\n            secondSmallest = lst[i]\n        }\n    }\n    return\
    \ secondSmallest", "    var smallest: Int? = nil\n    for el in lst {\n      \
    \  if smallest == nil || el < smallest {\n            smallest = el\n        }\n\
    \    }\n    return smallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for el in lst {\n        if el < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = el\n        } else if el < secondSmallest\
    \ {\n            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    var smallest: Int? = nil\n    for x in lst {\n        if smallest == nil ||\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest",
  "    if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    for index in 2..<lst.count {\n        if\
    \ lst[index] < smallest {\n            secondSmallest = smallest\n           \
    \ smallest = lst[index]\n        } else if lst[index] < secondSmallest {\n   \
    \         secondSmallest = lst[index]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    for el in lst {\n        if el < smallest {\n  \
    \          smallest = el\n        }\n    }\n    return smallest", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest", " \
    \   if lst.count == 0 {\n        return nil\n    }\n    if lst.count == 1 {\n\
    \        return lst[0]\n    }\n    if lst[0] < lst[1] {\n        return lst[1]\n\
    \    }\n    return lst[0]", "    guard lst.count > 0 else {\n        return nil\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i\
    \ in 1..lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in\
    \ lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    guard lst.count > 0\
    \ else {\n        return nil\n    }\n    var smallest = lst[0]\n    for element\
    \ in lst {\n        if element < smallest {\n            smallest = element\n\
    \        }\n    }\n    return smallest", "    var smallest = lst[0]\n    for x\
    \ in lst {\n        if x < smallest {\n            smallest = x\n        }\n \
    \   }\n    return smallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for el in lst {\n        if el < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = el\n        } else if el < secondSmallest\
    \ {\n            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var smallestIndex = -1\n    for index in 1..<lst.count\
    \ {\n        if lst[index] < smallest {\n            smallest = lst[index]\n \
    \           smallestIndex = index\n        }\n    }\n    return smallestIndex\
    \ == lst.count ? nil : lst[smallestIndex + 1]", "    var smallest = lst[0]\n \
    \   var secondSmallest = lst[0]\n    for el in lst {\n        if el < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = el\n      \
    \  } else if el < secondSmallest {\n            secondSmallest = el\n        }\n\
    \    }\n    return secondSmallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for el in lst {\n        if el < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = el\n        } else if el < secondSmallest\
    \ {\n            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    guard lst.count > 0\
    \ else {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..lst.count {\n        if lst[i] < smallest {\n    \
    \        secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n        }\n\
    \    }\n    return secondSmallest", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n    guard lst.count <= 2 else {\n        return nil\n    }\n   \
    \ guard lst.count >= 2 else {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest", "    var smallest =\
    \ lst[0]\n    for x in lst {\n        if x < smallest {\n            smallest\
    \ = x\n        }\n    }\n    return smallest", "    var smallest: Int?\n    for\
    \ el in lst {\n        if smallest == nil || el < smallest {\n            smallest\
    \ = el\n        }\n    }\n    return smallest", "    guard lst.count > 0 else\
    \ {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for element in lst {\n        if element < smallest {\n      \
    \      secondSmallest = smallest\n            smallest = element\n        } else\
    \ if element < secondSmallest {\n            secondSmallest = element\n      \
    \  }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for el in lst {\n        if el < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = el\n        } else if el < secondSmallest\
    \ {\n            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    var smallestIndex = lst.startIndex\n    var smallestValue = lst[smallestIndex]\n\
    \    for index in lst.startIndex..<lst.endIndex {\n        if smallestValue >\
    \ lst[index] {\n            smallestValue = lst[index]\n            smallestIndex\
    \ = index\n        }\n    }\n    return smallestIndex == lst.endIndex ? nil :\
    \ smallestValue", "    var smallest = lst[0]\n    var smallestIndex = -1\n   \
    \ for index in 0..<lst.count {\n        if smallestIndex == -1 || smallestIndex\
    \ > index {\n            if smallestIndex == -1 {\n                smallestIndex\
    \ = index\n            }\n            if smallestIndex > index {\n           \
    \     smallest = lst[index]\n            }\n        }\n    }\n    return smallest",
  "    var smallest = lst[0]\n    for x in lst {\n        if x < smallest {\n    \
    \        smallest = x\n        }\n    }\n    return smallest", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for x in lst {\n        if x\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ x\n        } else if x < secondSmallest {\n            secondSmallest = x\n\
    \        }\n    }\n    return secondSmallest", "    var smallest: Int? = nil\n\
    \    var smallestIndex: Int = 0\n    for index in 0..<lst.count {\n        if\
    \ smallestIndex == lst.count - 1 {\n            return nil\n        }\n      \
    \  if smallestIndex == lst.count - 2 {\n            if lst[index] > lst[index\
    \ + 1] {\n                return nil\n            }\n        }\n        if smallestIndex\
    \ == lst.count - 3 {\n            if lst[index] > lst[index + 1] && lst[index]\
    \ > lst[index + 2] {\n                return nil\n            }\n        }\n \
    \       if smallestIndex == lst.count - 4 {\n            if lst[index] > lst[index\
    \ + 1] && lst[index] > lst[index + 2] && lst[index] > lst[index + 3] {\n     \
    \           return nil\n            }\n        }\n        if smallestIndex ==\
    \ lst.count - 5 {\n            if lst[index] > lst[index + 1] && lst[index] >\
    \ lst[index + 2] && lst[index] > lst[index + 3] && lst[index] > lst[index + 4]\
    \ {\n                return nil\n            }\n        }\n        if smallestIndex\
    \ == lst.count - 6 {\n            if lst[index] > lst[index + 1] && lst[index]\
    \ > lst[index + 2] && lst[index] > lst[index + 3] && lst[index] > lst[index +\
    \ 4] && lst[index] > lst[index + 5] {\n                return nil\n          \
    \  }\n        }\n        if smallestIndex == lst.count - 7 {\n            if lst[index]\
    \ > lst[index + 1] && lst[index] > lst[index + 2] && lst[index] > lst[index +\
    \ 3] && lst[index] > lst[index + 4] && lst[index] > lst[index + 5] && lst[index]\
    \ > lst[index + 6] {\n                return nil\n            }\n        }\n \
    \       if smallestIndex == lst.count - 8 {\n            if lst[index] > lst[index\
    \ + 1] && lst[index] > lst[index + 2] && lst[index] > lst[index + 3] && lst[index]\
    \ > lst[index + 4] && lst[index] > lst[index + 5] && lst[index] > lst[index +\
    \ 6] && lst[index] > lst[index + 7] {\n                return nil\n          \
    \  }\n        }\n        if smallestIndex == lst.count - 9 {\n            if lst[index]\
    \ > lst[index + 1] && lst[index] > lst[index + 2] && lst[index] > lst[index +\
    \ 3] && lst[index] > lst[index + 4] && lst[index] > lst[index + 5] && lst[index]\
    \ > lst[index + 6] && lst[index] > lst[index + 7] && lst[index] > lst[index +\
    \ 8] {\n                return nil\n            }\n        }\n        if smallestIndex\
    \ == lst.count - 10 {\n            if lst[index] > lst[index + 1] && lst[index]\
    \ > lst", "    guard lst.count > 0 else {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if smallest > lst[i] {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else {\n            if secondSmallest\
    \ > lst[i] {\n                secondSmallest = lst[i]\n            }\n       \
    \ }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    for x\
    \ in lst {\n        if x < smallest {\n            smallest = x\n        }\n \
    \   }\n    return smallest", "    var smallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            smallest = el\n        }\n    }\n   \
    \ return smallest", "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for x in lst {\n\
    \        if x < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = x\n        } else if x < secondSmallest {\n            secondSmallest\
    \ = x\n        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n\
    \    for x in lst {\n        if x < smallest {\n            smallest = x\n   \
    \     }\n    }\n    return smallest", "    var smallest = lst[0]\n    for x in\
    \ lst {\n        if x < smallest {\n            smallest = x\n        }\n    }\n\
    \    return smallest", "    guard lst.count > 0 else {\n        return nil\n \
    \   }\n\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for\
    \ element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ <= 2 else {\n        return nil\n    }\n    guard lst.count >= 2 else {\n  \
    \      return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest =\
    \ lst[1]\n    for index in lst.indices {\n        if smallest.isLess(lst[index])\
    \ {\n            secondSmallest = smallest\n            smallest = lst[index]\n\
    \        }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    guard lst.count <= 2 else {\n        return nil\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i\
    \ in 2..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in\
    \ lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in\
    \ lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for element in lst {\n        if element\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ element\n        } else if element < secondSmallest {\n            secondSmallest\
    \ = element\n        }\n    }\n    return secondSmallest", "    guard lst.count\
    \ > 0 else {\n        return nil\n    }\n\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[0]\n\n    for i in 1..<lst.count {\n        if smallest.isLess(lst[i])\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      }\n    }\n\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    guard lst.count <= 2 else {\n        return nil\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for element\
    \ in lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    var smallest: Int? = nil\n    for el in lst {\n        if smallest == nil ||\
    \ el < smallest {\n            smallest = el\n        }\n    }\n    return smallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in\
    \ lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    var smallest: Int? = nil\n    for x in lst {\n        if smallest == nil ||\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest",
  "    var smallest: Int? = nil\n    for element in lst {\n        if smallest ==\
    \ nil || element < smallest {\n            smallest = element\n        }\n   \
    \ }\n    return smallest", "    guard lst.count > 0 else { return nil }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ <= 2 else {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\n\
    \        else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n\
    \        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n  \
    \  var secondSmallest = lst[0]\n    for element in lst {\n        if element <\
    \ smallest {\n            secondSmallest = smallest\n            smallest = element\n\
    \        } else if element < secondSmallest {\n            secondSmallest = element\n\
    \        }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n     \
    \   return nil\n    }\n    if lst.count > 2 {\n        return lst[1]\n    }\n\
    \    if lst[0] == lst[1] {\n        return nil\n    }\n    if lst[0] < lst[1]\
    \ {\n        return lst[0]\n    }\n    return lst[1]", "    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for element in lst {\n        if element\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ element\n        } else if element < secondSmallest {\n            secondSmallest\
    \ = element\n        }\n    }\n    return secondSmallest", "    var smallest =\
    \ lst[0]\n    for x in lst {\n        if x < smallest {\n            smallest\
    \ = x\n        }\n    }\n    return smallest", "    if lst.count < 2 {\n     \
    \   return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for i in 1..lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    for element in lst {\n        if element\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ element\n        } else if element < secondSmallest {\n            secondSmallest\
    \ = element\n        }\n    }\n    return secondSmallest", "    guard lst.count\
    \ > 0 else {\n        return nil\n    }\n    guard lst.count <= 2 else {\n   \
    \     return nil\n    }\n    guard lst.count >= 1 else {\n        return nil\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index\
    \ in lst.indices {\n        if smallest > lst[index] {\n            secondSmallest\
    \ = smallest\n            smallest = lst[index]\n        }\n    }\n    return\
    \ secondSmallest", "    var smallest = lst[0]\n    for x in lst {\n        if\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest",
  "    var smallest = lst[0]\n    for x in lst {\n        if x < smallest {\n    \
    \        smallest = x\n        }\n    }\n    return smallest", "    var smallest\
    \ = lst[0]\n    for x in lst {\n        if x < smallest {\n            smallest\
    \ = x\n        }\n    }\n    return smallest", "    var smallest = lst[0]\n  \
    \  for x in lst {\n        if x < smallest {\n            smallest = x\n     \
    \   }\n    }\n    return smallest", "    guard lst.count > 0 else { return nil\
    \ }\n    guard lst.count > 1 else { return lst[0] }\n    guard lst.count > 2 else\
    \ { return lst[1] }\n    guard lst.count > 3 else { return lst[2] }\n    guard\
    \ lst.count > 4 else { return lst[3] }\n    guard lst.count > 5 else { return\
    \ lst[4] }\n    guard lst.count > 6 else { return lst[5] }\n    guard lst.count\
    \ > 7 else { return lst[6] }\n    guard lst.count > 8 else { return lst[7] }\n\
    \    guard lst.count > 9 else { return lst[8] }\n    guard lst.count > 10 else\
    \ { return lst[9] }\n    guard lst.count > 11 else { return lst[10] }\n    guard\
    \ lst.count > 12 else { return lst[11] }\n    guard lst.count > 13 else { return\
    \ lst[12] }\n    guard lst.count > 14 else { return lst[13] }\n    guard lst.count\
    \ > 15 else { return lst[14] }\n    guard lst.count > 16 else { return lst[15]\
    \ }\n    guard lst.count > 17 else { return lst[16] }\n    guard lst.count > 18\
    \ else { return lst[17] }\n    guard lst.count > 19 else { return lst[18] }\n\
    \    guard lst.count > 20 else { return lst[19] }\n    guard lst.count > 21 else\
    \ { return lst[20] }\n    guard lst.count > 22 ? lst[21] : nil\n    guard lst.count\
    \ > 23 ? lst[22] : nil\n    guard lst.count > 24 ? lst[23] : nil\n    guard lst.count\
    \ > 25 ? lst[24] : nil\n    guard lst.count > 26 ? lst[25] : nil\n    guard lst.count\
    \ > 27 ? lst[26] : nil\n    guard lst.count > 28 ? lst[27] : nil\n    guard lst.count\
    \ > 29 ? lst[28] : nil\n    guard lst.count > 30 ? lst[29] : nil\n    guard lst.count\
    \ > 31 ? lst[30] : nil\n    guard lst.count > 32 ? lst[31] : nil\n    guard lst.count\
    \ > 33 ? lst[32] : nil\n    gu", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for el in lst {\n        if el < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = el\n        } else if el < secondSmallest\
    \ {\n            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    guard lst.count > 0\
    \ else {\n        return nil\n    }\n    guard lst.count <= 2 else {\n       \
    \ return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n\
    \    for i in 1..lst.count - 1 {\n        if lst[i] < smallest {\n           \
    \ secondSmallest = smallest\n            smallest = lst[i]\n        } else if\
    \ lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n        }\n\
    \    }\n    return secondSmallest", "    if lst.count < 2 {\n        return nil\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for element\
    \ in lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    var smallest: Int? = nil\n    for x in lst {\n        if smallest == nil ||\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest",
  "    var smallest: Int? = nil\n    for x in lst {\n        if smallest == nil ||\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest",
  "    var smallest: Int? = nil\n    for element in lst {\n        if smallest ==\
    \ nil || element < smallest {\n            smallest = element\n        }\n   \
    \ }\n    return smallest", "    if lst.count < 2 {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    for x in lst {\n        if x < smallest {\n  \
    \          smallest = x\n        }\n    }\n    return smallest", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n        if el\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ el\n        } else if el < secondSmallest {\n            secondSmallest = el\n\
    \        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n  \
    \  var smallestIndex = -1\n    for index in 0..<lst.count {\n        if smallestIndex\
    \ == -1 || smallestIndex > lst[index] {\n            smallestIndex = index\n \
    \           smallest = lst[index]\n        }\n    }\n    return smallest", " \
    \   guard lst.count > 0 else {\n        return nil\n    }\n\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n   \
    \     if lst[i] < smallest {\n            secondSmallest = smallest\n        \
    \    smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n        \
    \    secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest", " \
    \   guard lst.count > 0 else {\n        return nil\n    }\n    var smallest =\
    \ lst[0]\n    var smallestIndex = lst.startIndex\n    for i in lst.startIndex..<lst.endIndex\
    \ {\n        if lst[i] < smallest {\n            smallest = lst[i]\n         \
    \   smallestIndex = i\n        }\n    }\n    return smallest", "    var smallest\
    \ = lst[0]\n    for x in lst {\n        if x < smallest {\n            smallest\
    \ = x\n        }\n    }\n    return smallest"]
stop_tokens:
- "\n}"
