name: HumanEval_2_truncate_number
language: swift
prompt: "\n/// Given a positive floating point number, it can be decomposed into\n\
  /// and integer part (largest integer smaller than given number) and decimals\n\
  /// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n\
  /// >>> truncate_number(3.5)\n/// 0.5\nfunc truncate_number(number: Double) -> Double\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(truncate_number(number: 3.5) == 0.5)\nassert(truncate_number(number:\
  \ 1.25) == 0.25)\nassert(truncate_number(number: 123.0) == 0.0)"
completions: ['    return Double(number).truncatingRemainder(dividingBy: 1)', "  \
    \  if number < 0 {\n        return -truncate_number(-number)\n    }\n    let wholeNumber\
    \ = floor(number)\n    let decimalPart = number - wholeNumber\n    return wholeNumber\
    \ + decimalPart", '    return truncate_number(number, 1)', "    let integerPart\
    \ = Int(number)\n    let decimalPart = number - Double(integerPart)\n    return\
    \ Double(integerPart) + decimalPart", "    let intPart = (number as NSNumber).doubleValue\n\
    \    let decimalPart = (number - intPart).truncatingRemainder(dividingBy: 1)\n\
    \    return intPart + decimalPart", "    let decimalPart = number % 1\n    let\
    \ integerPart = floor(number)\n    return integerPart + decimalPart", "    let\
    \ (integer, decimal) = Double(number).truncatingRemainder(dividingBy: 1)\n   \
    \ return Double(integer) + decimal", "    let decimalPart = number % 1\n    let\
    \ integerPart = floor(number)\n    return integerPart + decimalPart", "    if\
    \ number < 1.0 {\n        return number\n    }\n    let remainder = number % 1.0\n\
    \    return number - remainder", "    if number < 0 {\n        return -truncate_number(-number)\n\
    \    }\n    return trunc(number)", "    let decimalPart = floor(log10(number)\
    \ + 1)\n    let integerPart = floor(number / pow(10.0, Double(decimalPart)))\n\
    \    return Double(integerPart) * pow(10.0, Double(decimalPart))", "    let result\
    \ = Double(trunc(number))\n    if number < result {\n        return result - 1.0\n\
    \    }\n    return result", "    let decimalPart = number % 1\n    let integerPart\
    \ = floor(number)\n    return integerPart + decimalPart", "    let (integer, decimal)\
    \ = Double(number).truncatingRemainder(dividingBy: 1)\n    return Double(integer)\
    \ + decimal", "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart * pow(10, Double(log10(Double(number)))) + decimalPart",
  '    return Double(number).truncatingRemainder(dividingBy: 1)', "    let integerPart\
    \ = Int(round(number))\n    let decimalPart = number - Double(integerPart)\n \
    \   return Double(integerPart) + decimalPart", "    let (integer, decimal) = Double(number).truncatingRemainder(dividingBy:\
    \ 1)\n    return Double(integer) + decimal", "    let intPart = Int(round(number))\n\
    \    let decimalPart = number - intPart\n    return intPart + decimalPart", " \
    \   let (integer, decimal) = Double(number).truncatingRemainder(dividingBy: 1)\n\
    \    return Double(integer) + decimal", "    let integerPart = Int(number)\n \
    \   let decimalPart = number - Double(integerPart)\n    return Double(integerPart)\
    \ / Double(10) * Double(10) + decimalPart", "    let result = Double(trunc(number))\n\
    \    return result / Double(10)", "    let decimalPart = number % 1\n    let integerPart\
    \ = floor(number)\n    return integerPart + decimalPart", '    return Double(trunc(number))',
  "    if number < 0.0 {\n        return -truncate_number(-number)\n    }\n    return\
    \ truncate_number(number)", '    return Double(number).truncatingRemainder(dividingBy:
    1)', "    let decimalPart = floor(log10(number))\n    let integerPart = floor(number\
    \ / pow(10.0, Double(decimalPart)))\n    return Double(integerPart) / pow(10.0,\
    \ Double(decimalPart))", "    let fraction = number % 1\n    let integerPart =\
    \ floor(number)\n    return integerPart * pow(10, Double(Double(Int(log10(abs(number)))\
    \ + 1))) - fraction", '    return truncate_number(number, 1)', "    let intPart\
    \ = Int(number)\n    let decimalPart = number - Double(intPart)\n    return Double(intPart)\
    \ + decimalPart", '    return Double(number).truncatingRemainder(dividingBy: 1)',
  "    let integerPart = Int(number)\n    let decimalPart = number - Double(integerPart)\n\
    \    return Double(integerPart) + decimalPart", "    let (integer, decimals) =\
    \ truncate_number_helper(number)\n    return Double(integer) + Double(decimals)",
  "    let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + (decimalPart < 0.5 ? 0 : 1)", '    return truncate_number(number,
    1)', "    let decimalPart = number % 1\n    let integerPart = floor(number * Double(10).pow(Double(10).ceil(log10(number))))\n\
    \    return integerPart + decimalPart", "    let intPart = (number as NSNumber).doubleValue\n\
    \    let decimalPart = number - intPart\n    return intPart + decimalPart", '    return
    Double(trunc(number))', "    let decimalPart = number % 1\n    let integerPart\
    \ = floor(number) - 1\n    return integerPart + decimalPart", "    let (integer,\
    \ decimals) = Double(trunc(number)).asDecimal()\n    return Double(integer) +\
    \ Double(decimals)", "    let decimalPart = number % 1\n    let integerPart =\
    \ floor(number)\n    return integerPart + decimalPart", "    let (integer, decimal)\
    \ = Double(trunc(number)).asInt()\n    return Double(integer) / Double(10) + Double(decimal)\
    \ / Double(10)", "    let fraction = number % 1\n    return number - fraction",
  '    return Double(number).truncatingRemainder(dividingBy: 1)', "    let decimalPart\
    \ = floor(log10(number))\n    let integerPart = floor(number / pow(10.0, Double(decimalPart)))\n\
    \    return Double(integerPart) / pow(10.0, Double(decimalPart))", "    let fraction\
    \ = number % 1\n    return number - fraction", "    let (integer, decimal) = Double(number).truncatingRemainder(dividingBy:\
    \ 1)\n    return Double(integer) + decimal", "    let decimalPart = number % 1\n\
    \    let integerPart = floor(number)\n    return integerPart + decimalPart", " \
    \   let (integer, decimals) = truncate_number_helper(number)\n    return Double(integer)\
    \ + Double(decimals)", "    let fraction = number % 1\n    return Double(number)\
    \ - fraction", "    let fraction = number % 1\n    return number - fraction",
  "    if number < 0 {\n        return -truncate_number(-number)\n    }\n    var result\
    \ = number\n    if number < 1.0 {\n        var power = 1\n        var decimals\
    \ = 0\n        while number >= 1.0 {\n            number /= 10\n            power\
    \ *= 10\n            decimals++\n        }\n        result = Double(number) /\
    \ Double(power)\n    }\n    return result - Double(decimals)", "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number)\n    return integerPart +\
    \ (decimalPart < 0.5 ? 0 : 1)", "    let (integer, decimal) = Double(number).truncatingRemainder(dividingBy:\
    \ 1)\n    return Double(integer) + decimal", "    let (integer, decimal) = Double.trunc(number).decompose()\n\
    \    return decimal / 10", "    let decimalPart = number % 1\n    let integerPart\
    \ = floor(number)\n    return integerPart + (decimalPart < 0.5 ? 0 : 1)", "  \
    \  let result = Double(number)\n    if number < 0 {\n        result = -result\n\
    \    }\n    return result", "    let (integer, decimals) = truncate_number_helper(number)\n\
    \    return Double(integer) + Double(decimals)", "    if number < 0 {\n      \
    \  return -truncate_number(-number)\n    }\n    if number == 0.0 {\n        return\
    \ 0.0\n    }\n    if number < 1.0 {\n        return number\n    }\n    var decimalPart\
    \ = floor(log10(number))\n    if decimalPart < 0 {\n        decimalPart += 1.0\n\
    \    }\n    return number / pow(10.0, Double(decimalPart))", "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number)\n    return integerPart +\
    \ decimalPart", '    return Double(trunc(number))', "    let (integer, decimals)\
    \ = Double(trunc(number)).rounded(.towardZero)\n    return Double(integer) + Double(decimals)",
  "    let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + decimalPart", "    let fraction = number % 1\n    return number\
    \ - fraction", '    return Double(number).truncatingRemainder(dividingBy: 1)',
  "    let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + decimalPart", "    let fraction = number % 1\n    let whole =\
    \ floor(number)\n    return whole + fraction", "    let fraction = number % 1\n\
    \    return number - fraction", "    let decimalPart = floor(log10(number))\n\
    \    let integerPart = floor(number / pow(10.0, Double(decimalPart)))\n    return\
    \ Double(integerPart) * pow(10.0, Double(decimalPart))", "    let fraction = number\
    \ % 1\n    let whole = floor(number)\n    return whole + fraction", "    let (integer,\
    \ decimal) = truncate_number_helper(number)\n    return Double(integer) + Double(decimal)",
  '    return Double(number).truncatingRemainder(dividingBy: 1)', '    return Double(trunc(number))',
  "    let decimalPart = number % 1\n    let integerPart = floor(number).rounded(.towardZero)\n\
    \    return integerPart + decimalPart", "    let decimalPart = number % 1\n  \
    \  let integerPart = floor(number)\n    return integerPart * pow(10, Double(Double(Int64(decimalPart)).bitWidth\
    \ / Double(2)))", "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart * pow(10, Double(log10(Double(number)))) + decimalPart",
  "    if number < 0 {\n        return -truncate_number(-number)\n    }\n    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number)\n    return integerPart +\
    \ decimalPart", "    let result = Double(number)\n    let decimalPart = result\
    \ % 1\n    let integerPart = floor(result)\n    return integerPart + decimalPart",
  "    let (integer, decimal) = Double(number).truncatingRemainder(dividingBy: 1)\n\
    \    return Double(integer) + decimal", "    let fraction = number % 1\n    return\
    \ number - fraction", "    let fraction = number % 1\n    return number - fraction",
  "    let (integer, decimal) = Double(trunc(number)).rounded(.towardZero)\n    return\
    \ Double(integer) + decimal", "    let (integer, decimal) = Double(number).truncatingRemainder(dividingBy:\
    \ 1)\n    return Double(integer) + decimal", "    let result = Double(number)\n\
    \    if result < number {\n        return result - Double(trunc(result))\n   \
    \ }\n    return result", "    let decimalPart = number % 1\n    let integerPart\
    \ = floor(number)\n    return integerPart + decimalPart", "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number - decimalPart)\n    return\
    \ integerPart + decimalPart", "    let (integer, decimals) = truncate_number_helper(number)\n\
    \    return Double(integer) + Double(decimals)", "    let (integer, decimals)\
    \ = Double.trunc(number)\n    return Double(integer) / Double(10) * Double(10)\
    \ + Double(decimals)", "    let intPart = (number as NSNumber).doubleValue\n \
    \   let decimalPart = number - intPart\n    return decimalPart", "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number)\n    return integerPart +\
    \ decimalPart", "    let fraction = number % 1\n    return Double(number) - fraction",
  "    let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + decimalPart", "    let intPart = Int(number)\n    let decimalPart\
    \ = number - Double(intPart)\n    return Double(intPart) + decimalPart", "   \
    \ let (integer, decimal) = Double.trunc(number).rounded(.towardZero)\n    return\
    \ Double(integer) + Double(decimal)", "    if number < 0 {\n        return -truncate_number(-number)\n\
    \    }\n    return truncate_number(number)", '    return Double(number).truncatingRemainder(dividingBy:
    1)', "    if number < 0 {\n        return -truncate_number(-number)\n    }\n \
    \   return trunc(number)", "    let fraction = number % 1\n    return number -\
    \ fraction", "    let fraction = number % 1\n    return number - fraction", " \
    \   let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + decimalPart", "    let decimalPart = number % 1\n    let integerPart\
    \ = floor(number)\n    return integerPart + decimalPart", "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number)\n    return integerPart +\
    \ decimalPart", "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + decimalPart", "    let intPart = Int(number)\n    let\
    \ decimalPart = number - Double(intPart)\n    return Double(intPart) + decimalPart",
  "    if number < 0 {\n        return -truncate_number(-number)\n    }\n    var decimalPart\
    \ = number\n    var integerPart = number\n    if number < 1.0 {\n        decimalPart\
    \ *= 10\n        integerPart /= 10\n    }\n    return Double(integerPart) + Double(decimalPart)",
  "    let decimalPart = Double(number).truncatingRemainder(dividingBy: 1)\n    return\
    \ Double(number) - decimalPart", "    let fraction = number % 1\n    return number\
    \ - fraction", '    return Double(number).truncatingRemainder(dividingBy: 1)',
  "    let fraction = number - truncate_number(truncate_number(number))\n    return\
    \ truncate_number(fraction)", "    let fraction = number % 1\n    let integerPart\
    \ = floor(number)\n    return integerPart * pow(10, Double(trunc(log10(number)))\
    \ + 1)\n        / pow(10, Double(trunc(log10(number))) + 1)\n        + fraction",
  "    if number < 0 {\n        return -truncate_number(-number)\n    }\n    var decimalPart\
    \ = number\n    var integerPart = Double(trunc(number))\n    if number < 1 {\n\
    \        integerPart = -integerPart\n    }\n    return decimalPart", "    let\
    \ decimalPart = number % 1\n    let integerPart = floor(number)\n    return integerPart\
    \ + decimalPart", "    let (integer, decimals) = truncate_number_helper(number)\n\
    \    return Double(integer) + Double(decimals)", "    let (integer, decimal) =\
    \ Double(number).truncatingRemainder(dividingBy: 1)\n    return Double(integer)\
    \ + decimal", '    return Double(trunc(number))', "    let decimalPart = number\
    \ % 1\n    let integerPart = floor(number)\n    return integerPart + decimalPart",
  "    let result = Double(trunc(number))\n    if result < number {\n        return\
    \ result + 1.0\n    }\n    return result", "    let decimalPart = floor(log10(number))\n\
    \    let integerPart = floor(number / pow(10.0, Double(decimalPart)))\n    return\
    \ Double(integerPart) * pow(10.0, Double(decimalPart))", "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number)\n    return integerPart +\
    \ (decimalPart * 1)", "    let (integer, decimal) = Double(trunc(number)).asInt()\n\
    \    return Double(integer) + Double(decimal) / Double(10)", "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number)\n    return integerPart *\
    \ pow(10, Double(log10(Double(number)))) + decimalPart", "    let intPart = (number\
    \ as NSNumber).doubleValue\n    let decimalPart = (number - intPart).truncatingRemainder(dividingBy:\
    \ 1)\n    return intPart + decimalPart", "    let result = Double(trunc(number))\n\
    \    return result / Double(10).pow(Double(Double(trunc(log10(number)))))", '    return
    Double(number).truncatingRemainder(dividingBy: 1)', "    let decimalPart = number\
    \ % 1\n    let integerPart = floor(number)\n    return integerPart + decimalPart",
  "    let decimalPart = number % 1\n    let integerPart = floor(number) - 1\n   \
    \ return integerPart + decimalPart", "    let fraction = number % 1\n    return\
    \ Double(number) - fraction", "    let fraction = number % 1\n    return number\
    \ - fraction", "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + (decimalPart * 1)", "    let decimalPart = number %\
    \ 1\n    let integerPart = floor(number)\n    return integerPart + decimalPart",
  "    let fraction = number % 1\n    return number - fraction", "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number)\n    return integerPart +\
    \ decimalPart", "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + (decimalPart * 1)", '    return Double(number).truncatingRemainder(dividingBy:
    1)', '    return Double(trunc(number))', "    let fraction = number % 1\n    return\
    \ number - fraction", "    let decimalPart = number % 1\n    let integerPart =\
    \ floor(number)\n    return integerPart + decimalPart", "    let decimalPart =\
    \ number % 1\n    let integerPart = floor(number)\n    return integerPart + decimalPart",
  "    let fraction = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + fraction", "    let fraction = number % 1\n    return number -\
    \ fraction", "    let fraction = number % 1\n    return number - fraction", " \
    \   let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart * pow(10, Double(log10(Double(number)))) + decimalPart", "    let\
    \ fraction = number % 1\n    let whole = floor(number)\n    return whole + fraction",
  "    let (integer, decimals) = truncate_number_with_precision(number)\n    return\
    \ Double(integer) + Double(decimals)", "    let decimalPart = number % 1\n   \
    \ let integerPart = floor(number)\n    return integerPart + decimalPart", "  \
    \  let decimalPart = number % 1\n    let integerPart = floor(number) - 1\n   \
    \ return integerPart + decimalPart", '    return Double(number).truncatingRemainder(dividingBy:
    1.0)', '    return Double(number).truncatingRemainder(dividingBy: 1)', "    let\
    \ result = Double(trunc(number))\n    if result < number {\n        return result\
    \ + 1.0\n    }\n    return result", "    let decimalPart = number % 1\n    let\
    \ integerPart = floor(number)\n    return integerPart + decimalPart", "    let\
    \ decimalPart = number % 1\n    let integerPart = floor(number)\n    return integerPart\
    \ + (decimalPart * Double(pow(10, Double(log10(abs(number)))))", "    let (integer,\
    \ decimal) = truncate_number_with_precision(number, precision: Double.bitWidth)\n\
    \    return Double(integer) + Double(decimal)", "    if number < 0 {\n       \
    \ return -truncate_number(-number)\n    }\n    return truncate_number(number)",
  "    let decimalPart = floor(number * pow(10, Double(log10(number) + 1.0)))\n  \
    \  let integerPart = number - decimalPart\n    return integerPart", "    let decimalPart\
    \ = Double(number).truncatingRemainder(dividingBy: 1)\n    return Double(number)\
    \ - decimalPart", "    let decimalPart = floor(log10(number) + 1)\n    let integerPart\
    \ = number / pow(10.0, Double(decimalPart))\n    return integerPart", "    let\
    \ decimalPart = number % 1\n    let integerPart = floor(number)\n    return integerPart\
    \ + decimalPart", "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + decimalPart", "    let fraction = number % 1\n    return\
    \ number - fraction", "    let fraction = number % 1\n    return number - fraction",
  "    let decimalPart = number % 1\n    let integerPart = floor(number - decimalPart)\n\
    \    return integerPart + decimalPart", "    let intPart = Int(number)\n    let\
    \ decimalPart = number - Double(intPart)\n    return Double(intPart) + decimalPart",
  "    let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + decimalPart", "    let intPart = Int(number)\n    let decimalPart\
    \ = number - Double(intPart)\n    return Double(intPart) + decimalPart", "   \
    \ if number < 0 {\n        return -truncate_number(-number)\n    }\n    return\
    \ truncate_number(number)", "    let (integer, decimal) = Double(number).truncatingRemainder(dividingBy:\
    \ 1)\n    return Double(integer) + decimal", "    let result = Double(trunc(number))\n\
    \    if result < number {\n        return result + 1\n    }\n    return result",
  "    if number < 0 {\n        return -truncate_number(-number)\n    }\n    var result\
    \ = Double(number)\n    if number < 1.0 {\n        return result - Double(trunc(number))\n\
    \    }\n    if number < 1.0 {\n        return result - Double(floor(number))\n\
    \    }\n    return result - Double(ceil(number))", "    let decimalPart = floor(log10(number))\n\
    \    let integerPart = floor(log10(number))\n    return Double(number).truncatingRemainder(dividingBy:\
    \ pow(10.0, Double(integerPart)))", "    let decimalPart = number % 1\n    let\
    \ integerPart = floor(number - decimalPart)\n    return integerPart + decimalPart",
  "    let fraction = number % 1\n    let whole = number - fraction\n    return whole\
    \ < 0.5 ? whole + 1 : whole", "    let decimalPart = floor(log10(number))\n  \
    \  let integerPart = number / pow(10.0, Double(decimalPart))\n    return integerPart",
  "    let intPart = (number as NSNumber).doubleValue\n    let decimalPart = number\
    \ - intPart\n    return intPart + decimalPart", '    return Double(number).truncatingRemainder(dividingBy:
    1.0)', "    let result = Double(number).truncatingRemainder(dividingBy: 1.0)\n\
    \    return result < 0.0 ? result + 1.0 : result", '    return floor(number *
    10) / 10', "    let decimalPart = number % 1\n    let integerPart = floor(number).rounded(.towardZero)\n\
    \    return integerPart + decimalPart", '    return Double(number).truncatingRemainder(dividingBy:
    1)', '    return floor(number * pow(10, Double(floor(log10(number)))))', "   \
    \ let (integer, decimal) = Double(number).truncatingRemainder(dividingBy: 1)\n\
    \    return Double(integer) + decimal", "    let fraction = number % 1\n    return\
    \ Double(number) - fraction", "    let decimalPart = number % 1\n    let integerPart\
    \ = floor(number)\n    return integerPart + decimalPart", "    let (integer, decimals)\
    \ = truncate_number_helper(number)\n    return Double(integer) + Double(decimals)",
  '    return Double(number).truncatingRemainder(dividingBy: 1)', "    let fraction\
    \ = number % 1\n    return number - fraction", '    return Double(trunc(number))',
  "    if number < 0 {\n        return -truncate_number(-number)\n    }\n    return\
    \ truncate_number(number)", "    let decimalPart = number % 1\n    let integerPart\
    \ = floor(number)\n    return integerPart + (decimalPart * 1)", "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number)\n    return integerPart +\
    \ decimalPart", "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + decimalPart", "    let decimalPart = number % 1\n  \
    \  let integerPart = floor(number)\n    return integerPart + decimalPart", '    return
    Double(trunc(number))', "    let fraction = number % 1\n    return number - fraction",
  "    let (integer, decimal) = truncate_number_helper(number)\n    return Double(integer)\
    \ + Double(decimal)", '    return Double(trunc(number))', "    let (integer, decimal)\
    \ = Double(trunc(number)).rounded(.towardZero)\n    return Double(integer) + decimal",
  "    let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + decimalPart", "    let (integer, decimal) = Double(number).truncatingRemainder(dividingBy:\
    \ 1)\n    return Double(integer) + decimal", "    let decimalPart = number % 1\n\
    \    let integerPart = floor(number)\n    return integerPart * pow(10, Double(log10(Double(number))))\
    \ + decimalPart", "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + decimalPart"]
stop_tokens:
- "\n}"
