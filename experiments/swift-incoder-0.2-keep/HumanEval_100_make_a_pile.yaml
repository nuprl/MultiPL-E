name: HumanEval_100_make_a_pile
language: swift
prompt: "\n/// Given a positive integer n, you have to make a pile of n levels of\
  \ stones.\n/// The first level has n stones.\n/// The number of stones in the next\
  \ level is:\n/// - the next odd number if n is odd.\n/// - the next even number\
  \ if n is even.\n/// Return the number of stones in each level in a list, where\
  \ element at index\n/// i represents the number of stones in the level (i+1).\n\
  /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int) ->\
  \ [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
  \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
  \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
  \ 18, 20, 22])"
completions: ["    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    } else {\n        var nextEven = n / 2\n        var nextOdd = nextEven /\
    \ 2\n        result.append(nextEven)\n        result.append(nextOdd)\n    }\n\
    \    return result", "    var pile = [Int]()\n    var level = 0\n    var stones\
    \ = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while\
    \ stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n  \
    \          stones += 2\n        } else {\n            pile[level] = stones\n \
    \           stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var result = [Int]()\n    var currentLevel = 0\n    var nextLevel = n / 2\n\
    \    if n % 2 == 0 {\n        nextLevel = nextLevel + 1\n    }\n    for _ in 0..<nextLevel\
    \ {\n        result.append(nextLevel)\n        currentLevel = currentLevel + 1\n\
    \        nextLevel = nextLevel / 2\n        if nextLevel % 2 == 0 {\n        \
    \    nextLevel = nextLevel + 1\n        }\n    }\n    return result", "    var\
    \ stones = [Int]()\n    if n % 2 == 1 {\n        stones.append(n)\n    } else\
    \ {\n        var even = make_a_pile(n/2)\n        var odd = make_a_pile(n/2)\n\
    \        stones.append(odd.reduce(0, +))\n        stones.append(even.reduce(0,\
    \ +))\n    }\n    return stones", "    var stones = [Int]()\n    var levels =\
    \ [Int]()\n    var level = 0\n    var stone = 0\n    while stone < n {\n     \
    \   stone = stone + 2\n        stones.append(stone)\n        if stone % 2 == 0\
    \ {\n            levels.append(stone)\n        }\n        level = level + 1\n\
    \    }\n    return levels", "    var stones = [0]\n    var level = 1\n    var\
    \ nextOdd = n\n    var nextEven = n\n    while nextEven > nextOdd {\n        nextOdd\
    \ = nextOdd * 2\n        nextEven = nextEven / 2\n        stones.append(nextOdd)\n\
    \        stones.append(nextEven)\n        level++\n    }\n    return stones",
  "    var pile = [Int]()\n    if n % 2 == 1 {\n        pile = pile.append(n)\n  \
    \  }\n    for _ in 1...n {\n        pile = pile.append(n % 2 == 0 ? n : n + 2)\n\
    \    }\n    return pile", "    var pile = [Int]()\n    pile = append(pile, n /\
    \ 2)\n    if n % 2 == 0 {\n        pile = append(pile, n / 2)\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while\
    \ stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n  \
    \          stones += 2\n        } else {\n            pile[level] = stones\n \
    \           stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var stones = [0]\n    var level = 1\n    while level < n {\n        stones.append(level\
    \ + 1)\n        if n % 2 == 0 {\n            stones.append(stones[level] + 1)\n\
    \        } else {\n            stones.append(stones[level])\n        }\n     \
    \   level++\n    }\n    return stones", "    var pile: [Int] = []\n    var level\
    \ = 0\n    var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n \
    \           pile.append(stones)\n            stones += 2\n        } else {\n \
    \           pile.append(stones)\n            stones += 3\n        }\n        level++\n\
    \    }\n    return pile", "    var pile = [Int]()\n    var level = 0\n    var\
    \ stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var result = [Int]()\n    var level = 0\n    var stones = n\n  \
    \  while stones > 0 {\n        if stones % 2 == 0 {\n            result.append(stones)\n\
    \            stones /= 2\n        } else {\n            result.append(stones)\n\
    \            stones /= 2\n            stones /= 2\n        }\n        level++\n\
    \    }\n    return result", "    var result = [Int]()\n    var level = 0\n   \
    \ var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n          \
    \  stones += 2\n        } else {\n            stones += 1\n        }\n       \
    \ result[level] = stones\n        n /= 2\n        level++\n    }\n    return result",
  "    var pile: [Int] = []\n    var level = 1\n    while n >= level {\n        pile.append(level)\n\
    \        level += (n % 2 == 0) ? 1 : 2\n        n = n / 2\n    }\n    pile.append(n)\n\
    \    return pile", "    var pile = [Int]()\n    if n % 2 == 0 {\n        pile\
    \ = pile.append(n)\n    } else {\n        pile = pile.append(n).append(n).append(n)\n\
    \    }\n    return pile", "    var pile = [Int]()\n    if n % 2 == 0 {\n     \
    \   pile = pile.append(n)\n    } else {\n        var even = n + 2\n        var\
    \ odd = n + 1\n        while even > 0 {\n            pile = pile.append(even)\n\
    \            even -= odd\n            odd += 2\n        }\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 1\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile = append(pile, stones)\n  \
    \          stones += 2\n        } else {\n            pile = append(pile, stones)\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n    }\n\
    \    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n / 2)\n        }\n        n = n\
    \ / 2\n    }\n    return result"]
stop_tokens:
- "\n}"
