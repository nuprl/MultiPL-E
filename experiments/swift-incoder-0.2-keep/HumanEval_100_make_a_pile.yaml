name: HumanEval_100_make_a_pile
language: swift
prompt: "\n/// Given a positive integer n, you have to make a pile of n levels of\
  \ stones.\n/// The first level has n stones.\n/// The number of stones in the next\
  \ level is:\n/// - the next odd number if n is odd.\n/// - the next even number\
  \ if n is even.\n/// Return the number of stones in each level in a list, where\
  \ element at index\n/// i represents the number of stones in the level (i+1).\n\
  /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int) ->\
  \ [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
  \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
  \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
  \ 18, 20, 22])"
completions: ["    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    } else {\n        var nextEven = n / 2\n        var nextOdd = nextEven /\
    \ 2\n        result.append(nextEven)\n        result.append(nextOdd)\n    }\n\
    \    return result", "    var pile = [Int]()\n    var level = 0\n    var stones\
    \ = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while\
    \ stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n  \
    \          stones += 2\n        } else {\n            pile[level] = stones\n \
    \           stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var result = [Int]()\n    var currentLevel = 0\n    var nextLevel = n / 2\n\
    \    if n % 2 == 0 {\n        nextLevel = nextLevel + 1\n    }\n    for _ in 0..<nextLevel\
    \ {\n        result.append(nextLevel)\n        currentLevel = currentLevel + 1\n\
    \        nextLevel = nextLevel / 2\n        if nextLevel % 2 == 0 {\n        \
    \    nextLevel = nextLevel + 1\n        }\n    }\n    return result", "    var\
    \ stones = [Int]()\n    if n % 2 == 1 {\n        stones.append(n)\n    } else\
    \ {\n        var even = make_a_pile(n/2)\n        var odd = make_a_pile(n/2)\n\
    \        stones.append(odd.reduce(0, +))\n        stones.append(even.reduce(0,\
    \ +))\n    }\n    return stones", "    var stones = [Int]()\n    var levels =\
    \ [Int]()\n    var level = 0\n    var stone = 0\n    while stone < n {\n     \
    \   stone = stone + 2\n        stones.append(stone)\n        if stone % 2 == 0\
    \ {\n            levels.append(stone)\n        }\n        level = level + 1\n\
    \    }\n    return levels", "    var stones = [0]\n    var level = 1\n    var\
    \ nextOdd = n\n    var nextEven = n\n    while nextEven > nextOdd {\n        nextOdd\
    \ = nextOdd * 2\n        nextEven = nextEven / 2\n        stones.append(nextOdd)\n\
    \        stones.append(nextEven)\n        level++\n    }\n    return stones",
  "    var pile = [Int]()\n    if n % 2 == 1 {\n        pile = pile.append(n)\n  \
    \  }\n    for _ in 1...n {\n        pile = pile.append(n % 2 == 0 ? n : n + 2)\n\
    \    }\n    return pile", "    var pile = [Int]()\n    pile = append(pile, n /\
    \ 2)\n    if n % 2 == 0 {\n        pile = append(pile, n / 2)\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while\
    \ stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n  \
    \          stones += 2\n        } else {\n            pile[level] = stones\n \
    \           stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var stones = [0]\n    var level = 1\n    while level < n {\n        stones.append(level\
    \ + 1)\n        if n % 2 == 0 {\n            stones.append(stones[level] + 1)\n\
    \        } else {\n            stones.append(stones[level])\n        }\n     \
    \   level++\n    }\n    return stones", "    var pile: [Int] = []\n    var level\
    \ = 0\n    var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n \
    \           pile.append(stones)\n            stones += 2\n        } else {\n \
    \           pile.append(stones)\n            stones += 3\n        }\n        level++\n\
    \    }\n    return pile", "    var pile = [Int]()\n    var level = 0\n    var\
    \ stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var result = [Int]()\n    var level = 0\n    var stones = n\n  \
    \  while stones > 0 {\n        if stones % 2 == 0 {\n            result.append(stones)\n\
    \            stones /= 2\n        } else {\n            result.append(stones)\n\
    \            stones /= 2\n            stones /= 2\n        }\n        level++\n\
    \    }\n    return result", "    var result = [Int]()\n    var level = 0\n   \
    \ var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n          \
    \  stones += 2\n        } else {\n            stones += 1\n        }\n       \
    \ result[level] = stones\n        n /= 2\n        level++\n    }\n    return result",
  "    var pile: [Int] = []\n    var level = 1\n    while n >= level {\n        pile.append(level)\n\
    \        level += (n % 2 == 0) ? 1 : 2\n        n = n / 2\n    }\n    pile.append(n)\n\
    \    return pile", "    var pile = [Int]()\n    if n % 2 == 0 {\n        pile\
    \ = pile.append(n)\n    } else {\n        pile = pile.append(n).append(n).append(n)\n\
    \    }\n    return pile", "    var pile = [Int]()\n    if n % 2 == 0 {\n     \
    \   pile = pile.append(n)\n    } else {\n        var even = n + 2\n        var\
    \ odd = n + 1\n        while even > 0 {\n            pile = pile.append(even)\n\
    \            even -= odd\n            odd += 2\n        }\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 1\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile = append(pile, stones)\n  \
    \          stones += 2\n        } else {\n            pile = append(pile, stones)\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n    }\n\
    \    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n / 2)\n        }\n        n = n\
    \ / 2\n    }\n    return result", "    var pile = [Int]()\n    var level = 0\n\
    \    var stones = n\n\n    while stones > 0 {\n        if stones % 2 == 0 {\n\
    \            pile[level] = stones\n            stones /= 2\n        } else {\n\
    \            pile[level] = stones\n            stones /= 2\n            stones\
    \ /= 2\n        }\n        level++\n    }\n\n    return pile", "    var pile:\
    \ [Int] = []\n    var level = 1\n    var stones = 0\n    while stones < n {\n\
    \        if n % 2 == 0 {\n            pile.append(stones)\n            stones\
    \ += 2\n        } else {\n            pile.append(stones)\n            stones\
    \ += 3\n        }\n        level++\n    }\n    return pile", "    var result =\
    \ [Int]()\n    var levels = [Int]()\n    var currentLevel = Int(n)\n    var currentLevelCount\
    \ = Int(n)\n    var currentLevelIndex = 0\n    var currentLevelCountIndex = 0\n\
    \    while currentLevelIndex < currentLevel {\n        if n % 2 == 0 {\n     \
    \       levels.append(currentLevelCount)\n            currentLevelCount += 2\n\
    \        } else {\n            levels.append(currentLevelCount)\n            currentLevelCount\
    \ += 3\n        }\n        currentLevelIndex += 1\n        currentLevelCountIndex\
    \ += 1\n    }\n    for level in levels {\n        result.append(level)\n    }\n\
    \    return result", "    var result = [Int]()\n    if n % 2 == 1 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n        n = n / 2\n    }\n    return result", "    var pile: [Int]\
    \ = []\n    var level = 1\n    var stones = n\n    while stones > 0 {\n      \
    \  if stones % 2 == 1 {\n            pile.append(stones)\n            stones =\
    \ stones / 2\n        } else {\n            pile.append(stones)\n            stones\
    \ = stones / 2\n            pile.append(stones)\n            stones = stones /\
    \ 2\n        }\n        level++\n    }\n    return pile", "    var stones = [Int]()\n\
    \    var level = 0\n    while level < n {\n        if n % 2 == 0 {\n         \
    \   stones.append(n)\n            n /= 2\n        } else {\n            n /= 2\n\
    \            stones.append(n)\n        }\n        level++\n    }\n    return stones",
  "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n         \
    \   stones += 2\n        } else {\n            pile[level] = stones\n        \
    \    stones += 3\n        }\n        level++\n    }\n    return pile", "    var\
    \ pile = [Int]()\n    var currentLevel = 0\n    var currentStones = 0\n    for\
    \ _ in 0..<n {\n        if n % 2 == 0 {\n            pile.append(currentStones)\n\
    \            currentStones = 0\n        } else {\n            currentStones +=\
    \ 2\n        }\n        n /= 2\n    }\n    pile.append(currentStones)\n    return\
    \ pile", "    var pile = [Int]()\n    if n % 2 == 1 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            pile = pile.append(n)\n\
    \        }\n        n /= 2\n    }\n    return pile", "    var result = [Int]()\n\
    \    if n % 2 == 1 {\n        result.append(n)\n    }\n    for _ in 1...n {\n\
    \        if n % 2 == 0 {\n            result.append(n)\n        }\n        n =\
    \ n / 2\n    }\n    return result", "    var stones = [0]\n    var level = 0\n\
    \    while stones.count < n {\n        if n % 2 == 0 {\n            stones.append(stones.last!\
    \ + 2)\n        } else {\n            stones.append(stones.last! + 1)\n      \
    \  }\n        n /= 2\n        level++\n    }\n    return stones", "    var pile\
    \ = [Int]()\n    var level = 0\n    var stones = n\n    while stones > 0 {\n \
    \       pile[level] = stones\n        stones -= stones % 2 == 0 ? stones + 1 :\
    \ stones\n        level += 1\n    }\n    return pile", "    var pile = [Int]()\n\
    \    var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile", "    var pile = [Int]()\n   \
    \ var level = 1\n    var stones = n\n    while stones > 0 {\n        if stones\
    \ % 2 == 1 {\n            pile[level] = stones\n            stones /= 2\n    \
    \    } else {\n            pile[level] = stones\n            stones /= 2\n   \
    \         stones += (stones % 2 == 0) ? 1 : 0\n        }\n        level++\n  \
    \  }\n    return pile", "    var result = [Int]()\n    if n % 2 == 1 {\n     \
    \   result.append(n)\n    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n \
    \           result.append(n)\n        }\n        n = n / 2\n    }\n    return\
    \ result", "    var result = [Int]()\n    if n % 2 == 1 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n        n = n / 2\n    }\n    return result", "    var pile = [Int]()\n\
    \    var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile", "    var pile = [Int]()\n   \
    \ var level = 0\n    var stones = 0\n    while stones < n {\n        if n % 2\
    \ == 0 {\n            pile[level] = stones\n            stones += 2\n        }\
    \ else {\n            pile[level] = stones\n            stones += 3\n        }\n\
    \        level++\n    }\n    return pile", "    var pile = [Int]()\n    var level\
    \ = 0\n    var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n \
    \           pile[level] = stones\n            stones += 2\n        } else {\n\
    \            pile[level] = stones\n            stones += 3\n        }\n      \
    \  level++\n    }\n    return pile", "    var result = [Int]()\n    var currentLevel\
    \ = 0\n    var currentLevelStones = 0\n    for _ in 0..<n {\n        if n % 2\
    \ == 1 {\n            currentLevelStones += n\n        } else {\n            currentLevelStones\
    \ += n + 1\n        }\n        result.append(currentLevelStones)\n        currentLevel++\n\
    \    }\n    return result", "    var pile = [Int]()\n    if n % 2 == 0 {\n   \
    \     pile = pile.append(n)\n    } else {\n        pile = pile.append(n).append(n)\n\
    \    }\n    return pile", "    var pile = [Int]()\n    var level = 0\n    var\
    \ stones = 0\n    while stones < n {\n        pile[level] = stones\n        if\
    \ stones % 2 == 0 {\n            stones += 1\n        } else {\n            stones\
    \ += 2\n        }\n        level += 1\n    }\n    return pile", "    var pile\
    \ = [Int]()\n    var level = 0\n    var stones = 0\n    while stones < n {\n \
    \       if n % 2 == 0 {\n            pile[level] = stones\n            stones\
    \ += 2\n        } else {\n            pile[level] = stones\n            stones\
    \ += 3\n        }\n        level++\n    }\n    return pile", "    var pile: [Int]\
    \ = []\n    var level = 0\n    while n != 0 {\n        pile[level] = n\n     \
    \   n -= n % 2 == 0 ? n / 2 : n / 2 + 1\n        level += 1\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n  \
    \      pile.append(n / 2)\n    }\n    return pile", "    var pile = [Int]()\n\
    \    pile = append(pile, n / 2)\n    if n % 2 == 0 {\n        pile = append(pile,\
    \ n / 2)\n    }\n    return pile", "    var pile = [Int]()\n    var i = 0\n  \
    \  while i < n {\n        if i % 2 == 0 {\n            pile.append(n)\n      \
    \  } else {\n            pile.append(2 * n)\n        }\n        i += 1\n    }\n\
    \    return pile", "    var pile = [Int]()\n    var level = 0\n    var stones\
    \ = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while\
    \ stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n  \
    \          stones += 2\n        } else {\n            pile[level] = stones\n \
    \           stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var result = [Int]()\n    var level = 0\n    var stones = n\n    while stones\
    \ > 0 {\n        if stones % 2 == 1 {\n            result.append(stones)\n   \
    \         stones /= 2\n        } else {\n            result.append(stones)\n \
    \           stones /= 2\n            result.append(stones)\n            stones\
    \ /= 2\n        }\n        level++\n    }\n    return result", "    var result\
    \ = [Int]()\n    var currentLevel = [0]\n    var currentLevelCount = 1\n    for\
    \ _ in 0..<n {\n        if n % 2 == 1 {\n            result.append(currentLevelCount)\n\
    \            currentLevelCount += 1\n        } else {\n            result.append(currentLevelCount)\n\
    \            currentLevelCount += 2\n        }\n        n -= 1\n    }\n    return\
    \ result", "    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        pile = pile.append(n).append(n+1)\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n         \
    \   stones += 2\n        } else {\n            pile[level] = stones\n        \
    \    stones += 3\n        }\n        level++\n    }\n    return pile", "    var\
    \ result = [Int]()\n    var currentLevel = [0]\n    var nextLevel = [0]\n    var\
    \ currentStones = 0\n    var nextStones = 0\n    for _ in 0..<n {\n        if\
    \ n % 2 == 0 {\n            currentStones += nextLevel[0]\n            nextStones\
    \ += nextLevel[1]\n            nextLevel = [0]\n        } else {\n           \
    \ currentStones += nextLevel[1]\n            nextStones += nextLevel[0]\n    \
    \        nextLevel = [1]\n        }\n        result.append(currentStones)\n  \
    \      currentLevel = nextLevel\n        currentStones = nextStones\n    }\n \
    \   return result", "    var stones = [1]\n    var levels = [Int]()\n    var level\
    \ = 0\n    while stones.count < n {\n        if n % 2 == 0 {\n            stones.append(stones.last!\
    \ + 2)\n        } else {\n            stones.append(stones.last! + 1)\n      \
    \  }\n        levels.append(stones.last!)\n        stones.removeLast()\n     \
    \   level++\n    }\n    return levels", "    var pile = [Int]()\n    var level\
    \ = 0\n    var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n \
    \           pile[level] = stones\n            stones += 2\n        } else {\n\
    \            pile[level] = stones\n            stones += 3\n        }\n      \
    \  level++\n    }\n    return pile", "    var pile = [Int]()\n    var level =\
    \ 0\n    var stones = n\n    while stones > 0 {\n        if stones % 2 == 1 {\n\
    \            pile[level] = stones\n            stones /= 2\n        } else {\n\
    \            pile[level] = stones\n            stones /= 2\n            pile[level+1]\
    \ = stones\n            stones /= 2\n        }\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while\
    \ stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n  \
    \          stones += 2\n        } else {\n            pile[level] = stones\n \
    \           stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n  \
    \  } else {\n        var even = n / 2\n        var odd = n - even\n        pile\
    \ = pile.append(even)\n        pile = pile.append(odd)\n    }\n    return pile",
  "    var pile: [Int] = []\n    var level = 1\n    var stones = n\n    while stones\
    \ > 0 {\n        if stones % 2 == 0 {\n            pile.append(stones)\n     \
    \       stones /= 2\n        } else {\n            pile.append(stones)\n     \
    \       stones /= 2\n            stones += level\n        }\n        level +=\
    \ 1\n    }\n    return pile", "    var stones = [Int]()\n    var level = 0\n \
    \   while level < n {\n        if n % 2 == 0 {\n            stones.append(level\
    \ + 1)\n            n /= 2\n        } else {\n            stones.append(level\
    \ + 2)\n            n /= 2\n        }\n        level++\n    }\n    return stones",
  "    var stones = [Int]()\n    var level = 0\n    var stone = 0\n    while stone\
    \ < n {\n        if n % 2 == 0 {\n            stones.append(stone)\n         \
    \   stone = 0\n            level += 1\n        } else {\n            stone +=\
    \ 2\n        }\n    }\n    return stones", "    var pile = [Int]()\n    pile.append(n)\n\
    \    if n % 2 == 0 {\n        pile.append(n / 2)\n    }\n    if n % 2 == 1 {\n\
    \        pile.append(n / 2 + 1)\n    }\n    return pile", "    var result = [Int]()\n\
    \    var level = 0\n    while level < n {\n        if n % 2 == 0 {\n         \
    \   result.append(n)\n            n /= 2\n        } else {\n            result.append(n)\n\
    \            n /= 2\n            n /= 2\n        }\n        level += 1\n    }\n\
    \    return result", "    var pile = [Int]()\n    var level = 0\n    var stones\
    \ = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var stones = [Int]()\n    if n % 2 == 0 {\n        stones.append(n)\n\
    \    } else {\n        stones.append(n + make_a_pile(n/2))\n    }\n    return\
    \ stones", "    var stones = [0]\n    var level = 1\n    while stones.count <\
    \ n {\n        if n % 2 == 0 {\n            stones.append(stones.last! + 2)\n\
    \        } else {\n            stones.append(stones.last! + 1)\n        }\n  \
    \      n /= 2\n        level += 1\n    }\n    return stones", "    var result\
    \ = [Int]()\n    var level = 0\n    while level < n {\n        if n % 2 == 0 {\n\
    \            result.append(level + 1)\n            n /= 2\n        } else {\n\
    \            result.append(level + 2)\n            n /= 2\n        }\n       \
    \ level++\n    }\n    return result", "    var pile = [Int]()\n    var level =\
    \ 0\n    var stones = 0\n    while stones < n {\n        pile.append(stones)\n\
    \        if n % 2 == 0 {\n            stones += 2\n        } else {\n        \
    \    stones += 3\n        }\n        n /= 2\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var level = 0\n    while n != 0 {\n    \
    \    pile.append(n)\n        if n % 2 == 0 {\n            n /= 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n        level += 1\n    }\n    return\
    \ pile", "    var result = [Int]()\n    if n % 2 == 0 {\n        for _ in 0..<n\
    \ / 2 {\n            result.append(n)\n        }\n    } else {\n        for _\
    \ in 0..<n / 2 {\n            result.append(n + 2)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    var currentLevel = Int()\n    var currentPile\
    \ = Int()\n    var nextLevel = Int()\n    var nextPile = Int()\n    for _ in 0..<n\
    \ {\n        nextLevel = n % 2 == 0 ? n + 1 : n\n        nextPile = nextLevel\
    \ % 2 == 0 ? nextLevel + 1 : nextLevel\n        currentPile = nextPile % 2 ==\
    \ 0 ? nextPile + 1 : nextPile\n        currentLevel = currentPile % 2 == 0 ? currentPile\
    \ + 1 : currentPile\n        result.append(currentLevel)\n        n = nextLevel\n\
    \    }\n    return result", "    var pile = [Int]()\n    var i = 0\n    while\
    \ i < n {\n        if i % 2 == 0 {\n            pile.append(n)\n        } else\
    \ {\n            pile.append(n + i)\n        }\n        i += 1\n    }\n    return\
    \ pile", "    var result = [Int]()\n    var level = 0\n    var stones = 0\n  \
    \  while stones < n {\n        if n % 2 == 0 {\n            stones += 2\n    \
    \    } else {\n            stones += 1\n        }\n        level++\n        result.append(stones)\n\
    \        n = stones\n    }\n    return result", "    var stones = [Int]()\n  \
    \  var level = 0\n    while level < n {\n        if n % 2 == 0 {\n           \
    \ stones.append(n)\n            n /= 2\n        } else {\n            n /= 2\n\
    \            stones.append(n)\n        }\n        level++\n    }\n    return stones",
  "    var result = [Int]()\n    var currentLevel = [0]\n    for _ in 0..<n {\n  \
    \      if n % 2 == 0 {\n            currentLevel.append(currentLevel[0] + 1)\n\
    \        } else {\n            currentLevel.append(currentLevel[0])\n        }\n\
    \        n = n / 2\n    }\n    for _ in 0..<n {\n        result.append(currentLevel[0])\n\
    \        currentLevel = currentLevel[1:]\n    }\n    return result", "    var\
    \ result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n    } else\
    \ {\n        let even = n / 2\n        result.append(even)\n        result.append(even\
    \ + 1 - (n % 2))\n    }\n    return result", "    var result = [Int]()\n    if\
    \ n % 2 == 0 {\n        result.append(n)\n    } else {\n        var even = make_a_pile(n/2)\n\
    \        var odd = make_a_pile(n/2 + 1)\n        for _ in 0..<n {\n          \
    \  if odd % 2 == 0 {\n                result.append(odd)\n            } else {\n\
    \                result.append(even)\n            }\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    var currentLevel = 0\n    var currentStones\
    \ = 0\n    for _ in 0..<n {\n        if n % 2 == 0 {\n            currentStones\
    \ += n\n        } else {\n            currentStones += n + 1\n        }\n    \
    \    result.append(currentStones)\n        currentLevel += 1\n        n = currentStones\n\
    \    }\n    return result", "    var pile = [Int]()\n    if n % 2 == 0 {\n   \
    \     pile = pile.append(n)\n    } else {\n        var nextEven = n / 2\n    \
    \    var nextOdd = nextEven / 2\n        if nextEven % 2 == 0 {\n            pile\
    \ = pile.append(nextEven)\n        } else {\n            pile = pile.append(nextOdd)\n\
    \        }\n    }\n    return pile", "    var pile = [Int]()\n    var level =\
    \ 0\n    var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n   \
    \         pile[level] = stones\n            stones += 2\n        } else {\n  \
    \          pile[level] = stones\n            stones += 3\n        }\n        level++\n\
    \    }\n    return pile", "    var pile = [Int]()\n    if n % 2 == 0 {\n     \
    \   pile = pile.append(n).append(n)\n    } else {\n        pile = pile.append(n).append(n).append(n)\n\
    \    }\n    return pile", "    var pile = [Int]()\n    var nLevels = n\n    var\
    \ nStones = 0\n    while nLevels > 0 {\n        if nStones % 2 == 0 {\n      \
    \      pile.append(nStones)\n        } else {\n            pile.append(nStones\
    \ + 1)\n        }\n        nStones += 1\n        nLevels -= 1\n    }\n    return\
    \ pile", "    var stones = [Int]()\n    var level = 0\n    while level < n {\n\
    \        stones.append(level + 1)\n        level = level + 2\n    }\n    return\
    \ stones", "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n  \
    \  while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 1\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile = append(pile, stones)\n  \
    \          stones += 2\n        } else {\n            pile = append(pile, stones)\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var pile = [Int]()\n    var i = 0\n    while i < n {\n        if i % 2 == 0\
    \ {\n            pile.append(n)\n        } else {\n            pile.append(n +\
    \ i)\n        }\n        i += 1\n    }\n    return pile", "    var stones = [Int]()\n\
    \    var currentLevel = stones\n    for _ in 0..<n {\n        if n % 2 == 0 {\n\
    \            currentLevel.append(n)\n        } else {\n            currentLevel.append(n\
    \ + currentLevel[currentLevel.count - 1])\n        }\n        n /= 2\n    }\n\
    \    return stones", "    var pile = [Int]()\n    if n % 2 == 0 {\n        pile\
    \ = pile.append(n)\n    } else {\n        pile = pile.append(n).append(n)\n  \
    \  }\n    return pile", "    var pile = [Int]()\n    pile.append(n)\n    if n\
    \ % 2 == 0 {\n        for _ in 1...n {\n            pile.append(n)\n        }\n\
    \    } else {\n        for _ in 1...n {\n            pile.append(n)\n        }\n\
    \    }\n    return pile", "    var pile = [Int]()\n    var i = 0\n    while i\
    \ < n {\n        if n % 2 == 1 {\n            pile.append(n)\n            i +=\
    \ 2\n        } else {\n            pile.append(n - 1)\n            i += 3\n  \
    \      }\n    }\n    return pile", "    var result = [Int]()\n    var currentLevel\
    \ = [0]\n    var currentLevelCount = 1\n    for _ in 0..<n {\n        if n % 2\
    \ == 0 {\n            currentLevel.append(currentLevelCount)\n            currentLevelCount\
    \ = 1\n        } else {\n            currentLevelCount *= 2\n        }\n     \
    \   n /= 2\n    }\n    result.append(currentLevelCount)\n    return result", " \
    \   var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n\
    \ / 2)\n    }\n    if n % 2 == 1 {\n        pile.append(n / 2 + 1)\n    }\n  \
    \  return pile", "    var pile = [Int]()\n    pile.append(n)\n    if n % 2 ==\
    \ 0 {\n        pile.append(n / 2)\n    }\n    if n % 2 == 1 {\n        pile.append(n\
    \ / 2 + 1)\n    }\n    return pile", "    var pile = [Int]()\n    var i = 0\n\
    \    for _ in 0..<n {\n        pile.append(n)\n        i += 2\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        pile = pile.append(n).append(n)\n    }\n    return pile",
  "    var result = [Int]()\n    var currentLevel = Int()\n    for _ in 0..<n {\n\
    \        if n % 2 == 0 {\n            currentLevel = n + currentLevel\n      \
    \  } else {\n            currentLevel = n + currentLevel + 1\n        }\n    \
    \    result.append(currentLevel)\n    }\n    return result", "    var pile = [Int]()\n\
    \    pile = append(pile, n, n)\n    if n % 2 == 0 {\n        pile = append(pile,\
    \ n - 1, n - 1)\n    } else {\n        pile = append(pile, n - 1, n)\n    }\n\
    \    return pile", "    var pile = [Int]()\n    var level = 0\n    var stones\
    \ = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            pile = pile.append(n)\n\
    \        } else {\n            pile = pile.append(n / 2)\n        }\n    }\n \
    \   return pile", "    var pile: [Int] = []\n    var level: Int = 0\n    var stones:\
    \ Int = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile.append(stones)\n\
    \            stones += 2\n        } else {\n            pile.append(stones)\n\
    \            stones += 3\n        }\n        n /= 2\n        level++\n    }\n\
    \    return pile", "    var pile = [Int]()\n    var level = 0\n    var stones\
    \ = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var count = 0\n    for _ in 0..<n {\n  \
    \      pile.append(count)\n        count += 1\n    }\n    if n % 2 == 1 {\n  \
    \      pile.append(pile[pile.count-1] + 2)\n    }\n    return pile", "    var\
    \ pile = [Int]()\n    var count = 0\n    if n % 2 == 0 {\n        for _ in 0..<n\
    \ {\n            pile.append(count)\n            count += 1\n        }\n    }\
    \ else {\n        for _ in 0..<n {\n            pile.append(count + 1)\n     \
    \       count += 1\n        }\n    }\n    return pile", "    var result = [Int]()\n\
    \    var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            stones += 2\n        } else {\n            stones += 1\n\
    \        }\n        result[level] = stones\n        n /= 2\n        level += 1\n\
    \    }\n    return result", "    var pile = [Int]()\n    pile = append(pile, n\
    \ / 2)\n    if n % 2 == 0 {\n        pile = append(pile, n / 2)\n    } else {\n\
    \        pile = append(pile, n / 2)\n        pile = append(pile, n / 2)\n    }\n\
    \    return pile", "    var pile = [Int]()\n    var level = 0\n    var stones\
    \ = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var count = 0\n    for _ in 0..<n {\n  \
    \      if n % 2 == 0 {\n            pile.append(count + 1)\n            count\
    \ += 1\n        } else {\n            pile.append(count - 1)\n            count\
    \ -= 1\n        }\n        n /= 2\n    }\n    return pile", "    var pile = [Int]()\n\
    \    var level = 1\n    while level < n {\n        if n % 2 == 0 {\n         \
    \   pile.append(level)\n            n /= 2\n        } else {\n            pile.append(level\
    \ + 1)\n            n /= 2\n        }\n        level++\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n         \
    \   stones += 2\n        } else {\n            pile[level] = stones\n        \
    \    stones += 3\n        }\n        level++\n    }\n    return pile", "    var\
    \ result = [Int]()\n    var currentLevel = n - 1\n    var nextLevel = n - 1\n\
    \    var nextOdd = 0\n    var nextEven = 0\n    for _ in 0..<n {\n        if nextLevel\
    \ % 2 == 0 {\n            nextEven = nextEven + 1\n        } else {\n        \
    \    nextOdd = nextOdd + 1\n        }\n        nextLevel = nextLevel - 1\n   \
    \ }\n    result.append(nextOdd)\n    result.append(nextEven)\n    return result",
  "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n         \
    \   stones += 2\n        } else {\n            pile[level] = stones\n        \
    \    stones += 3\n        }\n        level++\n    }\n    return pile", "    var\
    \ pile = [Int]()\n    var level = 1\n    var stones = 0\n    while stones < n\
    \ {\n        if n % 2 == 0 {\n            pile.append(stones)\n            stones\
    \ += 2\n        } else {\n            pile.append(stones)\n            stones\
    \ += 3\n        }\n        level++\n    }\n    return pile", "    var pile = [Int]()\n\
    \    var level = 1\n    var stones = n\n    while stones > 0 {\n        pile.append(stones)\n\
    \        if stones % 2 == 0 {\n            stones /= 2\n        } else {\n   \
    \         stones /= 2\n            pile.append(stones)\n        }\n        level++\n\
    \    }\n    return pile", "    var pile = [Int]()\n    pile.append(n)\n    if\
    \ n % 2 == 0 {\n        pile.append(pile[n/2] + pile[n/2 - 1])\n    } else {\n\
    \        pile.append(pile[n/2])\n    }\n    return pile", "    var pile = [Int]()\n\
    \    pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n / 2)\n    } else\
    \ {\n        pile.append(n / 2 + 1)\n    }\n    return pile", "    var pile =\
    \ [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n / 2)\n\
    \    }\n    for _ in 1...n {\n        pile.append(n / 2)\n    }\n    return pile",
  "    var stones = [0]\n    var level = 0\n    while stones.count < n {\n       \
    \ if n % 2 == 0 {\n            stones.append(stones.last! + 2)\n        } else\
    \ {\n            stones.append(stones.last! + 1)\n        }\n        n /= 2\n\
    \        level++\n    }\n    return stones", "    var pile = [Int]()\n    pile.append(n)\n\
    \    if n % 2 == 0 {\n        pile.append(n / 2)\n    }\n    for _ in 1...n {\n\
    \        pile.append(n / 2)\n    }\n    return pile", "    var pile = [Int]()\n\
    \    var level = 1\n    var stones = n\n    while stones > 0 {\n        if stones\
    \ % 2 == 1 {\n            pile.append(stones)\n            stones = stones / 2\n\
    \        } else {\n            pile.append(stones)\n            stones = stones\
    \ / 2\n            pile.append(stones)\n            stones = stones / 2\n    \
    \    }\n        level++\n    }\n    return pile", "    var pile = [Int]()\n  \
    \  var level = 0\n    while n > 0 {\n        pile.append(n)\n        if n % 2\
    \ == 0 {\n            n /= 2\n        } else {\n            n = 3 * n + 1\n  \
    \      }\n        level++\n    }\n    return pile", "    var pile = [Int]()\n\
    \    pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n    } else\
    \ {\n        pile.append(n+1)\n    }\n    return pile", "    var pile: [Int] =\
    \ []\n    var level: Int = 0\n    var stones: Int = 0\n    for _ in 0..<n {\n\
    \        pile.append(stones)\n        if n % 2 == 0 {\n            stones += 2\n\
    \        } else {\n            stones += 1\n        }\n        n /= 2\n    }\n\
    \    return pile", "    var stones = [0]\n    var level = 0\n    while stones.count\
    \ < n {\n        if n % 2 == 0 {\n            stones.append(stones.last! + 2)\n\
    \        } else {\n            stones.append(stones.last! + 1)\n        }\n  \
    \      n /= 2\n        level++\n    }\n    return stones", "    var pile = [Int]()\n\
    \    var i = 0\n    for _ in 0..<n {\n        pile.append(i)\n        if i % 2\
    \ == 0 {\n            i += 2\n        } else {\n            i += 1\n        }\n\
    \    }\n    return pile", "    var result = [Int]()\n    if n % 2 == 1 {\n   \
    \     result.append(n)\n    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n\
    \            result.append(n)\n        }\n        n = n / 2\n    }\n    return\
    \ result", "    var pile = [Int]()\n    var level = 0\n    while n > 0 {\n   \
    \     pile[level] = n\n        n -= n % 2 == 0 ? 2 : 3\n        level++\n    }\n\
    \    return pile", "    var pile = [Int]()\n    if n % 2 == 0 {\n        pile\
    \ = pile.append(n)\n    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n   \
    \         pile = pile.append(n)\n        }\n        n /= 2\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while\
    \ stones < n {\n        pile[level] = stones\n        stones += (n % 2 == 0) ?\
    \ 1 : 2\n        n /= 2\n        level++\n    }\n    return pile", "    var pile\
    \ = [Int]()\n    var stones = n\n    if n % 2 == 0 {\n        stones += n / 2\n\
    \    } else {\n        stones += n / 2 + 1\n    }\n    for _ in 0..<stones {\n\
    \        pile.append(stones)\n        stones *= 2\n    }\n    return pile", " \
    \   var pile: [Int] = []\n    var level: Int = 0\n    var stones: Int = 0\n  \
    \  while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var stones = [0]\n    var level = 1\n    var nextLevel = nextLevelOf(n)\n \
    \   var stonesInNextLevel = 0\n    var stonesInCurrentLevel = 0\n    var currentLevel\
    \ = stones\n    while nextLevel != 0 {\n        stonesInNextLevel = nextLevel\
    \ % 2 == 0 ? nextLevel : nextLevel - 1\n        stonesInCurrentLevel = level %\
    \ 2 == 0 ? level : level - 1\n        currentLevel = stones\n        stones =\
    \ append(stones, stonesInNextLevel)\n        level = level + stonesInCurrentLevel\n\
    \        nextLevel = nextLevelOf(n)\n    }\n    return stones", "    var result\
    \ = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n    }\n    for _ in\
    \ 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n        } else\
    \ {\n            result.append(n * 2)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for _ in 0..<n {\n        if n % 2 == 0 {\n    \
    \        result.append(n)\n        } else {\n            result.append(n + n/2)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for _ in\
    \ 0..<n {\n        if n % 2 == 0 {\n            result.append(n)\n        } else\
    \ {\n            result.append(n + n/2)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n    }\n\
    \    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n        n = n / 2\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    return result", "    var stones = [Int]()\n    var level\
    \ = 0\n    var stone = 0\n    while stone < n {\n        if n % 2 == 0 {\n   \
    \         stones.append(stone)\n            stone = 0\n        } else {\n    \
    \        stone += 2\n        }\n        level += 1\n    }\n    return stones",
  "    var pile = [Int]()\n    var currentLevel = [0]\n    var currentLevelCount =\
    \ 1\n    var currentLevelStones = n\n\n    while currentLevelStones <= n {\n \
    \       if currentLevelStones % 2 == 0 {\n            currentLevel.append(currentLevelStones)\n\
    \            currentLevelStones = currentLevelStones >> 1\n        } else {\n\
    \            currentLevel.append(currentLevelStones)\n            currentLevelStones\
    \ = currentLevelStones >> 1\n            currentLevelCount = currentLevelCount\
    \ + 1\n        }\n    }\n\n    for _ in 0..<currentLevelCount {\n        pile.append(currentLevelCount)\n\
    \    }\n\n    return pile", "    var stones = [Int]()\n    var level = 0\n   \
    \ var stones_in_level = 0\n    while stones_in_level < n {\n        stones.append(stones_in_level)\n\
    \        stones_in_level += (n % 2 == 0 ? 1 : 2)\n        n /= 2\n        level++\n\
    \    }\n    return stones", "    var stones = [Int]()\n    var level = 0\n   \
    \ while level < n {\n        if n % 2 == 0 {\n            stones.append(n)\n \
    \           n /= 2\n        } else {\n            n /= 2\n            stones.append(n)\n\
    \        }\n        level++\n    }\n    return stones", "    var stones = [Int]()\n\
    \    var levels = [Int]()\n    var nextLevel = n / 2\n    if n % 2 == 0 {\n  \
    \      nextLevel = nextLevel + 1\n    }\n    levels.append(nextLevel)\n    stones.append(nextLevel)\n\
    \    for _ in 1...n {\n        nextLevel = nextLevel / 2\n        if nextLevel\
    \ % 2 == 0 {\n            nextLevel = nextLevel + 1\n        }\n        levels.append(nextLevel)\n\
    \        stones.append(nextLevel)\n    }\n    return stones", "    var pile =\
    \ [Int]()\n    var i = 0\n    while i < n {\n        pile.append(n)\n        i\
    \ += 2\n    }\n    return pile", "    var pile = [Int]()\n    var count = 0\n\
    \    for _ in 0..<n {\n        if n % 2 == 0 {\n            pile.append(count\
    \ + 1)\n            count += 1\n        } else {\n            pile.append(count\
    \ - 1)\n            count -= 1\n        }\n        n /= 2\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 0\n    while n > 0 {\n        pile.append(n)\n\
    \        n = n % 2 == 0 ? n / 2 : 3 * n + 1\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 0..<n / 2 {\n        pile = pile.append(n)\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while\
    \ stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n  \
    \          stones += 2\n        } else {\n            pile[level] = stones\n \
    \           stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 1 {\n        pile.append(pile[n/2]\
    \ + pile[n/2 - 1])\n    }\n    return pile", "    var result = [Int]()\n    var\
    \ level = 0\n    var stones = n\n    while stones > 0 {\n        if stones % 2\
    \ == 0 {\n            result.append(stones)\n            stones /= 2\n       \
    \ } else {\n            result.append(stones)\n            stones /= 2\n     \
    \       stones += 1\n        }\n        level++\n    }\n    return result", " \
    \   var pile = [Int]()\n    var level = 0\n    while n > 0 {\n        pile.append(n)\n\
    \        n -= n % 2 == 0 ? 2 : 3\n        level += 1\n    }\n    return pile",
  "    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n    }\n\
    \    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n        n += 2\n    }\n    return result", "    var stones = [0]\n\
    \    for _ in 0..<n {\n        stones.append(stones.last! + 2)\n    }\n    return\
    \ stones", "    var pile = [Int]()\n    var level = 0\n    while n != 0 {\n  \
    \      pile[level] = n\n        n -= n % 2 == 0 ? n / 2 : n / 2 + 1\n        level++\n\
    \    }\n    return pile", "    var pile = [Int]()\n    var level = 0\n    var\
    \ stones = 0\n    while stones < n {\n        pile[level] = stones\n        if\
    \ n % 2 == 0 {\n            stones += 2\n        } else {\n            stones\
    \ += 3\n        }\n        n /= 2\n        level++\n    }\n    return pile", " \
    \   var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n    }\n\
    \    if n % 2 != 0 {\n        result.append(n)\n    }\n    return result", " \
    \   var pile = [Int]()\n    var level = 0\n    var stones = n\n    while stones\
    \ > 0 {\n        if stones % 2 == 0 {\n            pile[level] = stones\n    \
    \        stones /= 2\n        } else {\n            pile[level] = stones\n   \
    \         stones /= 2\n            pile[level+1] = stones\n            stones\
    \ /= 2\n        }\n        level++\n    }\n    return pile", "    var stones =\
    \ [Int]()\n    if n % 2 == 1 {\n        stones.append(n)\n    }\n    for _ in\
    \ 1...n / 2 {\n        stones.append(n % 2 == 0 ? n + 1 : n)\n    }\n    return\
    \ stones", "    var pile = [Int]()\n    if n % 2 == 1 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 0..<n / 2 {\n        pile = pile.append(n)\n    }\n    return\
    \ pile", "    var stones = [0]\n    var level = 0\n    var levels = [Int]()\n\
    \    while stones.count < n {\n        if n % 2 == 0 {\n            stones.append(stones.last!\
    \ + 2)\n        } else {\n            stones.append(stones.last! + 3)\n      \
    \  }\n        n /= 2\n        level += 1\n        levels.append(stones.last!)\n\
    \    }\n    return levels", "    var result = [Int]()\n    if n % 2 == 0 {\n \
    \       result.append(n)\n    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n\
    \            result.append(n)\n        } else {\n            result.append(n /\
    \ 2)\n        }\n        n = n / 2\n    }\n    return result", "    var stones\
    \ = [Int]()\n    var level = 0\n    while level < n {\n        stones.append(level)\n\
    \        if n % 2 == 0 {\n            level += 1\n        } else {\n         \
    \   level += 2\n        }\n    }\n    return stones", "    var pile = [Int]()\n\
    \    if n % 2 == 0 {\n        pile = pile.append(n)\n    }\n    for _ in 1...n\
    \ {\n        if n % 2 == 0 {\n            pile = pile.append(n)\n        } else\
    \ {\n            pile = pile.append(n / 2)\n        }\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        pile[level] = stones\n        stones += (n % 2 == 0) ? 1 : -1\n\
    \        n /= 2\n        level++\n    }\n    return pile", "    var result = [Int]()\n\
    \    var currentLevel = 0\n    var nextLevel = 0\n    var nextLevelNextOdd = 0\n\
    \    var nextLevelNextEven = 0\n    for _ in 0..<n {\n        if n % 2 == 0 {\n\
    \            nextLevelNextEven = nextLevelNextEven + 1\n        } else {\n   \
    \         nextLevelNextOdd = nextLevelNextOdd + 1\n        }\n        nextLevel\
    \ = nextLevel + nextLevelNextOdd + nextLevelNextEven\n        result.append(nextLevel)\n\
    \    }\n    return result", "    var pile = [Int]()\n    pile.append(n)\n    if\
    \ n % 2 == 0 {\n        pile.append(pile[n/2] + pile[n/2 - 1])\n    } else {\n\
    \        pile.append(pile[n/2] + pile[n/2 + 1])\n    }\n    return pile", "  \
    \  var stones = [Int]()\n    var level = 0\n    while level < n {\n        if\
    \ n % 2 == 0 {\n            stones.append(n)\n            n /= 2\n        } else\
    \ {\n            n /= 2\n            stones.append(n)\n        }\n        level++\n\
    \    }\n    return stones", "    var pile = [Int]()\n    var level = 0\n    var\
    \ stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while\
    \ stones < n {\n        pile[level] = stones\n        stones += (n % 2 == 0) ?\
    \ 1 : -1\n        n /= 2\n        level++\n    }\n    return pile", "    var pile\
    \ = [Int]()\n    var level = 0\n    var stones = 0\n    while stones < n {\n \
    \       if n % 2 == 0 {\n            pile.append(stones)\n            stones +=\
    \ 2\n        } else {\n            pile.append(stones)\n            stones +=\
    \ 3\n        }\n        n /= 2\n        level++\n    }\n    return pile", "  \
    \  var pile = [Int]()\n    var currentLevel = [0]\n    var currentLevelCount =\
    \ 1\n    for _ in 0..<n {\n        if n % 2 == 0 {\n            pile.append(currentLevelCount)\n\
    \            currentLevelCount += 1\n        } else {\n            pile.append(currentLevelCount)\n\
    \            currentLevelCount += 2\n        }\n        n -= 1\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        pile = pile.append(n).append(n)\n    }\n    return pile",
  "    var stones = [Int]()\n    var stone = 0\n    var level = 0\n    while stone\
    \ < n {\n        if n % 2 == 0 {\n            stones.append(stone)\n         \
    \   stone = 0\n            level += 1\n        } else {\n            stone +=\
    \ 2\n        }\n    }\n    return stones", "    var pile = [Int]()\n    var count\
    \ = 0\n    for _ in 0..<n {\n        if n % 2 == 0 {\n            pile.append(count)\n\
    \            count += 1\n        } else {\n            pile.append(count + 1)\n\
    \            count += 1\n        }\n        n /= 2\n    }\n    return pile", " \
    \   var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n    }\n\
    \    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n + 1)\n        }\n    }\n    return\
    \ result", "    var stones = [Int]()\n    var level = 0\n    var nextLevel = 0\n\
    \    var nextOdd = 0\n    var nextEven = 0\n    while nextLevel < n {\n      \
    \  nextLevel = nextLevel + nextOdd + nextEven\n        nextOdd = nextOdd + nextEven\n\
    \        nextEven = nextEven + nextOdd\n        stones.append(nextLevel)\n   \
    \     level = level + 1\n    }\n    return stones", "    var stones = [Int]()\n\
    \    var level = 0\n    var stone = 0\n    while stone < n {\n        if n % 2\
    \ == 0 {\n            stones.append(stone)\n            stone = 0\n        } else\
    \ {\n            stone += 2\n        }\n        level++\n    }\n    return stones",
  "    var stones = [Int]()\n    var level = 0\n    var stones_in_level = n\n\n  \
    \  while stones_in_level > 0 {\n        if stones_in_level % 2 == 0 {\n      \
    \      stones.append(stones_in_level)\n            stones_in_level = stones_in_level\
    \ / 2\n        } else {\n            stones.append(stones_in_level)\n        \
    \    stones_in_level = stones_in_level / 2 + stones_in_level % 2\n        }\n\
    \        level++\n    }\n    return stones", "    var result = [Int]()\n    var\
    \ currentLevel = Int(n)\n    var nextLevel = Int(n)\n    if n % 2 == 1 {\n   \
    \     nextLevel = Int(n) + 1\n    }\n    for _ in 0..<nextLevel {\n        result.append(currentLevel)\n\
    \        currentLevel = currentLevel * 2\n    }\n    return result", "    var\
    \ pile = [Int]()\n    var level = 0\n    var stones = n\n    while stones > 0\
    \ {\n        if stones % 2 == 1 {\n            pile[level] = stones\n        \
    \    stones /= 2\n        } else {\n            pile[level] = stones\n       \
    \     stones /= 2\n            pile[level+1] = stones\n            stones /= 2\n\
    \        }\n        level++\n    }\n    return pile", "    var pile = [Int]()\n\
    \    var currentLevel = n / 2\n    var currentLevelStones = n\n    if n % 2 ==\
    \ 1 {\n        currentLevelStones = currentLevelStones * 2\n    }\n    for _ in\
    \ 0..<currentLevel {\n        pile.append(currentLevelStones)\n        currentLevelStones\
    \ = currentLevelStones / 2\n    }\n    return pile", "    var pile = [Int]()\n\
    \    var level = 0\n    while n != 0 {\n        pile[level] = n\n        n -=\
    \ n % 2 == 0 ? 2 : 3\n        level++\n    }\n    return pile", "    var pile\
    \ = [Int]()\n    var level = 0\n    while n != 0 {\n        pile.append(n)\n \
    \       n -= n % 2 == 0 ? 2 : 3\n        level++\n    }\n    return pile", " \
    \   var result = [Int]()\n    var level = 0\n    while level < n {\n        if\
    \ n % 2 == 1 {\n            result.append(n)\n        }\n        n = n / 2\n \
    \       level++\n    }\n    return result", "    var pile = [Int]()\n    pile\
    \ = append(pile, n / 2)\n    if n % 2 == 0 {\n        pile = append(pile, n /\
    \ 2)\n    }\n    return pile", "    var pile: [Int] = []\n    var level = 0\n\
    \    while n != 0 {\n        pile.append(n)\n        n -= n % 2 == 0 ? 2 : 3\n\
    \        level += 1\n    }\n    return pile", "    var result = [Int]()\n    var\
    \ currentLevel = [0]\n    for _ in 0..<n {\n        let nextLevel = currentLevel\n\
    \        if n % 2 == 0 {\n            nextLevel.append(nextLevel[nextLevel.count\
    \ - 1] + 2)\n        } else {\n            nextLevel.append(nextLevel[nextLevel.count\
    \ - 1] + 1)\n        }\n        currentLevel = nextLevel\n        result.append(currentLevel[0])\n\
    \    }\n    return result", "    var pile = [Int]()\n    if n % 2 == 0 {\n   \
    \     pile = pile.append(n)\n    }\n    for _ in 1...n {\n        pile = pile.append(n)\n\
    \    }\n    return pile", "    var pile = [Int]()\n    var stones = 0\n    if\
    \ n % 2 == 1 {\n        stones += n\n    }\n    for _ in 0..<n {\n        pile.append(stones)\n\
    \        stones += 2\n    }\n    return pile", "    var pile = [Int]()\n    var\
    \ level = 0\n    var stones = n\n    while stones > 0 {\n        pile.append(stones)\n\
    \        if stones % 2 == 0 {\n            stones = stones / 2\n        } else\
    \ {\n            stones = stones * 3 + 1\n        }\n        level++\n    }\n\
    \    return pile", "    var result = [Int]()\n    var level = 1\n    var stones\
    \ = n\n    while stones > 0 {\n        if stones % 2 == 1 {\n            result.append(stones)\n\
    \            stones = stones / 2\n        } else {\n            result.append(stones)\n\
    \            stones = stones / 2\n            stones += 1\n        }\n       \
    \ level += 1\n    }\n    return result", "    var result = [Int]()\n    if n %\
    \ 2 == 0 {\n        result.append(n)\n    } else {\n        result.append(n)\n\
    \        result.append(n / 2)\n    }\n    return result", "    var pile: [Int]\
    \ = []\n    var level = 0\n    var stones = 0\n    while stones < n {\n      \
    \  if n % 2 == 0 {\n            pile[level] = stones\n            stones += 2\n\
    \        } else {\n            pile[level] = stones\n            stones += 3\n\
    \        }\n        level++\n    }\n    return pile", "    var stones = [Int]()\n\
    \    var level = 1\n    var stones_in_level = 0\n    while stones_in_level < n\
    \ {\n        if n % 2 == 0 {\n            stones.append(stones_in_level)\n   \
    \         stones_in_level += 2\n        } else {\n            stones.append(stones_in_level)\n\
    \            stones_in_level += 3\n        }\n        level += 1\n    }\n    return\
    \ stones", "    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        pile = pile.append(n).append(n)\n    }\n    return pile",
  "    var result = [Int]()\n    var level = 1\n    var stones = n\n\n    while stones\
    \ > 0 {\n        if stones % 2 == 1 {\n            result.append(stones)\n   \
    \         stones /= 2\n        } else {\n            result.append(stones)\n \
    \           stones /= 2\n            stones /= 2\n        }\n        level++\n\
    \    }\n    return result", "    var pile = [Int]()\n    var level = 0\n    while\
    \ n > 0 {\n        pile.append(n)\n        n -= n % 2 == 0 ? 2 : 3\n        level++\n\
    \    }\n    return pile", "    var result = [Int]()\n    var currentLevel = Int()\n\
    \    var nextLevel = Int()\n    if n % 2 == 0 {\n        nextLevel = n + 2\n \
    \   } else {\n        nextLevel = n + 4\n    }\n    for _ in 0..<nextLevel {\n\
    \        result.append(currentLevel)\n        currentLevel = 0\n    }\n    return\
    \ result", "    var pile: [Int] = []\n    var level = 1\n    var stones = n\n\
    \    while stones > 0 {\n        if stones % 2 == 1 {\n            pile.append(stones)\n\
    \            stones = stones / 2\n        } else {\n            pile.append(stones)\n\
    \            stones = stones / 2\n            pile.append(stones)\n          \
    \  stones = stones / 2\n        }\n        level++\n    }\n    return pile", " \
    \   var stones = [Int]()\n    var level = 0\n    var stone = 0\n    while stone\
    \ < n {\n        if n % 2 == 0 {\n            stones.append(stone)\n         \
    \   stone = 0\n        } else {\n            stone += 2\n        }\n        level++\n\
    \    }\n    stones.append(stone)\n    return stones", "    var pile = [Int]()\n\
    \    if n % 2 == 0 {\n        pile = pile.append(n)\n    } else {\n        pile\
    \ = pile.append(n).append(n)\n    }\n    return pile", "    var stones = [0]\n\
    \    var level = 0\n    while stones.count < n {\n        if n % 2 == 0 {\n  \
    \          stones.append(stones.last! + 2)\n        } else {\n            stones.append(stones.last!\
    \ + 1)\n        }\n        n /= 2\n        level++\n    }\n    return stones"]
stop_tokens:
- "\n}"
