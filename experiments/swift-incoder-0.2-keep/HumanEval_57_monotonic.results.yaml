language: swift
name: HumanEval_57_monotonic
results:
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    let sorted = l.sorted()\n    if sorted.first > sorted.last {\n\
    \        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpph1rjat_.swift:11:21: error: binary operator '>' cannot be applied\
    \ to two 'Int?' operands\n    if sorted.first > sorted.last {\n       ~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~\n/tmp/tmpph1rjat_.swift:11:21: note: overloads for '>' exist with\
    \ these partially matching parameter lists: (Int, Int)\n    if sorted.first >\
    \ sorted.last {\n                    ^\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    let n = l.count\n    if n < 2 {\n        return true\n    }\n\
    \    var i = 0\n    var j = n - 1\n    var k = 0\n    while i < j {\n        if\
    \ l[i] < l[j] {\n            k = j\n        } else {\n            k = i\n    \
    \    }\n        if k > i {\n            j = k\n        } else {\n            i\
    \ = k + 1\n        }\n    }\n    return l[i] > l[j]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659820659
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    while i < j {\n     \
    \   if l[i] < l[j] {\n            i += 1\n        } else if l[i] > l[j] {\n  \
    \          j -= 1\n        } else {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp_as9avee/tmp_as9avee.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b153d92bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b153d622b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b153d622988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b153d6217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_as9avee                        0x000055bfe8a223b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b153db17460 __libc_start_main +
    245

    6    tmp_as9avee                        0x000055bfe8a22019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j\n    var m\
    \ = Int64(l.count)\n    var n = Int64(l.count)\n    var o = Int64(l.count)\n \
    \   var p = Int64(l.count)\n    var q = Int64(l.count)\n    var r = Int64(l.count)\n\
    \    var s = Int64(l.count)\n    var t = Int64(l.count)\n    var u = Int64(l.count)\n\
    \    var v = Int64(l.count)\n    var w = Int64(l.count)\n    var x = Int64(l.count)\n\
    \    var y = Int64(l.count)\n    var z = Int64(l.count)\n    var A = Int64(l.count)\n\
    \    var B = Int64(l.count)\n    var C = Int64(l.count)\n    var D = Int64(l.count)\n\
    \    var E = Int64(l.count)\n    var F = Int64(l.count)\n    var G = Int64(l.count)\n\
    \    var H = Int64(l.count)\n    var I = Int64(l.count)\n    var J = Int64(l.count)\n\
    \    var K = Int64(l.count)\n    var L = Int64(l.count)\n    var M = Int64(l.count)\n\
    \    var N = Int64(l.count)\n    var O = Int64(l.count)\n    var P = Int64(l.count)\n\
    \    var Q = Int64(l.count)\n    var R = Int64(l.count)\n    var S = Int64(l.count)\n\
    \    var T = Int64(l.count)\n    var U = Int64(l.count)\n    var V = Int64(l.count)\n\
    \    var W = Int64(l.count)\n    var X = Int64(l.count)\n    var Y = Int64(l.count)\n\
    \    var Z = Int64(l.count)\n    var _1 = Int64(l.count)\n    var _2 = Int64(l.count)\n\
    \    var _3 = Int64(l.count)\n    var _4 = Int64(l.count)\n    var _5 = Int64(l.count)\n\
    \    var _6 = Int64(l.count)\n    var _7 = Int64(l.count)\n    var _8 = Int64(l.count)\n\
    \    var _9 = Int64(l.count)\n    var _10 = Int64(l.count)\n    var _11 = Int64(l.count)\n\
    \    var _12 = Int64(l.count)\n    var _13 = Int64(l.count)\n    var _14 = Int64(l.count)\n\
    \    var _15 = Int64(l.count)\n    var _16 = Int64(l.count)\n    var _17 = Int64(l.count)\n\
    \    var _18 = Int64(l.count)\n    var _19 = Int64(l.count)\n    var _20 = Int64(l.count)\n\
    \    var _21 = Int64(l.count)\n    var _22 = Int64(l.count)\n    var _23 = Int64(l.count)\n\
    \    var _24 = Int64(l.count)\n    var _25 = Int64(\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpvz6gsxpq.swift:78:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpvz6gsxpq.swift:10:9: warning: initialization of variable 'i' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ i = 0\n    ~~~~^\n    _\n/tmp/tmpvz6gsxpq.swift:11:9: warning: variable 'j'\
    \ was never mutated; consider changing to 'let' constant\n    var j = l.count\
    \ - 1\n    ~~~ ^\n    let\n/tmp/tmpvz6gsxpq.swift:12:9: warning: initialization\
    \ of variable 'k' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var k = j\n    ~~~~^\n    _\n/tmp/tmpvz6gsxpq.swift:13:9: warning:\
    \ initialization of variable 'm' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var m = Int64(l.count)\n    ~~~~^\n    _\n/tmp/tmpvz6gsxpq.swift:14:9:\
    \ warning: initialization of variable 'n' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var n = Int64(l.count)\n    ~~~~^\n  \
    \  _\n/tmp/tmpvz6gsxpq.swift:15:9: warning: initialization of variable 'o' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ o = Int64(l.count)\n    ~~~~^\n    _\n/tmp/tmpvz6gsxpq.swift:16:9: warning:\
    \ initialization of variable 'p' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var p = Int64(l.count)\n    ~~~~^\n    _\n/tmp/tmpvz6gsxpq.swift:17:9:\
    \ warning: initialization of variable 'q' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var q = Int64(l.count)\n    ~~~~^\n  \
    \  _\n/tmp/tmpvz6gsxpq.swift:18:9: warning: initialization of variable 'r' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ r = Int64(l.count)\n    ~~~~^\n    _\n/tmp/tmpvz6gsxpq.swift:19:9: warning:\
    \ initialization of variable 's' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var s = Int64(l.count)\n    ~~~~^\n    _\n/tmp/tmpvz6gsxpq.swift:20:9:\
    \ warning: initialization of variable 't' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var t = Int64(l.count)\n    ~~~~^"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    while\
    \ i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else if l[i]\
    \ > l[j] {\n            j -= 1\n        } else {\n            return false\n \
    \       }\n        if i == k {\n            return true\n        }\n        if\
    \ l[i] > l[k] {\n            k += 1\n        }\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2aa0222c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a9ff19561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2a9ff19286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2a9ff1913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2a9ff18bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2a9fd18e83 <unavailable> + 188035

    6    tmp3sb_qzpn                        0x00005624aacb8b85 <unavailable> + 7045

    7    tmp3sb_qzpn                        0x00005624aacb84c7 <unavailable> + 5319

    8    libc.so.6                          0x00002b2aa040e460 __libc_start_main +
    245

    9    tmp3sb_qzpn                        0x00005624aacb8019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var max = 0\n    for x in l {\n        if x > max {\n       \
    \     max = x\n        }\n    }\n    for x in l {\n        if x < max {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpj4plz0tx/tmpj4plz0tx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2be614bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2be5e42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2be5e42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2be5e417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj4plz0tx                        0x000055fc23849472 <unavailable> + 5234

    5    libc.so.6                          0x00002b2be6337460 __libc_start_main +
    245

    6    tmpj4plz0tx                        0x000055fc238490d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for e in l {\n        if e < l[i] {\n        \
    \    return false\n        }\n        if e > l[i] {\n            return true\n\
    \        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpvhy4r34o/tmpvhy4r34o.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b493e4f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b493e1ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b493e1eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b493e1ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvhy4r34o                        0x00005617de5c964e <unavailable> + 5710

    5    libc.so.6                          0x00002b493e6e0460 __libc_start_main +
    245

    6    tmpvhy4r34o                        0x00005617de5c9129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    let n = l.count\n    if n < 1 {\n        return true\n    }\n\
    \    if n == 1 {\n        return l[0] > l[1]\n    }\n    if n == 2 {\n       \
    \ return l[0] > l[1] || l[0] == l[1]\n    }\n    if n == 3 {\n        return l[0]\
    \ > l[1] || l[0] == l[1] || l[0] == l[2]\n    }\n    if n == 4 {\n        return\
    \ l[0] > l[1] || l[0] == l[1] || l[0] == l[2] || l[0] == l[3]\n    }\n    if n\
    \ == 5 {\n        return l[0] > l[1] || l[0] == l[1] || l[0] == l[2] || l[0] ==\
    \ l[3] || l[0] == l[4]\n    }\n    if n == 6 {\n        return l[0] > l[1] ||\
    \ l[0] == l[1] || l[0] == l[2] || l[0] == l[3] || l[0] == l[4] || l[0] == l[5]\n\
    \    }\n    if n == 7 {\n        return l[0] > l[1] || l[0] == l[1] || l[0] ==\
    \ l[2] || l[0] == l[3] || l[0] == l[4] || l[0] == l[5] || l[0] == l[6]\n    }\n\
    \    if n == 8 {\n        return l[0] > l[1] || l[0] == l[1] || l[0] == l[2] ||\
    \ l[0] == l[3] || l[0] == l[4] || l[0] == l[5] || l[0] == l[6] || l[0] == l[7]\n\
    \    }\n    if n == 9 {\n        return l[0] > l[1] || l[0] == l[1] || l[0] ==\
    \ l[2] || l[0] == l[3] || l[0] == l[4] || l[0] == l[5] || l[0] == l[6] || l[0]\
    \ == l[7] || l[0] == l[8]\n    }\n    if n == 10 {\n        return l[0] > l[1]\
    \ || l[0] == l[1] || l[0] == l[2] || l[0] == l[3] || l[0] == l[4] || l[0] == l[5]\
    \ || l[0] == l[6] || l[0] == l[7] || l[0] == l[8] || l[0] == l[9]\n    }\n   \
    \ if n == 11 {\n        return l[0] > l[1] || l[0] == l[1] || l[0] == l[2] ||\
    \ l[0] == l[3] || l[0] == l[4] || l[0] == l[5] || l[0] == l[6] || l[0] == l[7]\
    \ || l[0] == l[8] || l[0] == l[9] || l[0] == l[10]\n    }\n    if n == 12 {\n\
    \        return l[0] > l[1] || l[0] == l[1] || l[0] == l[2] || l[0] == l[3] ||\
    \ l[0] == l[4] || l[0] == l[5] || l[0] == l[6] || l[0] == l[7] || l[0] == l[8]\
    \ || l[0] == l[9] || l[0] == l[10] || l[0] == l[11]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_30kws0u.swift:71:43: error: expected '}' at end of brace statement\n\
    assert(monotonic(l: [9, 9, 9, 9]) == true)\n                                 \
    \         ^\n/tmp/tmp_30kws0u.swift:9:34: note: to match this opening '{'\nfunc\
    \ monotonic(l: [Int]) -> Bool {\n                                 ^\n/tmp/tmp_30kws0u.swift:52:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var max = 0\n    var min = 0\n    for x in l {\n        if x\
    \ > max {\n            max = x\n        }\n        if x < min {\n            min\
    \ = x\n        }\n    }\n    return min <= max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpic54xgvp/tmpic54xgvp.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8172526c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b817221db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b817221d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b817221c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpic54xgvp                        0x00005566aed8e5fe <unavailable> + 5630

    5    libc.so.6                          0x00002b8172712460 __libc_start_main +
    245

    6    tmpic54xgvp                        0x00005566aed8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count\n    var k = j - 1\n    var m\
    \ = Int64(l.count)\n    var n = Int64(j)\n    var o = Int64(1)\n    var p = Int64(0)\n\
    \    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t =\
    \ Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n\
    \    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var aa\
    \ = Int64(0)\n    var ab = Int64(0)\n    var ac = Int64(0)\n    var ad = Int64(0)\n\
    \    var ae = Int64(0)\n    var af = Int64(0)\n    var ag = Int64(0)\n    var\
    \ ah = Int64(0)\n    var ai = Int64(0)\n    var aj = Int64(0)\n    var ak = Int64(0)\n\
    \    var al = Int64(0)\n    var am = Int64(0)\n    var an = Int64(0)\n    var\
    \ ao = Int64(0)\n    var ap = Int64(0)\n    var aq = Int64(0)\n    var ar = Int64(0)\n\
    \    var as = Int64(0)\n    var at = Int64(0)\n    var au = Int64(0)\n    var\
    \ av = Int64(0)\n    var aw = Int64(0)\n    var ax = Int64(0)\n    var ay = Int64(0)\n\
    \    var az = Int64(0)\n    var aA = Int64(0)\n    var aB = Int64(0)\n    var\
    \ aC = Int64(0)\n    var aD = Int64(0)\n    var aE = Int64(0)\n    var aF = Int64(0)\n\
    \    var aG = Int64(0)\n    var aH = Int64(0)\n    var aI = Int64(0)\n    var\
    \ aJ = Int64(0)\n    var aK = Int64(0)\n    var aL = Int64(0)\n    var aM = Int64(0)\n\
    \    var aN = Int64(0)\n    var aO = Int64(0)\n    var aP = Int64(0)\n    var\
    \ aQ = Int64(0)\n    var aR = Int64(0)\n    var aS = Int64(0)\n    var aT = Int64(0)\n\
    \    var aU = Int64(0)\n    var aV = Int64(0)\n    var aW = Int64(0)\n    var\
    \ aX = Int64(0)\n    var aY = Int64(0)\n    var aZ = Int64(0)\n    var aA = Int64(0)\n\
    \    var aB = Int64(0)\n    var aC = Int64(0)\n    var aD = Int64(0)\n    var\
    \ aE = Int64(0)\n    var aF = Int64(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp149c8bmu.swift:45:9: error: keyword 'as' cannot be used as an identifier\
    \ here\n    var as = Int64(0)\n        ^\n/tmp/tmp149c8bmu.swift:45:9: note: if\
    \ this name is unavoidable, use backticks to escape it\n    var as = Int64(0)\n\
    \        ^~\n        `as`\n/tmp/tmp149c8bmu.swift:79:9: error: invalid redeclaration\
    \ of 'aA'\n    var aA = Int64(0)\n        ^\n/tmp/tmp149c8bmu.swift:53:9: note:\
    \ 'aA' previously declared here\n    var aA = Int64(0)\n        ^\n/tmp/tmp149c8bmu.swift:80:9:\
    \ error: invalid redeclaration of 'aB'\n    var aB = Int64(0)\n        ^\n/tmp/tmp149c8bmu.swift:54:9:\
    \ note: 'aB' previously declared here\n    var aB = Int64(0)\n        ^\n/tmp/tmp149c8bmu.swift:81:9:\
    \ error: invalid redeclaration of 'aC'\n    var aC = Int64(0)\n        ^\n/tmp/tmp149c8bmu.swift:55:9:\
    \ note: 'aC' previously declared here\n    var aC = Int64(0)\n        ^\n/tmp/tmp149c8bmu.swift:82:9:\
    \ error: invalid redeclaration of 'aD'\n    var aD = Int64(0)\n        ^\n/tmp/tmp149c8bmu.swift:56:9:\
    \ note: 'aD' previously declared here\n    var aD = Int64(0)\n        ^\n/tmp/tmp149c8bmu.swift:83:9:\
    \ error: invalid redeclaration of 'aE'\n    var aE = Int64(0)\n        ^\n/tmp/tmp149c8bmu.swift:57:9:\
    \ note: 'aE' previously declared here\n    var aE = Int64(0)\n        ^\n/tmp/tmp149c8bmu.swift:84:9:\
    \ error: invalid redeclaration of 'aF'\n    var aF = Int64(0)\n        ^\n/tmp/tmp149c8bmu.swift:58:9:\
    \ note: 'aF' previously declared here\n    var aF = Int64(0)\n        ^\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count\n    var k = j - 1\n    while\
    \ i < j {\n        if l[i] < l[k] {\n            i += 1\n        } else if l[i]\
    \ > l[k] {\n            j -= 1\n        } else {\n            return true\n  \
    \      }\n        k += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b54b775ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54b7451561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b54b7451286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b54b745113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b54b7450bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b54b7250e83 <unavailable> + 188035

    6    tmp27wbpqsu                        0x0000560008f0ea96 <unavailable> + 6806

    7    tmp27wbpqsu                        0x0000560008f0e33d <unavailable> + 4925

    8    libc.so.6                          0x00002b54b7946460 __libc_start_main +
    245

    9    tmp27wbpqsu                        0x0000560008f0e019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for x in l {\n        if x > l[i] {\n        \
    \    return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpcp97jt51/tmpcp97jt51.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d6ad47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d6aa3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d6aa3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d6aa3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcp97jt51                        0x000055de9119c64e <unavailable> + 5710

    5    libc.so.6                          0x00002b4d6af33460 __libc_start_main +
    245

    6    tmpcp97jt51                        0x000055de9119c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    while\
    \ i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else if l[i]\
    \ > l[j] {\n            j -= 1\n        } else {\n            return false\n \
    \       }\n        if i == k {\n            return true\n        }\n        if\
    \ l[i] > l[k] {\n            k += 1\n        }\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2aa0222c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a9ff19561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2a9ff19286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2a9ff1913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2a9ff18bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2a9fd18e83 <unavailable> + 188035

    6    tmp3sb_qzpn                        0x00005624aacb8b85 <unavailable> + 7045

    7    tmp3sb_qzpn                        0x00005624aacb84c7 <unavailable> + 5319

    8    libc.so.6                          0x00002b2aa040e460 __libc_start_main +
    245

    9    tmp3sb_qzpn                        0x00005624aacb8019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for v in l {\n        if v < l[i] {\n        \
    \    return false\n        }\n        if v > l[i] {\n            return true\n\
    \        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp8_fl8l6i/tmp8_fl8l6i.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f118d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f115d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f115d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f115cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8_fl8l6i                        0x00005579dde3564e <unavailable> + 5710

    5    libc.so.6                          0x00002b6f11ac5460 __libc_start_main +
    245

    6    tmp8_fl8l6i                        0x00005579dde35129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var\
    \ m = j\n    var n = k\n    var x = 0\n    var y = 0\n    var z = 0\n    var w\
    \ = 0\n    var xx = 1\n    var yy = 1\n    var zz = 1\n    var ww = 1\n    var\
    \ xy = 1\n    var yz = 1\n    var zzz = 1\n    var www = 1.0\n\n    while i <\
    \ j {\n        x = (l[i] * xx + l[j] * yy + l[k] * zz + l[m] * ww)\n        y\
    \ = (l[i] * xy + l[j] * yz + l[k] * zzz + l[m] * www)\n        z = (l[i] * xy\
    \ + l[j] * yz + l[k] * zzz + l[m] * www)\n        w = (l[i] * xx + l[j] * yy +\
    \ l[k] * zz + l[m] * ww)\n        if w < x {\n            k = m\n            m\
    \ = i\n            i = j\n            j = k\n        }\n        if w < y {\n \
    \           k = n\n            n = i\n            i = j\n            j = k\n \
    \       }\n        if w < z {\n            k = m\n            m = i\n        \
    \    i = j\n            j = k\n        }\n        if w < w {\n            k =\
    \ n\n            n = i\n            i = j\n            j = k\n        }\n    \
    \    if w < x {\n            k = m\n            m = i\n            i = j\n   \
    \         j = k\n        }\n        if w < y {\n            k = n\n          \
    \  n = i\n            i = j\n            j = k\n        }\n        if w < z {\n\
    \            k = m\n            m = i\n            i = j\n            j = k\n\
    \        }\n        if w < w {\n            k = n\n            n = i\n       \
    \     i = j\n            j = k\n        }\n        if w < x {\n            k =\
    \ m\n            m = i\n            i = j\n            j = k\n        }\n    \
    \    if w < y {\n            k = n\n            n = i\n            i = j\n   \
    \         j = k\n        }\n        if w < z {\n            k = m\n          \
    \  m = i\n            i = j\n            j = k\n        }\n        if w < w {\n\
    \            k = n\n            n = i\n            i = j\n            j = k\n\
    \        }\n        if w < x {\n            k = m\n            m = i\n       \
    \     i = j\n            j = k\n        }\n        if w < y {\n            k =\
    \ n\n            n = i\n            i = j\n            j = k\n        }\n    \
    \    if w < z {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpq9l3rq36.swift:141:43: error: expected '}' at end of brace statement\n\
    assert(monotonic(l: [9, 9, 9, 9]) == true)\n                                 \
    \         ^\n/tmp/tmpq9l3rq36.swift:28:17: note: to match this opening '{'\n \
    \   while i < j {\n                ^\n/tmp/tmpq9l3rq36.swift:141:43: error: expected\
    \ '}' at end of brace statement\nassert(monotonic(l: [9, 9, 9, 9]) == true)\n\
    \                                          ^\n/tmp/tmpq9l3rq36.swift:9:34: note:\
    \ to match this opening '{'\nfunc monotonic(l: [Int]) -> Bool {\n            \
    \                     ^\n/tmp/tmpq9l3rq36.swift:30:9: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n        y = (l[i] * xy + l[j] * yz + l[k] * zzz\
    \ + l[m] * www)\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq9l3rq36.swift:31:9: error: the compiler is unable to type-check this\
    \ expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        z = (l[i] * xy + l[j] * yz + l[k] * zzz + l[m] * www)\n\
    \        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq9l3rq36.swift:122:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659820718
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for v in l {\n        if v < l[i] {\n        \
    \    return false\n        }\n        if v > l[i] {\n            return true\n\
    \        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp8_fl8l6i/tmp8_fl8l6i.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f118d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f115d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f115d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f115cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8_fl8l6i                        0x00005579dde3564e <unavailable> + 5710

    5    libc.so.6                          0x00002b6f11ac5460 __libc_start_main +
    245

    6    tmp8_fl8l6i                        0x00005579dde35129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for v in l {\n        if v < l[i] {\n        \
    \    return false\n        }\n        if v > l[i] {\n            return true\n\
    \        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp8_fl8l6i/tmp8_fl8l6i.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f118d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f115d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f115d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f115cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8_fl8l6i                        0x00005579dde3564e <unavailable> + 5710

    5    libc.so.6                          0x00002b6f11ac5460 __libc_start_main +
    245

    6    tmp8_fl8l6i                        0x00005579dde35129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    while\
    \ i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else if l[i]\
    \ > l[j] {\n            j -= 1\n        } else {\n            return true\n  \
    \      }\n        if i < k {\n            k = j\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpmtkma4fo/tmpmtkma4fo.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13d0df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13d0ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13d0ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13d0ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmtkma4fo                        0x0000561bd8be13b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b13d0fde460 __libc_start_main +
    245

    6    tmpmtkma4fo                        0x0000561bd8be1019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.isEmpty {\n        return true\n    }\n    var prev: Int\
    \ = 0\n    var cur: Int = l[0]\n    for next in l {\n        if next < cur {\n\
    \            return false\n        }\n        if next > prev {\n            return\
    \ true\n        }\n        prev = cur\n        cur = next\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmplmf0gjgy/tmplmf0gjgy.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d15c56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d1594db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d1594d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d1594c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplmf0gjgy                        0x000055e9146a469e <unavailable> + 5790

    5    libc.so.6                          0x00002b6d15e42460 __libc_start_main +
    245

    6    tmplmf0gjgy                        0x000055e9146a4179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.isEmpty {\n        return true\n    }\n    if l.count ==\
    \ 1 {\n        return true\n    }\n    if l.count == 2 {\n        return l[0]\
    \ > l[1]\n    }\n    var left = 0\n    var right = l.count - 1\n    var mid =\
    \ 0\n    var leftIsSmaller = true\n    var rightIsSmaller = true\n    while left\
    \ < right {\n        mid = left + (right - left) / 2\n        if l[mid] < l[left]\
    \ {\n            leftIsSmaller = false\n        }\n        if l[mid] > l[right]\
    \ {\n            rightIsSmaller = false\n        }\n        if leftIsSmaller &&\
    \ rightIsSmaller {\n            return true\n        }\n        if l[mid] < l[left]\
    \ {\n            left = mid + 1\n        } else {\n            right = mid - 1\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpets6_34u/tmpets6_34u.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7547187c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7546e7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7546e7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7546e7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpets6_34u                        0x000055bb5a70c751 <unavailable> + 5969

    5    libc.so.6                          0x00002b7547373460 __libc_start_main +
    245

    6    tmpets6_34u                        0x000055bb5a70c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    while\
    \ i < j {\n        if l[i] < l[k] {\n            i += 1\n        } else if l[i]\
    \ > l[k] {\n            j -= 1\n        } else {\n            return true\n  \
    \      }\n        k += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a74f78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a74c6f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a74c6f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a74c6f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a74c6ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7a74a6ee83 <unavailable> + 188035

    6    tmplkdjoncq                        0x000055b0e1098aac <unavailable> + 6828

    7    tmplkdjoncq                        0x000055b0e109833d <unavailable> + 4925

    8    libc.so.6                          0x00002b7a75164460 __libc_start_main +
    245

    9    tmplkdjoncq                        0x000055b0e1098019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var\
    \ m = j\n    var n = j\n    var o = j\n    while i < j {\n        if l[i] < l[j]\
    \ {\n            m = i\n        }\n        if l[i] > l[j] {\n            n = j\n\
    \        }\n        if l[i] < l[k] {\n            o = i\n        }\n        if\
    \ l[i] > l[k] {\n            i = o\n        }\n        if l[i] < l[m] {\n    \
    \        k = m\n        }\n        if l[i] > l[m] {\n            j = k\n     \
    \   }\n        i += 1\n        j -= 1\n        k += 1\n        m += 1\n      \
    \  n -= 1\n    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpbcf3k158/tmpbcf3k158.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b886d876c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b886d56db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b886d56d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b886d56c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcf3k158                        0x000055f8e99f43b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b886da62460 __libc_start_main +
    245

    6    tmpbcf3k158                        0x000055f8e99f4019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for x in l {\n        if x > l[i] {\n        \
    \    return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpcp97jt51/tmpcp97jt51.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d6ad47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d6aa3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d6aa3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d6aa3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcp97jt51                        0x000055de9119c64e <unavailable> + 5710

    5    libc.so.6                          0x00002b4d6af33460 __libc_start_main +
    245

    6    tmpcp97jt51                        0x000055de9119c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var monotonic = true\n    for idx, x in l.enumerated() {\n  \
    \      if x < l[idx - 1] {\n            monotonic = false\n            break\n\
    \        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmps8jie0lq.swift:11:12: error: expected 'in' after for-each pattern\n\
    \    for idx, x in l.enumerated() {\n           ^\n/tmp/tmps8jie0lq.swift:11:12:\
    \ error: expected Sequence expression for for-each loop\n    for idx, x in l.enumerated()\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return monotonic(l, true)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgm23kpuh.swift:10:25: error: extra argument in call\n    return\
    \ monotonic(l, true)\n                    ~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var\
    \ m = Int64(l.count)\n    while i < j {\n        if l[i] < l[j] {\n          \
    \  if l[i] < l[k] {\n                if l[i] < m {\n                    m = l[i]\n\
    \                }\n                i += 1\n            } else {\n           \
    \     if l[k] < m {\n                    m = l[k]\n                }\n       \
    \         k -= 1\n            }\n        } else {\n            if l[j] < l[k]\
    \ {\n                if l[j] < m {\n                    m = l[j]\n           \
    \     }\n                j -= 1\n            } else {\n                if l[k]\
    \ < m {\n                    m = l[k]\n                }\n                k +=\
    \ 1\n            }\n        }\n    }\n    return m == Int64(l.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpadtnqj4a.swift:18:26: error: cannot assign value of type 'Int'\
    \ to type 'Int64'\n                    m = l[i]\n                        ~^~~\n\
    \                        Int64( )\n/tmp/tmpadtnqj4a.swift:23:26: error: cannot\
    \ assign value of type 'Int' to type 'Int64'\n                    m = l[k]\n \
    \                       ~^~~\n                        Int64( )\n/tmp/tmpadtnqj4a.swift:30:26:\
    \ error: cannot assign value of type 'Int' to type 'Int64'\n                 \
    \   m = l[j]\n                        ~^~~\n                        Int64( )\n\
    /tmp/tmpadtnqj4a.swift:35:26: error: cannot assign value of type 'Int' to type\
    \ 'Int64'\n                    m = l[k]\n                        ~^~~\n      \
    \                  Int64( )\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    let len = l.count\n    if len == 0 {\n        return true\n \
    \   }\n    if len == 1 {\n        return l[0] >= l[1]\n    }\n    if len == 2\
    \ {\n        return l[0] >= l[1] && l[0] < l[1]\n    }\n    if len == 3 {\n  \
    \      return l[0] >= l[1] && l[0] < l[2] && l[1] < l[2]\n    }\n    if len ==\
    \ 4 {\n        return l[0] >= l[1] && l[0] < l[2] && l[1] < l[3] && l[2] < l[3]\n\
    \    }\n    if len == 5 {\n        return l[0] >= l[1] && l[0] < l[2] && l[1]\
    \ < l[3] && l[2] < l[4] && l[3] < l[4]\n    }\n    if len == 6 {\n        return\
    \ l[0] >= l[1] && l[0] < l[2] && l[1] < l[3] && l[2] < l[4] && l[3] < l[5] &&\
    \ l[4] < l[5]\n    }\n    if len == 7 {\n        return l[0] >= l[1] && l[0] <\
    \ l[2] && l[1] < l[3] && l[2] < l[4] && l[3] < l[5] && l[4] < l[6] && l[5] < l[6]\n\
    \    }\n    if len == 8 {\n        return l[0] >= l[1] && l[0] < l[2] && l[1]\
    \ < l[3] && l[2] < l[4] && l[3] < l[5] && l[4] < l[6] && l[5] < l[7] && l[6] <\
    \ l[7]\n    }\n    if len == 9 {\n        return l[0] >= l[1] && l[0] < l[2] &&\
    \ l[1] < l[3] && l[2] < l[4] && l[3] < l[5] && l[4] < l[6] && l[5] < l[7] && l[6]\
    \ < l[8] && l[7] < l[8]\n    }\n    if len == 10 {\n        return l[0] >= l[1]\
    \ && l[0] < l[2] && l[1] < l[3] && l[2] < l[4] && l[3] < l[5] && l[4] < l[6] &&\
    \ l[5] < l[7] && l[6] < l[8] && l[7] < l[9] && l[8] < l[9]\n    }\n    if len\
    \ == 11 {\n        return l[0] >= l[1] && l[0] < l[2] && l[1] < l[3] && l[2] <\
    \ l[4] && l[3] < l[5] && l[4] < l[6] && l[5] < l[7] && l[6] < l[8] && l[7] < l[9]\
    \ && l[8] < l[10] && l[9] < l[10]\n    }\n    if len == 12 {\n        return l[0]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnxuudy0c.swift:71:43: error: expected '}' at end of brace statement\n\
    assert(monotonic(l: [9, 9, 9, 9]) == true)\n                                 \
    \         ^\n/tmp/tmpnxuudy0c.swift:9:34: note: to match this opening '{'\nfunc\
    \ monotonic(l: [Int]) -> Bool {\n                                 ^\n/tmp/tmpnxuudy0c.swift:48:17:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \     return l[0]\n                ^\n               (    != 0)\n/tmp/tmpnxuudy0c.swift:52:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for x in l {\n        if x > l[i] {\n        \
    \    return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpcp97jt51/tmpcp97jt51.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d6ad47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d6aa3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d6aa3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d6aa3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcp97jt51                        0x000055de9119c64e <unavailable> + 5710

    5    libc.so.6                          0x00002b4d6af33460 __libc_start_main +
    245

    6    tmpcp97jt51                        0x000055de9119c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var\
    \ m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n\
    \    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t =\
    \ Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n\
    \    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a =\
    \ Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n\
    \    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h =\
    \ Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n\
    \    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o =\
    \ Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n\
    \    var s = Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n    var v =\
    \ Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n\
    \    var z = Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c =\
    \ Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n\
    \    var g = Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n    var j =\
    \ Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n\
    \    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q =\
    \ Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n\
    \    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x =\
    \ Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n\
    \    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e =\
    \ Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n\
    \    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l =\
    \ Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n\
    \    var p = Int64(0)\n    var q = Int64(0)\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpn0o6k2e5.swift:35:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpn0o6k2e5.swift:36:9: error: invalid\
    \ redeclaration of 'j'\n    var j = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count - 1\n        ^\n/tmp/tmpn0o6k2e5.swift:37:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = j - 1\n        ^\n/tmp/tmpn0o6k2e5.swift:39:9:\
    \ error: invalid redeclaration of 'm'\n    var m = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:13:9:\
    \ note: 'm' previously declared here\n    var m = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:40:9:\
    \ error: invalid redeclaration of 'n'\n    var n = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:14:9:\
    \ note: 'n' previously declared here\n    var n = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:41:9:\
    \ error: invalid redeclaration of 'o'\n    var o = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:15:9:\
    \ note: 'o' previously declared here\n    var o = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:42:9:\
    \ error: invalid redeclaration of 'p'\n    var p = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:16:9:\
    \ note: 'p' previously declared here\n    var p = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:43:9:\
    \ error: invalid redeclaration of 'q'\n    var q = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:17:9:\
    \ note: 'q' previously declared here\n    var q = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:44:9:\
    \ error: invalid redeclaration of 'r'\n    var r = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:18:9:\
    \ note: 'r' previously declared here\n    var r = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:45:9:\
    \ error: invalid redeclaration of 's'\n    var s = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:19:9:\
    \ note: 's' previously declared here\n    var s = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:46:9:\
    \ error: invalid redeclaration of 't'\n    var t = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:20:9:\
    \ note: 't' previously"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for x in l {\n        if x > l[i] {\n        \
    \    return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpcp97jt51/tmpcp97jt51.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d6ad47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d6aa3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d6aa3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d6aa3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcp97jt51                        0x000055de9119c64e <unavailable> + 5710

    5    libc.so.6                          0x00002b4d6af33460 __libc_start_main +
    245

    6    tmpcp97jt51                        0x000055de9119c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return monotonic(l, isIncreasing: true)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpa35moi53.swift:10:39: error: extra argument 'isIncreasing' in call\n\
    \    return monotonic(l, isIncreasing: true)\n                    ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    let len = l.count\n    if len == 0 {\n        return true\n \
    \   }\n    if len == 1 {\n        return l[0] >= l[1]\n    }\n    if len == 2\
    \ {\n        return l[0] > l[1]\n    }\n    if len == 3 {\n        return l[0]\
    \ >= l[1] && l[0] > l[2]\n    }\n    if len == 4 {\n        return l[0] > l[1]\
    \ && l[0] >= l[2] && l[0] > l[3]\n    }\n    if len == 5 {\n        return l[0]\
    \ > l[1] && l[0] > l[2] && l[0] >= l[3] && l[0] > l[4]\n    }\n    if len == 6\
    \ {\n        return l[0] > l[1] && l[0] > l[2] && l[0] > l[3] && l[0] >= l[4]\
    \ && l[0] > l[5]\n    }\n    if len == 7 {\n        return l[0] > l[1] && l[0]\
    \ > l[2] && l[0] > l[3] && l[0] > l[4] && l[0] >= l[5] && l[0] > l[6]\n    }\n\
    \    if len == 8 {\n        return l[0] > l[1] && l[0] > l[2] && l[0] > l[3] &&\
    \ l[0] > l[4] && l[0] > l[5] && l[0] >= l[6] && l[0] > l[7]\n    }\n    if len\
    \ == 9 {\n        return l[0] > l[1] && l[0] > l[2] && l[0] > l[3] && l[0] > l[4]\
    \ && l[0] > l[5] && l[0] > l[6] && l[0] >= l[7] && l[0] > l[8]\n    }\n    if\
    \ len == 10 {\n        return l[0] > l[1] && l[0] > l[2] && l[0] > l[3] && l[0]\
    \ > l[4] && l[0] > l[5] && l[0] > l[6] && l[0] > l[7] && l[0] > l[8]\n    }\n\
    \    if len == 11 {\n        return l[0] > l[1] && l[0] > l[2] && l[0] > l[3]\
    \ && l[0] > l[4] && l[0] > l[5] && l[0] > l[6] && l[0] > l[7] && l[0] > l[8] &&\
    \ l[0] >= l[9]\n    }\n    if len == 12 {\n        return l[0] > l[1] && l[0]\
    \ > l[2] && l[0] > l[3] && l[0] > l[4] && l[0] > l[5] && l[0] > l[6] && l[0] >\
    \ l[7] && l[0] > l[8] && l[0] > l[9] && l[0] >= l[10]\n    }\n    if len == 13\
    \ {\n        return l[0] > l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmppg0xv3ts.swift:74:43: error: expected '}' at end of brace statement\n\
    assert(monotonic(l: [9, 9, 9, 9]) == true)\n                                 \
    \         ^\n/tmp/tmppg0xv3ts.swift:9:34: note: to match this opening '{'\nfunc\
    \ monotonic(l: [Int]) -> Bool {\n                                 ^\n/tmp/tmppg0xv3ts.swift:51:23:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \        return l[0] > l\n                      ^\n/tmp/tmppg0xv3ts.swift:55:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var monotonic = true\n    for idx, val in\n        zip(l.indices,\
    \ l.suffix) {\n        if val < l[idx - 1] {\n            monotonic = false\n\
    \            break\n        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp99zbncvn.swift:11:12: error: expected 'in' after for-each pattern\n\
    \    for idx, val in\n           ^\n/tmp/tmp99zbncvn.swift:11:12: error: expected\
    \ Sequence expression for for-each loop\n    for idx, val in\n           ^\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    let n = l.count\n    if n < 2 {\n        return true\n    }\n\
    \    if n == 2 {\n        return l[0] > l[1]\n    }\n    var i = 0\n    var j\
    \ = n - 1\n    var k = j - 1\n    while i < j {\n        if l[i] > l[j] {\n  \
    \          return false\n        }\n        if l[i] < l[k] {\n            return\
    \ true\n        }\n        if l[i] > l[k] {\n            i = k\n        } else\
    \ {\n            j = k\n        }\n        k = j - 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpxma02osb/tmpxma02osb.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11b67ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11b64e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11b64e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11b64e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxma02osb                        0x000055f8593ff53e <unavailable> + 5438

    5    libc.so.6                          0x00002b11b69d8460 __libc_start_main +
    245

    6    tmpxma02osb                        0x000055f8593ff019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for x in l {\n        if x > l[i] {\n        \
    \    return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpcp97jt51/tmpcp97jt51.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d6ad47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d6aa3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d6aa3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d6aa3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcp97jt51                        0x000055de9119c64e <unavailable> + 5710

    5    libc.so.6                          0x00002b4d6af33460 __libc_start_main +
    245

    6    tmpcp97jt51                        0x000055de9119c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    while\
    \ i < j {\n        if l[i] < l[k] {\n            i += 1\n        } else if l[i]\
    \ > l[k] {\n            j -= 1\n        } else {\n            return true\n  \
    \      }\n        k += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a74f78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a74c6f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a74c6f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a74c6f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a74c6ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7a74a6ee83 <unavailable> + 188035

    6    tmplkdjoncq                        0x000055b0e1098aac <unavailable> + 6828

    7    tmplkdjoncq                        0x000055b0e109833d <unavailable> + 4925

    8    libc.so.6                          0x00002b7a75164460 __libc_start_main +
    245

    9    tmplkdjoncq                        0x000055b0e1098019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var\
    \ m = l[i]\n    var n = l[j]\n    while (i < j) {\n        if ((m > n) != (i <\
    \ k)) {\n            return false\n        }\n        if ((m == n) != (m > n))\
    \ {\n            return true\n        }\n        i += 1\n        m += l[i]\n \
    \       n -= l[i]\n        k += l[j]\n        j -= 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpm00onssi/tmpm00onssi.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3039d41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3039a38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3039a38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3039a377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm00onssi                        0x0000560d434d43b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b3039f2d460 __libc_start_main +
    245

    6    tmpm00onssi                        0x0000560d434d4019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count\n    var k = j - 1\n    while\
    \ i < k {\n        if l[i] < l[j] {\n            i += 1\n        } else if l[i]\
    \ > l[j] {\n            j -= 1\n        } else {\n            return true\n  \
    \      }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4aa43fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4aa40f1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4aa40f1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4aa40f113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4aa40f0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4aa3ef0e83 <unavailable> + 188035

    6    tmp6j237_wh                        0x000055bca0bb3a96 <unavailable> + 6806

    7    tmp6j237_wh                        0x000055bca0bb333d <unavailable> + 4925

    8    libc.so.6                          0x00002b4aa45e6460 __libc_start_main +
    245

    9    tmp6j237_wh                        0x000055bca0bb3019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var max = 0\n    for x in l {\n        if x > max {\n       \
    \     max = x\n        }\n    }\n    for x in l {\n        if x < max {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpj4plz0tx/tmpj4plz0tx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2be614bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2be5e42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2be5e42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2be5e417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj4plz0tx                        0x000055fc23849472 <unavailable> + 5234

    5    libc.so.6                          0x00002b2be6337460 __libc_start_main +
    245

    6    tmpj4plz0tx                        0x000055fc238490d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for v in l {\n        if v < l[i] {\n        \
    \    return false\n        }\n        if v > l[i] {\n            return true\n\
    \        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp8_fl8l6i/tmp8_fl8l6i.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f118d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f115d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f115d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f115cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8_fl8l6i                        0x00005579dde3564e <unavailable> + 5710

    5    libc.so.6                          0x00002b6f11ac5460 __libc_start_main +
    245

    6    tmp8_fl8l6i                        0x00005579dde35129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return monotonicWithOptions(l, options: [])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpiz_5d589.swift:10:12: error: cannot find 'monotonicWithOptions'\
    \ in scope\n    return monotonicWithOptions(l, options: [])\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for x in l {\n        if x >= l[i] {\n       \
    \     return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpppmx5wry/tmpppmx5wry.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b650d823c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b650d51ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b650d51a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b650d5197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpppmx5wry                        0x000055ca46fd04c2 <unavailable> + 5314

    5    libc.so.6                          0x00002b650da0f460 __libc_start_main +
    245

    6    tmpppmx5wry                        0x000055ca46fd0129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = 1\n    var k = 0\n    var n = l.count\n\
    \    while i < n && j < n {\n        if l[i] < l[j] {\n            k = i\n   \
    \     } else {\n            k = j\n        }\n        if k > i {\n           \
    \ j = k\n        } else {\n            i = k\n        }\n    }\n    return i ==\
    \ n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) ==\
    \ true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1,\
    \ 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659820660
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var\
    \ m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n\
    \    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t =\
    \ Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n\
    \    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a =\
    \ Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n\
    \    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h =\
    \ Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n\
    \    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o =\
    \ Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n\
    \    var s = Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n    var v =\
    \ Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n\
    \    var z = Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c =\
    \ Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n\
    \    var g = Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n    var j =\
    \ Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n\
    \    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q =\
    \ Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n\
    \    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x =\
    \ Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n\
    \    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e =\
    \ Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n\
    \    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l =\
    \ Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n\
    \    var p = Int64(0)\n    var q = Int64(0)\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpn0o6k2e5.swift:35:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpn0o6k2e5.swift:36:9: error: invalid\
    \ redeclaration of 'j'\n    var j = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count - 1\n        ^\n/tmp/tmpn0o6k2e5.swift:37:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = j - 1\n        ^\n/tmp/tmpn0o6k2e5.swift:39:9:\
    \ error: invalid redeclaration of 'm'\n    var m = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:13:9:\
    \ note: 'm' previously declared here\n    var m = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:40:9:\
    \ error: invalid redeclaration of 'n'\n    var n = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:14:9:\
    \ note: 'n' previously declared here\n    var n = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:41:9:\
    \ error: invalid redeclaration of 'o'\n    var o = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:15:9:\
    \ note: 'o' previously declared here\n    var o = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:42:9:\
    \ error: invalid redeclaration of 'p'\n    var p = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:16:9:\
    \ note: 'p' previously declared here\n    var p = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:43:9:\
    \ error: invalid redeclaration of 'q'\n    var q = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:17:9:\
    \ note: 'q' previously declared here\n    var q = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:44:9:\
    \ error: invalid redeclaration of 'r'\n    var r = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:18:9:\
    \ note: 'r' previously declared here\n    var r = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:45:9:\
    \ error: invalid redeclaration of 's'\n    var s = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:19:9:\
    \ note: 's' previously declared here\n    var s = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:46:9:\
    \ error: invalid redeclaration of 't'\n    var t = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:20:9:\
    \ note: 't' previously"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var max = 0\n    var min = 0\n    for x in l {\n        if x\
    \ > max {\n            max = x\n        }\n        if x < min {\n            min\
    \ = x\n        }\n    }\n    return min <= max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpic54xgvp/tmpic54xgvp.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8172526c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b817221db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b817221d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b817221c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpic54xgvp                        0x00005566aed8e5fe <unavailable> + 5630

    5    libc.so.6                          0x00002b8172712460 __libc_start_main +
    245

    6    tmpic54xgvp                        0x00005566aed8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var max = 0\n    for x in l {\n        if x > max {\n       \
    \     max = x\n        }\n    }\n    for x in l {\n        if x < max {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpj4plz0tx/tmpj4plz0tx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2be614bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2be5e42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2be5e42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2be5e417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj4plz0tx                        0x000055fc23849472 <unavailable> + 5234

    5    libc.so.6                          0x00002b2be6337460 __libc_start_main +
    245

    6    tmpj4plz0tx                        0x000055fc238490d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    let sorted = l.sorted()\n    return sorted.first == sorted.last\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpdhskm4vi/tmpdhskm4vi.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acfd8c72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfd8969b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acfd8969988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acfd89687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdhskm4vi                        0x000055fa06a534e2 <unavailable> + 5346

    5    libc.so.6                          0x00002acfd8e5e460 __libc_start_main +
    245

    6    tmpdhskm4vi                        0x000055fa06a53149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var max = 0\n    var min = 0\n    for x in l {\n        if x\
    \ > max {\n            max = x\n        }\n        if x < min {\n            min\
    \ = x\n        }\n    }\n    return min <= max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpic54xgvp/tmpic54xgvp.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8172526c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b817221db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b817221d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b817221c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpic54xgvp                        0x00005566aed8e5fe <unavailable> + 5630

    5    libc.so.6                          0x00002b8172712460 __libc_start_main +
    245

    6    tmpic54xgvp                        0x00005566aed8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    let n = l.count\n    for i in 0..<n {\n        if l[i] < l[(i\
    \ + 1) % n] {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpe9mz95hp/tmpe9mz95hp.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d7b72dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d7b424b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d7b424988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d7b4237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9mz95hp                        0x000055cda6634542 <unavailable> + 5442

    5    libc.so.6                          0x00002b2d7b919460 __libc_start_main +
    245

    6    tmpe9mz95hp                        0x000055cda66341a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var left =\
    \ 0\n    var right = l.count - 1\n    var leftIsSmaller = true\n    var rightIsSmaller\
    \ = true\n    var leftIsLarger = false\n    var rightIsLarger = false\n    var\
    \ leftIsEqual = false\n    var rightIsEqual = false\n    while left < right {\n\
    \        if l[left] < l[right] {\n            leftIsSmaller = false\n        \
    \    leftIsLarger = true\n            left++\n        } else {\n            rightIsSmaller\
    \ = false\n            rightIsLarger = true\n            right--\n        }\n\
    \        if leftIsSmaller && rightIsSmaller {\n            leftIsEqual = false\n\
    \            rightIsEqual = true\n            leftIsSmaller = true\n         \
    \   rightIsSmaller = true\n            leftIsLarger = true\n            rightIsLarger\
    \ = true\n            left++\n            right--\n        } else if leftIsSmaller\
    \ {\n            leftIsEqual = false\n            leftIsSmaller = true\n     \
    \       left++\n        } else if rightIsSmaller {\n            rightIsEqual =\
    \ false\n            rightIsSmaller = true\n            right--\n        }\n \
    \   }\n    return leftIsLarger && rightIsLarger && leftIsEqual && rightIsEqual\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqh60a5za.swift:25:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            left++\n                ^~\n/tmp/tmpqh60a5za.swift:29:18:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  right--\n                 ^~\n/tmp/tmpqh60a5za.swift:38:17: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            left++\n         \
    \       ^~\n/tmp/tmpqh60a5za.swift:39:18: error: cannot find operator '--' in\
    \ scope; did you mean '-= 1'?\n            right--\n                 ^~\n/tmp/tmpqh60a5za.swift:43:17:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  left++\n                ^~\n/tmp/tmpqh60a5za.swift:47:18: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n            right--\n        \
    \         ^~\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for x in l {\n        if x < l[i] {\n        \
    \    return false\n        }\n        if x > l[i] {\n            return true\n\
    \        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpvls9ck58/tmpvls9ck58.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a00c25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a0091cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a0091c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a0091b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvls9ck58                        0x00005620d6b0764e <unavailable> + 5710

    5    libc.so.6                          0x00002b3a00e11460 __libc_start_main +
    245

    6    tmpvls9ck58                        0x00005620d6b07129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    let sorted = l.sorted()\n    if sorted.first > sorted.last {\n\
    \        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpph1rjat_.swift:11:21: error: binary operator '>' cannot be applied\
    \ to two 'Int?' operands\n    if sorted.first > sorted.last {\n       ~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~\n/tmp/tmpph1rjat_.swift:11:21: note: overloads for '>' exist with\
    \ these partially matching parameter lists: (Int, Int)\n    if sorted.first >\
    \ sorted.last {\n                    ^\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for x in l {\n        if x > l[i] {\n        \
    \    return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpcp97jt51/tmpcp97jt51.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d6ad47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d6aa3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d6aa3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d6aa3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcp97jt51                        0x000055de9119c64e <unavailable> + 5710

    5    libc.so.6                          0x00002b4d6af33460 __libc_start_main +
    245

    6    tmpcp97jt51                        0x000055de9119c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for x in l {\n        if i > x {\n           \
    \ return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp3jihj39k/tmp3jihj39k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2515aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2512a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2512a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2512a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3jihj39k                        0x000055ec5bb835fe <unavailable> + 5630

    5    libc.so.6                          0x00002ae251796460 __libc_start_main +
    245

    6    tmp3jihj39k                        0x000055ec5bb830d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for x in l {\n        if x >= l[i] {\n       \
    \     return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpppmx5wry/tmpppmx5wry.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b650d823c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b650d51ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b650d51a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b650d5197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpppmx5wry                        0x000055ca46fd04c2 <unavailable> + 5314

    5    libc.so.6                          0x00002b650da0f460 __libc_start_main +
    245

    6    tmpppmx5wry                        0x000055ca46fd0129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    while i < j {\n     \
    \   if l[i] < l[j] {\n            i += 1\n        } else if l[i] > l[j] {\n  \
    \          j -= 1\n        } else {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp_as9avee/tmp_as9avee.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b153d92bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b153d622b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b153d622988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b153d6217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_as9avee                        0x000055bfe8a223b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b153db17460 __libc_start_main +
    245

    6    tmp_as9avee                        0x000055bfe8a22019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var\
    \ m = l[i]\n    var n = l[j]\n    while i < j {\n        if m > n {\n        \
    \    k = j\n        } else {\n            i = i + 1\n            m = l[i]\n  \
    \          n = l[j]\n        }\n    }\n    return m >= n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659820660
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = 1\n    var k = l.count\n    while i <\
    \ k {\n        if l[i] < l[j] {\n            i += 1\n        } else if l[i] >\
    \ l[j] {\n            j += 1\n        } else {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp49uu514v/tmp49uu514v.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d60ba5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d6089cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d6089c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d6089b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49uu514v                        0x000055ea4a38e3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b5d60d91460 __libc_start_main +
    245

    6    tmp49uu514v                        0x000055ea4a38e019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var left =\
    \ 0\n    var right = l.count - 1\n    var incr = l.first! < l.last!\n    var lastVal\
    \ = l.last!\n    var lastValPrev = l.last!\n    while left < right {\n       \
    \ if incr {\n            if lastValPrev < l.first! {\n                incr = false\n\
    \            }\n        } else {\n            if lastValPrev > l.last! {\n   \
    \             incr = true\n            }\n        }\n        if incr {\n     \
    \       lastVal = l.first!\n            lastValPrev = l.first!\n        } else\
    \ {\n            lastVal = l.last!\n            lastValPrev = l.last!\n      \
    \  }\n        left++\n        right--\n    }\n    return incr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmppsk3fceh.swift:35:13: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        left++\n            ^~\n/tmp/tmppsk3fceh.swift:36:14:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n        right--\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    let len = l.count\n    if len == 0 {\n        return true\n \
    \   }\n    if len == 1 {\n        return l[0] >= l[1]\n    }\n    if len == 2\
    \ {\n        return l[0] > l[1]\n    }\n    if len == 3 {\n        return l[0]\
    \ >= l[1] && l[1] >= l[2]\n    }\n    if len == 4 {\n        return l[0] > l[1]\
    \ && l[1] > l[2]\n    }\n    if len == 5 {\n        return l[0] >= l[1] && l[1]\
    \ >= l[2] && l[2] >= l[3]\n    }\n    if len == 6 {\n        return l[0] > l[1]\
    \ && l[1] > l[2] && l[2] > l[3]\n    }\n    if len == 7 {\n        return l[0]\
    \ >= l[1] && l[1] >= l[2] && l[2] >= l[3] && l[3] >= l[4]\n    }\n    if len ==\
    \ 8 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4]\n\
    \    }\n    if len == 9 {\n        return l[0] >= l[1] && l[1] >= l[2] && l[2]\
    \ >= l[3] && l[3] >= l[4] && l[4] >= l[5]\n    }\n    if len == 10 {\n       \
    \ return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5]\
    \ && l[5] > l[6]\n    }\n    if len == 11 {\n        return l[0] >= l[1] && l[1]\
    \ >= l[2] && l[2] >= l[3] && l[3] >= l[4] && l[4] >= l[5] && l[5] >= l[6] && l[6]\
    \ >= l[7]\n    }\n    if len == 12 {\n        return l[0] > l[1] && l[1] > l[2]\
    \ && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7] &&\
    \ l[7] > l[8]\n    }\n    if len == 13 {\n        return l[0] >= l[1] && l[1]\
    \ >= l[2] && l[2] >= l[3] && l[3] >= l[4] && l[4] >= l[5] && l[5] >= l[6] && l[6]\
    \ >= l[7] && l[7] >= l[8] && l[8] >= l[9]\n    }\n    if len == 14 {\n       \
    \ return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5]\
    \ && l[5] > l[6] && l[6] > l[7] && \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1gz834lh.swift:55:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmp1gz834lh.swift:77:43: error: expected '}' at end of brace statement\n\
    assert(monotonic(l: [9, 9, 9, 9]) == true)\n                                 \
    \         ^\n/tmp/tmp1gz834lh.swift:9:34: note: to match this opening '{'\nfunc\
    \ monotonic(l: [Int]) -> Bool {\n                                 ^\n/tmp/tmp1gz834lh.swift:58:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for v in l {\n        if v < l[i] {\n        \
    \    return false\n        }\n        if v > l[i] {\n            return true\n\
    \        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp8_fl8l6i/tmp8_fl8l6i.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f118d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f115d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f115d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f115cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8_fl8l6i                        0x00005579dde3564e <unavailable> + 5710

    5    libc.so.6                          0x00002b6f11ac5460 __libc_start_main +
    245

    6    tmp8_fl8l6i                        0x00005579dde35129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count\n    var k = j - 1\n    var m\
    \ = j\n    while i < m && j < k {\n        if l[i] < l[j] {\n            i +=\
    \ 1\n        } else if l[i] > l[j] {\n            j += 1\n        } else {\n \
    \           i += 1\n            j += 1\n        }\n    }\n    return i < m\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp2ygtzbo2/tmp2ygtzbo2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d08a30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d08727b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d08727988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d087267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ygtzbo2                        0x0000556921f3e53e <unavailable> + 5438

    5    libc.so.6                          0x00002b1d08c1c460 __libc_start_main +
    245

    6    tmp2ygtzbo2                        0x0000556921f3e019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for x in l {\n        if x > l[i] {\n        \
    \    return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpcp97jt51/tmpcp97jt51.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d6ad47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d6aa3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d6aa3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d6aa3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcp97jt51                        0x000055de9119c64e <unavailable> + 5710

    5    libc.so.6                          0x00002b4d6af33460 __libc_start_main +
    245

    6    tmpcp97jt51                        0x000055de9119c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return monotonic(l, lessThanOrEqualTo: 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp0wmpq8cj.swift:10:44: error: extra argument 'lessThanOrEqualTo'\
    \ in call\n    return monotonic(l, lessThanOrEqualTo: 0)\n                   \
    \ ~~~~~~~~~~~~~~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for x in l {\n        if x > l[i] {\n        \
    \    return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpcp97jt51/tmpcp97jt51.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d6ad47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d6aa3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d6aa3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d6aa3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcp97jt51                        0x000055de9119c64e <unavailable> + 5710

    5    libc.so.6                          0x00002b4d6af33460 __libc_start_main +
    245

    6    tmpcp97jt51                        0x000055de9119c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    while\
    \ i < j {\n        if l[i] < l[k] {\n            i += 1\n        } else if l[i]\
    \ > l[k] {\n            j -= 1\n        } else {\n            return true\n  \
    \      }\n        if i == k {\n            return false\n        }\n        k\
    \ += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab19af4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab19ac45561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab19ac45286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab19ac4513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab19ac44bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab19aa44e83 <unavailable> + 188035

    6    tmpqmp11t0o                        0x000055ccf5fddaac <unavailable> + 6828

    7    tmpqmp11t0o                        0x000055ccf5fdd33d <unavailable> + 4925

    8    libc.so.6                          0x00002ab19b13a460 __libc_start_main +
    245

    9    tmpqmp11t0o                        0x000055ccf5fdd019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return monotonic(l, isIncreasing: true)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpa35moi53.swift:10:39: error: extra argument 'isIncreasing' in call\n\
    \    return monotonic(l, isIncreasing: true)\n                    ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    while\
    \ i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else if l[i]\
    \ > l[j] {\n            j -= 1\n        } else {\n            return true\n  \
    \      }\n        if i < k {\n            if l[i] < l[k] {\n                i\
    \ += 1\n            } else {\n                k -= 1\n            }\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpozvgcmbb/tmpozvgcmbb.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed9a5c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed9a2b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed9a2b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed9a2b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozvgcmbb                        0x000055b0478183b2 <unavailable> + 5042

    5    libc.so.6                          0x00002aed9a7ad460 __libc_start_main +
    245

    6    tmpozvgcmbb                        0x000055b047818019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n\n    let min =\
    \ l[0]\n    let max = l[0]\n    for i in 1..<l.count {\n        if l[i] < min\
    \ {\n            min = l[i]\n        } else if l[i] > max {\n            max =\
    \ l[i]\n        }\n    }\n\n    return min <= max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphlkjwnwe.swift:18:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = l[i]\n            ^~~\n/tmp/tmphlkjwnwe.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = l[0]\n    ^~~\n\
    \    var\n/tmp/tmphlkjwnwe.swift:20:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = l[i]\n            ^~~\n/tmp/tmphlkjwnwe.swift:15:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = l[0]\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return monotonicWithTolerance(l, 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5996pijt.swift:10:12: error: cannot find 'monotonicWithTolerance'\
    \ in scope\n    return monotonicWithTolerance(l, 0)\n           ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    while i < j {\n     \
    \   if l[i] < l[j] {\n            i += 1\n        } else if l[i] > l[j] {\n  \
    \          j -= 1\n        } else {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp_as9avee/tmp_as9avee.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b153d92bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b153d622b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b153d622988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b153d6217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_as9avee                        0x000055bfe8a223b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b153db17460 __libc_start_main +
    245

    6    tmp_as9avee                        0x000055bfe8a22019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return monotonic(l, true)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgm23kpuh.swift:10:25: error: extra argument in call\n    return\
    \ monotonic(l, true)\n                    ~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var monotonic = true\n    for idx, val in\n        enumerate(l)\
    \ {\n        if val < l[idx - 1] {\n            monotonic = false\n          \
    \  break\n        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprqbkc4az.swift:11:12: error: expected 'in' after for-each pattern\n\
    \    for idx, val in\n           ^\n/tmp/tmprqbkc4az.swift:11:12: error: expected\
    \ Sequence expression for for-each loop\n    for idx, val in\n           ^\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var\
    \ m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n\
    \    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t =\
    \ Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n\
    \    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a =\
    \ Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n\
    \    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h =\
    \ Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n\
    \    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o =\
    \ Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n\
    \    var s = Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n    var v =\
    \ Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n\
    \    var z = Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c =\
    \ Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n\
    \    var g = Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n    var j =\
    \ Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n\
    \    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q =\
    \ Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n\
    \    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x =\
    \ Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n\
    \    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e =\
    \ Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n\
    \    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l =\
    \ Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n\
    \    var p = Int64(0)\n    var q = Int64(0)\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpn0o6k2e5.swift:35:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpn0o6k2e5.swift:36:9: error: invalid\
    \ redeclaration of 'j'\n    var j = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count - 1\n        ^\n/tmp/tmpn0o6k2e5.swift:37:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = j - 1\n        ^\n/tmp/tmpn0o6k2e5.swift:39:9:\
    \ error: invalid redeclaration of 'm'\n    var m = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:13:9:\
    \ note: 'm' previously declared here\n    var m = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:40:9:\
    \ error: invalid redeclaration of 'n'\n    var n = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:14:9:\
    \ note: 'n' previously declared here\n    var n = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:41:9:\
    \ error: invalid redeclaration of 'o'\n    var o = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:15:9:\
    \ note: 'o' previously declared here\n    var o = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:42:9:\
    \ error: invalid redeclaration of 'p'\n    var p = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:16:9:\
    \ note: 'p' previously declared here\n    var p = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:43:9:\
    \ error: invalid redeclaration of 'q'\n    var q = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:17:9:\
    \ note: 'q' previously declared here\n    var q = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:44:9:\
    \ error: invalid redeclaration of 'r'\n    var r = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:18:9:\
    \ note: 'r' previously declared here\n    var r = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:45:9:\
    \ error: invalid redeclaration of 's'\n    var s = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:19:9:\
    \ note: 's' previously declared here\n    var s = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:46:9:\
    \ error: invalid redeclaration of 't'\n    var t = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:20:9:\
    \ note: 't' previously"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    let len = l.count\n    if len == 0 {\n        return true\n \
    \   }\n    if len == 1 {\n        return l[0] > l[0]\n    }\n    if len == 2 {\n\
    \        return l[0] > l[1]\n    }\n    if len == 3 {\n        return l[0] > l[1]\
    \ && l[1] > l[2]\n    }\n    if len == 4 {\n        return l[0] > l[1] && l[1]\
    \ > l[2] && l[2] > l[3]\n    }\n    if len == 5 {\n        return l[0] > l[1]\
    \ && l[1] > l[2] && l[2] > l[3] && l[3] > l[4]\n    }\n    if len == 6 {\n   \
    \     return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4]\
    \ > l[5]\n    }\n    if len == 7 {\n        return l[0] > l[1] && l[1] > l[2]\
    \ && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6]\n    }\n    if len\
    \ == 8 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4]\
    \ && l[4] > l[5] && l[5] > l[6] && l[6] > l[7]\n    }\n    if len == 9 {\n   \
    \     return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4]\
    \ > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8]\n    }\n    if len == 10\
    \ {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] &&\
    \ l[4] > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9]\n  \
    \  }\n    if len == 11 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] >\
    \ l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8]\
    \ && l[8] > l[9] && l[9] > l[10]\n    }\n    if len == 12 {\n        return l[0]\
    \ > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] >\
    \ l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9] && l[9] > l[10] && l[10\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpey5vbhtj.swift:49:1: error: expected ']' in expression list\n}\n\
    ^\n/tmp/tmpey5vbhtj.swift:48:168: note: to match this opening '['\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5]\
    \ > l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9] && l[9] > l[10] && l[10\n\
    \                                                                            \
    \                                                                            \
    \               ^\n/tmp/tmpey5vbhtj.swift:71:43: error: expected '}' at end of\
    \ brace statement\nassert(monotonic(l: [9, 9, 9, 9]) == true)\n              \
    \                            ^\n/tmp/tmpey5vbhtj.swift:9:34: note: to match this\
    \ opening '{'\nfunc monotonic(l: [Int]) -> Bool {\n                          \
    \       ^\n/tmp/tmpey5vbhtj.swift:48:168: error: type 'Int' cannot be used as\
    \ a boolean; test for '!= 0' instead\n        return l[0] > l[1] && l[1] > l[2]\
    \ && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7] &&\
    \ l[7] > l[8] && l[8] > l[9] && l[9] > l[10] && l[10\n                       \
    \                                                                            \
    \                                                                    ^\n     \
    \                                                                            \
    \                                                                            \
    \         (    != 0)\n/tmp/tmpey5vbhtj.swift:52:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return monotonicHelper(l, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp59syad6i.swift:10:12: error: cannot find 'monotonicHelper' in scope\n\
    \    return monotonicHelper(l, 0)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for v in l {\n        if v < l[i] {\n        \
    \    return false\n        }\n        if v > l[i] {\n            return true\n\
    \        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp8_fl8l6i/tmp8_fl8l6i.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f118d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f115d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f115d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f115cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8_fl8l6i                        0x00005579dde3564e <unavailable> + 5710

    5    libc.so.6                          0x00002b6f11ac5460 __libc_start_main +
    245

    6    tmp8_fl8l6i                        0x00005579dde35129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for v in l {\n        if v < l[i] {\n        \
    \    return false\n        }\n        if v > l[i] {\n            return true\n\
    \        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp8_fl8l6i/tmp8_fl8l6i.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f118d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f115d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f115d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f115cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8_fl8l6i                        0x00005579dde3564e <unavailable> + 5710

    5    libc.so.6                          0x00002b6f11ac5460 __libc_start_main +
    245

    6    tmp8_fl8l6i                        0x00005579dde35129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    let sorted = l.sorted()\n    let last = sorted.last!\n    return\
    \ sorted.first > last\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7ts3x_x8.swift:12:19: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return sorted.first > last\n    \
    \              ^\n/tmp/tmp7ts3x_x8.swift:12:19: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    return sorted.first >\
    \ last\n                  ^\n                        ?? <#default value#>\n/tmp/tmp7ts3x_x8.swift:12:19:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    return sorted.first > last\n                  ^\n               \
    \        !\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = 1\n    var k = 0\n    var n = l.count\n\
    \    var m = n - 1\n    var a = 0\n    var b = n - 1\n    var c = n - 1\n    var\
    \ d = n - 1\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n \
    \   var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n  \
    \  var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n   \
    \ var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n \
    \   var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n  \
    \  var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n   \
    \ var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n \
    \   var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n  \
    \  var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n   \
    \ var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5j6z5m7c.swift:23:9: error: invalid redeclaration of 'j'\n    var\
    \ j = 0\n        ^\n/tmp/tmp5j6z5m7c.swift:11:9: note: 'j' previously declared\
    \ here\n    var j = 1\n        ^\n/tmp/tmp5j6z5m7c.swift:24:9: error: invalid\
    \ redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp5j6z5m7c.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp5j6z5m7c.swift:26:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp5j6z5m7c.swift:14:9:\
    \ note: 'm' previously declared here\n    var m = n - 1\n        ^\n/tmp/tmp5j6z5m7c.swift:27:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp5j6z5m7c.swift:13:9:\
    \ note: 'n' previously declared here\n    var n = l.count\n        ^\n/tmp/tmp5j6z5m7c.swift:40:9:\
    \ error: invalid redeclaration of 'i'\n    var i = 0\n        ^\n/tmp/tmp5j6z5m7c.swift:10:9:\
    \ note: 'i' previously declared here\n    var i = 0\n        ^\n/tmp/tmp5j6z5m7c.swift:41:9:\
    \ error: invalid redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp5j6z5m7c.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = 1\n        ^\n/tmp/tmp5j6z5m7c.swift:42:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp5j6z5m7c.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp5j6z5m7c.swift:43:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp5j6z5m7c.swift:25:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp5j6z5m7c.swift:44:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp5j6z5m7c.swift:14:9:\
    \ note: 'm' previously declared here\n    var m = n - 1\n        ^\n/tmp/tmp5j6z5m7c.swift:45:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp5j6z5m7c.swift:13:9:\
    \ note: 'n' previously declared here\n    var n = l.count\n        ^\n/tmp/tmp5j6z5m7c.swift:46:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp5j6z5m7c.swift:28:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp5j6z5m7c.swift:47:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n  "
  stdout: ''
  timestamp: 1659820655
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for x in l {\n        if i > 0 {\n           \
    \ if x < l[i-1] {\n                return false\n            }\n        }\n  \
    \      i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpqos777t4/tmpqos777t4.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea9e952c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea9e649b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea9e649988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea9e6487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqos777t4                        0x0000556820593731 <unavailable> + 5937

    5    libc.so.6                          0x00002aea9eb3e460 __libc_start_main +
    245

    6    tmpqos777t4                        0x0000556820593129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var\
    \ m = Int64(Int.max)\n    for _ in 0..<l.count {\n        if l[i] < l[j] {\n \
    \           m = l[i]\n            i += 1\n        } else if l[i] > l[j] {\n  \
    \          m = l[j]\n            j -= 1\n        } else {\n            i += 1\n\
    \            j -= 1\n        }\n        if m != l[i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmps93_al6u.swift:16:18: error: cannot assign value of type 'Int'\
    \ to type 'Int64'\n            m = l[i]\n                ~^~~\n              \
    \  Int64( )\n/tmp/tmps93_al6u.swift:19:18: error: cannot assign value of type\
    \ 'Int' to type 'Int64'\n            m = l[j]\n                ~^~~\n        \
    \        Int64( )\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    while i < j {\n     \
    \   if l[i] < l[j] {\n            i += 1\n        } else if l[i] > l[j] {\n  \
    \          j -= 1\n        } else {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp_as9avee/tmp_as9avee.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b153d92bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b153d622b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b153d622988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b153d6217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_as9avee                        0x000055bfe8a223b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b153db17460 __libc_start_main +
    245

    6    tmp_as9avee                        0x000055bfe8a22019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var max = 0\n\
    \    var min = l[0]\n    for i in 1..<l.count {\n        if l[i] < min {\n   \
    \         min = l[i]\n        }\n        if l[i] > max {\n            max = l[i]\n\
    \        }\n    }\n    return min <= max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmppbmeir44/tmppbmeir44.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8ceee3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8cebdab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8cebda988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8cebd97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppbmeir44                        0x0000556417d9c6ce <unavailable> + 5838

    5    libc.so.6                          0x00002af8cf0cf460 __libc_start_main +
    245

    6    tmppbmeir44                        0x0000556417d9c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var max = 0\n    for x in l {\n        if x > max {\n       \
    \     max = x\n        }\n    }\n    for x in l {\n        if x < max {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpj4plz0tx/tmpj4plz0tx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2be614bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2be5e42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2be5e42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2be5e417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj4plz0tx                        0x000055fc23849472 <unavailable> + 5234

    5    libc.so.6                          0x00002b2be6337460 __libc_start_main +
    245

    6    tmpj4plz0tx                        0x000055fc238490d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    while\
    \ i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else if l[i]\
    \ > l[j] {\n            j -= 1\n        } else {\n            return true\n  \
    \      }\n        if i < k {\n            k = j\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpmtkma4fo/tmpmtkma4fo.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13d0df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13d0ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13d0ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13d0ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmtkma4fo                        0x0000561bd8be13b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b13d0fde460 __libc_start_main +
    245

    6    tmpmtkma4fo                        0x0000561bd8be1019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var\
    \ m = Int64(0)\n    var n = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n\
    \    var z = Int64(0)\n    var w = Int64(0)\n    var a = Int64(0)\n    var b =\
    \ Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n\
    \    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n    var i =\
    \ Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n\
    \    var m = Int64(0)\n    var n = Int64(0)\n    var x = Int64(0)\n    var y =\
    \ Int64(0)\n    var z = Int64(0)\n    var w = Int64(0)\n    var a = Int64(0)\n\
    \    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e =\
    \ Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n\
    \    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l =\
    \ Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var x = Int64(0)\n\
    \    var y = Int64(0)\n    var z = Int64(0)\n    var w = Int64(0)\n    var a =\
    \ Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n\
    \    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h =\
    \ Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n\
    \    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var x =\
    \ Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var w = Int64(0)\n\
    \    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d =\
    \ Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n\
    \    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k =\
    \ Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n\
    \    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var w =\
    \ Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n\
    \    var d = Int64(0)\n    var e = Int64(0)\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph3ty80km.swift:27:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(0)\n        ^\n/tmp/tmph3ty80km.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmph3ty80km.swift:28:9: error: invalid\
    \ redeclaration of 'j'\n    var j = Int64(0)\n        ^\n/tmp/tmph3ty80km.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count - 1\n        ^\n/tmp/tmph3ty80km.swift:29:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(0)\n        ^\n/tmp/tmph3ty80km.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = j - 1\n        ^\n/tmp/tmph3ty80km.swift:31:9:\
    \ error: invalid redeclaration of 'm'\n    var m = Int64(0)\n        ^\n/tmp/tmph3ty80km.swift:13:9:\
    \ note: 'm' previously declared here\n    var m = Int64(0)\n        ^\n/tmp/tmph3ty80km.swift:32:9:\
    \ error: invalid redeclaration of 'n'\n    var n = Int64(0)\n        ^\n/tmp/tmph3ty80km.swift:14:9:\
    \ note: 'n' previously declared here\n    var n = Int64(0)\n        ^\n/tmp/tmph3ty80km.swift:33:9:\
    \ error: invalid redeclaration of 'x'\n    var x = Int64(0)\n        ^\n/tmp/tmph3ty80km.swift:15:9:\
    \ note: 'x' previously declared here\n    var x = Int64(0)\n        ^\n/tmp/tmph3ty80km.swift:34:9:\
    \ error: invalid redeclaration of 'y'\n    var y = Int64(0)\n        ^\n/tmp/tmph3ty80km.swift:16:9:\
    \ note: 'y' previously declared here\n    var y = Int64(0)\n        ^\n/tmp/tmph3ty80km.swift:35:9:\
    \ error: invalid redeclaration of 'z'\n    var z = Int64(0)\n        ^\n/tmp/tmph3ty80km.swift:17:9:\
    \ note: 'z' previously declared here\n    var z = Int64(0)\n        ^\n/tmp/tmph3ty80km.swift:36:9:\
    \ error: invalid redeclaration of 'w'\n    var w = Int64(0)\n        ^\n/tmp/tmph3ty80km.swift:18:9:\
    \ note: 'w' previously declared here\n    var w = Int64(0)\n        ^\n/tmp/tmph3ty80km.swift:37:9:\
    \ error: invalid redeclaration of 'a'\n    var a = Int64(0)\n        ^\n/tmp/tmph3ty80km.swift:19:9:\
    \ note: 'a' previously declared here\n    var a = Int64(0)\n        ^\n/tmp/tmph3ty80km.swift:38:9:\
    \ error: invalid redeclaration of 'b'\n    var b = Int64(0)\n        ^\n/tmp/tmph3ty80km.swift:20:9:\
    \ note: 'b' previously"
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return monotonicHelper(l, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp59syad6i.swift:10:12: error: cannot find 'monotonicHelper' in scope\n\
    \    return monotonicHelper(l, 0)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = 1\n    var k = l.count\n    while i <\
    \ k {\n        if l[i] < l[j] {\n            i += 1\n        } else if l[i] >\
    \ l[j] {\n            j += 1\n        } else {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp9qv_wnrl/tmp9qv_wnrl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48d53b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48d50aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48d50ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48d50ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9qv_wnrl                        0x00005591f72c953e <unavailable> + 5438

    5    libc.so.6                          0x00002b48d55a3460 __libc_start_main +
    245

    6    tmp9qv_wnrl                        0x00005591f72c9019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for x in l {\n        if x < l[i] {\n        \
    \    return false\n        }\n        if x > l[i] {\n            return true\n\
    \        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpvls9ck58/tmpvls9ck58.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a00c25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a0091cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a0091c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a0091b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvls9ck58                        0x00005620d6b0764e <unavailable> + 5710

    5    libc.so.6                          0x00002b3a00e11460 __libc_start_main +
    245

    6    tmpvls9ck58                        0x00005620d6b07129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    if l.count\
    \ == 2 {\n        return l[0] > l[1]\n    }\n    var i = 0\n    var j = l.count\
    \ - 1\n    var k = j - 1\n    var m = Int64(math.MaxInt64)\n    for _ in 0..<100\
    \ {\n        if i == j {\n            return false\n        }\n        if l[i]\
    \ < l[j] {\n            if l[i] < m {\n                m = l[i]\n            }\n\
    \            i += 1\n        } else {\n            if l[j] > m {\n           \
    \     m = l[j]\n            }\n            j -= 1\n        }\n        if i ==\
    \ k {\n            return false\n        }\n        if l[i] > l[k] {\n       \
    \     if l[i] < m {\n                m = l[i]\n            }\n            i +=\
    \ 1\n        } else {\n            if l[k] > m {\n                m = l[k]\n \
    \           }\n            k -= 1\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpiytq7g8f.swift:19:19: error: cannot find 'math' in scope\n    var\
    \ m = Int64(math.MaxInt64)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var\
    \ m = l[i]\n    var n = l[j]\n    while i < j {\n        if l[i] < m {\n     \
    \       i += 1\n            m = l[i]\n        } else if l[j] > n {\n         \
    \   j -= 1\n            n = l[j]\n        } else {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpzsq1fuxx/tmpzsq1fuxx.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b987ba6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b987b765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b987b765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b987b7647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzsq1fuxx                        0x000055945055d53e <unavailable> + 5438

    5    libc.so.6                          0x00002b987bc5a460 __libc_start_main +
    245

    6    tmpzsq1fuxx                        0x000055945055d019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return monotonic(l, isIncreasing: true)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpa35moi53.swift:10:39: error: extra argument 'isIncreasing' in call\n\
    \    return monotonic(l, isIncreasing: true)\n                    ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    while i < j {\n     \
    \   if l[i] < l[j] {\n            i += 1\n        } else if l[i] > l[j] {\n  \
    \          j -= 1\n        } else {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp_as9avee/tmp_as9avee.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b153d92bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b153d622b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b153d622988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b153d6217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_as9avee                        0x000055bfe8a223b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b153db17460 __libc_start_main +
    245

    6    tmp_as9avee                        0x000055bfe8a22019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    while\
    \ i < j {\n        if l[i] < l[k] {\n            i += 1\n        } else if l[i]\
    \ > l[k] {\n            j -= 1\n        } else {\n            return true\n  \
    \      }\n        k += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a74f78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a74c6f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a74c6f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a74c6f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a74c6ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7a74a6ee83 <unavailable> + 188035

    6    tmplkdjoncq                        0x000055b0e1098aac <unavailable> + 6828

    7    tmplkdjoncq                        0x000055b0e109833d <unavailable> + 4925

    8    libc.so.6                          0x00002b7a75164460 __libc_start_main +
    245

    9    tmplkdjoncq                        0x000055b0e1098019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    let n = l.count\n    if n < 2 {\n        return true\n    }\n\
    \    var i = 0\n    var j = n - 1\n    var k = n - 1\n    while i < j {\n    \
    \    if l[i] < l[j] {\n            i += 1\n        } else if l[i] > l[j] {\n \
    \           j -= 1\n        } else {\n            k += 1\n        }\n    }\n \
    \   return k > i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp8rduhr8i/tmp8rduhr8i.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4dd72f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dd6fedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dd6fed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dd6fec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rduhr8i                        0x000055737fe3b3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b4dd74e2460 __libc_start_main +
    245

    6    tmp8rduhr8i                        0x000055737fe3b019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.isEmpty {\n        return true\n    }\n    let l = l.sorted()\n\
    \    let last = l.removeLast()\n    return l.first < last\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpl6smwsoc.swift:14:18: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    let last = l.removeLast()\n            \
    \   ~ ^\n/tmp/tmpl6smwsoc.swift:13:5: note: change 'let' to 'var' to make it mutable\n\
    \    let l = l.sorted()\n    ^~~\n    var\n/tmp/tmpl6smwsoc.swift:15:14: error:\
    \ value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n \
    \   return l.first < last\n             ^\n/tmp/tmpl6smwsoc.swift:15:14: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \    return l.first < last\n             ^\n                   ?? <#default value#>\n\
    /tmp/tmpl6smwsoc.swift:15:14: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n    return l.first < last\n          \
    \   ^\n                  !\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for x in l {\n        if i > x {\n           \
    \ return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp3jihj39k/tmp3jihj39k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2515aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2512a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2512a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2512a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3jihj39k                        0x000055ec5bb835fe <unavailable> + 5630

    5    libc.so.6                          0x00002ae251796460 __libc_start_main +
    245

    6    tmp3jihj39k                        0x000055ec5bb830d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var left =\
    \ 0\n    var right = l.count - 1\n    var leftIsSmaller = true\n    var rightIsSmaller\
    \ = true\n    var leftSmaller = l[left]\n    var rightSmaller = l[right]\n   \
    \ while left < right {\n        if leftSmaller < rightSmaller {\n            leftIsSmaller\
    \ = false\n            leftSmaller = l[++left]\n        } else {\n           \
    \ rightIsSmaller = false\n            rightSmaller = l[--right]\n        }\n \
    \   }\n    return leftIsSmaller && rightIsSmaller\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpm1mlw858.swift:22:29: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            leftSmaller = l[++left]\n                \
    \            ^~\n/tmp/tmpm1mlw858.swift:25:30: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n            rightSmaller = l[--right]\n    \
    \                         ^~\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    let len = l.count\n    if len == 0 {\n        return true\n \
    \   }\n    if len == 1 {\n        return l[0] > l[1]\n    }\n    if len == 2 {\n\
    \        return l[0] > l[1] || l[0] < l[1]\n    }\n    if len == 3 {\n       \
    \ return l[0] > l[1] || l[0] < l[1] || l[1] > l[2]\n    }\n    if len == 4 {\n\
    \        return l[0] > l[1] || l[0] < l[1] || l[1] > l[2] || l[2] > l[3]\n   \
    \ }\n    if len == 5 {\n        return l[0] > l[1] || l[0] < l[1] || l[1] > l[2]\
    \ || l[2] > l[3] || l[3] > l[4]\n    }\n    if len == 6 {\n        return l[0]\
    \ > l[1] || l[0] < l[1] || l[1] > l[2] || l[2] > l[3] || l[3] > l[4] || l[4] >\
    \ l[5]\n    }\n    if len == 7 {\n        return l[0] > l[1] || l[0] < l[1] ||\
    \ l[1] > l[2] || l[2] > l[3] || l[3] > l[4] || l[4] > l[5] || l[5] > l[6]\n  \
    \  }\n    if len == 8 {\n        return l[0] > l[1] || l[0] < l[1] || l[1] > l[2]\
    \ || l[2] > l[3] || l[3] > l[4] || l[4] > l[5] || l[5] > l[6] || l[6] > l[7]\n\
    \    }\n    if len == 9 {\n        return l[0] > l[1] || l[0] < l[1] || l[1] >\
    \ l[2] || l[2] > l[3] || l[3] > l[4] || l[4] > l[5] || l[5] > l[6] || l[6] > l[7]\
    \ || l[7] > l[8]\n    }\n    if len == 10 {\n        return l[0] > l[1] || l[0]\
    \ < l[1] || l[1] > l[2] || l[2] > l[3] || l[3] > l[4] || l[4] > l[5] || l[5] >\
    \ l[6] || l[6] > l[7] || l[7] > l[8] || l[8] > l[9]\n    }\n    if len == 11 {\n\
    \        return l[0] > l[1] || l[0] < l[1] || l[1] > l[2] || l[2] > l[3] || l[3]\
    \ > l[4] || l[4] > l[5] || l[5] > l[6] || l[6] > l[7] || l[7] > l[8] || l[8] >\
    \ l[9] || l[9] > l[10]\n    }\n    if len == 12 {\n        return l[0]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpirrd6oqw.swift:71:43: error: expected '}' at end of brace statement\n\
    assert(monotonic(l: [9, 9, 9, 9]) == true)\n                                 \
    \         ^\n/tmp/tmpirrd6oqw.swift:9:34: note: to match this opening '{'\nfunc\
    \ monotonic(l: [Int]) -> Bool {\n                                 ^\n/tmp/tmpirrd6oqw.swift:48:17:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \     return l[0]\n                ^\n               (    != 0)\n/tmp/tmpirrd6oqw.swift:52:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j\n    var m\
    \ = l[0]\n    while i < j {\n        if l[i] < m {\n            i += 1\n     \
    \   } else if l[j] > m {\n            j -= 1\n        } else {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp8kxzjvos/tmp8kxzjvos.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3be87dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3be574b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3be574988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3be5737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kxzjvos                        0x0000564f6453453e <unavailable> + 5438

    5    libc.so.6                          0x00002ab3bea69460 __libc_start_main +
    245

    6    tmp8kxzjvos                        0x0000564f64534019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l == nil || l.isEmpty {\n        return true\n    }\n\n  \
    \  let min = l[0]\n    let max = l[0]\n\n    for i in 1 ..< l.count {\n      \
    \  if l[i] < min {\n            min = l[i]\n        }\n        if l[i] > max {\n\
    \            max = l[i]\n        }\n    }\n\n    return min <= max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpysl4kv27.swift:10:10: warning: comparing non-optional value of\
    \ type '[Int]' to 'nil' always returns false\n    if l == nil || l.isEmpty {\n\
    \       ~ ^  ~~~\n/tmp/tmpysl4kv27.swift:19:13: error: cannot assign to value:\
    \ 'min' is a 'let' constant\n            min = l[i]\n            ^~~\n/tmp/tmpysl4kv27.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = l[0]\n    ^~~\n\
    \    var\n/tmp/tmpysl4kv27.swift:22:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = l[i]\n            ^~~\n/tmp/tmpysl4kv27.swift:15:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = l[0]\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    while\
    \ i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else if l[i]\
    \ > l[j] {\n            j -= 1\n        } else {\n            return true\n  \
    \      }\n        if i == k {\n            return false\n        }\n        if\
    \ l[i] < l[k] {\n            k = j\n        } else {\n            j = i\n    \
    \    }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmph630bsvd/tmph630bsvd.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8422955c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b842264cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b842264c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b842264b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph630bsvd                        0x000055aeea47b3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b8422b41460 __libc_start_main +
    245

    6    tmph630bsvd                        0x000055aeea47b019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var monotonic = true\n    for idx, val in enumerate(l) {\n  \
    \      if val < l[idx - 1] {\n            monotonic = false\n            break\n\
    \        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptszlad60.swift:11:12: error: expected 'in' after for-each pattern\n\
    \    for idx, val in enumerate(l) {\n           ^\n/tmp/tmptszlad60.swift:11:12:\
    \ error: expected Sequence expression for for-each loop\n    for idx, val in enumerate(l)\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var max = 0\n    for x in l {\n        if x > max {\n       \
    \     max = x\n        }\n    }\n    for x in l {\n        if x < max {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpj4plz0tx/tmpj4plz0tx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2be614bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2be5e42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2be5e42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2be5e417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj4plz0tx                        0x000055fc23849472 <unavailable> + 5234

    5    libc.so.6                          0x00002b2be6337460 __libc_start_main +
    245

    6    tmpj4plz0tx                        0x000055fc238490d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var prev =\
    \ 0\n    var curr = l[0]\n    for var i = 1; i < l.count; i++ {\n        if l[i]\
    \ < prev {\n            return false\n        }\n        prev = curr\n       \
    \ curr = l[i]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpoixri9jw.swift:15:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 1; i < l.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for v in l {\n        if v < l[i] {\n        \
    \    return false\n        }\n        if v > l[i] {\n            return true\n\
    \        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp8_fl8l6i/tmp8_fl8l6i.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f118d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f115d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f115d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f115cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8_fl8l6i                        0x00005579dde3564e <unavailable> + 5710

    5    libc.so.6                          0x00002b6f11ac5460 __libc_start_main +
    245

    6    tmp8_fl8l6i                        0x00005579dde35129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for v in l {\n        if v < l[i] {\n        \
    \    return false\n        }\n        if v > l[i] {\n            return true\n\
    \        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp8_fl8l6i/tmp8_fl8l6i.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f118d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f115d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f115d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f115cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8_fl8l6i                        0x00005579dde3564e <unavailable> + 5710

    5    libc.so.6                          0x00002b6f11ac5460 __libc_start_main +
    245

    6    tmp8_fl8l6i                        0x00005579dde35129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    let sorted = l.sorted()\n    return sorted.first >= sorted.last\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpn6c80k93.swift:11:25: error: binary operator '>=' cannot be applied\
    \ to two 'Int?' operands\n    return sorted.first >= sorted.last\n           ~~~~~~~~~~~~\
    \ ^  ~~~~~~~~~~~\n/tmp/tmpn6c80k93.swift:11:25: note: overloads for '>=' exist\
    \ with these partially matching parameter lists: (Int, Int)\n    return sorted.first\
    \ >= sorted.last\n                        ^\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j\n    while\
    \ i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else if l[i]\
    \ > l[j] {\n            j -= 1\n        } else {\n            i += 1\n       \
    \     j -= 1\n        }\n        if k > i {\n            k = j\n        }\n  \
    \  }\n    return i == k\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpufgkuj1a/tmpufgkuj1a.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add0a498c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add0a18fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add0a18f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add0a18e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpufgkuj1a                        0x0000560b5b45653e <unavailable> + 5438

    5    libc.so.6                          0x00002add0a684460 __libc_start_main +
    245

    6    tmpufgkuj1a                        0x0000560b5b456019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return monotonic(l, lessThanOrEqual: true)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpaxz8vu3w.swift:10:42: error: extra argument 'lessThanOrEqual' in\
    \ call\n    return monotonic(l, lessThanOrEqual: true)\n                    ~~~~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var prev =\
    \ 0\n    var curr = l[0]\n    for var i = 1; i < l.count; i++ {\n        if l[i]\
    \ < prev {\n            return false\n        }\n        prev = curr\n       \
    \ curr = l[i]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpoixri9jw.swift:15:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 1; i < l.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var max = 0\n    var min = 0\n    for x in l {\n        if x\
    \ > max {\n            max = x\n        }\n        if x < min {\n            min\
    \ = x\n        }\n    }\n    return min <= max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpic54xgvp/tmpic54xgvp.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8172526c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b817221db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b817221d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b817221c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpic54xgvp                        0x00005566aed8e5fe <unavailable> + 5630

    5    libc.so.6                          0x00002b8172712460 __libc_start_main +
    245

    6    tmpic54xgvp                        0x00005566aed8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = 0\n    var k = 0\n    var n = l.count\n\
    \    while i < n {\n        if l[i] < l[j] {\n            k = i\n        } else\
    \ {\n            k = j\n        }\n        if l[k] > l[i] {\n            j = k\n\
    \        } else {\n            i = k\n        }\n    }\n    return i == n\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659820660
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var max = 0\n    var min = 0\n    for x in l {\n        if x\
    \ > max {\n            max = x\n        }\n        if x < min {\n            min\
    \ = x\n        }\n    }\n    return min <= max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpic54xgvp/tmpic54xgvp.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8172526c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b817221db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b817221d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b817221c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpic54xgvp                        0x00005566aed8e5fe <unavailable> + 5630

    5    libc.so.6                          0x00002b8172712460 __libc_start_main +
    245

    6    tmpic54xgvp                        0x00005566aed8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return monotonicWithTolerance(l, 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5996pijt.swift:10:12: error: cannot find 'monotonicWithTolerance'\
    \ in scope\n    return monotonicWithTolerance(l, 0)\n           ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    while\
    \ i < j {\n        if l[i] < l[k] {\n            i += 1\n        } else if l[i]\
    \ > l[k] {\n            j -= 1\n        } else {\n            return true\n  \
    \      }\n        k += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a74f78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a74c6f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a74c6f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a74c6f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a74c6ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7a74a6ee83 <unavailable> + 188035

    6    tmplkdjoncq                        0x000055b0e1098aac <unavailable> + 6828

    7    tmplkdjoncq                        0x000055b0e109833d <unavailable> + 4925

    8    libc.so.6                          0x00002b7a75164460 __libc_start_main +
    245

    9    tmplkdjoncq                        0x000055b0e1098019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for x in l {\n        if i > 0 && x > l[i-1] {\n\
    \            return false\n        }\n        i = i + 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpt2atwywe/tmpt2atwywe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec014b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec011abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec011ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec011aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2atwywe                        0x000055b784e004c2 <unavailable> + 5314

    5    libc.so.6                          0x00002aec016a0460 __libc_start_main +
    245

    6    tmpt2atwywe                        0x000055b784e00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for x in l {\n        if x > l[i] {\n        \
    \    return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpcp97jt51/tmpcp97jt51.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d6ad47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d6aa3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d6aa3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d6aa3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcp97jt51                        0x000055de9119c64e <unavailable> + 5710

    5    libc.so.6                          0x00002b4d6af33460 __libc_start_main +
    245

    6    tmpcp97jt51                        0x000055de9119c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    let sorted = l.sorted()\n    if sorted.first > sorted.last {\n\
    \        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpph1rjat_.swift:11:21: error: binary operator '>' cannot be applied\
    \ to two 'Int?' operands\n    if sorted.first > sorted.last {\n       ~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~\n/tmp/tmpph1rjat_.swift:11:21: note: overloads for '>' exist with\
    \ these partially matching parameter lists: (Int, Int)\n    if sorted.first >\
    \ sorted.last {\n                    ^\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var max = 0\n    var min = 0\n    for x in l {\n        if x\
    \ > max {\n            max = x\n        }\n        if x < min {\n            min\
    \ = x\n        }\n    }\n    return min <= max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpic54xgvp/tmpic54xgvp.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8172526c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b817221db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b817221d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b817221c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpic54xgvp                        0x00005566aed8e5fe <unavailable> + 5630

    5    libc.so.6                          0x00002b8172712460 __libc_start_main +
    245

    6    tmpic54xgvp                        0x00005566aed8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for v in l {\n        if v < l[i] {\n        \
    \    return false\n        }\n        if v > l[i] {\n            return true\n\
    \        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp8_fl8l6i/tmp8_fl8l6i.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f118d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f115d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f115d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f115cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8_fl8l6i                        0x00005579dde3564e <unavailable> + 5710

    5    libc.so.6                          0x00002b6f11ac5460 __libc_start_main +
    245

    6    tmp8_fl8l6i                        0x00005579dde35129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var max = 0\n    var min = l[0]\n    for x in l {\n        if\
    \ x > max {\n            max = x\n        } else if x < min {\n            min\
    \ = x\n        }\n    }\n    return min <= max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpgnvzh0ey/tmpgnvzh0ey.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1e4bbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1e48b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1e48b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1e48b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgnvzh0ey                        0x000055f66874264e <unavailable> + 5710

    5    libc.so.6                          0x00002ad1e4da7460 __libc_start_main +
    245

    6    tmpgnvzh0ey                        0x000055f668742129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var max = 0\n    var min = Int64(Int.max)\n    for x in l {\n\
    \        if x > max {\n            max = x\n        } else if x < min {\n    \
    \        min = x\n        }\n    }\n    return min <= max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpd64dgfb0.swift:16:19: error: cannot assign value of type 'Int'\
    \ to type 'Int64'\n            min = x\n                  ^\n                \
    \  Int64( )\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j\n    var m\
    \ = Int64(Int.max)\n    var n = Int64(Int.min)\n    while i < j {\n        if\
    \ l[i] < m {\n            m = l[i]\n        }\n        if l[j] > n {\n       \
    \     n = l[j]\n        }\n        i += 1\n        j -= 1\n    }\n    return m\
    \ <= n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpm5tjs01_.swift:17:18: error: cannot assign value of type 'Int'\
    \ to type 'Int64'\n            m = l[i]\n                ~^~~\n              \
    \  Int64( )\n/tmp/tmpm5tjs01_.swift:20:18: error: cannot assign value of type\
    \ 'Int' to type 'Int64'\n            n = l[j]\n                ~^~~\n        \
    \        Int64( )\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var\
    \ m = Int64(Int.max)\n    while i < j {\n        if l[i] < m {\n            i\
    \ += 1\n        } else {\n            if l[i] > m {\n                j -= 1\n\
    \            } else {\n                k = i\n                m = l[i]\n     \
    \       }\n        }\n    }\n    return k == i\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5lfgibzf.swift:22:22: error: cannot assign value of type 'Int'\
    \ to type 'Int64'\n                m = l[i]\n                    ~^~~\n      \
    \              Int64( )\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    let l = l.sorted()\n    for idx in 0..<l.count {\n        if\
    \ l[idx] > l[idx+1] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b57c8c06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57c88fd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b57c88fd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b57c88fd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b57c88fcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b57c86fce83 <unavailable> + 188035

    6    tmp0davvit1                        0x00005582eb235ddf <unavailable> + 7647

    7    tmp0davvit1                        0x00005582eb23556d <unavailable> + 5485

    8    libc.so.6                          0x00002b57c8df2460 __libc_start_main +
    245

    9    tmp0davvit1                        0x00005582eb235249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for x in l {\n        if x < l[i] {\n        \
    \    return false\n        }\n        if x > l[i] {\n            return true\n\
    \        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpvls9ck58/tmpvls9ck58.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a00c25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a0091cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a0091c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a0091b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvls9ck58                        0x00005620d6b0764e <unavailable> + 5710

    5    libc.so.6                          0x00002b3a00e11460 __libc_start_main +
    245

    6    tmpvls9ck58                        0x00005620d6b07129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var max = 0\n    for x in l {\n        if x > max {\n       \
    \     max = x\n        }\n    }\n    for x in l {\n        if x < max {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpj4plz0tx/tmpj4plz0tx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2be614bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2be5e42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2be5e42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2be5e417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj4plz0tx                        0x000055fc23849472 <unavailable> + 5234

    5    libc.so.6                          0x00002b2be6337460 __libc_start_main +
    245

    6    tmpj4plz0tx                        0x000055fc238490d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for x in l {\n        if x > l[i] {\n        \
    \    return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpcp97jt51/tmpcp97jt51.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d6ad47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d6aa3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d6aa3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d6aa3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcp97jt51                        0x000055de9119c64e <unavailable> + 5710

    5    libc.so.6                          0x00002b4d6af33460 __libc_start_main +
    245

    6    tmpcp97jt51                        0x000055de9119c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    while i < j {\n     \
    \   if l[i] < l[j] {\n            i += 1\n        } else if l[i] > l[j] {\n  \
    \          j -= 1\n        } else {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp_as9avee/tmp_as9avee.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b153d92bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b153d622b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b153d622988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b153d6217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_as9avee                        0x000055bfe8a223b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b153db17460 __libc_start_main +
    245

    6    tmp_as9avee                        0x000055bfe8a22019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var\
    \ m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n\
    \    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t =\
    \ Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n\
    \    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a =\
    \ Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n\
    \    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h =\
    \ Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n\
    \    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o =\
    \ Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n\
    \    var s = Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n    var v =\
    \ Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n\
    \    var z = Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c =\
    \ Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n\
    \    var g = Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n    var j =\
    \ Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n\
    \    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q =\
    \ Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n\
    \    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x =\
    \ Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n\
    \    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e =\
    \ Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n\
    \    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l =\
    \ Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n\
    \    var p = Int64(0)\n    var q = Int64(0)\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpn0o6k2e5.swift:35:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpn0o6k2e5.swift:36:9: error: invalid\
    \ redeclaration of 'j'\n    var j = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count - 1\n        ^\n/tmp/tmpn0o6k2e5.swift:37:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = j - 1\n        ^\n/tmp/tmpn0o6k2e5.swift:39:9:\
    \ error: invalid redeclaration of 'm'\n    var m = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:13:9:\
    \ note: 'm' previously declared here\n    var m = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:40:9:\
    \ error: invalid redeclaration of 'n'\n    var n = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:14:9:\
    \ note: 'n' previously declared here\n    var n = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:41:9:\
    \ error: invalid redeclaration of 'o'\n    var o = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:15:9:\
    \ note: 'o' previously declared here\n    var o = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:42:9:\
    \ error: invalid redeclaration of 'p'\n    var p = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:16:9:\
    \ note: 'p' previously declared here\n    var p = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:43:9:\
    \ error: invalid redeclaration of 'q'\n    var q = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:17:9:\
    \ note: 'q' previously declared here\n    var q = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:44:9:\
    \ error: invalid redeclaration of 'r'\n    var r = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:18:9:\
    \ note: 'r' previously declared here\n    var r = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:45:9:\
    \ error: invalid redeclaration of 's'\n    var s = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:19:9:\
    \ note: 's' previously declared here\n    var s = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:46:9:\
    \ error: invalid redeclaration of 't'\n    var t = Int64(0)\n        ^\n/tmp/tmpn0o6k2e5.swift:20:9:\
    \ note: 't' previously"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for x in l {\n        if x < l[i] {\n        \
    \    return false\n        }\n        if x > l[i] {\n            return true\n\
    \        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpvls9ck58/tmpvls9ck58.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a00c25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a0091cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a0091c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a0091b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvls9ck58                        0x00005620d6b0764e <unavailable> + 5710

    5    libc.so.6                          0x00002b3a00e11460 __libc_start_main +
    245

    6    tmpvls9ck58                        0x00005620d6b07129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var max = 0\n    var min = 0\n    for x in l {\n        if x\
    \ > max {\n            max = x\n        }\n        if x < min {\n            min\
    \ = x\n        }\n    }\n    return min <= max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpic54xgvp/tmpic54xgvp.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8172526c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b817221db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b817221d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b817221c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpic54xgvp                        0x00005566aed8e5fe <unavailable> + 5630

    5    libc.so.6                          0x00002b8172712460 __libc_start_main +
    245

    6    tmpic54xgvp                        0x00005566aed8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var max = 0\n    var min = l[0]\n    for x in l {\n        if\
    \ x > max {\n            max = x\n        }\n        if x < min {\n          \
    \  min = x\n        }\n    }\n    return max >= min\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpbbto_kp6/tmpbbto_kp6.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b452f33ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b452f031b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b452f031988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b452f0307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbbto_kp6                        0x0000564991b9364e <unavailable> + 5710

    5    libc.so.6                          0x00002b452f526460 __libc_start_main +
    245

    6    tmpbbto_kp6                        0x0000564991b93129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_tutjnqv.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    for x in l {\n        if x > l[i] {\n        \
    \    return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpcp97jt51/tmpcp97jt51.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d6ad47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d6aa3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d6aa3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d6aa3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcp97jt51                        0x000055de9119c64e <unavailable> + 5710

    5    libc.so.6                          0x00002b4d6af33460 __libc_start_main +
    245

    6    tmpcp97jt51                        0x000055de9119c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var\
    \ monotonic = true\n    while i < j {\n        if l[i] < l[k] {\n            i\
    \ += 1\n        } else if l[i] > l[k] {\n            monotonic = false\n     \
    \       k += 1\n        } else {\n            i += 1\n            k += 1\n   \
    \     }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f3f116c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f3ee0d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8f3ee0d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8f3ee0d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8f3ee0cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8f3ec0ce83 <unavailable> + 188035

    6    tmpqjgxindu                        0x000055a47d2d8ac0 <unavailable> + 6848

    7    tmpqjgxindu                        0x000055a47d2d84c7 <unavailable> + 5319

    8    libc.so.6                          0x00002b8f3f302460 __libc_start_main +
    245

    9    tmpqjgxindu                        0x000055a47d2d8019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820655
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = l.count\n    var k = j - 1\n    while\
    \ i < j {\n        if l[i] < l[k] {\n            i += 1\n        } else if l[i]\
    \ > l[k] {\n            j -= 1\n        } else {\n            return true\n  \
    \      }\n        k += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b54b775ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54b7451561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b54b7451286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b54b745113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b54b7450bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b54b7250e83 <unavailable> + 188035

    6    tmp27wbpqsu                        0x0000560008f0ea96 <unavailable> + 6806

    7    tmp27wbpqsu                        0x0000560008f0e33d <unavailable> + 4925

    8    libc.so.6                          0x00002b54b7946460 __libc_start_main +
    245

    9    tmp27wbpqsu                        0x0000560008f0e019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820654
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var max = 0\n    for i := 0; i < len(l); i++ {\n        if l[i]\
    \ > max {\n            max = l[i]\n        }\n    }\n    for i := 0; i < len(l);\
    \ i++ {\n        if l[i] < max {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9jroc8p6.swift:11:12: error: expected type\n    for i := 0; i <\
    \ len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp9jroc8p6.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++\
    \ {\n           ^\n/tmp/tmp9jroc8p6.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp9jroc8p6.swift:16:12:\
    \ error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n    \
    \        <#type#>\n/tmp/tmp9jroc8p6.swift:16:12: error: expected 'in' after for-each\
    \ pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp9jroc8p6.swift:16:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659820655
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.isEmpty {\n        return true\n    }\n    if l.count ==\
    \ 1 {\n        return true\n    }\n    if l.count == 2 {\n        return l[0]\
    \ > l[1]\n    }\n    if l.count == 3 {\n        return l[0] > l[1] && l[1] > l[2]\n\
    \    }\n    if l.count == 4 {\n        return l[0] > l[1] && l[1] > l[2] && l[2]\
    \ > l[3]\n    }\n    if l.count == 5 {\n        return l[0] > l[1] && l[1] > l[2]\
    \ && l[2] > l[3] && l[3] > l[4]\n    }\n    if l.count == 6 {\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5]\n  \
    \  }\n    if l.count == 7 {\n        return l[0] > l[1] && l[1] > l[2] && l[2]\
    \ > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6]\n    }\n    if l.count ==\
    \ 8 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4]\
    \ && l[4] > l[5] && l[5] > l[6] && l[6] > l[7]\n    }\n    if l.count == 9 {\n\
    \        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4]\
    \ > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8]\n    }\n    if l.count ==\
    \ 10 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4]\
    \ && l[4] > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9]\n\
    \    }\n    if l.count == 11 {\n        return l[0] > l[1] && l[1] > l[2] && l[2]\
    \ > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] >\
    \ l[8] && l[8] > l[9] && l[9] > l[10]\n    }\n    if l.count == 12 {\n       \
    \ return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5]\
    \ && l[5] > l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9] && l[9] > l[10]\
    \ && l[10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpexzcy4t6.swift:48:1: error: expected ']' in expression list\n}\n\
    ^\n/tmp/tmpexzcy4t6.swift:47:168: note: to match this opening '['\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5]\
    \ > l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9] && l[9] > l[10] && l[10\n\
    \                                                                            \
    \                                                                            \
    \               ^\n/tmp/tmpexzcy4t6.swift:70:43: error: expected '}' at end of\
    \ brace statement\nassert(monotonic(l: [9, 9, 9, 9]) == true)\n              \
    \                            ^\n/tmp/tmpexzcy4t6.swift:9:34: note: to match this\
    \ opening '{'\nfunc monotonic(l: [Int]) -> Bool {\n                          \
    \       ^\n/tmp/tmpexzcy4t6.swift:47:168: error: type 'Int' cannot be used as\
    \ a boolean; test for '!= 0' instead\n        return l[0] > l[1] && l[1] > l[2]\
    \ && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7] &&\
    \ l[7] > l[8] && l[8] > l[9] && l[9] > l[10] && l[10\n                       \
    \                                                                            \
    \                                                                    ^\n     \
    \                                                                            \
    \                                                                            \
    \         (    != 0)\n/tmp/tmpexzcy4t6.swift:51:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659820656
