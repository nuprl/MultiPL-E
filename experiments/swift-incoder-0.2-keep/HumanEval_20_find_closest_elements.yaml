name: HumanEval_20_find_closest_elements
language: swift
prompt: "\n/// From a supplied list of numbers (of length at least two) select and\
  \ return two that are the closest to each\n/// other and return them in order (smaller\
  \ number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double]) -> (Double,\
  \ Double) {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0,\
  \ 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
  \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
  \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
  \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
completions: ["    var smallest = numbers[0]\n    var largest = numbers[0]\n    for\
    \ number in numbers {\n        if number < smallest {\n            smallest =\
    \ number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    guard numbers.count >=\
    \ 2 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 3 else\
    \ { return (numbers[0], numbers[0]) }\n\n    var smallest = numbers[0]\n    var\
    \ largest = numbers[0]\n    var smallestIndex = -1\n    var largestIndex = -1\n\
    \n    for i in 1..<numbers.count {\n        let currentNumber = numbers[i]\n \
    \       if currentNumber < smallest {\n            smallest = currentNumber\n\
    \            smallestIndex = i\n        }\n        if currentNumber > largest\
    \ {\n            largest = currentNumber\n            largestIndex = i\n     \
    \   }\n    }\n\n    return (numbers[smallestIndex], numbers[largestIndex])", " \
    \   var smallest = numbers[0]\n    var largest = numbers[0]\n    for number in\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return (smallest, largest)", "    let smallest = min(numbers)\n\
    \    let largest = max(numbers)\n    return (smallest, largest)", "    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    for number in numbers {\n  \
    \      if number < smallest {\n            smallest = number\n        }\n    \
    \    if number > largest {\n            largest = number\n        }\n    }\n \
    \   return (smallest, largest)", "    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count > 2 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count > 3 else { return (numbers[0], numbers[0]) }\n  \
    \  guard numbers.count > 4 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count > 5 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ > 6 else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 7 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count > 8 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count > 9 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count > 10 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count > 11 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count > 12 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count > 13 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ > 14 else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 15\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 16 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count > 17 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count > 18 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count > 19 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count > 20 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count > 21 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count > 22 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ > 23 else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 24\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 25 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count > 26 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count > 27 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count > 28 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count > 29 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count > 30 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.", "    let min1 = min(numbers)\n    let min2 = min(numbers)\n    if\
    \ min1 < min2 {\n        return (min1, min2)\n    }\n    return (min2, min1)",
  "    if numbers.isEmpty {\n        return (numbers[0], numbers[0])\n    }\n    let\
    \ sortedNumbers = numbers.sorted()\n    let closestToFirst = sortedNumbers[0]\n\
    \    let closestToSecond = sortedNumbers[1]\n    return (closestToFirst, closestToSecond)",
  "    guard numbers.count > 2 else {\n        return (0.0,0.0)\n    }\n    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    for i in 1..numbers.count {\n\
    \        if numbers[i] < smallest {\n            smallest = numbers[i]\n     \
    \   }\n        if numbers[i] > largest {\n            largest = numbers[i]\n \
    \       }\n    }\n    return (smallest, largest)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    let sortedNumbers = numbers.sorted()\n    let closestIndex =\
    \ sortedNumbers.firstIndex({ $0 > sortedNumbers.last })\n    let closestNumber\
    \ = sortedNumbers[closestIndex]\n    return (closestNumber, sortedNumbers[closestIndex\
    \ + 1])", "    let min1 = numbers[0]\n    let min2 = numbers[0]\n    for i in\
    \ 1..<numbers.count {\n        let current1 = numbers[i]\n        let current2\
    \ = numbers[i - 1]\n        if current1 < current2 {\n            if min1 < current1\
    \ {\n                min1 = current1\n            }\n            if min2 < current2\
    \ {\n                min2 = current2\n            }\n        } else {\n      \
    \      if min1 < current2 {\n                min1 = current2\n            }\n\
    \            if min2 < current1 {\n                min2 = current1\n         \
    \   }\n        }\n    }\n    return (min1, min2)", "    guard numbers.count >=\
    \ 2 else {\n        return (0.0,0.0)\n    }\n    let smallest = numbers[0]\n \
    \   let largest = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    let min1 = numbers[0]\n    let max1 = numbers[0]\n\
    \    let min2 = numbers[0]\n    let max2 = numbers[0]\n    for i in 1..<numbers.count\
    \ {\n        let current1 = numbers[i]\n        let current2 = numbers[i - 1]\n\
    \        let current3 = numbers[i - 1]\n        let current4 = numbers[i]\n  \
    \      if current1 < min1 {\n            min1 = current1\n        }\n        if\
    \ current1 > max1 {\n            max1 = current1\n        }\n        if current2\
    \ < min2 {\n            min2 = current2\n        }\n        if current2 > max2\
    \ {\n            max2 = current2\n        }\n        if current3 < min3 {\n  \
    \          min3 = current3\n        }\n        if current3 > max3 {\n        \
    \    max3 = current3\n        }\n        if current4 < min4 {\n            min4\
    \ = current4\n        }\n        if current4 > max4 {\n            max4 = current4\n\
    \        }\n    }\n    return (min1, max1)", "    guard numbers.count > 1 else\
    \ {\n        return (0.0,0.0)\n    }\n    guard numbers.count >= 2 else {\n  \
    \      return (0.0,0.0)\n    }\n    let smallest = numbers[0]\n    let largest\
    \ = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i] > largest\
    \ {\n            largest = numbers[i]\n        }\n        if numbers[i] < smallest\
    \ {\n            smallest = numbers[i]\n        }\n    }\n    return (smallest,\
    \ largest)", "    let smallest = min(numbers)\n    let largest = max(numbers)\n\
    \    return (smallest, largest)", "    let smallest = numbers[0]\n    let largest\
    \ = numbers[0]\n    for number in numbers {\n        if number < smallest {\n\
    \            smallest = number\n        }\n        if number > largest {\n   \
    \         largest = number\n        }\n    }\n    return (smallest, largest)",
  "    let min1 = min(numbers)\n    let max1 = max(numbers)\n    let min2 = min(min1,\
    \ max1)\n    let max2 = max(min1, max1)\n    return (min2, max2)", "    let smallest\
    \ = numbers[0]\n    let largest = numbers[0]\n    for number in numbers {\n  \
    \      if number < smallest {\n            smallest = number\n        } else if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ (smallest, largest)", "    if numbers.isEmpty {\n        return (0.0, 0.0)\n\
    \    }\n\n    let sortedNumbers = numbers.sorted()\n    let closestToFirst = sortedNumbers.first!\n\
    \    let closestToSecond = sortedNumbers.last!\n\n    return (closestToFirst,\
    \ closestToSecond)", "    let smallest = numbers[0]\n    let largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    let min1 = numbers.min()\n\
    \    let max1 = numbers.max()\n    let min2 = numbers.min()\n    let max2 = numbers.max()\n\
    \    if min1 == max1 {\n        return (min1, min2)\n    }\n    if min2 == max2\
    \ {\n        return (min2, min1)\n    }\n    if min1 < min2 {\n        return\
    \ (min1, max2)\n    }\n    if min2 < min1 {\n        return (min2, max1)\n   \
    \ }\n    if max1 > max2 {\n        return (max1, max2)\n    }\n    if max2 > max1\
    \ {\n        return (max2, max1)\n    }\n    return (min1, max2)", "    if numbers.isEmpty\
    \ {\n        return (0.0,0.0)\n    }\n    var smallest = numbers[0]\n    var largest\
    \ = numbers[0]\n    for number in numbers {\n        if number < smallest {\n\
    \            smallest = number\n        }\n        if number > largest {\n   \
    \         largest = number\n        }\n    }\n    return (smallest, largest)",
  "    guard numbers.count > 1 else {\n        return (0.0,0.0)\n    }\n    let smallest\
    \ = numbers[0]\n    let largest = numbers[0]\n    for number in numbers {\n  \
    \      if number < smallest {\n            smallest = number\n        }\n    \
    \    if number > largest {\n            largest = number\n        }\n    }\n \
    \   return (smallest, largest)", "    let smallest = numbers[0]\n    let largest\
    \ = numbers[0]\n    for number in numbers {\n        if number < smallest {\n\
    \            smallest = number\n        }\n        if number > largest {\n   \
    \         largest = number\n        }\n    }\n    return (smallest, largest)",
  "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n    }\n    guard\
    \ numbers.count <= 100 else {\n        return (0.0,0.0)\n    }\n    guard numbers.count\
    \ >= 10000 else {\n        return (0.0,0.0)\n    }\n    \n    var smallest = numbers[0]\n\
    \    var largest = numbers[0]\n    var smallestIndex = -1\n    var largestIndex\
    \ = -1\n    \n    for i in 1..<numbers.count {\n        if numbers[i] < smallest\
    \ {\n            smallest = numbers[i]\n            smallestIndex = i\n      \
    \  }\n        if numbers[i] > largest {\n            largest = numbers[i]\n  \
    \          largestIndex = i\n        }\n    }\n    \n    return (smallest, largest)",
  "    guard numbers.count > 1 else {\n        return (0.0,0.0)\n    }\n    guard\
    \ numbers.count < 3 else {\n        return (0.0,0.0)\n    }\n    guard numbers.count\
    \ > 2 else {\n        return (0.0,0.0)\n    }\n    var smallest = numbers[0]\n\
    \    var largest = numbers[0]\n    for i in 1..numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    let min = min(numbers)\n    let max = max(numbers)\n\
    \    return (min, max)", "    let min = min(numbers)\n    let max = max(numbers)\n\
    \    if min == max {\n        return (min, min)\n    }\n    if min == numbers[0]\
    \ {\n        return (numbers[0], min)\n    }\n    if max == numbers[numbers.count\
    \ - 1] {\n        return (numbers[numbers.count - 1], max)\n    }\n    if min\
    \ == numbers[numbers.count - 1] {\n        return (numbers[numbers.count - 1],\
    \ max)\n    }\n    if max == numbers[0] {\n        return (min, numbers[0])\n\
    \    }\n    if min == numbers[numbers.count - 2] {\n        return (numbers[numbers.count\
    \ - 2], max)\n    }\n    if max == numbers[numbers.count - 2] {\n        return\
    \ (min, numbers[numbers.count - 2])\n    }\n    if min == numbers[0] {\n     \
    \   return (numbers[0], min)\n    }\n    if max == numbers[numbers.count - 1]\
    \ {\n        return (numbers[numbers.count - 1], max)\n    }\n    if min == numbers[numbers.count\
    \ - 2] {\n        return (numbers[numbers.count - 2], max)\n    }\n    if max\
    \ == numbers[0] {\n        return (min, numbers[0])\n    }\n    if min == numbers[numbers.count\
    \ - 1] {\n        return (numbers[numbers.count - 1], max)\n    }\n    if max\
    \ == numbers[numbers.count - 1] {\n        return (numbers[numbers.count - 1],\
    \ max)\n    }\n    if min == numbers[0] {\n        return (min, min)\n    }\n\
    \    if max == numbers[numbers.count - 1] {\n        return (numbers[numbers.count\
    \ - 1], max)\n    }\n    if min == numbers[numbers.count - 2] {\n        return\
    \ (numbers[numbers.count - 2], max)\n    }\n    if max == numbers[numbers.count\
    \ - 2] {\n        return (min, numbers[numbers.count - 2])\n    }\n    if min\
    \ == numbers[0] {\n        return (numbers[0], min)\n    }\n    if max == numbers[numbers.count\
    \ - 1] {\n        return (numbers[numbers.count - 1], max)\n    }\n    if min\
    \ == numbers[numbers.count - 2] {\n        return (numbers[numbers.count - 2],\
    \ max)\n    }\n    if max == numbers[0] {\n        return (min, numbers[0])\n\
    \    }\n    if min == numbers[numbers.count - 1] {\n        return (numbers[numbers.count\
    \ - 1], max)\n    }\n    if max == numbers[numbers.count - 1] {\n        return\
    \ (numbers[numbers.count - 1], max)\n    }\n    if min == numbers[0] {\n     \
    \   return (min, min)\n    }\n    if max == numbers[numbers.count - 1] {\n   \
    \     return (numbers[numbers.count - 1], max)\n    }\n    if min == numbers[numbers.count\
    \ - 2] {\n        return (numbers[numbers.count - 2], max)\n    }\n    if max\
    \ == number", "    let min = numbers.min()\n    let max = numbers.max()\n    if\
    \ min == max {\n        return (min, min)\n    }\n    let mid = (min + max) /\
    \ 2\n    return (mid, numbers.filter {\n        abs($0 - mid) < abs($0 - min)\n\
    \    }.min())", "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    guard numbers.count > 1 else {\n        return numbers[0], numbers[0]\n\
    \    }\n    let smallest = numbers[0]\n    let largest = numbers[0]\n    for i\
    \ in 1..<numbers.count {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)", "    let smallest\
    \ = numbers[0]\n    let largest = numbers[0]\n    for number in numbers {\n  \
    \      if number < smallest {\n            smallest = number\n        }\n    \
    \    if number > largest {\n            largest = number\n        }\n    }\n \
    \   return (smallest, largest)", "    let min = min(numbers)\n    let max = max(numbers)\n\
    \    let closest = (min + max) / 2\n    return (closest, closest)", "    let min1\
    \ = min(numbers)\n    let min2 = min(numbers)\n    if min1 < min2 {\n        return\
    \ (min1, min2)\n    }\n    return (min2, min1)", "    guard numbers.count >= 2\
    \ else { return (numbers[0], numbers[0]) }\n    var smallest = numbers[0]\n  \
    \  var largest = numbers[0]\n    for i in 1..numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        } else if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    guard numbers.count >=\
    \ 2 else {\n        return (0.0,0.0)\n    }\n    var smallest = numbers[0]\n \
    \   var largest = numbers[0]\n    for i in 1..numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    let smallest = numbers[0]\n    let largest = numbers[0]\n\
    \    for i in 1..<numbers.count {\n        if numbers[i] < smallest {\n      \
    \      smallest = numbers[i]\n        }\n        if numbers[i] > largest {\n \
    \           largest = numbers[i]\n        }\n    }\n    return (smallest, largest)",
  "    let sortedNumbers = numbers.sorted()\n    let closestIndex = sortedNumbers.firstIndex({\
    \ $0 > sortedNumbers.last })\n    return (sortedNumbers[closestIndex], sortedNumbers[closestIndex\
    \ + 1])", "    guard numbers.count > 1 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count > 2 else { return (numbers[0], numbers[1]) }\n  \
    \  var smallest = numbers[0]\n    var largest = numbers[0]\n    for number in\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       } else if number > largest {\n            largest = number\n        }\n\
    \    }\n    return (smallest, largest)", "    let min1 = min(numbers)\n    let\
    \ max1 = max(numbers)\n    let min2 = min(numbers)\n    let max2 = max(numbers)\n\
    \    if min1 == max1 {\n        return (min1, min2)\n    }\n    if min2 == max2\
    \ {\n        return (min2, min1)\n    }\n    if min1 < min2 {\n        return\
    \ (min1, max2)\n    }\n    if min2 < min1 {\n        return (min2, max1)\n   \
    \ }\n    return (min1, min2)", "    guard numbers.count >= 2 else {\n        return\
    \ (0.0,0.0)\n    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for i in 1..numbers.count {\n        if numbers[i] < smallest {\n       \
    \     smallest = numbers[i]\n        }\n        if numbers[i] > largest {\n  \
    \          largest = numbers[i]\n        }\n    }\n    return (smallest, largest)",
  "    let sortedNumbers = numbers.sorted()\n    let closestIndex = sortedNumbers.firstIndex({\
    \ $0 > sortedNumbers[1] })\n    let closestNumber = sortedNumbers[closestIndex]\n\
    \    let secondClosestIndex = sortedNumbers.firstIndex({ $0 > closestNumber })\n\
    \    let secondClosestNumber = sortedNumbers[secondClosestIndex]\n    return (closestNumber,\
    \ secondClosestNumber)", "    if numbers.isEmpty {\n        return (0.0,0.0)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)", "    if numbers.isEmpty {\n  \
    \      return (0.5, 0.5)\n    }\n    let sortedNumbers = numbers.sorted()\n  \
    \  let closestIndex = sortedNumbers.firstIndex({ $0 < $1 })\n    let closestValue\
    \ = sortedNumbers[closestIndex]\n    let closestValueIndex = sortedNumbers.firstIndex({\
    \ $0 === closestValue })\n    return (closestValue, closestValueIndex)", "   \
    \ let smallest = numbers[0]\n    let largest = numbers[0]\n    for number in numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return (smallest, largest)", "    let smallest = numbers[0]\n    let largest\
    \ = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i] < smallest\
    \ {\n            smallest = numbers[i]\n        } else if numbers[i] > largest\
    \ {\n            largest = numbers[i]\n        }\n    }\n    return (smallest,\
    \ largest)", "    var smallest = numbers[0]\n    var largest = numbers[0]\n  \
    \  for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    guard numbers.count >=\
    \ 2 else {\n        return (0.0,0.0)\n    }\n    guard numbers.count > 1 else\
    \ {\n        return (0.0,numbers[0])\n    }\n    let smallest = numbers[0]\n \
    \   let largest = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    let smallest = numbers[0]\n    let largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    guard numbers.count >=\
    \ 2 else {\n        return (0.0,0.0)\n    }\n    let smallest = numbers[0]\n \
    \   let largest = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    guard numbers.count >=\
    \ 2 else {\n        return (0.0,0.0)\n    }\n    \n    var smallest = numbers[0]\n\
    \    var largest = numbers[0]\n    \n    for i in 1..numbers.count {\n       \
    \ if numbers[i] < smallest {\n            smallest = numbers[i]\n        }\n \
    \       if numbers[i] > largest {\n            largest = numbers[i]\n        }\n\
    \    }\n    \n    return (smallest, largest)", "    guard numbers.count >= 2 else\
    \ {\n        return (0.0,0.0)\n    }\n    let smallest = numbers[0]\n    let largest\
    \ = numbers[0]\n    for i in 1..numbers.count {\n        let current = numbers[i]\n\
    \        if current < smallest {\n            smallest = current\n        } else\
    \ if current > largest {\n            largest = current\n        }\n    }\n  \
    \  return (smallest, largest)", "    let min1 = numbers.min()\n    let max1 =\
    \ numbers.max()\n    let min2 = numbers.min()\n    let max2 = numbers.max()\n\
    \    if min1 < min2 {\n        return (min1, min2)\n    }\n    if max1 > max2\
    \ {\n        return (max1, max2)\n    }\n    return (min2, max2)", "    let min1\
    \ = numbers.min()\n    let max1 = numbers.max()\n    let min2 = numbers.min()\n\
    \    let max2 = numbers.max()\n    if min1 < min2 {\n        return (min1, min2)\n\
    \    }\n    if max1 > max2 {\n        return (max1, max2)\n    }\n    return (min2,\
    \ max2)", "    let min1 = numbers.min()\n    let max1 = numbers.max()\n    let\
    \ min2 = numbers.min()\n    let max2 = numbers.max()\n    if min1 < min2 {\n \
    \       return (min1, min2)\n    }\n    if max1 > max2 {\n        return (max1,\
    \ max2)\n    }\n    return (min1, max1)", "    var smallest = numbers[0]\n   \
    \ var largest = numbers[0]\n    for number in numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return (smallest, largest)",
  "    if numbers.isEmpty {\n        return (0.0,0.0)\n    }\n    let minValue = numbers[0]\n\
    \    let maxValue = numbers[0]\n    for i in 1..<numbers.count {\n        let\
    \ value = numbers[i]\n        if value < minValue {\n            minValue = value\n\
    \        } else if value > maxValue {\n            maxValue = value\n        }\n\
    \    }\n    return (minValue, maxValue)", "    let smallest = numbers[0]\n   \
    \ let largest = numbers[0]\n    for number in numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return (smallest, largest)",
  "    guard numbers.count >= 2 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 3 else { return (numbers[0], numbers[0]) }\n\n    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    var smallestIndex = -1\n   \
    \ var largestIndex = -1\n\n    for i in 1..<numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n            smallestIndex =\
    \ i\n        }\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \            largestIndex = i\n        }\n    }\n\n    return (numbers[smallestIndex],\
    \ numbers[largestIndex])", "    let smallest = min(numbers)\n    let largest =\
    \ max(numbers)\n    return (smallest, largest)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    var smallest = numbers[0]\n    var largest = numbers[0]\n  \
    \  for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        } else if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    let min = min(numbers)\n\
    \    let max = max(numbers)\n    return (min, max)", "    let smallest = min(numbers)\n\
    \    let largest = max(numbers)\n    return (smallest, largest)", "    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    for number in numbers {\n  \
    \      if number < smallest {\n            smallest = number\n        }\n    \
    \    if number > largest {\n            largest = number\n        }\n    }\n \
    \   return (smallest, largest)", "    let min1 = numbers[0]\n    let max1 = numbers[0]\n\
    \    let min2 = numbers[0]\n    let max2 = numbers[0]\n\n    for number in numbers\
    \ {\n        if number < min1 {\n            min1 = number\n        } else if\
    \ number > max1 {\n            max1 = number\n        }\n\n        if number <\
    \ min2 {\n            min2 = number\n        } else if number > max2 {\n     \
    \       max2 = number\n        }\n    }\n\n    return (min1, max1)", "    guard\
    \ numbers.count >= 2 else {\n        return (0.0,0.0)\n    }\n    let smallest\
    \ = numbers[0]\n    let largest = numbers[0]\n    for number in numbers {\n  \
    \      if number < smallest {\n            smallest = number\n        }\n    \
    \    if number > largest {\n            largest = number\n        }\n    }\n \
    \   return (smallest, largest)", "    guard numbers.count >= 2 else {\n      \
    \  return (0.0,0.0)\n    }\n    let smallest = numbers[0]\n    let largest = numbers[0]\n\
    \    for i in 1..<numbers.count {\n        if numbers[i] < smallest {\n      \
    \      smallest = numbers[i]\n        }\n        if numbers[i] > largest {\n \
    \           largest = numbers[i]\n        }\n    }\n    return (smallest, largest)",
  "    let smallest = numbers[0]\n    let largest = numbers[0]\n    for number in\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return (smallest, largest)", "    let sortedNumbers = numbers.sorted()\n\
    \    if sortedNumbers.count < 2 {\n        return sortedNumbers[0], sortedNumbers[0]\n\
    \    }\n    if sortedNumbers.count == 2 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 3 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 4 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 5 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 6 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 7 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 8 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 9 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 10 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 11 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 12 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 13 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 14 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 15 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 16 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 17 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 18 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 19 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 20 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 21 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 22 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 23 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 24 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 25 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 26 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 27 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumbers.count == 28 {\n        return sortedNumbers[0], sortedNumbers[1]\n\
    \    }\n    if sortedNumber", "    var smallest = numbers[0]\n    var largest\
    \ = numbers[0]\n    for number in numbers {\n        if number < smallest {\n\
    \            smallest = number\n        }\n        if number > largest {\n   \
    \         largest = number\n        }\n    }\n    return (smallest, largest)",
  "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n    }\n    let min1\
    \ = numbers[0]\n    let min2 = numbers[1]\n    let max1 = numbers[0]\n    let\
    \ max2 = numbers[1]\n    for i in 2..<numbers.count {\n        let current1 =\
    \ numbers[i]\n        let current2 = numbers[i - 1]\n        let current3 = numbers[i\
    \ - 2]\n        let current4 = numbers[i - 3]\n        let current5 = numbers[i\
    \ - 4]\n        let current6 = numbers[i - 5]\n        let current7 = numbers[i\
    \ - 6]\n        let current8 = numbers[i - 7]\n        let current9 = numbers[i\
    \ - 8]\n        let current10 = numbers[i - 9]\n        let current11 = numbers[i\
    \ - 10]\n        let current12 = numbers[i - 11]\n        let current13 = numbers[i\
    \ - 12]\n        let current14 = numbers[i - 13]\n        let current15 = numbers[i\
    \ - 14]\n        let current16 = numbers[i - 15]\n        let current17 = numbers[i\
    \ - 16]\n        let current18 = numbers[i - 17]\n        let current19 = numbers[i\
    \ - 18]\n        let current20 = numbers[i - 19]\n        let current21 = numbers[i\
    \ - 20]\n        let current22 = numbers[i - 21]\n        let current23 = numbers[i\
    \ - 22]\n        let current24 = numbers[i - 23]\n        let current25 = numbers[i\
    \ - 24]\n        let current26 = numbers[i - 25]\n        let current27 = numbers[i\
    \ - 26]\n        let current28 = numbers[i - 27]\n        let current29 = numbers[i\
    \ - 28]\n        let current30 = numbers[i - 29]\n        let current31 = numbers[i\
    \ - 30]\n        let current32 = numbers[i - 31]\n        let current33 = numbers[i\
    \ - 32]\n        let current34 = numbers[i - 33]\n        let current35 = numbers[i\
    \ - 34]\n        let current36 = numbers[i - 35]\n        let current37 = numbers[i\
    \ - 36]\n        let current38 = numbers[i - 37]\n        let current39 = numbers[i\
    \ - 38]\n        let current40 = numbers[i - 39]\n        let current41 = numbers[i\
    \ - 40]\n        let current42 = numbers[i - 41]\n        let current43 = numbers[i\
    \ - 42]\n        let current44 = numbers[i - 43]\n        let current45 = numbers[i\
    \ - 44]\n        let current46 = numbers[i - 45]\n        let current47 = numbers[i\
    \ - 46]\n        let current48 = numbers[i - 47]\n        let current49 = numbers[i\
    \ - 48]\n", "    var smallest = numbers[0]\n    var largest = numbers[0]\n   \
    \ for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    guard numbers.count >\
    \ 1 else {\n        return (0.0,0.0)\n    }\n\n    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    if numbers.isEmpty {\n        return (0.0,0.0)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)", "    let sortedNumbers = numbers.sorted()\n\
    \    let closest1 = sortedNumbers.first!\n    let closest2 = sortedNumbers.last!\n\
    \    return (closest1, closest2)", "    guard numbers.count >= 2 else {\n    \
    \    return (0.0,0.0)\n    }\n    var smallest = numbers[0]\n    var largest =\
    \ numbers[0]\n    for number in numbers {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return (smallest, largest)", " \
    \   guard numbers.count >= 2 else {\n        return (0.0,0.0)\n    }\n    let\
    \ sortedNumbers = numbers.sorted()\n    let firstNumber = sortedNumbers[0]\n \
    \   let secondNumber = sortedNumbers[1]\n    if firstNumber == secondNumber {\n\
    \        return (firstNumber, firstNumber)\n    }\n    if firstNumber > secondNumber\
    \ {\n        return (secondNumber, firstNumber)\n    }\n    return (firstNumber,\
    \ secondNumber)", "    if numbers.isEmpty {\n        return (0.0,0.0)\n    }\n\
    \    \n    let min1 = numbers[0]\n    let max1 = numbers[0]\n    \n    for n in\
    \ numbers {\n        if n < min1 {\n            min1 = n\n        } else if n\
    \ > max1 {\n            max1 = n\n        }\n    }\n    \n    return (min1, max1)",
  "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n    }\n    let smallest\
    \ = numbers[0]\n    let largest = numbers[0]\n    for number in numbers {\n  \
    \      if number < smallest {\n            smallest = number\n        }\n    \
    \    if number > largest {\n            largest = number\n        }\n    }\n \
    \   return (smallest, largest)", "    var smallest = numbers[0]\n    var largest\
    \ = numbers[0]\n    for number in numbers {\n        if number < smallest {\n\
    \            smallest = number\n        }\n        if number > largest {\n   \
    \         largest = number\n        }\n    }\n    return (smallest, largest)",
  "    let min1 = numbers.min()\n    let max1 = numbers.max()\n    let min2 = numbers.min()\n\
    \    let max2 = numbers.max()\n    if min1 == max1 {\n        return (min1, min2)\n\
    \    }\n    if min2 == max2 {\n        return (min2, min1)\n    }\n    if min1\
    \ < min2 {\n        return (min1, max2)\n    }\n    if min2 < min1 {\n       \
    \ return (min2, max1)\n    }\n    if max1 > max2 {\n        return (max1, max2)\n\
    \    }\n    return (max1, min2)", "    var smallest = numbers[0]\n    var largest\
    \ = numbers[0]\n    for number in numbers {\n        if number < smallest {\n\
    \            smallest = number\n        } else if number > largest {\n       \
    \     largest = number\n        }\n    }\n    return (smallest, largest)", " \
    \   guard numbers.count >= 2 else {\n        return (0.0,0.0)\n    }\n    var\
    \ smallest = numbers[0]\n    var largest = numbers[0]\n    for number in numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return (smallest, largest)", "    guard numbers.count >= 2 else {\n     \
    \   return (0.0,0.0)\n    }\n    var smallest = numbers[0]\n    var largest =\
    \ numbers[0]\n    for number in numbers {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return (smallest, largest)", " \
    \   guard numbers.count >= 2 else {\n        return (0.0,0.0)\n    }\n    \n \
    \   var smallest = numbers[0]\n    var largest = numbers[0]\n    \n    for i in\
    \ 1..numbers.count {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n    }\n    \n    return (smallest, largest)", "   \
    \ let min1 = numbers[0]\n    let max1 = numbers[0]\n    let min2 = numbers[0]\n\
    \    let max2 = numbers[0]\n\n    for n in numbers {\n        if n < min1 {\n\
    \            min1 = n\n        } else if n > max1 {\n            max1 = n\n  \
    \      }\n\n        if n < min2 {\n            min2 = n\n        } else if n >\
    \ max2 {\n            max2 = n\n        }\n    }\n\n    return (min1, max1)",
  "    let min1 = numbers.min()\n    let max1 = numbers.max()\n    let min2 = numbers.min()\n\
    \    let max2 = numbers.max()\n    if min1 == max1 {\n        return (min1, min2)\n\
    \    }\n    if min2 == max2 {\n        return (min2, min1)\n    }\n    if min1\
    \ < min2 {\n        return (min1, max2)\n    }\n    if min2 < min1 {\n       \
    \ return (min2, max1)\n    }\n    return (min1, min2)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    if numbers.isEmpty {\n        return (0.0, 0.0)\n\
    \    }\n    if numbers.count < 2 {\n        return (numbers[0], numbers[0])\n\
    \    }\n    let smallest = numbers[0]\n    let largest = numbers[0]\n    for i\
    \ in 1..<numbers.count {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)", "    guard\
    \ numbers.count >= 2 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 3 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 4\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 5 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 6 else { return\
    \ (numbers[0], numbers[0]) }\n\n    var smallest = numbers[0]\n    var largest\
    \ = numbers[0]\n    var smallestIndex = -1\n    var largestIndex = -1\n\n    for\
    \ i in 1..<numbers.count {\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n            largestIndex = i\n        }\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n            smallestIndex =\
    \ i\n        }\n    }\n\n    return (smallest, largest)", "    guard numbers.count\
    \ > 1 else {\n        return (0.0,0.0)\n    }\n\n    var smallest = numbers[0]\n\
    \    var largest = numbers[0]\n    for i in 1..numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    let smallest = numbers[0]\n    let largest = numbers[0]\n\
    \    for i in 1..numbers.count {\n        if numbers[i] < smallest {\n       \
    \     smallest = numbers[i]\n        }\n        if numbers[i] > largest {\n  \
    \          largest = numbers[i]\n        }\n    }\n    return (smallest, largest)",
  "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n    }\n    let smallest\
    \ = numbers[0]\n    let largest = numbers[0]\n    for i in 1..<numbers.count {\n\
    \        if numbers[i] < smallest {\n            smallest = numbers[i]\n     \
    \   }\n        if numbers[i] > largest {\n            largest = numbers[i]\n \
    \       }\n    }\n    return (smallest, largest)", "    if numbers.isEmpty {\n\
    \        return (0.0,0.0)\n    }\n    \n    var smallest = numbers[0]\n    var\
    \ largest = numbers[0]\n    \n    for number in numbers {\n        if number <\
    \ smallest {\n            smallest = number\n        }\n        if number > largest\
    \ {\n            largest = number\n        }\n    }\n    \n    return (smallest,\
    \ largest)", "    guard numbers.count >= 2 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0]) }\n\n\
    \    var smallest = numbers[0]\n    var largest = numbers[0]\n    var smallestIndex\
    \ = -1\n    var largestIndex = -1\n\n    for i in 1..<numbers.count {\n      \
    \  let currentNumber = numbers[i]\n        if currentNumber < smallest {\n   \
    \         smallest = currentNumber\n            smallestIndex = i\n        }\n\
    \        if currentNumber > largest {\n            largest = currentNumber\n \
    \           largestIndex = i\n        }\n    }\n\n    return (numbers[smallestIndex],\
    \ numbers[largestIndex])", "    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0])\
    \ }\n\n    let smallest = numbers[0]\n    let largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    let smallest = numbers[0]\n    let largest = numbers[0]\n  \
    \  for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        } else if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    let sortedNumbers = numbers.sorted()\n\
    \    return (sortedNumbers[0], sortedNumbers[1])", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        } else if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    let smallest = min(numbers)\n\
    \    let largest = max(numbers)\n    return (smallest, largest)", "    let min1\
    \ = min(numbers)\n    let max1 = max(numbers)\n    let min2 = min(numbers)\n \
    \   let max2 = max(numbers)\n    if min1 < min2 {\n        return (min1, min2)\n\
    \    }\n    if max1 > max2 {\n        return (max1, max2)\n    }\n    return (min1,\
    \ max2)", "    let smallest = numbers[0]\n    let largest = numbers[0]\n    for\
    \ number in numbers {\n        if number < smallest {\n            smallest =\
    \ number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    guard numbers.count >\
    \ 1 else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 2 else\
    \ { return (numbers[0], numbers[1]) }\n    guard numbers.count > 3 else { return\
    \ (numbers[0], numbers[2]) }\n    guard numbers.count > 4 else { return (numbers[0],\
    \ numbers[3]) }\n    guard numbers.count > 5 else { return (numbers[0], numbers[4])\
    \ }\n    guard numbers.count > 6 else { return (numbers[0], numbers[5]) }\n  \
    \  guard numbers.count > 7 else { return (numbers[0], numbers[6]) }\n    guard\
    \ numbers.count > 8 else { return (numbers[0], numbers[7]) }\n    guard numbers.count\
    \ > 9 else { return (numbers[0], numbers[8]) }\n    guard numbers.count > 10 else\
    \ { return (numbers[0], numbers[9]) }\n    guard numbers.count > 11 else { return\
    \ (numbers[0], numbers[10]) }\n    guard numbers.count > 12 else { return (numbers[0],\
    \ numbers[11]) }\n    guard numbers.count > 13 else { return (numbers[0], numbers[12])\
    \ }\n    guard numbers.count > 14 else { return (numbers[0], numbers[13]) }\n\
    \    guard numbers.count > 15 else { return (numbers[0], numbers[14]) }\n    guard\
    \ numbers.count > 16 else { return (numbers[0], numbers[15]) }\n    guard numbers.count\
    \ > 17 || numbers.count < 2 else { return (numbers[0], numbers[16]) }\n    guard\
    \ numbers.count > 18 || numbers.count < 2 else { return (numbers[0], numbers[17])\
    \ }\n    guard numbers.count > 19 || numbers.count < 2 else { return (numbers[0],\
    \ numbers[18]) }\n    guard numbers.count > 20 || numbers.count < 2 else { return\
    \ (numbers[0], numbers[19]) }\n    guard numbers.count > 21 || numbers.count <\
    \ 2 else { return (numbers[0], numbers[20]) }\n    guard numbers.count > 22 ||\
    \ numbers.count < 2 else { return (numbers[0], numbers[21]) }\n    guard numbers.count\
    \ > 23 || numbers.count < 2 else { return (numbers[0], numbers[22]) }\n    guard\
    \ numbers.count > 24 || numbers.count < 2 else { return (numbers[0], numbers[23])\
    \ }\n    guard numbers.count > 25 || numbers.count < 2 else { return (numbers[0],\
    \ numbers[24]) }\n    guard numbers.count > 26 || numbers.count < 2 else { return\
    \ (numbers[0], numbers[25]) }", "    let smallest = numbers[0]\n    let largest\
    \ = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i] > largest\
    \ {\n            largest = numbers[i]\n        } else if numbers[i] < smallest\
    \ {\n            smallest = numbers[i]\n        }\n    }\n    return (smallest,\
    \ largest)", "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    var smallest = numbers[0]\n    var largest = numbers[0]\n  \
    \  for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    let smallest = numbers[0]\n    let largest = numbers[0]\n  \
    \  for i in 1..numbers.count {\n        if numbers[i] < smallest {\n         \
    \   smallest = numbers[i]\n        }\n        if numbers[i] > largest {\n    \
    \        largest = numbers[i]\n        }\n    }\n    return (smallest, largest)",
  "    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number in\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return (smallest, largest)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    let min = numbers[0]\n    let max = numbers[0]\n    for i in\
    \ 1..<numbers.count {\n        let current = numbers[i]\n        if current <\
    \ min {\n            min = current\n        } else if current > max {\n      \
    \      max = current\n        }\n    }\n    return (min, max)", "    let smallest\
    \ = numbers[0]\n    let largest = numbers[0]\n    for i in 1..<numbers.count {\n\
    \        if numbers[i] < smallest {\n            smallest = numbers[i]\n     \
    \   } else if numbers[i] > largest {\n            largest = numbers[i]\n     \
    \   }\n    }\n    return (smallest, largest)", "    guard numbers.count >= 2 else\
    \ {\n        return (0.0,0.0)\n    }\n    let min1 = numbers[0]\n    let max1\
    \ = numbers[0]\n    let min2 = numbers[0]\n    let max2 = numbers[0]\n    for\
    \ i in 1..<numbers.count {\n        if numbers[i] < min1 {\n            min1 =\
    \ numbers[i]\n        } else if numbers[i] > max1 {\n            max1 = numbers[i]\n\
    \        }\n        if numbers[i] < min2 {\n            min2 = numbers[i]\n  \
    \      } else if numbers[i] > max2 {\n            max2 = numbers[i]\n        }\n\
    \    }\n    return (min1, max1)", "    let sortedNumbers = numbers.sorted()\n\
    \    let closestIndex = sortedNumbers.firstIndex({ $0 < $1 })\n    return (sortedNumbers[closestIndex],\
    \ sortedNumbers[closestIndex + 1])", "    let smallest = numbers[0]\n    let largest\
    \ = numbers[0]\n    for number in numbers {\n        if number < smallest {\n\
    \            smallest = number\n        } else if number > largest {\n       \
    \     largest = number\n        }\n    }\n    return (smallest, largest)", " \
    \   if numbers.isEmpty {\n        return (0.0,0.0)\n    }\n    var smallest =\
    \ numbers[0]\n    var largest = numbers[0]\n    for number in numbers {\n    \
    \    if number < smallest {\n            smallest = number\n        }\n      \
    \  if number > largest {\n            largest = number\n        }\n    }\n   \
    \ return (smallest, largest)", "    let min1 = numbers[0]\n    let min2 = numbers[0]\n\
    \    for i in 1..<numbers.count {\n        if numbers[i] < min1 {\n          \
    \  min1 = numbers[i]\n        }\n        if numbers[i] > min2 {\n            min2\
    \ = numbers[i]\n        }\n    }\n    return min1, min2", "    let min = min(numbers)\n\
    \    let max = max(numbers)\n    return (min, max)", "    let min1 = numbers.min()\n\
    \    let max1 = numbers.max()\n    let min2 = numbers.min()\n    let max2 = numbers.max()\n\
    \    if min1 == min2 {\n        return (min1, max1)\n    }\n    if max1 == max2\
    \ {\n        return (min2, max2)\n    }\n    if min1 < min2 {\n        return\
    \ (min1, max2)\n    }\n    return (min2, max1)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    var smallest = numbers[0]\n    var largest = numbers[0]\n  \
    \  for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    guard numbers.count >=\
    \ 2 else {\n        return (0.0,0.0)\n    }\n    var smallest = numbers[0]\n \
    \   var largest = numbers[0]\n    for i in 1..numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    let smallest = numbers[0]\n    let largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    let min1 = numbers.min()\n\
    \    let max1 = numbers.max()\n    let min2 = numbers.min()\n    let max2 = numbers.max()\n\
    \    if min1 < min2 {\n        return (min1, max2)\n    }\n    if max1 > max2\
    \ {\n        return (max1, min2)\n    }\n    return (min1, max1)", "    let min1\
    \ = min(numbers)\n    let max1 = max(numbers)\n    let min2 = min(numbers)\n \
    \   let max2 = max(numbers)\n    if min1 == max1 {\n        return (min1, min2)\n\
    \    }\n    if min2 == max2 {\n        return (min2, min1)\n    }\n    if min1\
    \ < min2 {\n        return (min1, max2)\n    }\n    return (min2, max1)", "  \
    \  let smallest = numbers[0]\n    let largest = numbers[0]\n    for number in\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return (smallest, largest)", "    var smallest = numbers[0]\n\
    \    var largest = numbers[0]\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    let min1 = min(numbers)\n    let max1 = max(numbers)\n    let\
    \ min2 = min(numbers)\n    let max2 = max(numbers)\n    if min1 == min2 && max1\
    \ == max2 {\n        return (min1, max1)\n    }\n    if min1 == min2 {\n     \
    \   return (min1, min2)\n    }\n    if max1 == max2 {\n        return (max1, max2)\n\
    \    }\n    if min1 < min2 {\n        return (min1, max2)\n    }\n    return (min2,\
    \ max1)", "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n   \
    \ }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for i in\
    \ 1..numbers.count {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)", "    guard\
    \ numbers.count >= 2 else {\n        return (0.0,0.0)\n    }\n    \n    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    \n    for i in 1..numbers.count\
    \ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n \
    \       }\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \        }\n    }\n    \n    return (smallest, largest)", "    let smallest =\
    \ numbers[0]\n    let largest = numbers[0]\n    for number in numbers {\n    \
    \    if number < smallest {\n            smallest = number\n        }\n      \
    \  if number > largest {\n            largest = number\n        }\n    }\n   \
    \ return (smallest, largest)", "    if numbers.isEmpty {\n        return (0.0,0.0)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)", "    let smallest = min(numbers)\n\
    \    let largest = max(numbers)\n    return (smallest, largest)", "    if numbers.isEmpty\
    \ {\n        return (0, 0)\n    }\n    if numbers.count < 2 {\n        return\
    \ (0, 0)\n    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    let smallest = numbers[0]\n    let largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    guard numbers.count >=\
    \ 2 else {\n        return (0.0,0.0)\n    }\n    \n    var smallest = numbers[0]\n\
    \    var largest = numbers[0]\n    \n    for i in 1..numbers.count {\n       \
    \ if numbers[i] < smallest {\n            smallest = numbers[i]\n        }\n \
    \       if numbers[i] > largest {\n            largest = numbers[i]\n        }\n\
    \    }\n    \n    return (smallest, largest)", "    let smallest = min(numbers)\n\
    \    let largest = max(numbers)\n    return (smallest, largest)", "    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    for number in numbers {\n  \
    \      if number < smallest {\n            smallest = number\n        }\n    \
    \    if number > largest {\n            largest = number\n        }\n    }\n \
    \   return (smallest, largest)", "    if numbers.isEmpty {\n        return (0.0,0.0)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)", "    var smallest = numbers[0]\n\
    \    var largest = numbers[0]\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    var smallest = numbers[0]\n    var largest = numbers[0]\n  \
    \  for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    guard numbers.count >=\
    \ 2 else {\n        return (0.0,0.0)\n    }\n    let smallest = numbers[0]\n \
    \   let largest = numbers[0]\n    for number in numbers {\n        if number <\
    \ smallest {\n            smallest = number\n        }\n        if number > largest\
    \ {\n            largest = number\n        }\n    }\n    return (smallest, largest)",
  "    guard numbers.count >= 2 else { return (numbers[0], numbers[0]) }\n    var\
    \ smallest = numbers[0]\n    var largest = numbers[0]\n    for number in numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\
    \ else if number > largest {\n            largest = number\n        }\n    }\n\
    \    return (smallest, largest)", "    guard numbers.count >= 2 else {\n     \
    \   return (0.0,0.0)\n    }\n    guard numbers.count <= 100 else {\n        return\
    \ (0.0,0.0)\n    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for i in 1..numbers.count {\n        if numbers[i] < smallest {\n       \
    \     smallest = numbers[i]\n        }\n        if numbers[i] > largest {\n  \
    \          largest = numbers[i]\n        }\n    }\n    return (smallest, largest)",
  "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n    }\n\n    let\
    \ smallest = numbers[0]\n    let largest = numbers[0]\n    for i in 1..numbers.count\
    \ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n \
    \       }\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \        }\n    }\n\n    return (smallest, largest)", "    let min1 = min(numbers)\n\
    \    let max1 = max(numbers)\n    let min2 = min(numbers)\n    let max2 = max(numbers)\n\
    \    if min1 == max1 {\n        return (min1, min2)\n    }\n    if min2 == max2\
    \ {\n        return (min2, min1)\n    }\n    if min1 < min2 {\n        return\
    \ (min1, max2)\n    }\n    if min2 < min1 {\n        return (min2, max1)\n   \
    \ }\n    if min1 == min2 {\n        return (min1, min2)\n    }\n    if min2 ==\
    \ max2 {\n        return (min2, min1)\n    }\n    if max1 < max2 {\n        return\
    \ (max1, max2)\n    }\n    if max2 < max1 {\n        return (max2, max1)\n   \
    \ }\n    return (min1, max2)", "    guard numbers.count >= 2 else {\n        return\
    \ (0.0,0.0)\n    }\n    let smallest = numbers[0]\n    let largest = numbers[0]\n\
    \    for i in 1..numbers.count {\n        let current = numbers[i]\n        if\
    \ current < smallest {\n            smallest = current\n        } else if current\
    \ > largest {\n            largest = current\n        }\n    }\n    return (smallest,\
    \ largest)", "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    guard numbers.count > 1 else {\n        return (0.0,numbers[0])\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for i\
    \ in 1..numbers.count {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)", "    let smallest\
    \ = numbers[0]\n    let largest = numbers[0]\n    for i in 1..<numbers.count {\n\
    \        if numbers[i] < smallest {\n            smallest = numbers[i]\n     \
    \   }\n        if numbers[i] > largest {\n            largest = numbers[i]\n \
    \       }\n    }\n    return (smallest, largest)", "    guard numbers.count >\
    \ 2 else {\n        return (0.0,0.0)\n    }\n    let min1 = numbers[0]\n    let\
    \ max1 = numbers[0]\n    let min2 = numbers[0]\n    let max2 = numbers[0]\n  \
    \  for i in 1..<numbers.count {\n        let current1 = numbers[i]\n        let\
    \ current2 = numbers[i - 1]\n        let current3 = numbers[i - 1]\n        let\
    \ current4 = numbers[i]\n        let current5 = numbers[i - 1]\n        let current6\
    \ = numbers[i]\n        let current7 = numbers[i - 1]\n        let current8 =\
    \ numbers[i]\n        let current9 = numbers[i - 1]\n        let current10 = numbers[i]\n\
    \        let current11 = numbers[i - 1]\n        let current12 = numbers[i]\n\
    \        let current13 = numbers[i - 1]\n        let current14 = numbers[i]\n\
    \        let current15 = numbers[i - 1]\n        let current16 = numbers[i]\n\
    \        let current17 = numbers[i - 1]\n        let current18 = numbers[i]\n\
    \        let current19 = numbers[i - 1]\n        let current20 = numbers[i]\n\
    \        let current21 = numbers[i - 1]\n        let current22 = numbers[i]\n\
    \        let current23 = numbers[i - 1]\n        let current24 = numbers[i]\n\
    \        let current25 = numbers[i - 1]\n        let current26 = numbers[i]\n\
    \        let current27 = numbers[i - 1]\n        let current28 = numbers[i]\n\
    \        let current29 = numbers[i - 1]\n        let current30 = numbers[i]\n\
    \        let current31 = numbers[i - 1]\n        let current32 = numbers[i]\n\
    \        let current33 = numbers[i - 1]\n        let current34 = numbers[i]\n\
    \        let current35 = numbers[i - 1]\n        let current36 = numbers[i]\n\
    \        let current37 = numbers[i - 1]\n        let current38 = numbers[i]\n\
    \        let current39 = numbers[i - 1]\n        let current40 = numbers[i]\n\
    \        let current41 = numbers[i - 1]\n        let current42 = numbers[i]\n\
    \        let current43 = numbers[i - 1]\n        let current44 = numbers[i]\n\
    \        let current45 = numbers[i - 1]\n        let current46 = numbers[i]\n\
    \        let current47 = numbers[i - 1]\n        let current48 = numbers[i]\n\
    \        let current49 = numbers[i - 1]\n        let current50 = numbers[i]\n\
    \        let current51 = numbers[i - 1]\n        let current52 = numbers[i]\n\
    \        let current53 = numbers[i - 1]\n        let current54 = numbers[i]\n\
    \        let current55 = numbers[i - 1]\n        let current56 = numbers[i]\n\
    \        let current57 = numbers[i - 1]\n        let current58 = numbers[i]\n\
    \        let current59 = numbers[i - 1]\n        let current60 = numbers[i]\n\
    \        let current61 = numbers[i - 1]\n        let current62 = numbers[i]\n\
    \        let current63 = numbers[i - 1]\n        let current64", "    guard numbers.count\
    \ >= 2 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 3\
    \ else { return (numbers[0], numbers[0]) }\n\n    var smallest = numbers[0]\n\
    \    var largest = numbers[0]\n    var smallestIndex = -1\n    var largestIndex\
    \ = -1\n\n    for i in 1..numbers.count {\n        if numbers[i] < smallest {\n\
    \            smallest = numbers[i]\n            smallestIndex = i\n        }\n\
    \        if numbers[i] > largest {\n            largest = numbers[i]\n       \
    \     largestIndex = i\n        }\n    }\n\n    return (numbers[smallestIndex],\
    \ numbers[largestIndex])", "    let min1 = numbers[0]\n    let max1 = numbers[0]\n\
    \    let min2 = numbers[0]\n    let max2 = numbers[0]\n    for number in numbers\
    \ {\n        if number < min1 {\n            min1 = number\n        } else if\
    \ number > max1 {\n            max1 = number\n        }\n        if number < min2\
    \ {\n            min2 = number\n        } else if number > max2 {\n          \
    \  max2 = number\n        }\n    }\n    return (min1, max1)", "    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    for number in numbers {\n  \
    \      if number < smallest {\n            smallest = number\n        }\n    \
    \    if number > largest {\n            largest = number\n        }\n    }\n \
    \   return (smallest, largest)", "    let smallest = min(numbers)\n    let largest\
    \ = max(numbers)\n    return (smallest, largest)", "    guard numbers.count >=\
    \ 2 else {\n        return (0.0,0.0)\n    }\n    guard numbers.count <= Float.greatestFiniteMagnitude\
    \ else {\n        return (0.0,0.0)\n    }\n    let smallest = numbers[0]\n   \
    \ let largest = numbers[0]\n    for number in numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return (smallest, largest)",
  "    let smallest = numbers[0]\n    let largest = numbers[0]\n    for i in 1..<numbers.count\
    \ {\n        if numbers[i] > largest {\n            largest = numbers[i]\n   \
    \     } else if numbers[i] < smallest {\n            smallest = numbers[i]\n \
    \       }\n    }\n    return (smallest, largest)", "    guard numbers.count >\
    \ 1 else {\n        return (0.0,0.0)\n    }\n    let smallest = numbers[0]\n \
    \   let largest = numbers[0]\n    for number in numbers {\n        if number <\
    \ smallest {\n            smallest = number\n        }\n        if number > largest\
    \ {\n            largest = number\n        }\n    }\n    return (smallest, largest)",
  "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n    }\n    let smallest\
    \ = numbers[0]\n    let largest = numbers[0]\n    for i in 1..numbers.count {\n\
    \        if numbers[i] < smallest {\n            smallest = numbers[i]\n     \
    \   }\n        if numbers[i] > largest {\n            largest = numbers[i]\n \
    \       }\n    }\n    return (smallest, largest)", "    guard numbers.count >=\
    \ 2 else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 2 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count > 3 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count > 4 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count > 5 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count > 6 else { return (numbers[0], numbers[0]) }\n  \
    \  guard numbers.count > 7 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count > 8 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ > 9 else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 10 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count > 11 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count > 12 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count > 13 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count > 14 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count > 15 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count > 16 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ > 17 else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 18\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 19 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count > 20 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count > 21 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count > 22 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count > 23 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count > 24 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count > 25 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ > 26 else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 27\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 28 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count > 29 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count > 30 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.", "    let sortedNumbers = numbers.sorted()\n\
    \    var closest1 = sortedNumbers[0]\n    var closest2 = sortedNumbers[0]\n  \
    \  for i in 1..<sortedNumbers.count {\n        let currentClosest1 = sortedNumbers[i]\n\
    \        let currentClosest2 = sortedNumbers[i - 1]\n        if currentClosest1\
    \ < closest1 {\n            closest1 = currentClosest1\n        }\n        if\
    \ currentClosest2 < closest2 {\n            closest2 = currentClosest2\n     \
    \   }\n    }\n    return (closest1, closest2)", "    guard numbers.count >= 2\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 3 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 4 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 5 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 6 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 7 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count >= 8 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 9 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 10 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 11\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 12 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 13 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 14 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 15 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 16 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 17 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 18 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 19 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 20\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 21 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 22 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 23 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 24 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 25 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 26 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 27 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 28 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 29\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 30 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 31 else { return\
    \ (numbers[0], numbers[0]) }\n    guard ", "    let smallest = numbers[0]\n  \
    \  let largest = numbers[0]\n    for i in 1..numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 4 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count >= 5 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 6 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 7 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 8\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 9 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 10 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 11 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 12 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 13 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 14 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 15 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 16 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 17\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 18 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 19 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 20 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 21 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 22 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 23 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 24 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 25 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 26\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 27 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 28 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 29 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 30 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 31 else { return (numbers[0], numbers[0]) }\n\
    \    guard ", "    guard numbers.count >= 2 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0]) }\n\n\
    \    let smallest = numbers[0]\n    let largest = numbers[0]\n    for i in 1..numbers.count\
    \ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n \
    \       } else if numbers[i] > largest {\n            largest = numbers[i]\n \
    \       }\n    }\n    return (smallest, largest)", "    let sortedNumbers = numbers.sorted()\n\
    \    if sortedNumbers.count < 2 {\n        return (sortedNumbers[0], sortedNumbers[1])\n\
    \    }\n    let closest1 = sortedNumbers.first!\n    let closest2 = sortedNumbers.last!\n\
    \    if closest1 < closest2 {\n        return (closest1, closest2)\n    }\n  \
    \  return (closest2, closest1)", "    var smallest = numbers[0]\n    var largest\
    \ = numbers[0]\n    for number in numbers {\n        if number < smallest {\n\
    \            smallest = number\n        }\n        if number > largest {\n   \
    \         largest = number\n        }\n    }\n    return (smallest, largest)",
  "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n    }\n    let smallest\
    \ = numbers[0]\n    let largest = numbers[0]\n    for i in 1..<numbers.count {\n\
    \        if numbers[i] < smallest {\n            smallest = numbers[i]\n     \
    \   }\n        if numbers[i] > largest {\n            largest = numbers[i]\n \
    \       }\n    }\n    return (smallest, largest)", "    guard numbers.count >=\
    \ 2 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 3 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 4 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 5 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 6 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 7 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count >= 8 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 9 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 10 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 11\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 12 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 13 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 14 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 15 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 16 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 17 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 18 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 19 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 20\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 21 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 22 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 23 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 24 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 25 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 26 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 27 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 28 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 29\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 30 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 31 else { return\
    \ (numbers[0], numbers[0]) }\n    guard ", "    let sortedNumbers = numbers.sorted()\n\
    \    var closest1 = sortedNumbers[0]\n    var closest2 = sortedNumbers[0]\n  \
    \  for number in sortedNumbers {\n        if number < closest1 {\n           \
    \ closest1 = number\n        } else if number > closest2 {\n            closest2\
    \ = number\n        }\n    }\n    return (closest1, closest2)", "    guard numbers.count\
    \ > 1 else { return (numbers[0], numbers[0]) }\n    var smallest = numbers[0]\n\
    \    var largest = numbers[0]\n    for i in 1..numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        } else if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    guard numbers.count >=\
    \ 2 else { return (numbers[0], numbers[0]) }\n    var smallest = numbers[0]\n\
    \    var largest = numbers[0]\n    for i in 1..numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        } else if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    let smallest = numbers[0]\n    let largest = numbers[0]\n  \
    \  for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    var smallest = numbers[0]\n\
    \    var largest = numbers[0]\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    let sortedNumbers = numbers.sorted()\n    if sortedNumbers.count\
    \ < 2 {\n        return (sortedNumbers[0], sortedNumbers[1])\n    }\n    let closestToFirst\
    \ = sortedNumbers.first!\n    let closestToSecond = sortedNumbers.last!\n    return\
    \ (closestToFirst, closestToSecond)", "    guard numbers.count >= 2 else {\n \
    \       return (0.0,0.0)\n    }\n    guard numbers.count > 1 else {\n        return\
    \ numbers[0], numbers[0]\n    }\n    let smallest = numbers[0]\n    let largest\
    \ = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i] > largest\
    \ {\n            largest = numbers[i]\n        }\n        if numbers[i] < smallest\
    \ {\n            smallest = numbers[i]\n        }\n    }\n    return (smallest,\
    \ largest)", "    let smallest = numbers[0]\n    let largest = numbers[0]\n  \
    \  for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    guard numbers.count >=\
    \ 2 else { return (numbers[0], numbers[0]) }\n    var smallest = numbers[0]\n\
    \    var largest = numbers[0]\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    let smallest = numbers[0]\n    let largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        } else if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    let smallest = min(numbers)\n\
    \    let largest = max(numbers)\n    return (smallest, largest)", "    let min1\
    \ = min(numbers)\n    let max1 = max(numbers)\n    let min2 = min(numbers, min1)\n\
    \    let max2 = max(numbers, max1)\n    return (min1, max1), (min2, max2)", " \
    \   let smallest = min(numbers)\n    let largest = max(numbers)\n    return (smallest,\
    \ largest)", "    let min = numbers[0]\n    let max = numbers[0]\n    for number\
    \ in numbers {\n        if number < min {\n            min = number\n        }\
    \ else if number > max {\n            max = number\n        }\n    }\n    return\
    \ (min, max)", "    let smallest = numbers[0]\n    let largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    \n    let smallest = numbers[0]\n    let largest = numbers[0]\n  \
    \  \n    for i in 1..<numbers.count {\n        if numbers[i] > largest {\n   \
    \         largest = numbers[i]\n        }\n        if numbers[i] < smallest {\n\
    \            smallest = numbers[i]\n        }\n    }\n    \n    return (smallest,\
    \ largest)", "    let smallest = min(numbers)\n    let largest = max(numbers)\n\
    \    return (smallest, largest)", "    guard numbers.count >= 2 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 3 else { return (numbers[0],\
    \ numbers[0]) }\n\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    var smallestIndex = -1\n    var largestIndex = -1\n\n    for i in 1..<numbers.count\
    \ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n \
    \           smallestIndex = i\n        }\n        if numbers[i] > largest {\n\
    \            largest = numbers[i]\n            largestIndex = i\n        }\n \
    \   }\n\n    return (numbers[smallestIndex], numbers[largestIndex])", "    guard\
    \ numbers.count >= 2 else {\n        return (0.0,0.0)\n    }\n    let smallest\
    \ = numbers[0]\n    let largest = numbers[0]\n    for i in 1..<numbers.count {\n\
    \        if numbers[i] < smallest {\n            smallest = numbers[i]\n     \
    \   }\n        if numbers[i] > largest {\n            largest = numbers[i]\n \
    \       }\n    }\n    return (smallest, largest)"]
stop_tokens:
- "\n}"
