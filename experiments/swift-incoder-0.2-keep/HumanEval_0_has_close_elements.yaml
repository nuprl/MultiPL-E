name: HumanEval_0_has_close_elements
language: swift
prompt: "\n/// Check if in given list of numbers, are any two numbers closer to each\
  \ other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0, 3.0],\
  \ 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
  /// True\nfunc has_close_elements(numbers: [Double], threshold: Double) -> Bool\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
  \ 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
  \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
  \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
  \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
  \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
  \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
completions: ["    let sortedNumbers = numbers.sorted()\n    if sortedNumbers.count\
    \ < 2 {\n        return false\n    }\n    let firstNumber = sortedNumbers[0]\n\
    \    let lastNumber = sortedNumbers[sortedNumbers.count - 1]\n    return abs(firstNumber\
    \ - lastNumber) < threshold", "    let sortedNumbers = numbers.sorted(by: <)\n\
    \    for index in 0..<sortedNumbers.count {\n        if sortedNumbers[index] -\
    \ sortedNumbers[index-1] > threshold {\n            return true\n        }\n \
    \   }\n    return false", "    if numbers.isEmpty {\n        return false\n  \
    \  }\n    if numbers.count == 1 {\n        return true\n    }\n    var maxDistance\
    \ = Double.greatestFiniteMagnitude\n    var maxIndex = 0\n    for index in 0..<numbers.count\
    \ {\n        let distance = abs(numbers[index] - threshold)\n        if distance\
    \ > maxDistance {\n            maxDistance = distance\n            maxIndex =\
    \ index\n        }\n    }\n    return maxDistance < threshold", "    let sortedNumbers\
    \ = numbers.sorted()\n    if sortedNumbers.count < 2 {\n        return false\n\
    \    }\n    var first: Double?\n    var second: Double?\n    var distance: Double?\n\
    \    for number in sortedNumbers {\n        if first == nil {\n            first\
    \ = number\n            continue\n        }\n        if second == nil {\n    \
    \        second = number\n            continue\n        }\n        distance =\
    \ abs(first - second)\n        if distance < threshold {\n            return true\n\
    \        }\n        first = nil\n        second = nil\n    }\n    return false",
  "    var min: Double = Double.greatestFiniteMagnitude\n    var max: Double = Double.leastFiniteMagnitude\n\
    \    for number in numbers {\n        if number < min {\n            min = number\n\
    \        } else if number > max {\n            max = number\n        }\n    }\n\
    \    return min - threshold <= max && max <= min + threshold", "    let sortedNumbers\
    \ = numbers.sorted()\n    let sortedThreshold = sortedNumbers.first!.distance(to:\
    \ sortedNumbers.last!)\n    return sortedThreshold < threshold", "    guard numbers.count\
    \ > 1 else { return false }\n    let sortedNumbers = numbers.sorted()\n    let\
    \ firstNumber = sortedNumbers[0]\n    let lastNumber = sortedNumbers.last!\n \
    \   return abs(firstNumber - lastNumber) < threshold", "    let sortedNumbers\
    \ = numbers.sorted()\n    let firstElement = sortedNumbers[0]\n    let lastElement\
    \ = sortedNumbers.last!\n    let firstElementDistance = abs(firstElement - threshold)\n\
    \    let lastElementDistance = abs(lastElement - threshold)\n    return firstElementDistance\
    \ < lastElementDistance", "    let sortedNumbers = numbers.sorted()\n    if sortedNumbers.count\
    \ < 2 {\n        return false\n    }\n    if sortedNumbers.count > 2 {\n     \
    \   return true\n    }\n    let firstNumber = sortedNumbers[0]\n    let secondNumber\
    \ = sortedNumbers[1]\n    return abs(firstNumber - secondNumber) < threshold",
  "    var closed = false\n    for number in numbers {\n        if abs(number - threshold)\
    \ < abs(number - numbers[0]) {\n            closed = true\n            break\n\
    \        }\n    }\n    return closed", "    if numbers.isEmpty {\n        return\
    \ false\n    }\n    var min: Double = numbers[0]\n    var max: Double = numbers[0]\n\
    \    for number in numbers {\n        if number < min {\n            min = number\n\
    \        } else if number > max {\n            max = number\n        }\n    }\n\
    \    for number in numbers {\n        if number - min < threshold && number -\
    \ max < threshold {\n            return true\n        }\n    }\n    return false",
  "    var first: Double?\n    var second: Double?\n    for number in numbers {\n\
    \        if first == nil {\n            first = number\n            continue\n\
    \        }\n        if second == nil {\n            second = number\n        \
    \    continue\n        }\n        if abs(number - first) < threshold {\n     \
    \       return true\n        }\n        if abs(number - second) < threshold {\n\
    \            return true\n        }\n        first = nil\n        second = nil\n\
    \    }\n    return false", "    if numbers.isEmpty {\n        return false\n \
    \   }\n    var first: Double = numbers[0]\n    var second: Double = numbers[0]\n\
    \    for number in numbers {\n        if number < first {\n            first =\
    \ number\n        }\n        if number > second {\n            second = number\n\
    \        }\n    }\n    return abs(first - second) < threshold", "    guard numbers.count\
    \ > 1 else {\n        return false\n    }\n    guard numbers.count <= 10000 else\
    \ {\n        return false\n    }\n    guard numbers.count >= 10000 else {\n  \
    \      return false\n    }\n    var distances = Array<Double>(repeating: 0.0,\
    \ count: numbers.count)\n    for i in 0..<numbers.count {\n        distances[i]\
    \ = distance(numbers[i], numbers[(i + 1) % numbers.count])\n    }\n    let minDistance\
    \ = distances.min()\n    return minDistance < threshold", "    guard numbers.count\
    \ > 0 else {\n        return false\n    }\n\n    let sortedNumbers = numbers.sorted()\n\
    \    let firstNumber = sortedNumbers[0]\n    let lastNumber = sortedNumbers.last!\n\
    \    let distance = (lastNumber - firstNumber).abs\n    return distance < threshold",
  "    if numbers.isEmpty {\n        return false\n    }\n    var first: Double?\n\
    \    var second: Double?\n    var distance: Double?\n    for number in numbers\
    \ {\n        if first == nil {\n            first = number\n            continue\n\
    \        }\n        if second == nil {\n            second = number\n        \
    \    continue\n        }\n        distance = abs(first - second)\n        if distance\
    \ < threshold {\n            return true\n        }\n        first = nil\n   \
    \     second = nil\n    }\n    return false", "    let sortedNumbers = numbers.sorted(by:\
    \ <)\n    if sortedNumbers.first == sortedNumbers.last {\n        return true\n\
    \    }\n    let firstDiff = sortedNumbers.first - sortedNumbers.last\n    let\
    \ secondDiff = sortedNumbers.last - sortedNumbers.first\n    return abs(firstDiff)\
    \ < abs(secondDiff) && abs(firstDiff) < threshold", "    let sortedNumbers = numbers.sorted()\n\
    \    let firstNumber = sortedNumbers.first!\n    let lastNumber = sortedNumbers.last!\n\
    \    return abs(firstNumber - lastNumber) < threshold", "    if numbers.isEmpty\
    \ {\n        return false\n    }\n    if numbers.count == 1 {\n        return\
    \ true\n    }\n    var min: Double = numbers[0]\n    var max: Double = numbers[0]\n\
    \    for number in numbers {\n        if number < min {\n            min = number\n\
    \        } else if number > max {\n            max = number\n        }\n    }\n\
    \    return abs(max - min) < threshold", "    let sortedNumbers = numbers.sorted()\n\
    \    if sortedNumbers.count < 2 {\n        return false\n    }\n    let firstNumber\
    \ = sortedNumbers[0]\n    let lastNumber = sortedNumbers[sortedNumbers.count -\
    \ 1]\n    return abs(firstNumber - lastNumber) < threshold"]
stop_tokens:
- "\n}"
