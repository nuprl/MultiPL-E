name: HumanEval_99_closest_integer
language: swift
prompt: "\n/// Create a function that takes a value (string) representing a number\n\
  /// and returns the closest integer to it. If the number is equidistant\n/// from\
  \ two integers, round it away from zero.\n/// Examples\n/// >>> closest_integer(\"\
  10\")\n/// 10\n/// >>> closest_integer(\"15.3\")\n/// 15\n/// Note:\n/// Rounding\
  \ away from zero means that if the given number is equidistant\n/// from two integers,\
  \ the one you should return is the one that is the\n/// farthest from zero. For\
  \ example closest_integer(\"14.5\") should\n/// return 15 and closest_integer(\"\
  -14.5\") should return -15.\nfunc closest_integer(value: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(closest_integer(value: \"10\") == 10)\n\
  assert(closest_integer(value: \"14.5\") == 15)\nassert(closest_integer(value: \"\
  -15.5\") == -16)\nassert(closest_integer(value: \"15.3\") == 15)\nassert(closest_integer(value:\
  \ \"0\") == 0)"
completions: ["    let value = value.trimmingCharacters(in: CharacterSet.decimalDigits.inverted)\n\
    \    let intValue = Int(value)\n    if intValue == value {\n        return intValue\n\
    \    }\n    if intValue < 0 {\n        return intValue + Int((-intValue).rounded())\n\
    \    }\n    return intValue - Int((-intValue).rounded())", "    let numberFormatter\
    \ = NumberFormatter()\n    numberFormatter.numberStyle = .decimal\n    guard let\
    \ number = numberFormatter.number(from: value) else {\n        return 0\n    }\n\
    \    return Int(round(number))", "    let number = Double(value)\n    let closestInteger\
    \ = Int(ceil(number))\n    return closestInteger", "    let number = Int(value)\n\
    \    if number == number {\n        return number\n    }\n    let closest = (number\
    \ - number % 10) + 10\n    if closest < number {\n        return closest\n   \
    \ }\n    return number", "    let value = value.trimmingCharacters(in: CharacterSet.decimalDigits.inverted)\n\
    \    let intValue = Int(value)\n    return intValue < 0 ? intValue + 1 : intValue",
  "    let number = Int(value)\n    if number < 0 {\n        return -number\n    }\n\
    \    if number == 0 {\n        return 0\n    }\n    if number > 0 {\n        return\
    \ number\n    }\n    return -number", "    let value = value.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let numbers = value.components(separatedBy:\
    \ CharacterSet.decimalDigits.inverted)\n    let closestToZero = numbers.map {\
    \ Int($0) }\n    let closestToZeroIndex = closestToZero.index(of: 0)!\n    return\
    \ closestToZeroIndex == 0 ? closestToZero[0] : closestToZero[closestToZeroIndex]",
  "    let value = value.trimmingCharacters(in: CharacterSet.decimalDigits.inverted)\n\
    \    let intValue = Int(value)\n    let closestValue = intValue + intValue / 2\n\
    \    return closestValue % intValue", "    let value = value.trimmingCharacters(in:\
    \ CharacterSet.decimalDigits.inverted)\n    let intValue = Int(value)\n    if\
    \ intValue == value {\n        return intValue\n    }\n    var closest: Int\n\
    \    if intValue < 0 {\n        closest = -closest_integer(-value)\n    } else\
    \ {\n        closest = 0\n    }\n    var closestDiff = abs(intValue - closest)\n\
    \    for _ in 0..<10 {\n        let nextClosest = closest\n        let nextClosestDiff\
    \ = abs(intValue - nextClosest)\n        if nextClosestDiff < closestDiff {\n\
    \            closest = nextClosest\n            closestDiff = nextClosestDiff\n\
    \        }\n    }\n    return closest", "    let numberFormatter = NumberFormatter()\n\
    \    numberFormatter.numberStyle = .decimal\n    guard let number = numberFormatter.number(from:\
    \ value) else {\n        return 0\n    }\n    return Int(round(number))", "  \
    \  let number: Double = Double(value)\n    let closest: Double = floor(number)\n\
    \    if abs(number - closest) < abs(number - floor(number)) {\n        return\
    \ Int(closest)\n    }\n    return Int(floor(number))", "    let value = value.trimmingCharacters(in:\
    \ CharacterSet.decimalDigits.inverted)\n    let intValue = Int(value)\n    let\
    \ closestValue = intValue.round()\n    if closestValue == intValue {\n       \
    \ return intValue\n    }\n    return closestValue", "    let value = value.trimmingCharacters(in:\
    \ CharacterSet.decimalDigits.inverted)\n    let digits = value.components(separatedBy:\
    \ CharacterSet.decimalDigits)\n    let digit = digits.first!\n    let digits =\
    \ digits.dropFirst()\n    let result = Int(digit)\n    if digits.count > 0 {\n\
    \        let nextDigit = digits.first!\n        let nextDigits = digits.dropFirst()\n\
    \        if nextDigit == 0 {\n            if nextDigits.count == 0 {\n       \
    \         return result\n            }\n            else {\n                return\
    \ result + 1 // round away from zero\n            }\n        }\n        else {\n\
    \            if nextDigit == 9 {\n                return result + 1 // round away\
    \ from zero\n            }\n            else {\n                return result\
    \ + 1 // round away from zero\n            }\n        }\n    }\n    else {\n \
    \       return result\n    }", "    let value = value.trimmingCharacters(in: CharacterSet.decimalDigits.inverted)\n\
    \    let intValue = Int(value)\n    if intValue == value {\n        return intValue\n\
    \    }\n    let closestValue = intValue - intValue % 10\n    return closestValue\
    \ < 0 ? closestValue + 10 : closestValue", "    let intValue = Int(value)\n  \
    \  if intValue < 0 {\n        return intValue + Int((Int64.max)) + Int((Int64.max)\
    \ / 2)\n    }\n    return intValue", "    let value = value.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let intValue = Int(value)\n    if\
    \ intValue == value {\n        return intValue\n    }\n    if intValue < 0 {\n\
    \        return intValue + Int(abs(intValue))\n    }\n    return intValue", " \
    \   let number = Int(value)\n    let difference = abs(number - Int(value))\n \
    \   if difference < 0.5 {\n        return number\n    }\n    return Int(value)\
    \ + difference", "    let number = Int(value)\n    let closest = (number - Int(number))\
    \ / Int(number)\n    return closest", "    let number = Double(value)\n    let\
    \ closest = (number - Int(number)) / Int(number)\n    return Int(closest)", " \
    \   let value = value.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let intValue = Int(value)\n    return intValue.rounded(.toNearestOrEven)"]
stop_tokens:
- "\n}"
