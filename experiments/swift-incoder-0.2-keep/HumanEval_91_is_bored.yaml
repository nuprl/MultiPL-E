name: HumanEval_91_is_bored
language: swift
prompt: "\n/// You'll be given a string of words, and your task is to count the number\n\
  /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n/// Sentences\
  \ are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"Hello\
  \ world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining. I love\
  \ this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
  \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
  \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
  \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\")\
  \ == 0)"
completions: ["    var count = 0\n    for s in S.split(separator: \".?!\") {\n   \
    \     if s.starts(with: \"I\") {\n            count += 1\n        }\n    }\n \
    \   return count", "    let boredoms = S.components(separatedBy: \".?!\")\n  \
    \      .filter({ $0.hasPrefix(\"I\") })\n        .count\n    return boredoms",
  '    return is_bored_helper(S, "", 0, 0, 0)', "    var count = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            count += 1\n   \
    \     }\n    }\n    return count", '    return is_bored_impl(S, "")', "    let\
    \ boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n\
    \    return boredoms", "    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count", "    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", "    var count = 0\n    for s in S.split(separator:\
    \ \".,?!\") {\n        if s.starts(with: \"I\") {\n            count += 1\n  \
    \      }\n    }\n    return count", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.count { $0.hasPrefix(\"I\") }", '    return is_bored_helper(S,
    "", 0, 0, 0)', "    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \  .filter{$0.hasPrefix(\"I\")}\n    return boredoms.count", "    var bored =\
    \ 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n\
    \    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n \
    \   var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n  \
    \  var x = 0\n    var y = 0\n    var z = 0\n    var A = 0\n    var B = 0\n   \
    \ var C = 0\n    var D = 0\n    var E = 0\n    var F = 0\n    var G = 0\n    var\
    \ H = 0\n    var I = 0\n    var J = 0\n    var K = 0\n    var L = 0\n    var M\
    \ = 0\n    var N = 0\n    var O = 0\n    var P = 0\n    var Q = 0\n    var R =\
    \ 0\n    var S = 0\n    var T = 0\n    var U = 0\n    var V = 0\n    var W = 0\n\
    \    var X = 0\n    var Y = 0\n    var Z = 0\n    var a = 0\n    var b = 0\n \
    \   var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n  \
    \  var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n   \
    \ var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var\
    \ r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w\
    \ = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var A = 0\n    var B =\
    \ 0\n    var C = 0\n    var D = 0\n    var E = 0\n    var F = 0\n    var G = 0\n\
    \    var H = 0\n    var I = 0\n    var J = 0\n    var K = 0\n    var L = 0\n \
    \   var M = 0\n    var N = 0\n    var O = 0\n    var P = 0\n    var Q = 0\n  \
    \  var R = 0\n    var S = 0\n    var T = 0\n    var U = 0\n    var V = 0\n   \
    \ var W = 0\n    var X = 0\n    var Y = 0\n    var Z = 0\n    var a = 0\n    var\
    \ b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g\
    \ = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l =\
    \ 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n\
    \    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n \
    \   var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var A = 0\n  \
    \  var B = 0\n    var C = 0\n    var D = 0\n    var E = 0\n    var F = 0\n   \
    \ var ", "    guard S.count > 0 else {\n        return 0\n    }\n    var bored\
    \ = 0\n    var last = 0\n    for c in S {\n        if c == '.' || c == '?' ||\
    \ c == '!' {\n            bored++\n        }\n        if last == c {\n       \
    \     bored++\n        }\n        last = c\n    }\n    return bored", "    \n\
    \    let boredoms = S.components(separatedBy: \".\")\n    \n    if boredoms.count\
    \ < 1 {\n        return 0\n    }\n    \n    if boredoms.first == \"I\" {\n   \
    \     return 1\n    }\n    \n    return 0", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.filter({ $0.hasPrefix(\"I\") }).count", "    let\
    \ boredoms = S.components(separatedBy: \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n\
    \    return boredoms", "    let boredoms = S.components(separatedBy: \".?!\")\n\
    \        .filter({ $0.hasPrefix(\"I\") })\n        .count\n    return boredoms",
  "    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count", "    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter{ $0.hasPrefix(\"I\") }\n    return boredoms.count", "    var\
    \ bored = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            bored += 1\n        }\n    }\n    return bored", "   \
    \ \n    // TODO: Write a function that takes a string and returns the number of\
    \ boredoms.\n    // HINT: Look at the string S and see if you can find the pattern\
    \ \"I love this weather\".\n    // If so, return 1, otherwise return 0.\n    \n\
    \    return 0", '    return is_bored_1(S)', "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.filter({ $0.hasPrefix(\"I\") }).count", '    return
    is_bored(S, 0)', "    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count", "    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.filter({ $0.hasPrefix(\"I\") }).count", "    let\
    \ boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"I\")}\n\
    \    return boredoms.count", "    let boredoms = S.components(separatedBy: \"\
    .?!\")\n        .filter { $0.hasPrefix(\"I\") }\n        .count\n    return boredoms",
  "    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count", '    return count_boredoms(S, true)', '    return
    count_boredoms(S, true)', "    var bored = 0\n    var boredom = 0\n    var boredom_count\
    \ = 0\n    var boredom_word = \"\"\n    var boredom_word_count = 0\n    var boredom_word_index\
    \ = 0\n    var boredom_word_length = 0\n    var boredom_word_start = 0\n    var\
    \ boredom_word_end = 0\n    var boredom_word_word_length = 0\n    var boredom_word_word_start\
    \ = 0\n    var boredom_word_word_end = 0\n    var boredom_word_word_word_length\
    \ = 0\n    var boredom_word_word_word_start = 0\n    var boredom_word_word_word_end\
    \ = 0\n    var boredom_word_word_word_word_length = 0\n    var boredom_word_word_word_word_start\
    \ = 0\n    var boredom_word_word_word_word_end = 0\n    var boredom_word_word_word_word_word_length\
    \ = 0\n    var boredom_word_word_word_word_word_start = 0\n    var boredom_word_word_word_word_word_word_end\
    \ = 0\n    var boredom_word_word_word_word_word_word_word_length = 0\n    var\
    \ boredom_word_word_word_word_word_word_word_start = 0\n    var boredom_word_word_word_word_word_word_word_word_end\
    \ = 0\n    var boredom_word_word_word_word_word_word_word_word_word_length = 0\n\
    \    var boredom_word_word_word_word_word_word_word_word_word_word_start = 0\n\
    \    var boredom_word_word_word_word_word_word_word_word_word_word_word_end =\
    \ 0\n    var boredom_word_word_word_word_word_word_word_word_word_word_word_word_length\
    \ = 0\n    var boredom_word_word_word_word_word_word_word_word_word_word_word_word_word_word_start\
    \ = 0\n    var boredom_word_word_word_word_word_word_word_word_word_word_word_word_word_word_end\
    \ = 0\n    var boredom_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_length\
    \ = 0\n    var boredom_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_start\
    \ = 0\n    var boredom_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_end\
    \ = 0\n    var boredom_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_",
  "    guard let s = S.split(separator: \".\", maxSplit: 1).first else {\n       \
    \ return 0\n    }\n    if s.hasPrefix(\"I\") {\n        return 1\n    }\n    return\
    \ 0", '    return count_boredoms(S, "I")', "    var bored = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            bored += 1\n   \
    \     }\n    }\n    return bored", "    var count = 0\n    for s in S.split(separator:\
    \ \".,?!\") {\n        if s.starts(with: \"I\") {\n            count += 1\n  \
    \      }\n    }\n    return count", '    return is_bored(S, "")', "    \n    //\
    \ TODO: Write a function that takes a string and returns the number of boredoms.\n\
    \    // HINT: Look at the string S and see if you can find the substring \"I\"\
    .\n    // If so, return the number of characters to the left of the substring\
    \ \"I\".\n    // If not, return 0.\n    \n    return 0", "    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter{$0.hasPrefix(\"I\")}\n    return boredoms.count", "    let boredoms\
    \ = S.components(separatedBy: \".?!\").filter {\n        !$0.isEmpty\n    }.count\n\
    \    return boredoms", "    guard let s = S.split(separator: \".?!\") else {\n\
    \        return 0\n    }\n    return s.filter({ $0.hasPrefix(\"I\") }).count",
  "    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count", "    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter{$0.hasPrefix(\"I\")}\n    return boredoms.count", "    var count\
    \ = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count", "   \
    \ var count = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count", "   \
    \ let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter{$0.hasPrefix(\"\
    I\")}.count", "    \n    let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"\
    I\") }).count\n    \n    return boredoms", '    return is_bored_helper(S, "",
    0, 0, 0)', "    var bored = 0\n    for s in S.split(separator: \".,?!\") {\n \
    \       if s.starts(with: \"I\") {\n            bored += 1\n        }\n    }\n\
    \    return bored", "    let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"\
    I\") }).count\n    return boredoms", "    var boredomCount = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredomCount +=\
    \ 1\n        }\n    }\n    return boredomCount", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.filter({ $0.hasPrefix(\"I\") }).count", "    \n\
    \    // TODO: Write a function that takes a string and returns the number of boredoms.\n\
    \    // HINT: Use a regular expression to find all the sentences that start with\
    \ the word \"I\".\n    // The function should return the number of boredoms.\n\
    \    \n    return 0", "    let boredoms = S.components(separatedBy: \".?!\")\n\
    \    return boredoms.filter({ $0.hasPrefix(\"I\") }).count", "    let boredoms\
    \ = S.components(separatedBy: \".?!\")\n    return boredoms.filter({ $0.hasPrefix(\"\
    I\") }).count", "    var boredoms = 0\n    var sentences = S.split(\".\")\n  \
    \  for sentence in sentences {\n        if sentence.startsWith(\"I\") {\n    \
    \        boredoms += 1\n        }\n    }\n    return boredoms", "    let boredoms\
    \ = S.components(separatedBy: \".?!\")\n    return boredoms.filter{$0.hasPrefix(\"\
    I\")}.count", "    let boredoms = S.components(separatedBy: \".?!\")\n    return\
    \ boredoms.filter({ $0.hasPrefix(\"I\") }).count", "    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter{$0.hasPrefix(\"I\")}\n    return boredoms.count", "    let boredoms\
    \ = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"I\")}\n    return\
    \ boredoms.count", "    var bored = 0\n    for s in S.split(separator: \".?!\"\
    ) {\n        if s.starts(with: \"I\") {\n            bored += 1\n        }\n \
    \   }\n    return bored", "    let boredoms = S.components(separatedBy: \".?!\"\
    )\n    return boredoms.filter({ $0.hasPrefix(\"I\") }).count", "    guard let\
    \ words = S.components(separatedBy: \".?!\") else {\n        return 0\n    }\n\
    \    return words.filter({ $0.hasPrefix(\"I\") }).count", "    var count = 0\n\
    \    for s in S.split(separator: \".,?!\") {\n        if s.starts(with: \"I\"\
    ) {\n            count += 1\n        }\n    }\n    return count", "    let boredoms\
    \ = S.components(separatedBy: \".?!\")\n    return boredoms.count { $0.hasPrefix(\"\
    I\") }", "    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count", "    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter{$0.hasPrefix(\"I\")}\n    return boredoms.count", "    let boredoms\
    \ = S.components(separatedBy: \".?!\")\n    return boredoms.filter({ $0.hasPrefix(\"\
    I\") }).count", "    var count = 0\n    for s in S.split(separator: \".?!\") {\n\
    \        if s.starts(with: \"I\") {\n            count += 1\n        }\n    }\n\
    \    return count", '    return count_boredoms(S, false)', "    var bored = 0\n\
    \    for s in S.split(separator: \".,?!\") {\n        if s.starts(with: \"I\"\
    ) {\n            bored += 1\n        }\n    }\n    return bored", "    let boredoms\
    \ = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"I\")}\n    return\
    \ boredoms.count", "    var bored = 0\n    var i = 0\n    for c in S {\n     \
    \   if c == '.' || c == '?' || c == '!' {\n            bored += 1\n        }\n\
    \        i += 1\n    }\n    return bored", "    var bored = 0\n    var i = 0\n\
    \    for c in S {\n        switch c {\n        case \"I\":\n            bored\
    \ += 1\n        case \"!\", \"?\", \".\":\n            i += 1\n            if\
    \ i == 3 {\n                bored += 1\n                i = 0\n            }\n\
    \        }\n    }\n    return bored", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.filter{$0.starts(with: \"I\")}.count", "    var\
    \ count = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count", "   \
    \ let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n\
    \    return boredoms", "    var bored = 0\n    for s in S.split(separator: \"\
    .,?!\") {\n        if s.starts(with: \"I\") {\n            bored += 1\n      \
    \  }\n    }\n    return bored", "    \n    // TODO: Write a function that takes\
    \ a string and returns the number of boredoms.\n    // HINT: Use a regular expression\
    \ to find sentences that start with the word \"I\".\n    // The regular expression\
    \ pattern will look like \"^I.*\"\n    // The function should ignore all punctuation\
    \ and only count the initial \"I\".\n    // The function should ignore all numbers\
    \ and only count the initial \"I\".\n    // The function should ignore all uppercase\
    \ and only count the initial \"I\".\n    // The function should ignore all lowercase\
    \ and only count the initial \"I\".\n    // The function should ignore all special\
    \ characters and only count the initial \"I\".\n    // The function should ignore\
    \ all whitespace and only count the initial \"I\".\n    // The function should\
    \ ignore all words and only count the initial \"I\".\n    // The function should\
    \ ignore all sentences and only count the initial \"I\".\n    // The function\
    \ should ignore all boredoms and only count the initial \"I\".\n    // The function\
    \ should ignore all numbers and only count the initial \"I\".\n    // The function\
    \ should ignore all uppercase and only count the initial \"I\".\n    // The function\
    \ should ignore all lowercase and only count the initial \"I\".\n    // The function\
    \ should ignore all special characters and only count the initial \"I\".\n   \
    \ // The function should ignore all whitespace and only count the initial \"I\"\
    .\n    // The function should ignore all words and only count the initial \"I\"\
    .\n    // The function should ignore all sentences and only count the initial\
    \ \"I\".\n    // The function should ignore all boredoms and only count the initial\
    \ \"I\".\n    // The function should ignore all numbers and only count the initial\
    \ \"I\".\n    // The function should ignore all uppercase and only count the initial\
    \ \"I\".\n    // The function should ignore all lowercase and only count the initial\
    \ \"I\".\n    // The function should ignore all special characters and only count\
    \ the initial \"I\".\n    // The function should ignore all whitespace and only\
    \ count the initial \"I\".\n    // The function should ignore all words and only\
    \ count the initial \"I\".\n    // The function should ignore all sentences and\
    \ only count the initial \"I\".\n    // The function should ignore all boredoms\
    \ and only count the initial \"I\".\n    // The function should ignore all numbers\
    \ and only count the initial \"I\".\n    // The function should ignore all uppercase\
    \ and only count the initial \"I\".\n    // The function should ignore all lowercase\
    \ and only count the initial \"I", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.filter({ $0.hasPrefix(\"I\") }).count", "    var\
    \ bored = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var\
    \ m = S.count\n\n    while i < m {\n        if S[i] == \"I\" {\n            bored++\n\
    \        }\n        i += 1\n    }\n\n    return bored", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.count { $0.starts(with: \"I\") }", "    let boredoms\
    \ = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"I\")}\n    return\
    \ boredoms.count", "    var boredoms = 0\n    for s in S.split(separator: \".?!\"\
    ) {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n\
    \    }\n    return boredoms", '    return is_bored_str(S, "")', "    let boredoms\
    \ = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"I\")}\n    return\
    \ boredoms.count", "    let boredoms = S.components(separatedBy: \".?!\")\n  \
    \  return boredoms.count { $0.hasPrefix(\"I\") }", "    var count = 0\n    for\
    \ s in S.split(separator: \".,?!\") {\n        if s.starts(with: \"I\") {\n  \
    \          count += 1\n        }\n    }\n    return count", "    let boredoms\
    \ = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"I\")}\n    return\
    \ boredoms.count", "    guard let S = S.lowercased() else {\n        return 0\n\
    \    }\n    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"i\") }).count", '    return is_bored_str(S).count', '    return
    is_bored_helper(S, "")', "    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n        .filter({$0.hasPrefix(\"I\")})\n        .count\n    return\
    \ boredoms", "    var count = 0\n    for s in S.split(separator: \".?!\") {\n\
    \        if s.starts(with: \"I\") {\n            count += 1\n        }\n    }\n\
    \    return count", "    let boredoms = S.components(separatedBy: \".?!\")\n \
    \   return boredoms.count { $0.hasPrefix(\"I\") }", "    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter{$0.starts(with: \"I\")}\n    return boredoms.count", "    let\
    \ boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"I\")}\n\
    \    return boredoms.count", "    var bored = 0\n    for s in S.split(separator:\
    \ \".,?!\") {\n        if s.starts(with: \"I\") {\n            bored += 1\n  \
    \      }\n    }\n    return bored", "    var count = 0\n    for s in S.split(separator:\
    \ \".,?!\") {\n        if s.starts(with: \"I\") {\n            count += 1\n  \
    \      }\n    }\n    return count", "    var bored = 0\n    for s in S.split(separator:\
    \ \".,?!\") {\n        if s.starts(with: \"I\") {\n            bored += 1\n  \
    \      }\n    }\n    return bored", "    var bored = 0\n    for s in S.split(separator:\
    \ \".,?!\") {\n        if s.starts(with: \"I\") {\n            bored += 1\n  \
    \      }\n    }\n    return bored", "    \n    // TODO: Write a function that\
    \ takes a string and returns the number of boredoms.\n    // HINT: Look at the\
    \ string S and count the number of times \"I\" appears.\n    // If that number\
    \ is even, then the sentence is bored.\n    // If that number is odd, then the\
    \ sentence is not bored.\n    // Do not count periods or question marks. Think\
    \ about what happens if a sentence starts with a question mark.\n    \n    return\
    \ 0", "    let boredoms = S.components(separatedBy: \".?!\").filter{$0.starts(with:\
    \ \"I\")}\n    return boredoms.count", "    var count = 0\n    var last = 0\n\
    \    for c in S {\n        if c == '.' || c == '?' || c == '!' {\n           \
    \ count += 1\n            last = c\n        }\n    }\n    if last == '.' {\n \
    \       count += 1\n    }\n    return count", "    var bored = 0\n    var i =\
    \ 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n\
    \    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n \
    \   var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n  \
    \  var y = 0\n    var z = 0\n    var A = 0\n    var B = 0\n    var C = 0\n   \
    \ var D = 0\n    var E = 0\n    var F = 0\n    var G = 0\n    var H = 0\n    var\
    \ I = 0\n    var J = 0\n    var K = 0\n    var L = 0\n    var M = 0\n    var N\
    \ = 0\n    var O = 0\n    var P = 0\n    var Q = 0\n    var R = 0\n    var S =\
    \ 0\n    var T = 0\n    var U = 0\n    var V = 0\n    var W = 0\n    var X = 0\n\
    \    var Y = 0\n    var Z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n \
    \   var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n  \
    \  var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n   \
    \ var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var\
    \ s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x\
    \ = 0\n    var y = 0\n    var z = 0\n    var A = 0\n    var B = 0\n    var C =\
    \ 0\n    var D = 0\n    var E = 0\n    var F = 0\n    var G = 0\n    var H = 0\n\
    \    var I = 0\n    var J = 0\n    var K = 0\n    var L = 0\n    var M = 0\n \
    \   var N = 0\n    var O = 0\n    var P = 0\n    var Q = 0\n    var R = 0\n  \
    \  var S = 0\n    var T = 0\n    var U = 0\n    var V = 0\n    var W = 0\n   \
    \ var X = 0\n    var Y = 0\n    var Z = 0\n    var a = 0\n    var b = 0\n    var\
    \ c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\
    \ = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m =\
    \ 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\
    \    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n \
    \   var x = 0\n    var y = 0\n    var z = 0\n    var A = 0\n    var B = 0\n  \
    \  var C = 0\n    var D = 0\n    var E = 0\n    var F = 0\n    var ", "    guard\
    \ let s = S.split(separator: \".\", maxSplit: 1).first else {\n        return\
    \ 0\n    }\n    guard let i = s.range(of: \"^I\") else {\n        return 0\n \
    \   }\n    return s.distance(from: s.startIndex, to: i) == 0", '    return count_boredoms(S,
    "I")', "    var count = 0\n    for s in S.split(separator: \".?!\") {\n      \
    \  if s.starts(with: \"I\") {\n            count += 1\n        }\n    }\n    return\
    \ count", "    var bored = 0\n    var i = 0\n    for c in S {\n        if c ==\
    \ '.' || c == '?' || c == '!' {\n            bored += 1\n        }\n        i\
    \ += 1\n    }\n    return bored", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.count { $0.hasPrefix(\"I\") }", "    var bored\
    \ = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with: \"\
    I\") {\n            bored += 1\n        }\n    }\n    return bored", "    let\
    \ boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"I\")}\n\
    \    return boredoms.count", "    let boredoms = S.components(separatedBy: \"\
    .?!\")\n        .filter{$0.hasPrefix(\"I\")}\n    return boredoms.count", '    return
    count_bored(S, true)', "    var bored = 0\n    for s in S.split(separator: \"\
    .,?!\") {\n        if s.starts(with: \"I\") {\n            bored += 1\n      \
    \  }\n    }\n    return bored", "    var boredoms = 0\n    for s in S.split(separator:\
    \ \".,?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.filter({ $0.hasPrefix(\"I\") }).count", "    let\
    \ boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count", "    var bored = 0\n    var i = 0\n    for s\
    \ in S.split(separator: \".,?!\") {\n        if s.starts(with: \"I\") {\n    \
    \        bored += 1\n        }\n        i += 1\n    }\n    return bored", "  \
    \  \n    // TODO: Write a function that takes a string and returns the number\
    \ of boredoms.\n    // HINT: Use a regular expression to find all the sentences\
    \ that start with the word \"I\".\n    // The function should return the number\
    \ of boredoms.\n    \n    // BEGIN PSEUDOCODE\n    \n    // END PSEUDOCODE\n \
    \   \n    return 0", "    var boredoms = 0\n    for s in S.split(separator: \"\
    .,?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n   \
    \     }\n    }\n    return boredoms", '    return is_bored_helper(S, "", 0, 0,
    0)', '    return is_bored_impl(S, "")', "    var count = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            count += 1\n   \
    \     }\n    }\n    return count", "    var count = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            count += 1\n   \
    \     }\n    }\n    return count", "    var count = 0\n    for s in S.split(separator:\
    \ \".,?!\") {\n        if s.starts(with: \"I\") {\n            count += 1\n  \
    \      }\n    }\n    return count", "    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter{$0.hasPrefix(\"I\")}\n    return boredoms.count", "    let boredoms\
    \ = S.components(separatedBy: \".?!\").filter {\n        $0.hasPrefix(\"I\")\n\
    \    }.count\n    return boredoms", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.count { $0.hasPrefix(\"I\") }", "    var count\
    \ = 0\n    var last = 0\n    for c in S {\n        switch c {\n        case 'I':\n\
    \            count += 1\n            last = count\n        default:\n        \
    \    if last > 0 {\n                count -= last\n                last = 0\n\
    \            }\n        }\n    }\n    return count", "    var bored = 0\n    for\
    \ s in S.split(separator: \".,?!\") {\n        if s.starts(with: \"I\") {\n  \
    \          bored += 1\n        }\n    }\n    return bored", '    return is_bored(S,
    "")', "    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count", "    guard let s = S.split(separator: \".?!\"\
    ).map(String.init) else {\n        return 0\n    }\n    return s.filter({ $0.hasPrefix(\"\
    I\") }).count", "    let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"\
    I\") }).count\n    return boredoms", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.count { $0.hasPrefix(\"I\") }", '    return is_bored_impl(S,
    "", "")', "    var bored = 0\n    for s in S.split(separator: \".,?!\") {\n  \
    \      if s.starts(with: \"I\") {\n            bored += 1\n        }\n    }\n\
    \    return bored", "    let boredoms = S.components(separatedBy: \".?!\")\n \
    \   return boredoms.filter({ $0.hasPrefix(\"I\") }).count", '    return is_bored_impl(S,
    "")', "    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count", "    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter{$0.hasPrefix(\"I\")}\n    return boredoms.count", "    let boredoms\
    \ = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"I\")}\n    return\
    \ boredoms.count", "    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.count { $0.hasPrefix(\"I\") }", "    var boredoms\
    \ = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  "    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count", "    \n    let boredoms = S.split(separator: \"\
    .?!\").filter({ $0.hasPrefix(\"I\") }).count\n    \n    return boredoms", "  \
    \  let boredoms = S.components(separatedBy: \".?!\")\n        .filter{$0.hasPrefix(\"\
    I\")}\n        .count\n    return boredoms", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.filter({ $0.hasPrefix(\"I\") }).count", "    let\
    \ boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"I\")}\n\
    \    return boredoms.count", '    return count_boredoms(S, true)', '    return
    is_bored(S, "")', "    var bored = 0\n    for s in S.split(separator: \".,?!\"\
    ) {\n        if s.starts(with: \"I\") {\n            bored += 1\n        }\n \
    \   }\n    return bored", "    let boredoms = S.components(separatedBy: \".?!\"\
    )\n    return boredoms.filter({ $0.hasPrefix(\"I\") }).count", "    let boredoms\
    \ = S.components(separatedBy: \".?!\")\n    return boredoms.filter({ $0.hasPrefix(\"\
    I\") }).count", "    var bored = 0\n    for s in S.split(separator: \".,?!\")\
    \ {\n        if s.starts(with: \"I\") {\n            bored += 1\n        }\n \
    \   }\n    return bored", "    var boredoms = 0\n    var lastChar = \"\"\n   \
    \ for c in S {\n        if lastChar == \"I\" && c == \"I\" {\n            boredoms\
    \ += 1\n        }\n        lastChar = c\n    }\n    return boredoms", "    guard\
    \ let words = S.split(separator: \".?!\") else {\n        return 0\n    }\n  \
    \  return words.filter({ $0.hasPrefix(\"I\") }).count", "    var bored = 0\n \
    \   for s in S.split(separator: \".?!\") {\n        if s.starts(with: \"I\") {\n\
    \            bored += 1\n        }\n    }\n    return bored", "    var boredoms\
    \ = 0\n    var bored = false\n    for s in S.split(separator: \".?!\") {\n   \
    \     if s.starts(with: \"I\") {\n            bored = true\n        } else {\n\
    \            bored = false\n        }\n        if bored {\n            boredoms\
    \ += 1\n        }\n    }\n    return boredoms", "    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter{$0.hasPrefix(\"I\")}\n    return boredoms.count", "    let boredoms\
    \ = S.components(separatedBy: \".?!\")\n    return boredoms.filter({ $0.hasPrefix(\"\
    I\") }).count", "    let boredoms = S.components(separatedBy: \".?!\")\n    return\
    \ boredoms.filter({ $0.hasPrefix(\"I\") }).count", "    guard let s = S.split(separator:\
    \ \".\", maxSplit: 1).first,\n        let s = S.split(separator: \"?\", maxSplit:\
    \ 1).first,\n        let s = S.split(separator: \"!\", maxSplit: 1).first else\
    \ { return 0 }\n    return s.range(of: \"I\", options: .caseInsensitive).count",
  "    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.count { $0.starts(with: \"I\") }", "    let boredoms\
    \ = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n    return\
    \ boredoms", '    return is_bored_1(S).count', "    let boredoms = S.split(separator:\
    \ \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n    return boredoms", "    let\
    \ boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n\
    \    return boredoms", "    let boredoms = S.components(separatedBy: \".?!\").filter{$0.starts(with:\
    \ \"I\")}\n    return boredoms.count", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.filter({ $0.hasPrefix(\"I\") }).count", "    let\
    \ boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count", "    let boredoms = S.split(separator: \".?!\"\
    ).filter({ $0.hasPrefix(\"I\") }).count\n    return boredoms", "    var count\
    \ = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count", "   \
    \ let boredoms = S.split(separator: \".?!\").filter({ $0.starts(with: \"I\") }).count\n\
    \    return boredoms", "    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count", "    var boredoms = 0\n    var lastChar = S.characters.last!\n\
    \    for char in S.characters {\n        switch char {\n        case \"I\":\n\
    \            if lastChar == \"I\" {\n                boredoms += 1\n         \
    \   }\n        default:\n            lastChar = char\n        }\n    }\n    return\
    \ boredoms", "    let boredoms = S.components(separatedBy: \".?!\")\n        .filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count", "    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter{$0.hasPrefix(\"I\")}\n    return boredoms.count", "    var count\
    \ = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count", "   \
    \ var boredoms = 0\n    var sentences = S.split(\".\")\n    for sentence in sentences\
    \ {\n        if sentence.startsWith(\"I\") {\n            boredoms += 1\n    \
    \    }\n    }\n    return boredoms", "    let boredoms = S.split(separator: \"\
    .?!\").filter{$0.starts(with: \"I\")}\n    return boredoms.count", "    let boredoms\
    \ = S.components(separatedBy: \".?!\")\n    return boredoms.filter({ $0.hasPrefix(\"\
    I\") }).count", "    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count", '    return is_bored(S, "")', "    var count\
    \ = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count", '    return
    is_bored(S, 0)', "    var bored = 0\n    var i = 0\n    for s in S.split(separator:\
    \ \".,?!\") {\n        if s.starts(with: \"I\") {\n            bored += 1\n  \
    \      }\n        i += 1\n    }\n    return bored", "    var boredoms = 0\n  \
    \  var lastChar: Character?\n    for c in S {\n        if lastChar == nil {\n\
    \            lastChar = c\n            continue\n        }\n        if lastChar\
    \ == c {\n            boredoms += 1\n            lastChar = nil\n            continue\n\
    \        }\n        if lastChar == \".\" || lastChar == \"?\" || lastChar == \"\
    !\" {\n            boredoms += 1\n            lastChar = nil\n        }\n    }\n\
    \    return boredoms", "    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count", "    var bored = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            bored += 1\n   \
    \     }\n    }\n    return bored", '    return is_bored_str(S, "")', "    var\
    \ bored = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            bored += 1\n        }\n    }\n    return bored", "   \
    \ \n    let boredoms = S.components(separatedBy: \".?!\").filter {\n        !$0.isEmpty\
    \ && $0.hasPrefix(\"I\")\n    }.count\n    \n    return boredoms", "    var count\
    \ = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count"]
stop_tokens:
- "\n}"
