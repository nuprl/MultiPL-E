name: HumanEval_66_digitSum
language: swift
prompt: "\n/// Task\n/// Write a function that takes a string as input and returns\
  \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// digitSum(\"\
  \") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\") => 67\n/// digitSum(\"\
  helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n/// digitSum(\"aAaaaXa\") =>\
  \ 153\nfunc digitSum(s: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
  \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"\
  helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"\
  aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
  \ \"You arE Very Smart\") == 327)"
completions: ["    var sum = 0\n    for c in s {\n        if c.isUpper() {\n     \
    \       sum += Int(c)\n        }\n    }\n    return sum", "    return s.reduce(0,\
    \ combine: { (sum, char) -> Int in\n        switch char {\n        case '0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9':\n            return sum + Int(char)\n\
    \        default:\n            return sum\n        }\n    })", '    return s.reduce(0)
    { $0 + Int($1) }', '    return s.reduce(0) { $0 + Int(String($1).unicodeScalars.filter({$0.value
    > 64}).map({ $0.value })) }', "    var sum = 0\n    for c in s {\n        if c\
    \ >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n    }\n    return\
    \ sum", "    return s.reduce(0) { (sum, ch) in\n        let code = Int(ch)\n \
    \       return sum + code - '0'\n    }", "    return s.reduce(0) { (sum, ch) in\n\
    \        switch ch {\n        case \"0\": return sum\n        case \"1\": return\
    \ sum + 10\n        case \"2\": return sum + 20\n        case \"3\": return sum\
    \ + 30\n        case \"4\": return sum + 40\n        case \"5\": return sum +\
    \ 50\n        case \"6\": return sum + 60\n        case \"7\": return sum + 70\n\
    \        case \"8\": return sum + 80\n        case \"9\": return sum + 90\n  \
    \      case \"a\": return sum + 10\n        case \"b\": return sum + 11\n    \
    \    case \"c\": return sum + 12\n        case \"d\": return sum + 13\n      \
    \  case \"e\": return sum + 14\n        case \"f\": return sum + 15\n        case\
    \ \"A\": return sum + 10\n        case \"B\": return sum + 11\n        case \"\
    C\": return sum + 12\n        case \"D\": return sum + 13\n        case \"E\"\
    : return sum + 14\n        case \"F\": return sum + 15\n        case \"a\": return\
    \ sum + 10\n        case \"b\": return sum + 11\n        case \"c\": return sum\
    \ + 12\n        case \"d\": return sum + 13\n        case \"e\": return sum +\
    \ 14\n        case \"f\": return sum + 15\n        case \"A\": return sum + 10\n\
    \        case \"B\": return sum + 11\n        case \"C\": return sum + 12\n  \
    \      case \"D\": return sum + 13\n        case \"E\": return sum + 14\n    \
    \    case \"F\": return sum + 15\n        case \"0\": return sum\n        case\
    \ \"1\": return sum + 10\n        case \"2\": return sum + 20\n        case \"\
    3\": return sum + 30\n        case \"4\": return sum + 40\n        case \"5\"\
    : return sum + 50\n        case \"6\": return sum + 60\n        case \"7\": return\
    \ sum + 70\n        case \"8\": return sum + 80\n        case \"9\": return sum\
    \ + 90\n        case \"a\": return sum + 10\n        case \"b\": return sum +\
    \ 11\n        case \"c\": return sum + 12\n        case \"d\": return sum + 13\n\
    \        case \"e\": return sum + 14\n        case \"f\": return sum + 15\n  \
    \      case \"A\": return sum + 10\n        case \"B\": return sum + 11\n    \
    \    case \"C\": return sum + 12\n        case \"D\": return sum + 13\n      \
    \  case \"E\": return sum + 14\n        case \"F\": return ", "    var sum = 0\n\
    \    for c in s.characters {\n        if c >= '0' && c <= '9' {\n            sum\
    \ += Int(c - '0')\n        }\n    }\n    return sum", "    var sum = 0\n    for\
    \ c in s {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n  \
    \      }\n    }\n    return sum", "    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum", "    var sum = 0\n    for c in s {\n        if c.isUpper()\
    \ {\n            sum += Int(c)\n        }\n    }\n    return sum", '    return
    s.reduce(0) { $0 + Int($1) }', "    return s.reduce(0) { (sum, ch) in\n      \
    \  if let _ = Int(ch) {\n            sum += Int(ch)\n        }\n        return\
    \ sum\n    }", '    return s.reduce(0) { $0 + Int($1) }', '    return s.reduce(0)
    { $0 + Int($1) }', '    return s.reduce(0) { $0 + Int($1) }', "    var sum = 0\n\
    \    for c in s {\n        sum += Int(c)\n    }\n    return sum", "    return\
    \ s.reduce(0) { (sum, ch) in\n        let code = Int(ch)\n        return sum +\
    \ code - '0'\n    }", '    return s.reduce(0) { $0 + Int(String($1).unicodeScalars.filter({$0.value
    > 64}).map({ $0.value })) }', "    let len = s.count\n    var sum = 0\n    for\
    \ i in 0..<len {\n        let c = s[i]\n        if c >= 'a' && c <= 'z' {\n  \
    \          sum += c - 'a'\n        }\n    }\n    return sum"]
stop_tokens:
- "\n}"
